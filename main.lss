
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001b28  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800122  00800122  00001bde  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000be8  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026a2  00000000  00000000  00002886  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a11  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e43  00000000  00000000  00005939  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000880  00000000  00000000  0000777c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b70  00000000  00000000  00007ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d98  00000000  00000000  00008b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00009904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e8 e2       	ldi	r30, 0x28	; 40
      aa:	fb e1       	ldi	r31, 0x1B	; 27
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a7 3a       	cpi	r26, 0xA7	; 167
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29

  DDRD  |= (1<<4);
      d8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      da:	5c 98       	cbi	0x0b, 4	; 11
  
  
  debug_init();
      dc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <debug_init>
  debug_tx_text_nl("Debug Started");
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	0e 94 77 04 	call	0x8ee	; 0x8ee <debug_tx_text_nl>
  
  MPU6050_Init();
      e8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <MPU6050_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ec:	c8 e9       	ldi	r28, 0x98	; 152
      ee:	da e3       	ldi	r29, 0x3A	; 58
  
  
  while(1){
	
	MPU6050_Read_Acc_Gyro();
      f0:	0e 94 3e 0a 	call	0x147c	; 0x147c <MPU6050_Read_Acc_Gyro>
	
	if(MPU6050_Get_Error()==0){
      f4:	0e 94 a3 07 	call	0xf46	; 0xf46 <MPU6050_Get_Error>
      f8:	89 2b       	or	r24, r25
      fa:	09 f5       	brne	.+66     	; 0x13e <main+0x6a>
	  //debug_tx_number_cm(MPU6050_Read_Pitch());
	  //debug_tx_number_cm(MPU6050_Read_Roll());
	  debug_tx_number_cm(MPU6050_Get_GyroX());
      fc:	0e 94 71 07 	call	0xee2	; 0xee2 <MPU6050_Get_GyroX>
     100:	aa 27       	eor	r26, r26
     102:	97 fd       	sbrc	r25, 7
     104:	a0 95       	com	r26
     106:	ba 2f       	mov	r27, r26
     108:	bc 01       	movw	r22, r24
     10a:	cd 01       	movw	r24, r26
     10c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <debug_tx_number_cm>
	  debug_tx_number_cm(MPU6050_Get_GyroY());
     110:	0e 94 76 07 	call	0xeec	; 0xeec <MPU6050_Get_GyroY>
     114:	aa 27       	eor	r26, r26
     116:	97 fd       	sbrc	r25, 7
     118:	a0 95       	com	r26
     11a:	ba 2f       	mov	r27, r26
     11c:	bc 01       	movw	r22, r24
     11e:	cd 01       	movw	r24, r26
     120:	0e 94 fe 04 	call	0x9fc	; 0x9fc <debug_tx_number_cm>
	  debug_tx_number_cm(MPU6050_Get_GyroZ());
     124:	0e 94 7b 07 	call	0xef6	; 0xef6 <MPU6050_Get_GyroZ>
     128:	aa 27       	eor	r26, r26
     12a:	97 fd       	sbrc	r25, 7
     12c:	a0 95       	com	r26
     12e:	ba 2f       	mov	r27, r26
     130:	bc 01       	movw	r22, r24
     132:	cd 01       	movw	r24, r26
     134:	0e 94 fe 04 	call	0x9fc	; 0x9fc <debug_tx_number_cm>
	  debug_tx_nl();
     138:	0e 94 55 04 	call	0x8aa	; 0x8aa <debug_tx_nl>
     13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x6e>
	}else{
	  MPU6050_Restart();
     13e:	0e 94 4d 0a 	call	0x149a	; 0x149a <MPU6050_Restart>
     142:	ce 01       	movw	r24, r28
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <main+0x70>
     148:	d3 cf       	rjmp	.-90     	; 0xf0 <main+0x1c>

0000014a <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     14a:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     14e:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     158:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     15c:	10 92 27 01 	sts	0x0127, r1
     160:	10 92 26 01 	sts	0x0126, r1
}
     164:	08 95       	ret

00000166 <I2C_Error_Clear>:

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     166:	10 92 25 01 	sts	0x0125, r1
}
     16a:	08 95       	ret

0000016c <I2C_Error_Accu_Clear>:

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     16c:	10 92 27 01 	sts	0x0127, r1
     170:	10 92 26 01 	sts	0x0126, r1
}
     174:	08 95       	ret

00000176 <I2C_Error_Clear_All>:
  I2C.Error=0x00;
  I2C.ErrorAccu=0x00;
}

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     176:	10 92 25 01 	sts	0x0125, r1
}

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     17a:	10 92 27 01 	sts	0x0127, r1
     17e:	10 92 26 01 	sts	0x0126, r1
}

void I2C_Error_Clear_All(void){
  I2C_Error_Clear();
  I2C_Error_Accu_Clear();
}
     182:	08 95       	ret

00000184 <I2C_Get_Error>:

uint8_t I2C_Get_Error(void){
  return I2C.Error;
}
     184:	80 91 25 01 	lds	r24, 0x0125
     188:	08 95       	ret

0000018a <I2C_Get_ErrorAccu>:

uint16_t I2C_Get_ErrorAccu(void){
  return I2C.ErrorAccu;
}
     18a:	80 91 26 01 	lds	r24, 0x0126
     18e:	90 91 27 01 	lds	r25, 0x0127
     192:	08 95       	ret

00000194 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     194:	80 e5       	ldi	r24, 0x50	; 80
     196:	8a 95       	dec	r24
     198:	f1 f7       	brne	.-4      	; 0x196 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     19a:	08 95       	ret

0000019c <I2C_Bit_Delay>:
     19c:	80 ea       	ldi	r24, 0xA0	; 160
     19e:	8a 95       	dec	r24
     1a0:	f1 f7       	brne	.-4      	; 0x19e <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     1a2:	08 95       	ret

000001a4 <I2C_Guard_Delay>:
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	8a 95       	dec	r24
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     1aa:	08 95       	ret

000001ac <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	11 f4       	brne	.+4      	; 0x1b4 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1b0:	3d 9a       	sbi	0x07, 5	; 7
     1b2:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1b4:	3d 98       	cbi	0x07, 5	; 7
     1b6:	08 95       	ret

000001b8 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	11 f4       	brne	.+4      	; 0x1c0 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     1bc:	45 9a       	sbi	0x08, 5	; 8
     1be:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     1c0:	45 98       	cbi	0x08, 5	; 8
     1c2:	08 95       	ret

000001c4 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	19 f4       	brne	.+6      	; 0x1ce <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     1c8:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1ca:	3d 98       	cbi	0x07, 5	; 7
     1cc:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     1ce:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1d0:	3d 9a       	sbi	0x07, 5	; 7
     1d2:	08 95       	ret

000001d4 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     1d4:	86 b1       	in	r24, 0x06	; 6
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	25 e0       	ldi	r18, 0x05	; 5
     1da:	96 95       	lsr	r25
     1dc:	87 95       	ror	r24
     1de:	2a 95       	dec	r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1e2:	81 70       	andi	r24, 0x01	; 1
     1e4:	08 95       	ret

000001e6 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	11 f4       	brne	.+4      	; 0x1ee <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1ea:	3c 9a       	sbi	0x07, 4	; 7
     1ec:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1ee:	3c 98       	cbi	0x07, 4	; 7
     1f0:	08 95       	ret

000001f2 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	11 f4       	brne	.+4      	; 0x1fa <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1f6:	44 9a       	sbi	0x08, 4	; 8
     1f8:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1fa:	44 98       	cbi	0x08, 4	; 8
     1fc:	08 95       	ret

000001fe <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	19 f4       	brne	.+6      	; 0x208 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     202:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     204:	3c 98       	cbi	0x07, 4	; 7
     206:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     208:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     20a:	3c 9a       	sbi	0x07, 4	; 7
     20c:	08 95       	ret

0000020e <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     20e:	86 b1       	in	r24, 0x06	; 6
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	34 e0       	ldi	r19, 0x04	; 4
     214:	96 95       	lsr	r25
     216:	87 95       	ror	r24
     218:	3a 95       	dec	r19
     21a:	e1 f7       	brne	.-8      	; 0x214 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     21c:	81 70       	andi	r24, 0x01	; 1
     21e:	08 95       	ret

00000220 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     220:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
}
     228:	08 95       	ret

0000022a <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     22a:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
}
     232:	08 95       	ret

00000234 <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     234:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     236:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
}
     244:	08 95       	ret

00000246 <I2C_Start>:

void I2C_Start(void){
     246:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     254:	10 e5       	ldi	r17, 0x50	; 80
     256:	81 2f       	mov	r24, r17
     258:	8a 95       	dec	r24
     25a:	f1 f7       	brne	.-4      	; 0x258 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     262:	81 2f       	mov	r24, r17
     264:	8a 95       	dec	r24
     266:	f1 f7       	brne	.-4      	; 0x264 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     26e:	1a 95       	dec	r17
     270:	f1 f7       	brne	.-4      	; 0x26e <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <I2C_Stop>:

void I2C_Stop(void){
     276:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     284:	10 e5       	ldi	r17, 0x50	; 80
     286:	81 2f       	mov	r24, r17
     288:	8a 95       	dec	r24
     28a:	f1 f7       	brne	.-4      	; 0x288 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     292:	81 2f       	mov	r24, r17
     294:	8a 95       	dec	r24
     296:	f1 f7       	brne	.-4      	; 0x294 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     29e:	1a 95       	dec	r17
     2a0:	f1 f7       	brne	.-4      	; 0x29e <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     2a2:	1f 91       	pop	r17
     2a4:	08 95       	ret

000002a6 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	08 2f       	mov	r16, r24
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	50 e5       	ldi	r21, 0x50	; 80
     2b4:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     2b6:	48 e0       	ldi	r20, 0x08	; 8
     2b8:	e4 2e       	mov	r14, r20
     2ba:	07 ff       	sbrs	r16, 7
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     2c8:	8f 2d       	mov	r24, r15
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     2d4:	8f 2d       	mov	r24, r15
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     2e0:	8e 2d       	mov	r24, r14
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     2e6:	1f 5f       	subi	r17, 0xFF	; 255
     2e8:	18 30       	cpi	r17, 0x08	; 8
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     2ec:	00 0f       	add	r16, r16
     2ee:	e5 cf       	rjmp	.-54     	; 0x2ba <I2C_Data_Send+0x14>
  }
}
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	08 95       	ret

000002fa <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	60 e5       	ldi	r22, 0x50	; 80
     30c:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     30e:	11 0f       	add	r17, r17
     310:	8f 2d       	mov	r24, r15
     312:	8a 95       	dec	r24
     314:	f1 f7       	brne	.-4      	; 0x312 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     31c:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     31e:	11 60       	ori	r17, 0x01	; 1
     320:	8f 2d       	mov	r24, r15
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     32c:	0f 5f       	subi	r16, 0xFF	; 255
     32e:	08 30       	cpi	r16, 0x08	; 8
     330:	71 f7       	brne	.-36     	; 0x30e <I2C_Data_Receive+0x14>
     332:	80 e5       	ldi	r24, 0x50	; 80
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
  return data;
}
     33e:	81 2f       	mov	r24, r17
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	08 95       	ret

00000348 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     348:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     350:	10 e5       	ldi	r17, 0x50	; 80
     352:	81 2f       	mov	r24, r17
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     35e:	1a 95       	dec	r17
     360:	f1 f7       	brne	.-4      	; 0x35e <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
}
     368:	1f 91       	pop	r17
     36a:	08 95       	ret

0000036c <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     36c:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     374:	10 e5       	ldi	r17, 0x50	; 80
     376:	81 2f       	mov	r24, r17
     378:	8a 95       	dec	r24
     37a:	f1 f7       	brne	.-4      	; 0x378 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     382:	1a 95       	dec	r17
     384:	f1 f7       	brne	.-4      	; 0x382 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
}
     38c:	1f 91       	pop	r17
     38e:	08 95       	ret

00000390 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_SDA_Set_Output>
     39a:	00 e5       	ldi	r16, 0x50	; 80
     39c:	80 2f       	mov	r24, r16
     39e:	8a 95       	dec	r24
     3a0:	f1 f7       	brne	.-4      	; 0x39e <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     3a8:	16 b1       	in	r17, 0x06	; 6
     3aa:	0a 95       	dec	r16
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_SCL_Set_Output>
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	8a 95       	dec	r24
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <I2C_Get_Ack+0x26>
     3ba:	12 95       	swap	r17
     3bc:	1f 70       	andi	r17, 0x0F	; 15
     3be:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     3c0:	81 2f       	mov	r24, r17
     3c2:	81 70       	andi	r24, 0x01	; 1
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     3ca:	1f 93       	push	r17
     3cc:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     3ce:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Start>
  I2C_Data_Send(address);
     3d2:	81 2f       	mov	r24, r17
     3d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     3d8:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     3dc:	18 2f       	mov	r17, r24
  I2C_Stop();
     3de:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Stop>
  return ack;
}
     3e2:	81 2f       	mov	r24, r17
     3e4:	1f 91       	pop	r17
     3e6:	08 95       	ret

000003e8 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     3e8:	1f 93       	push	r17
     3ea:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     3ec:	81 2f       	mov	r24, r17
     3ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <I2C_Send_Device_Address>
	if(sts==1){
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	11 f4       	brne	.+4      	; 0x3fa <I2C_Get_Device_Address+0x12>
     3f6:	81 2f       	mov	r24, r17
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     3fa:	1f 5f       	subi	r17, 0xFF	; 255
     3fc:	1f 3f       	cpi	r17, 0xFF	; 255
     3fe:	b1 f7       	brne	.-20     	; 0x3ec <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     400:	1f 91       	pop	r17
     402:	08 95       	ret

00000404 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     410:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     414:	80 91 22 01 	lds	r24, 0x0122
     418:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     41c:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     420:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     422:	81 2f       	mov	r24, r17
     424:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     428:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     42c:	f8 2e       	mov	r15, r24
  I2C_Stop();
     42e:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Stop>
  I2C_Start();
     432:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     436:	80 91 23 01 	lds	r24, 0x0123
     43a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     43e:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     442:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     444:	0e 94 7d 01 	call	0x2fa	; 0x2fa <I2C_Data_Receive>
     448:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     44a:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     44e:	08 2f       	mov	r16, r24
  I2C_Stop();
     450:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Stop>
  if(sts == 0x07){
     454:	ff 0c       	add	r15, r15
     456:	11 0f       	add	r17, r17
     458:	11 0f       	add	r17, r17
     45a:	1f 29       	or	r17, r15
     45c:	1e 29       	or	r17, r14
     45e:	00 0f       	add	r16, r16
     460:	00 0f       	add	r16, r16
     462:	00 0f       	add	r16, r16
     464:	01 2b       	or	r16, r17
     466:	07 30       	cpi	r16, 0x07	; 7
     468:	21 f4       	brne	.+8      	; 0x472 <I2C_Read_Register+0x6e>
    sts = data;
	I2C.Error=0x00;
     46a:	10 92 25 01 	sts	0x0125, r1
     46e:	8d 2d       	mov	r24, r13
     470:	0d c0       	rjmp	.+26     	; 0x48c <I2C_Read_Register+0x88>
  }else{
    data=0;
	I2C.Error=0x01;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     478:	80 91 26 01 	lds	r24, 0x0126
     47c:	90 91 27 01 	lds	r25, 0x0127
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	90 93 27 01 	sts	0x0127, r25
     486:	80 93 26 01 	sts	0x0126, r24
     48a:	8f ef       	ldi	r24, 0xFF	; 255
    sts = 0xFF;
  }
  return sts;
}
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	08 95       	ret

00000498 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	18 2f       	mov	r17, r24
     4a2:	f6 2e       	mov	r15, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     4a4:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     4a8:	80 91 22 01 	lds	r24, 0x0122
     4ac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     4b0:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     4b4:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     4b6:	81 2f       	mov	r24, r17
     4b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     4bc:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     4c0:	08 2f       	mov	r16, r24
  I2C_Data_Send(val);
     4c2:	8f 2d       	mov	r24, r15
     4c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     4c8:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_Get_Ack>
     4cc:	18 2f       	mov	r17, r24
  I2C_Stop();
     4ce:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Stop>
  if(sts == 0x07){
     4d2:	00 0f       	add	r16, r16
     4d4:	11 0f       	add	r17, r17
     4d6:	11 0f       	add	r17, r17
     4d8:	10 2b       	or	r17, r16
     4da:	1e 29       	or	r17, r14
     4dc:	17 30       	cpi	r17, 0x07	; 7
     4de:	19 f4       	brne	.+6      	; 0x4e6 <I2C_Write_Register+0x4e>
    sts = data;
	I2C.Error=0x00;
     4e0:	10 92 25 01 	sts	0x0125, r1
     4e4:	0c c0       	rjmp	.+24     	; 0x4fe <I2C_Write_Register+0x66>
  }else{
	I2C.Error=0x02;
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     4ec:	80 91 26 01 	lds	r24, 0x0126
     4f0:	90 91 27 01 	lds	r25, 0x0127
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	90 93 27 01 	sts	0x0127, r25
     4fa:	80 93 26 01 	sts	0x0126, r24
    sts = 0xFF;
  }
}
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	08 95       	ret

00000508 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     508:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     50c:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     516:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     51a:	10 92 27 01 	sts	0x0127, r1
     51e:	10 92 26 01 	sts	0x0126, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     522:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     526:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <I2C_Get_Device_Address>
     52a:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 23 01 	sts	0x0123, r24
}
     534:	08 95       	ret

00000536 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     536:	10 92 28 01 	sts	0x0128, r1
  debug.datareg=0;
     53a:	10 92 29 01 	sts	0x0129, r1
  debug.databsy=1;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	80 93 2a 01 	sts	0x012A, r24
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     548:	fc 01       	movw	r30, r24
     54a:	e8 5d       	subi	r30, 0xD8	; 216
     54c:	fe 4f       	sbci	r31, 0xFE	; 254
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     552:	80 32       	cpi	r24, 0x20	; 32
     554:	91 05       	cpc	r25, r1
     556:	c1 f7       	brne	.-16     	; 0x548 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     558:	10 92 4b 01 	sts	0x014B, r1
     55c:	ec e4       	ldi	r30, 0x4C	; 76
     55e:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     560:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	e4 35       	cpi	r30, 0x54	; 84
     566:	f8 07       	cpc	r31, r24
     568:	d9 f7       	brne	.-10     	; 0x560 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     56a:	10 82       	st	Z, r1
}
     56c:	08 95       	ret

0000056e <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     56e:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     570:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     572:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     57a:	e8 e6       	ldi	r30, 0x68	; 104
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	82 60       	ori	r24, 0x02	; 2
     582:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     584:	ec e6       	ldi	r30, 0x6C	; 108
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     58e:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     590:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     592:	08 95       	ret

00000594 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     598:	ee e6       	ldi	r30, 0x6E	; 110
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	10 82       	st	Z, r1
  TCNT0 =200;
     59e:	88 ec       	ldi	r24, 0xC8	; 200
     5a0:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     5a2:	84 e0       	ldi	r24, 0x04	; 4
     5a4:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     5aa:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     5ac:	08 95       	ret

000005ae <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     5ae:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     5b2:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     5b4:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     5b6:	08 95       	ret

000005b8 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     5b8:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     5ba:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     5bc:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     5be:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     5c0:	08 95       	ret

000005c2 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     5c2:	5d 9a       	sbi	0x0b, 5	; 11
}
     5c4:	08 95       	ret

000005c6 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     5c6:	5d 98       	cbi	0x0b, 5	; 11
}
     5c8:	08 95       	ret

000005ca <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     5ce:	5d 9a       	sbi	0x0b, 5	; 11
     5d0:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     5d2:	5d 98       	cbi	0x0b, 5	; 11
     5d4:	08 95       	ret

000005d6 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     5d6:	86 b1       	in	r24, 0x06	; 6
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	26 e0       	ldi	r18, 0x06	; 6
     5dc:	96 95       	lsr	r25
     5de:	87 95       	ror	r24
     5e0:	2a 95       	dec	r18
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     5e4:	81 70       	andi	r24, 0x01	; 1
     5e6:	08 95       	ret

000005e8 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     5e8:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     5ea:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     5f0:	86 b5       	in	r24, 0x26	; 38
     5f2:	82 33       	cpi	r24, 0x32	; 50
     5f4:	e8 f3       	brcs	.-6      	; 0x5f0 <debug_delay+0x8>
    TCNT0=0;
     5f6:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     5f8:	86 b5       	in	r24, 0x26	; 38
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	82 17       	cp	r24, r18
     5fe:	93 07       	cpc	r25, r19
     600:	d8 f3       	brcs	.-10     	; 0x5f8 <debug_delay+0x10>
  TCCR0B=0;
     602:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     604:	08 95       	ret

00000606 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     606:	80 91 1c 01 	lds	r24, 0x011C
     60a:	90 91 1d 01 	lds	r25, 0x011D
     60e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     612:	08 95       	ret

00000614 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     614:	80 91 1e 01 	lds	r24, 0x011E
     618:	90 91 1f 01 	lds	r25, 0x011F
     61c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     620:	08 95       	ret

00000622 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     622:	80 91 20 01 	lds	r24, 0x0120
     626:	90 91 21 01 	lds	r25, 0x0121
     62a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     62e:	08 95       	ret

00000630 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	2a 97       	sbiw	r28, 0x0a	; 10
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     64e:	fe 01       	movw	r30, r28
     650:	31 96       	adiw	r30, 0x01	; 1
     652:	9a e0       	ldi	r25, 0x0A	; 10
     654:	df 01       	movw	r26, r30
     656:	1d 92       	st	X+, r1
     658:	9a 95       	dec	r25
     65a:	e9 f7       	brne	.-6      	; 0x656 <debug_tx_byte+0x26>
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9a 87       	std	Y+10, r25	; 0x0a
     660:	fe 01       	movw	r30, r28
     662:	32 96       	adiw	r30, 0x02	; 2
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     668:	48 2f       	mov	r20, r24
     66a:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     66c:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     66e:	ca 01       	movw	r24, r20
     670:	02 2e       	mov	r0, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <debug_tx_byte+0x48>
     674:	95 95       	asr	r25
     676:	87 95       	ror	r24
     678:	0a 94       	dec	r0
     67a:	e2 f7       	brpl	.-8      	; 0x674 <debug_tx_byte+0x44>
     67c:	80 ff       	sbrs	r24, 0
     67e:	02 c0       	rjmp	.+4      	; 0x684 <debug_tx_byte+0x54>
	  buf[i+1]=1;
     680:	60 83       	st	Z, r22
     682:	01 c0       	rjmp	.+2      	; 0x686 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     684:	10 82       	st	Z, r1
     686:	2f 5f       	subi	r18, 0xFF	; 255
     688:	3f 4f       	sbci	r19, 0xFF	; 255
     68a:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     68c:	28 30       	cpi	r18, 0x08	; 8
     68e:	31 05       	cpc	r19, r1
     690:	71 f7       	brne	.-36     	; 0x66e <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     692:	df b6       	in	r13, 0x3f	; 63
  cli();
     694:	f8 94       	cli
     696:	8e 01       	movw	r16, r28
     698:	0f 5f       	subi	r16, 0xFF	; 255
     69a:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     69c:	3b e0       	ldi	r19, 0x0B	; 11
     69e:	e3 2e       	mov	r14, r19
     6a0:	f1 2c       	mov	r15, r1
     6a2:	ec 0e       	add	r14, r28
     6a4:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     6a6:	f8 01       	movw	r30, r16
     6a8:	80 81       	ld	r24, Z
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	11 f4       	brne	.+4      	; 0x6b2 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     6ae:	5d 9a       	sbi	0x0b, 5	; 11
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     6b2:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     6b4:	0e 94 03 03 	call	0x606	; 0x606 <debug_delay_index_0>
     6b8:	0f 5f       	subi	r16, 0xFF	; 255
     6ba:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     6bc:	0e 15       	cp	r16, r14
     6be:	1f 05       	cpc	r17, r15
     6c0:	91 f7       	brne	.-28     	; 0x6a6 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     6c2:	df be       	out	0x3f, r13	; 63
}
     6c4:	2a 96       	adiw	r28, 0x0a	; 10
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	08 95       	ret

000006e0 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     6e6:	36 9b       	sbis	0x06, 6	; 6
     6e8:	21 c0       	rjmp	.+66     	; 0x72c <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	17 c0       	rjmp	.+46     	; 0x71c <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     6ee:	0e 94 0a 03 	call	0x614	; 0x614 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     6f2:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     6f4:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     6f6:	17 30       	cpi	r17, 0x07	; 7
     6f8:	09 f0       	breq	.+2      	; 0x6fc <debug_rx_byte+0x1c>
	    val>>=1;
     6fa:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     6fc:	1f 5f       	subi	r17, 0xFF	; 255
     6fe:	18 30       	cpi	r17, 0x08	; 8
     700:	b1 f7       	brne	.-20     	; 0x6ee <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     702:	0e 94 0a 03 	call	0x614	; 0x614 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     706:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     708:	f6 fc       	sbrc	r15, 6
     70a:	07 c0       	rjmp	.+14     	; 0x71a <debug_rx_byte+0x3a>
     70c:	86 ff       	sbrs	r24, 6
     70e:	05 c0       	rjmp	.+10     	; 0x71a <debug_rx_byte+0x3a>
	  debug.datareg=val;
     710:	00 93 29 01 	sts	0x0129, r16
	  debug.error=0x00;
     714:	10 92 28 01 	sts	0x0128, r1
     718:	03 c0       	rjmp	.+6      	; 0x720 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 28 01 	sts	0x0128, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     720:	80 91 29 01 	lds	r24, 0x0129
}
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     72c:	0e 94 11 03 	call	0x622	; 0x622 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     730:	f6 b0       	in	r15, 0x06	; 6
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	db cf       	rjmp	.-74     	; 0x6ee <debug_rx_byte+0xe>

00000738 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     738:	80 91 29 01 	lds	r24, 0x0129
}
     73c:	08 95       	ret

0000073e <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     73e:	10 92 29 01 	sts	0x0129, r1
}
     742:	08 95       	ret

00000744 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     744:	80 93 29 01 	sts	0x0129, r24
}
     748:	08 95       	ret

0000074a <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	7b 01       	movw	r14, r22
     75e:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	e8 16       	cp	r14, r24
     764:	f1 04       	cpc	r15, r1
     766:	01 05       	cpc	r16, r1
     768:	11 05       	cpc	r17, r1
     76a:	09 f0       	breq	.+2      	; 0x76e <debug_tx_hex+0x24>
     76c:	30 f4       	brcc	.+12     	; 0x77a <debug_tx_hex+0x30>
     76e:	c8 e0       	ldi	r28, 0x08	; 8
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	62 e0       	ldi	r22, 0x02	; 2
     774:	c6 2e       	mov	r12, r22
     776:	d1 2c       	mov	r13, r1
     778:	14 c0       	rjmp	.+40     	; 0x7a2 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	e8 16       	cp	r14, r24
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	f8 06       	cpc	r15, r24
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	08 07       	cpc	r16, r24
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	18 07       	cpc	r17, r24
     78a:	30 f0       	brcs	.+12     	; 0x798 <debug_tx_hex+0x4e>
     78c:	c0 e2       	ldi	r28, 0x20	; 32
     78e:	d0 e0       	ldi	r29, 0x00	; 0
     790:	58 e0       	ldi	r21, 0x08	; 8
     792:	c5 2e       	mov	r12, r21
     794:	d1 2c       	mov	r13, r1
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <debug_tx_hex+0x58>
     798:	c0 e1       	ldi	r28, 0x10	; 16
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	44 e0       	ldi	r20, 0x04	; 4
     79e:	c4 2e       	mov	r12, r20
     7a0:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
  debug_tx_byte('x');
     7a8:	88 e7       	ldi	r24, 0x78	; 120
     7aa:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
     7ae:	bb 24       	eor	r11, r11
     7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     7b2:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     7b4:	d8 01       	movw	r26, r16
     7b6:	c7 01       	movw	r24, r14
     7b8:	0c 2e       	mov	r0, r28
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <debug_tx_hex+0x7a>
     7bc:	b6 95       	lsr	r27
     7be:	a7 95       	ror	r26
     7c0:	97 95       	ror	r25
     7c2:	87 95       	ror	r24
     7c4:	0a 94       	dec	r0
     7c6:	d2 f7       	brpl	.-12     	; 0x7bc <debug_tx_hex+0x72>
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	8f 70       	andi	r24, 0x0F	; 15
     7cc:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     7ce:	8a 30       	cpi	r24, 0x0A	; 10
     7d0:	91 05       	cpc	r25, r1
     7d2:	10 f0       	brcs	.+4      	; 0x7d8 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     7d4:	c7 96       	adiw	r24, 0x37	; 55
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     7d8:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     7da:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     7de:	b3 94       	inc	r11
     7e0:	8b 2d       	mov	r24, r11
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	8c 15       	cp	r24, r12
     7e6:	9d 05       	cpc	r25, r13
     7e8:	20 f3       	brcs	.-56     	; 0x7b2 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	08 95       	ret

000007fe <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	7b 01       	movw	r14, r22
     814:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     816:	6f 3f       	cpi	r22, 0xFF	; 255
     818:	71 05       	cpc	r23, r1
     81a:	81 05       	cpc	r24, r1
     81c:	91 05       	cpc	r25, r1
     81e:	09 f0       	breq	.+2      	; 0x822 <debug_tx_bin+0x24>
     820:	18 f4       	brcc	.+6      	; 0x828 <debug_tx_bin+0x2a>
     822:	f7 e0       	ldi	r31, 0x07	; 7
     824:	df 2e       	mov	r13, r31
     826:	0d c0       	rjmp	.+26     	; 0x842 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     828:	60 30       	cpi	r22, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	73 07       	cpc	r23, r19
     82e:	31 e0       	ldi	r19, 0x01	; 1
     830:	83 07       	cpc	r24, r19
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	93 07       	cpc	r25, r19
     836:	18 f0       	brcs	.+6      	; 0x83e <debug_tx_bin+0x40>
     838:	ef e1       	ldi	r30, 0x1F	; 31
     83a:	de 2e       	mov	r13, r30
     83c:	02 c0       	rjmp	.+4      	; 0x842 <debug_tx_bin+0x44>
     83e:	7f e0       	ldi	r23, 0x0F	; 15
     840:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     842:	80 e3       	ldi	r24, 0x30	; 48
     844:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
  debug_tx_byte('b');
     848:	82 e6       	ldi	r24, 0x62	; 98
     84a:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
     84e:	c0 e0       	ldi	r28, 0x00	; 0
     850:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     852:	cd 2c       	mov	r12, r13
     854:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     856:	56 01       	movw	r10, r12
     858:	08 94       	sec
     85a:	a1 1c       	adc	r10, r1
     85c:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     85e:	c6 01       	movw	r24, r12
     860:	8c 1b       	sub	r24, r28
     862:	9d 0b       	sbc	r25, r29
     864:	a8 01       	movw	r20, r16
     866:	97 01       	movw	r18, r14
     868:	04 c0       	rjmp	.+8      	; 0x872 <debug_tx_bin+0x74>
     86a:	56 95       	lsr	r21
     86c:	47 95       	ror	r20
     86e:	37 95       	ror	r19
     870:	27 95       	ror	r18
     872:	8a 95       	dec	r24
     874:	d2 f7       	brpl	.-12     	; 0x86a <debug_tx_bin+0x6c>
     876:	da 01       	movw	r26, r20
     878:	c9 01       	movw	r24, r18
     87a:	81 70       	andi	r24, 0x01	; 1
     87c:	90 70       	andi	r25, 0x00	; 0
     87e:	89 2b       	or	r24, r25
     880:	11 f0       	breq	.+4      	; 0x886 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     882:	81 e3       	ldi	r24, 0x31	; 49
     884:	01 c0       	rjmp	.+2      	; 0x888 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
     88c:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     88e:	ca 15       	cp	r28, r10
     890:	db 05       	cpc	r29, r11
     892:	29 f7       	brne	.-54     	; 0x85e <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	08 95       	ret

000008aa <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     8aa:	8d e0       	ldi	r24, 0x0D	; 13
     8ac:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
  debug_tx_byte('\n');
     8b0:	8a e0       	ldi	r24, 0x0A	; 10
     8b2:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
}
     8b6:	08 95       	ret

000008b8 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
}
     8be:	08 95       	ret

000008c0 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     8c0:	8c e2       	ldi	r24, 0x2C	; 44
     8c2:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
}
     8c6:	08 95       	ret

000008c8 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     8d4:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
        i++;
     8d8:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     8da:	fe 01       	movw	r30, r28
     8dc:	e1 0f       	add	r30, r17
     8de:	f1 1d       	adc	r31, r1
     8e0:	80 81       	ld	r24, Z
     8e2:	88 23       	and	r24, r24
     8e4:	b9 f7       	brne	.-18     	; 0x8d4 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	08 95       	ret

000008ee <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     8ee:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_nl();
     8f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <debug_tx_nl>
}
     8f6:	08 95       	ret

000008f8 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     8f8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     8fc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
}
     900:	08 95       	ret

00000902 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     902:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_cm();
     906:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_cm>
}
     90a:	08 95       	ret

0000090c <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	6b 01       	movw	r12, r22
     91c:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     91e:	61 15       	cp	r22, r1
     920:	71 05       	cpc	r23, r1
     922:	81 05       	cpc	r24, r1
     924:	91 05       	cpc	r25, r1
     926:	31 f4       	brne	.+12     	; 0x934 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     928:	10 92 4c 01 	sts	0x014C, r1
    debug.input_num_digits=1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 54 01 	sts	0x0154, r24
     932:	23 c0       	rjmp	.+70     	; 0x97a <debug_determine_digit_numbers+0x6e>
     934:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     936:	0b 2d       	mov	r16, r11
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	08 5d       	subi	r16, 0xD8	; 216
     93c:	1e 4f       	sbci	r17, 0xFE	; 254
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	2a e0       	ldi	r18, 0x0A	; 10
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__udivmodsi4>
     94e:	f8 01       	movw	r30, r16
     950:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	2a e0       	ldi	r18, 0x0A	; 10
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__udivmodsi4>
     962:	c9 01       	movw	r24, r18
     964:	da 01       	movw	r26, r20
     966:	6c 01       	movw	r12, r24
     968:	7d 01       	movw	r14, r26
      i++;
     96a:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     96c:	c1 14       	cp	r12, r1
     96e:	d1 04       	cpc	r13, r1
     970:	e1 04       	cpc	r14, r1
     972:	f1 04       	cpc	r15, r1
     974:	01 f7       	brne	.-64     	; 0x936 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     976:	b0 92 54 01 	sts	0x0154, r11
  }
}
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	08 95       	ret

0000098a <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     98a:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     98c:	10 91 54 01 	lds	r17, 0x0154
     990:	09 c0       	rjmp	.+18     	; 0x9a4 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     992:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     994:	e1 2f       	mov	r30, r17
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	e8 5d       	subi	r30, 0xD8	; 216
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     99e:	80 5d       	subi	r24, 0xD0	; 208
     9a0:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     9a4:	11 23       	and	r17, r17
     9a6:	a9 f7       	brne	.-22     	; 0x992 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     9a8:	1f 91       	pop	r17
     9aa:	08 95       	ret

000009ac <debug_tx_number>:

void debug_tx_number(int32_t num){
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
  if(num<0){
     9b8:	97 ff       	sbrs	r25, 7
     9ba:	0b c0       	rjmp	.+22     	; 0x9d2 <debug_tx_number+0x26>
    debug_tx_byte('-');
     9bc:	8d e2       	ldi	r24, 0x2D	; 45
     9be:	0e 94 18 03 	call	0x630	; 0x630 <debug_tx_byte>
	num=-num;
     9c2:	10 95       	com	r17
     9c4:	00 95       	com	r16
     9c6:	f0 94       	com	r15
     9c8:	e0 94       	com	r14
     9ca:	e1 1c       	adc	r14, r1
     9cc:	f1 1c       	adc	r15, r1
     9ce:	01 1d       	adc	r16, r1
     9d0:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     9d2:	c8 01       	movw	r24, r16
     9d4:	b7 01       	movw	r22, r14
     9d6:	0e 94 86 04 	call	0x90c	; 0x90c <debug_determine_digit_numbers>
  debug_tx_number_digits();
     9da:	0e 94 c5 04 	call	0x98a	; 0x98a <debug_tx_number_digits>
}
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     9e8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <debug_tx_number>
  debug_tx_nl();
     9ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <debug_tx_nl>
}
     9f0:	08 95       	ret

000009f2 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     9f2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <debug_tx_number>
  debug_tx_sp();
     9f6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
}
     9fa:	08 95       	ret

000009fc <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     9fc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <debug_tx_number>
  debug_tx_text(",");
     a00:	8e e0       	ldi	r24, 0x0E	; 14
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
}
     a08:	08 95       	ret

00000a0a <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     a0a:	0e 94 a5 03 	call	0x74a	; 0x74a <debug_tx_hex>
  debug_tx_nl();
     a0e:	0e 94 55 04 	call	0x8aa	; 0x8aa <debug_tx_nl>
}
     a12:	08 95       	ret

00000a14 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     a14:	0e 94 a5 03 	call	0x74a	; 0x74a <debug_tx_hex>
  debug_tx_sp();
     a18:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
}
     a1c:	08 95       	ret

00000a1e <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     a1e:	0e 94 a5 03 	call	0x74a	; 0x74a <debug_tx_hex>
  debug_tx_text(",");
     a22:	8e e0       	ldi	r24, 0x0E	; 14
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
}
     a2a:	08 95       	ret

00000a2c <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     a2c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <debug_tx_bin>
  debug_tx_nl();
     a30:	0e 94 55 04 	call	0x8aa	; 0x8aa <debug_tx_nl>
}
     a34:	08 95       	ret

00000a36 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     a36:	0e 94 ff 03 	call	0x7fe	; 0x7fe <debug_tx_bin>
  debug_tx_sp();
     a3a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
}
     a3e:	08 95       	ret

00000a40 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     a40:	0e 94 ff 03 	call	0x7fe	; 0x7fe <debug_tx_bin>
  debug_tx_text(",");
     a44:	8e e0       	ldi	r24, 0x0E	; 14
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
}
     a4c:	08 95       	ret

00000a4e <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	7a 01       	movw	r14, r20
     a58:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     a5a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     a5e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_nl(num);
     a62:	c8 01       	movw	r24, r16
     a64:	b7 01       	movw	r22, r14
     a66:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <debug_tx_number_nl>
}
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	08 95       	ret

00000a74 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	7a 01       	movw	r14, r20
     a7e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     a80:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     a84:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_sp(num);
     a88:	c8 01       	movw	r24, r16
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_number_sp>
}
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	7a 01       	movw	r14, r20
     aa4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     aa6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     aaa:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_cm(num);
     aae:	c8 01       	movw	r24, r16
     ab0:	b7 01       	movw	r22, r14
     ab2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <debug_tx_number_cm>
}
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	08 95       	ret

00000ac0 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	7a 01       	movw	r14, r20
     aca:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     acc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     ad0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     ad4:	c8 01       	movw	r24, r16
     ad6:	b7 01       	movw	r22, r14
     ad8:	0e 94 05 05 	call	0xa0a	; 0xa0a <debug_tx_number_hex_nl>
}
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	08 95       	ret

00000ae6 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	7a 01       	movw	r14, r20
     af0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     af2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     af6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     afa:	c8 01       	movw	r24, r16
     afc:	b7 01       	movw	r22, r14
     afe:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_number_hex_sp>
}
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	7a 01       	movw	r14, r20
     b16:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b18:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     b1c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     b20:	c8 01       	movw	r24, r16
     b22:	b7 01       	movw	r22, r14
     b24:	0e 94 0f 05 	call	0xa1e	; 0xa1e <debug_tx_number_hex_cm>
}
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	7a 01       	movw	r14, r20
     b3c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b3e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     b42:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     b46:	c8 01       	movw	r24, r16
     b48:	b7 01       	movw	r22, r14
     b4a:	0e 94 16 05 	call	0xa2c	; 0xa2c <debug_tx_number_bin_nl>
}
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	08 95       	ret

00000b58 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	7a 01       	movw	r14, r20
     b62:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b64:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     b68:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     b6c:	c8 01       	movw	r24, r16
     b6e:	b7 01       	movw	r22, r14
     b70:	0e 94 1b 05 	call	0xa36	; 0xa36 <debug_tx_number_bin_sp>
}
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	7a 01       	movw	r14, r20
     b88:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b8a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_text>
  debug_tx_sp();
     b8e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     b92:	c8 01       	movw	r24, r16
     b94:	b7 01       	movw	r22, r14
     b96:	0e 94 20 05 	call	0xa40	; 0xa40 <debug_tx_number_bin_cm>
}
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	08 95       	ret

00000ba4 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     ba4:	e8 e2       	ldi	r30, 0x28	; 40
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	e8 0f       	add	r30, r24
     baa:	f1 1d       	adc	r31, r1
     bac:	83 81       	ldd	r24, Z+3	; 0x03
}
     bae:	08 95       	ret

00000bb0 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     bb0:	80 91 4b 01 	lds	r24, 0x014B
}
     bb4:	08 95       	ret

00000bb6 <debug_flush_buf>:

void debug_flush_buf(void){
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     bba:	fc 01       	movw	r30, r24
     bbc:	e8 5d       	subi	r30, 0xD8	; 216
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	13 82       	std	Z+3, r1	; 0x03
     bc2:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     bc4:	80 32       	cpi	r24, 0x20	; 32
     bc6:	91 05       	cpc	r25, r1
     bc8:	c1 f7       	brne	.-16     	; 0xbba <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     bca:	10 92 4b 01 	sts	0x014B, r1
}
     bce:	08 95       	ret

00000bd0 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     bd0:	80 91 2a 01 	lds	r24, 0x012A
}
     bd4:	08 95       	ret

00000bd6 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     bd6:	80 91 2a 01 	lds	r24, 0x012A
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     bda:	88 23       	and	r24, r24
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <debug_data_available_rx_buf+0xc>
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     be2:	80 91 4b 01 	lds	r24, 0x014B
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	88 23       	and	r24, r24
     bea:	09 f4       	brne	.+2      	; 0xbee <debug_data_available_rx_buf+0x18>
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     bf2:	89 2f       	mov	r24, r25
     bf4:	08 95       	ret

00000bf6 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     bf6:	80 91 4b 01 	lds	r24, 0x014B
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     bfa:	08 95       	ret

00000bfc <debug_init>:

void debug_init(void){
  debug_struct_init();
     bfc:	0e 94 9b 02 	call	0x536	; 0x536 <debug_struct_init>
  debug_timings_init();
     c00:	0e 94 b7 02 	call	0x56e	; 0x56e <debug_timings_init>
  debug_gpio_init();
     c04:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_gpio_init>
}
     c08:	08 95       	ret

00000c0a <__vector_4>:


ISR(ISR_PCINT_VECT){
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
  debug.databsy=1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 2a 01 	sts	0x012A, r24
  uint8_t val=debug_rx_byte();
     c32:	0e 94 70 03 	call	0x6e0	; 0x6e0 <debug_rx_byte>
     c36:	98 2f       	mov	r25, r24
  if(debug.error==0){
     c38:	80 91 28 01 	lds	r24, 0x0128
     c3c:	88 23       	and	r24, r24
     c3e:	99 f4       	brne	.+38     	; 0xc66 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     c40:	e0 91 4b 01 	lds	r30, 0x014B
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	e8 5d       	subi	r30, 0xD8	; 216
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     c4c:	80 91 4b 01 	lds	r24, 0x014B
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	80 93 4b 01 	sts	0x014B, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     c56:	80 91 4b 01 	lds	r24, 0x014B
     c5a:	81 32       	cpi	r24, 0x21	; 33
     c5c:	10 f0       	brcs	.+4      	; 0xc62 <__vector_4+0x58>
	  debug.bufindex=0;
     c5e:	10 92 4b 01 	sts	0x014B, r1
	}
    debug_timer_start();
     c62:	0e 94 ca 02 	call	0x594	; 0x594 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <__vector_16>:

ISR(TIMER_OVF_VECT){
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     c92:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     c96:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     c98:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     c9a:	10 92 2a 01 	sts	0x012A, r1
}
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     ca8:	e5 e5       	ldi	r30, 0x55	; 85
     caa:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     cac:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     cae:	11 82       	std	Z+1, r1	; 0x01
     cb0:	12 82       	std	Z+2, r1	; 0x02
     cb2:	13 82       	std	Z+3, r1	; 0x03
     cb4:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     cb6:	15 82       	std	Z+5, r1	; 0x05
     cb8:	16 82       	std	Z+6, r1	; 0x06
     cba:	17 82       	std	Z+7, r1	; 0x07
     cbc:	10 86       	std	Z+8, r1	; 0x08
     cbe:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	eb 38       	cpi	r30, 0x8B	; 139
     cc4:	f8 07       	cpc	r31, r24
     cc6:	91 f7       	brne	.-28     	; 0xcac <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     cc8:	08 95       	ret

00000cca <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	fc 01       	movw	r30, r24
     cce:	23 e0       	ldi	r18, 0x03	; 3
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	2a 95       	dec	r18
     cd6:	e1 f7       	brne	.-8      	; 0xcd0 <LPF_Set_Alpha+0x6>
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	eb 5a       	subi	r30, 0xAB	; 171
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	60 83       	st	Z, r22
}
     ce2:	08 95       	ret

00000ce4 <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	33 e0       	ldi	r19, 0x03	; 3
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	3a 95       	dec	r19
     cf0:	e1 f7       	brne	.-8      	; 0xcea <LPF_Get_Alpha+0x6>
     cf2:	e8 0f       	add	r30, r24
     cf4:	f9 1f       	adc	r31, r25
     cf6:	eb 5a       	subi	r30, 0xAB	; 171
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     cfa:	80 81       	ld	r24, Z
     cfc:	08 95       	ret

00000cfe <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     cfe:	2f 92       	push	r2
     d00:	3f 92       	push	r3
     d02:	4f 92       	push	r4
     d04:	5f 92       	push	r5
     d06:	6f 92       	push	r6
     d08:	7f 92       	push	r7
     d0a:	8f 92       	push	r8
     d0c:	9f 92       	push	r9
     d0e:	af 92       	push	r10
     d10:	bf 92       	push	r11
     d12:	cf 92       	push	r12
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	1a 01       	movw	r2, r20
     d20:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	6c 01       	movw	r12, r24
     d26:	53 e0       	ldi	r21, 0x03	; 3
     d28:	cc 0c       	add	r12, r12
     d2a:	dd 1c       	adc	r13, r13
     d2c:	5a 95       	dec	r21
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <LPF_Get_Filtered_Value+0x2a>
     d30:	c8 0e       	add	r12, r24
     d32:	d9 1e       	adc	r13, r25
     d34:	85 e5       	ldi	r24, 0x55	; 85
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	c8 0e       	add	r12, r24
     d3a:	d9 1e       	adc	r13, r25
     d3c:	f6 01       	movw	r30, r12
     d3e:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     d40:	62 2e       	mov	r6, r18
     d42:	77 24       	eor	r7, r7
     d44:	88 24       	eor	r8, r8
     d46:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     d48:	64 e6       	ldi	r22, 0x64	; 100
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	62 1b       	sub	r22, r18
     d4e:	71 09       	sbc	r23, r1
     d50:	88 27       	eor	r24, r24
     d52:	77 fd       	sbrc	r23, 7
     d54:	80 95       	com	r24
     d56:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     d58:	45 e0       	ldi	r20, 0x05	; 5
     d5a:	a4 2e       	mov	r10, r20
     d5c:	b1 2c       	mov	r11, r1
     d5e:	ac 0c       	add	r10, r12
     d60:	bd 1c       	adc	r11, r13
     d62:	25 81       	ldd	r18, Z+5	; 0x05
     d64:	36 81       	ldd	r19, Z+6	; 0x06
     d66:	47 81       	ldd	r20, Z+7	; 0x07
     d68:	50 85       	ldd	r21, Z+8	; 0x08
     d6a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsi3>
     d6e:	7b 01       	movw	r14, r22
     d70:	8c 01       	movw	r16, r24
     d72:	c2 01       	movw	r24, r4
     d74:	b1 01       	movw	r22, r2
     d76:	a4 01       	movw	r20, r8
     d78:	93 01       	movw	r18, r6
     d7a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsi3>
     d7e:	e6 0e       	add	r14, r22
     d80:	f7 1e       	adc	r15, r23
     d82:	08 1f       	adc	r16, r24
     d84:	19 1f       	adc	r17, r25
     d86:	c8 01       	movw	r24, r16
     d88:	b7 01       	movw	r22, r14
     d8a:	24 e6       	ldi	r18, 0x64	; 100
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__divmodsi4>
     d96:	ca 01       	movw	r24, r20
     d98:	f6 01       	movw	r30, r12
     d9a:	25 83       	std	Z+5, r18	; 0x05
     d9c:	f5 01       	movw	r30, r10
     d9e:	31 83       	std	Z+1, r19	; 0x01
     da0:	42 83       	std	Z+2, r20	; 0x02
     da2:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     da4:	b9 01       	movw	r22, r18
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	6f 90       	pop	r6
     dbe:	5f 90       	pop	r5
     dc0:	4f 90       	pop	r4
     dc2:	3f 90       	pop	r3
     dc4:	2f 90       	pop	r2
     dc6:	08 95       	ret

00000dc8 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     dc8:	0e 94 54 06 	call	0xca8	; 0xca8 <LPF_Struct_Init>
     dcc:	08 95       	ret

00000dce <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	21 e4       	ldi	r18, 0x41	; 65
     dd8:	33 e0       	ldi	r19, 0x03	; 3
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsi3>
     de2:	60 51       	subi	r22, 0x10	; 16
     de4:	76 4b       	sbci	r23, 0xB6	; 182
     de6:	8d 4f       	sbci	r24, 0xFD	; 253
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
     dea:	24 e6       	ldi	r18, 0x64	; 100
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__udivmodsi4>
     df6:	30 93 89 00 	sts	0x0089, r19
     dfa:	20 93 88 00 	sts	0x0088, r18
     dfe:	08 95       	ret

00000e00 <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
     e04:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
     e06:	60 e6       	ldi	r22, 0x60	; 96
     e08:	73 ee       	ldi	r23, 0xE3	; 227
     e0a:	86 e1       	ldi	r24, 0x16	; 22
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__udivmodsi4>
     e12:	21 50       	subi	r18, 0x01	; 1
     e14:	30 40       	sbci	r19, 0x00	; 0
     e16:	30 93 87 00 	sts	0x0087, r19
     e1a:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
     e1e:	8c ed       	ldi	r24, 0xDC	; 220
     e20:	95 e0       	ldi	r25, 0x05	; 5
     e22:	90 93 89 00 	sts	0x0089, r25
     e26:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
     e2a:	82 e8       	ldi	r24, 0x82	; 130
     e2c:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     e30:	8a e1       	ldi	r24, 0x1A	; 26
     e32:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 e7 06 	call	0xdce	; 0xdce <Servo_Set_Angle>
     e3e:	88 ee       	ldi	r24, 0xE8	; 232
     e40:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e42:	2c e2       	ldi	r18, 0x2C	; 44
     e44:	31 e0       	ldi	r19, 0x01	; 1
     e46:	f9 01       	movw	r30, r18
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <Servo_Init+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	d9 f7       	brne	.-10     	; 0xe46 <Servo_Init+0x46>
  _delay_ms(100);
}
     e50:	08 95       	ret

00000e52 <MPU6050_Struct_Init>:
}mpu6050_t;

mpu6050_t MPU6050;

void MPU6050_Struct_Init(void){
  MPU6050.AccX=0;
     e52:	10 92 8c 01 	sts	0x018C, r1
     e56:	10 92 8b 01 	sts	0x018B, r1
  MPU6050.AccY=0;
     e5a:	10 92 8e 01 	sts	0x018E, r1
     e5e:	10 92 8d 01 	sts	0x018D, r1
  MPU6050.AccZ=0;
     e62:	10 92 90 01 	sts	0x0190, r1
     e66:	10 92 8f 01 	sts	0x018F, r1
  MPU6050.GyroX=0;
     e6a:	10 92 92 01 	sts	0x0192, r1
     e6e:	10 92 91 01 	sts	0x0191, r1
  MPU6050.GyroY=0;
     e72:	10 92 94 01 	sts	0x0194, r1
     e76:	10 92 93 01 	sts	0x0193, r1
  MPU6050.GyroZ=0;
     e7a:	10 92 96 01 	sts	0x0196, r1
     e7e:	10 92 95 01 	sts	0x0195, r1
  MPU6050.GyroXCal=0;
     e82:	10 92 98 01 	sts	0x0198, r1
     e86:	10 92 97 01 	sts	0x0197, r1
  MPU6050.GyroYCal=0;
     e8a:	10 92 9a 01 	sts	0x019A, r1
     e8e:	10 92 99 01 	sts	0x0199, r1
  MPU6050.GyroZCal=0;
     e92:	10 92 9c 01 	sts	0x019C, r1
     e96:	10 92 9b 01 	sts	0x019B, r1
  MPU6050.Pitch=0;
     e9a:	10 92 9e 01 	sts	0x019E, r1
     e9e:	10 92 9d 01 	sts	0x019D, r1
  MPU6050.Roll=0;
     ea2:	10 92 a0 01 	sts	0x01A0, r1
     ea6:	10 92 9f 01 	sts	0x019F, r1
  MPU6050.Yaw=0;
     eaa:	10 92 a2 01 	sts	0x01A2, r1
     eae:	10 92 a1 01 	sts	0x01A1, r1
  MPU6050.Temp=0;
     eb2:	10 92 a4 01 	sts	0x01A4, r1
     eb6:	10 92 a3 01 	sts	0x01A3, r1
  MPU6050.Error=0;
     eba:	10 92 a6 01 	sts	0x01A6, r1
     ebe:	10 92 a5 01 	sts	0x01A5, r1
}
     ec2:	08 95       	ret

00000ec4 <MPU6050_Get_AccX>:

int MPU6050_Get_AccX(void){
  return MPU6050.AccX;
}
     ec4:	80 91 8b 01 	lds	r24, 0x018B
     ec8:	90 91 8c 01 	lds	r25, 0x018C
     ecc:	08 95       	ret

00000ece <MPU6050_Get_AccY>:

int MPU6050_Get_AccY(void){
  return MPU6050.AccY;
}
     ece:	80 91 8d 01 	lds	r24, 0x018D
     ed2:	90 91 8e 01 	lds	r25, 0x018E
     ed6:	08 95       	ret

00000ed8 <MPU6050_Get_AccZ>:

int MPU6050_Get_AccZ(void){
  return MPU6050.AccZ;
}
     ed8:	80 91 8f 01 	lds	r24, 0x018F
     edc:	90 91 90 01 	lds	r25, 0x0190
     ee0:	08 95       	ret

00000ee2 <MPU6050_Get_GyroX>:

int MPU6050_Get_GyroX(void){
  return MPU6050.GyroX;
}
     ee2:	80 91 91 01 	lds	r24, 0x0191
     ee6:	90 91 92 01 	lds	r25, 0x0192
     eea:	08 95       	ret

00000eec <MPU6050_Get_GyroY>:

int MPU6050_Get_GyroY(void){
  return MPU6050.GyroY;
}
     eec:	80 91 93 01 	lds	r24, 0x0193
     ef0:	90 91 94 01 	lds	r25, 0x0194
     ef4:	08 95       	ret

00000ef6 <MPU6050_Get_GyroZ>:

int MPU6050_Get_GyroZ(void){
  return MPU6050.GyroZ;
}
     ef6:	80 91 95 01 	lds	r24, 0x0195
     efa:	90 91 96 01 	lds	r25, 0x0196
     efe:	08 95       	ret

00000f00 <MPU6050_Get_GyroXCal>:

int MPU6050_Get_GyroXCal(void){
  return MPU6050.GyroXCal;
}
     f00:	80 91 97 01 	lds	r24, 0x0197
     f04:	90 91 98 01 	lds	r25, 0x0198
     f08:	08 95       	ret

00000f0a <MPU6050_Get_GyroYCal>:

int MPU6050_Get_GyroYCal(void){
  return MPU6050.GyroYCal;
}
     f0a:	80 91 99 01 	lds	r24, 0x0199
     f0e:	90 91 9a 01 	lds	r25, 0x019A
     f12:	08 95       	ret

00000f14 <MPU6050_Get_GyroZCal>:

int MPU6050_Get_GyroZCal(void){
  return MPU6050.GyroZCal;
}
     f14:	80 91 9b 01 	lds	r24, 0x019B
     f18:	90 91 9c 01 	lds	r25, 0x019C
     f1c:	08 95       	ret

00000f1e <MPU6050_Get_Pitch>:

int MPU6050_Get_Pitch(void){
  return MPU6050.Pitch;
}
     f1e:	80 91 9d 01 	lds	r24, 0x019D
     f22:	90 91 9e 01 	lds	r25, 0x019E
     f26:	08 95       	ret

00000f28 <MPU6050_Get_Roll>:

int MPU6050_Get_Roll(void){
  return MPU6050.Roll;
}
     f28:	80 91 9f 01 	lds	r24, 0x019F
     f2c:	90 91 a0 01 	lds	r25, 0x01A0
     f30:	08 95       	ret

00000f32 <MPU6050_Get_Yaw>:

int MPU6050_Get_Yaw(void){
  return MPU6050.Yaw;
}
     f32:	80 91 a1 01 	lds	r24, 0x01A1
     f36:	90 91 a2 01 	lds	r25, 0x01A2
     f3a:	08 95       	ret

00000f3c <MPU6050_Get_Temp>:

int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}
     f3c:	80 91 a3 01 	lds	r24, 0x01A3
     f40:	90 91 a4 01 	lds	r25, 0x01A4
     f44:	08 95       	ret

00000f46 <MPU6050_Get_Error>:

int MPU6050_Get_Error(void){
  return MPU6050.Error;
}
     f46:	80 91 a5 01 	lds	r24, 0x01A5
     f4a:	90 91 a6 01 	lds	r25, 0x01A6
     f4e:	08 95       	ret

00000f50 <MPU6050_Error_Clear>:

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
     f50:	10 92 a6 01 	sts	0x01A6, r1
     f54:	10 92 a5 01 	sts	0x01A5, r1
}
     f58:	08 95       	ret

00000f5a <MPU6050_Read_Roll>:
    MPU6050.Pitch=0;
    return 0;
  }
}

int MPU6050_Read_Roll(void){
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
  if(MPU6050.Error==0){
     f62:	80 91 a5 01 	lds	r24, 0x01A5
     f66:	90 91 a6 01 	lds	r25, 0x01A6
     f6a:	89 2b       	or	r24, r25
     f6c:	91 f5       	brne	.+100    	; 0xfd2 <MPU6050_Read_Roll+0x78>
    float ay=MPU6050_Get_AccY();
    float az=MPU6050_Get_AccZ();
    float divy=ay/az;
    float roll = atan(divy);
     f6e:	60 91 8d 01 	lds	r22, 0x018D
     f72:	70 91 8e 01 	lds	r23, 0x018E
     f76:	88 27       	eor	r24, r24
     f78:	77 fd       	sbrc	r23, 7
     f7a:	80 95       	com	r24
     f7c:	98 2f       	mov	r25, r24
     f7e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__floatsisf>
     f82:	7b 01       	movw	r14, r22
     f84:	8c 01       	movw	r16, r24
     f86:	60 91 8f 01 	lds	r22, 0x018F
     f8a:	70 91 90 01 	lds	r23, 0x0190
     f8e:	88 27       	eor	r24, r24
     f90:	77 fd       	sbrc	r23, 7
     f92:	80 95       	com	r24
     f94:	98 2f       	mov	r25, r24
     f96:	0e 94 91 0b 	call	0x1722	; 0x1722 <__floatsisf>
     f9a:	9b 01       	movw	r18, r22
     f9c:	ac 01       	movw	r20, r24
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__divsf3>
     fa6:	0e 94 ce 0a 	call	0x159c	; 0x159c <atan>
    roll*=10.0;
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulsf3>
    roll*=57.3;
	MPU6050.Roll=(int)roll;
     fb6:	23 e3       	ldi	r18, 0x33	; 51
     fb8:	33 e3       	ldi	r19, 0x33	; 51
     fba:	45 e6       	ldi	r20, 0x65	; 101
     fbc:	52 e4       	ldi	r21, 0x42	; 66
     fbe:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulsf3>
     fc2:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__fixsfsi>
     fc6:	9b 01       	movw	r18, r22
     fc8:	70 93 a0 01 	sts	0x01A0, r23
     fcc:	60 93 9f 01 	sts	0x019F, r22
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <MPU6050_Read_Roll+0x84>
    return MPU6050.Roll;
  }else{
    MPU6050.Roll=0;
     fd2:	10 92 a0 01 	sts	0x01A0, r1
     fd6:	10 92 9f 01 	sts	0x019F, r1
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
     fde:	c9 01       	movw	r24, r18
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	08 95       	ret

00000fea <MPU6050_Read_Pitch>:
void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
  MPU6050_Read_Gyro();
}

int MPU6050_Read_Pitch(void){
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
  if(MPU6050.Error==0){
     ff2:	80 91 a5 01 	lds	r24, 0x01A5
     ff6:	90 91 a6 01 	lds	r25, 0x01A6
     ffa:	89 2b       	or	r24, r25
     ffc:	91 f5       	brne	.+100    	; 0x1062 <MPU6050_Read_Pitch+0x78>
    float ax=MPU6050_Get_AccX();
    float az=MPU6050_Get_AccZ();
    float divx=ax/az;
    float pitch = atan(divx);
     ffe:	60 91 8b 01 	lds	r22, 0x018B
    1002:	70 91 8c 01 	lds	r23, 0x018C
    1006:	88 27       	eor	r24, r24
    1008:	77 fd       	sbrc	r23, 7
    100a:	80 95       	com	r24
    100c:	98 2f       	mov	r25, r24
    100e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__floatsisf>
    1012:	7b 01       	movw	r14, r22
    1014:	8c 01       	movw	r16, r24
    1016:	60 91 8f 01 	lds	r22, 0x018F
    101a:	70 91 90 01 	lds	r23, 0x0190
    101e:	88 27       	eor	r24, r24
    1020:	77 fd       	sbrc	r23, 7
    1022:	80 95       	com	r24
    1024:	98 2f       	mov	r25, r24
    1026:	0e 94 91 0b 	call	0x1722	; 0x1722 <__floatsisf>
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	c8 01       	movw	r24, r16
    1030:	b7 01       	movw	r22, r14
    1032:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__divsf3>
    1036:	0e 94 ce 0a 	call	0x159c	; 0x159c <atan>
    pitch*=10.0;
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e2       	ldi	r20, 0x20	; 32
    1040:	51 e4       	ldi	r21, 0x41	; 65
    1042:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulsf3>
    pitch*=57.3;
	MPU6050.Pitch=(int)pitch;
    1046:	23 e3       	ldi	r18, 0x33	; 51
    1048:	33 e3       	ldi	r19, 0x33	; 51
    104a:	45 e6       	ldi	r20, 0x65	; 101
    104c:	52 e4       	ldi	r21, 0x42	; 66
    104e:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulsf3>
    1052:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__fixsfsi>
    1056:	9b 01       	movw	r18, r22
    1058:	70 93 9e 01 	sts	0x019E, r23
    105c:	60 93 9d 01 	sts	0x019D, r22
    1060:	06 c0       	rjmp	.+12     	; 0x106e <MPU6050_Read_Pitch+0x84>
	return MPU6050.Pitch;
  }else{
    MPU6050.Pitch=0;
    1062:	10 92 9e 01 	sts	0x019E, r1
    1066:	10 92 9d 01 	sts	0x019D, r1
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
    106e:	c9 01       	movw	r24, r18
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	08 95       	ret

0000107a <MPU6050_Get_Mode>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    107a:	8b e6       	ldi	r24, 0x6B	; 107
    107c:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
}
    1080:	08 95       	ret

00001082 <MPU6050_Read_Temp>:
  data/=131;
  MPU6050.GyroZ=data;
  return (int16_t)data;
}

int MPU6050_Read_Temp(void){
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
    1088:	81 e4       	ldi	r24, 0x41	; 65
    108a:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    108e:	f8 2e       	mov	r15, r24
  error1 = I2C_Get_Error();
    1090:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    1094:	18 2f       	mov	r17, r24
  data <<= 8;
  data |= I2C_Read_Register(0x42);
    1096:	82 e4       	ldi	r24, 0x42	; 66
    1098:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    109c:	08 2f       	mov	r16, r24
  error2 = I2C_Get_Error();
    109e:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
  data /=340;
  data +=36;
  if( (error1!=0) || (error2!=0) ){
    10a2:	11 23       	and	r17, r17
    10a4:	81 f4       	brne	.+32     	; 0x10c6 <MPU6050_Read_Temp+0x44>
    10a6:	88 23       	and	r24, r24
    10a8:	71 f4       	brne	.+28     	; 0x10c6 <MPU6050_Read_Temp+0x44>

int MPU6050_Read_Temp(void){
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
  error1 = I2C_Get_Error();
  data <<= 8;
    10aa:	9f 2d       	mov	r25, r15
    10ac:	80 e0       	ldi	r24, 0x00	; 0
  data |= I2C_Read_Register(0x42);
    10ae:	20 2f       	mov	r18, r16
    10b0:	30 e0       	ldi	r19, 0x00	; 0
  error2 = I2C_Get_Error();
  data /=340;
    10b2:	82 2b       	or	r24, r18
    10b4:	93 2b       	or	r25, r19
    10b6:	64 e5       	ldi	r22, 0x54	; 84
    10b8:	71 e0       	ldi	r23, 0x01	; 1
    10ba:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
  data +=36;
    10be:	9b 01       	movw	r18, r22
    10c0:	2c 5d       	subi	r18, 0xDC	; 220
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <MPU6050_Read_Temp+0x54>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x21;
    10c6:	81 e2       	ldi	r24, 0x21	; 33
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	90 93 a6 01 	sts	0x01A6, r25
    10ce:	80 93 a5 01 	sts	0x01A5, r24
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
  }
  MPU6050.Temp=data;
    10d6:	30 93 a4 01 	sts	0x01A4, r19
    10da:	20 93 a3 01 	sts	0x01A3, r18
  return data;
}
    10de:	c9 01       	movw	r24, r18
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	08 95       	ret

000010e8 <MPU6050_Read_GyroZ>:
  data/=131;
  MPU6050.GyroY=data;
  return data;
}

int MPU6050_Read_GyroZ(void){
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x47);
    10f8:	87 e4       	ldi	r24, 0x47	; 71
    10fa:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    10fe:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1100:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    1104:	b8 2e       	mov	r11, r24
  data <<= 8;
    1106:	fd 2c       	mov	r15, r13
    1108:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
    110a:	88 e4       	ldi	r24, 0x48	; 72
    110c:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    1110:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1112:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    1116:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    1118:	dd 24       	eor	r13, r13
    111a:	ec 28       	or	r14, r12
    111c:	fd 28       	or	r15, r13
    111e:	00 27       	eor	r16, r16
    1120:	f7 fc       	sbrc	r15, 7
    1122:	00 95       	com	r16
    1124:	10 2f       	mov	r17, r16
    1126:	85 e0       	ldi	r24, 0x05	; 5
    1128:	b8 01       	movw	r22, r16
    112a:	a7 01       	movw	r20, r14
    112c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroZCal;
    1130:	20 91 9b 01 	lds	r18, 0x019B
    1134:	30 91 9c 01 	lds	r19, 0x019C
  if( (error1!=0) || (error2!=0) ){
    1138:	bb 20       	and	r11, r11
    113a:	31 f4       	brne	.+12     	; 0x1148 <MPU6050_Read_GyroZ+0x60>
    113c:	aa 20       	and	r10, r10
    113e:	21 f4       	brne	.+8      	; 0x1148 <MPU6050_Read_GyroZ+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x48);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    1140:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroZCal;
    1142:	82 1b       	sub	r24, r18
    1144:	93 0b       	sbc	r25, r19
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <MPU6050_Read_GyroZ+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x13;
    1148:	83 e1       	ldi	r24, 0x13	; 19
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 a6 01 	sts	0x01A6, r25
    1150:	80 93 a5 01 	sts	0x01A5, r24
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    1158:	63 e8       	ldi	r22, 0x83	; 131
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
    1160:	cb 01       	movw	r24, r22
  MPU6050.GyroZ=data;
    1162:	60 93 95 01 	sts	0x0195, r22
    1166:	90 93 96 01 	sts	0x0196, r25
  return (int16_t)data;
}
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	af 90       	pop	r10
    117a:	08 95       	ret

0000117c <MPU6050_Read_GyroY>:
  data/=131;
  MPU6050.GyroX=data;
  return data;
}

int MPU6050_Read_GyroY(void){
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x45);
    118c:	85 e4       	ldi	r24, 0x45	; 69
    118e:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    1192:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1194:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    1198:	b8 2e       	mov	r11, r24
  data <<= 8;
    119a:	fd 2c       	mov	r15, r13
    119c:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
    119e:	86 e4       	ldi	r24, 0x46	; 70
    11a0:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    11a4:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    11a6:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    11aa:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    11ac:	dd 24       	eor	r13, r13
    11ae:	ec 28       	or	r14, r12
    11b0:	fd 28       	or	r15, r13
    11b2:	00 27       	eor	r16, r16
    11b4:	f7 fc       	sbrc	r15, 7
    11b6:	00 95       	com	r16
    11b8:	10 2f       	mov	r17, r16
    11ba:	84 e0       	ldi	r24, 0x04	; 4
    11bc:	b8 01       	movw	r22, r16
    11be:	a7 01       	movw	r20, r14
    11c0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroYCal;
    11c4:	20 91 99 01 	lds	r18, 0x0199
    11c8:	30 91 9a 01 	lds	r19, 0x019A
  if( (error1!=0) || (error2!=0) ){
    11cc:	bb 20       	and	r11, r11
    11ce:	31 f4       	brne	.+12     	; 0x11dc <MPU6050_Read_GyroY+0x60>
    11d0:	aa 20       	and	r10, r10
    11d2:	21 f4       	brne	.+8      	; 0x11dc <MPU6050_Read_GyroY+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x46);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    11d4:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroYCal;
    11d6:	82 1b       	sub	r24, r18
    11d8:	93 0b       	sbc	r25, r19
    11da:	08 c0       	rjmp	.+16     	; 0x11ec <MPU6050_Read_GyroY+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x12;
    11dc:	82 e1       	ldi	r24, 0x12	; 18
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 a6 01 	sts	0x01A6, r25
    11e4:	80 93 a5 01 	sts	0x01A5, r24
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    11ec:	63 e8       	ldi	r22, 0x83	; 131
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
    11f4:	cb 01       	movw	r24, r22
  MPU6050.GyroY=data;
    11f6:	60 93 93 01 	sts	0x0193, r22
    11fa:	90 93 94 01 	sts	0x0194, r25
  return data;
}
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	08 95       	ret

00001210 <MPU6050_Read_GyroX>:
  }
  MPU6050.AccZ=data;
  return data;
}

int MPU6050_Read_GyroX(void){
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x43);
    1220:	83 e4       	ldi	r24, 0x43	; 67
    1222:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    1226:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1228:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    122c:	b8 2e       	mov	r11, r24
  data <<= 8;
    122e:	fd 2c       	mov	r15, r13
    1230:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
    1232:	84 e4       	ldi	r24, 0x44	; 68
    1234:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    1238:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    123a:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    123e:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    1240:	dd 24       	eor	r13, r13
    1242:	ec 28       	or	r14, r12
    1244:	fd 28       	or	r15, r13
    1246:	00 27       	eor	r16, r16
    1248:	f7 fc       	sbrc	r15, 7
    124a:	00 95       	com	r16
    124c:	10 2f       	mov	r17, r16
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	b8 01       	movw	r22, r16
    1252:	a7 01       	movw	r20, r14
    1254:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroXCal;
    1258:	20 91 97 01 	lds	r18, 0x0197
    125c:	30 91 98 01 	lds	r19, 0x0198
  if( (error1!=0) || (error2!=0) ){
    1260:	bb 20       	and	r11, r11
    1262:	31 f4       	brne	.+12     	; 0x1270 <MPU6050_Read_GyroX+0x60>
    1264:	aa 20       	and	r10, r10
    1266:	21 f4       	brne	.+8      	; 0x1270 <MPU6050_Read_GyroX+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x44);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    1268:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroXCal;
    126a:	82 1b       	sub	r24, r18
    126c:	93 0b       	sbc	r25, r19
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <MPU6050_Read_GyroX+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x11;
    1270:	81 e1       	ldi	r24, 0x11	; 17
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 a6 01 	sts	0x01A6, r25
    1278:	80 93 a5 01 	sts	0x01A5, r24
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    1280:	63 e8       	ldi	r22, 0x83	; 131
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
    1288:	cb 01       	movw	r24, r22
  MPU6050.GyroX=data;
    128a:	60 93 91 01 	sts	0x0191, r22
    128e:	90 93 92 01 	sts	0x0192, r25
  return data;
}
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	08 95       	ret

000012a4 <MPU6050_Read_Gyro>:
    MPU6050_Read_AccZ();
  }
}

void MPU6050_Read_Gyro(void){
  if(MPU6050.Error==0){
    12a4:	80 91 a5 01 	lds	r24, 0x01A5
    12a8:	90 91 a6 01 	lds	r25, 0x01A6
    12ac:	89 2b       	or	r24, r25
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <MPU6050_Read_Gyro+0x10>
    MPU6050_Read_GyroX();
    12b0:	0e 94 08 09 	call	0x1210	; 0x1210 <MPU6050_Read_GyroX>
  }
  if(MPU6050.Error==0){
    12b4:	80 91 a5 01 	lds	r24, 0x01A5
    12b8:	90 91 a6 01 	lds	r25, 0x01A6
    12bc:	89 2b       	or	r24, r25
    12be:	11 f4       	brne	.+4      	; 0x12c4 <MPU6050_Read_Gyro+0x20>
    MPU6050_Read_GyroY();
    12c0:	0e 94 be 08 	call	0x117c	; 0x117c <MPU6050_Read_GyroY>
  }
  if(MPU6050.Error==0){
    12c4:	80 91 a5 01 	lds	r24, 0x01A5
    12c8:	90 91 a6 01 	lds	r25, 0x01A6
    12cc:	89 2b       	or	r24, r25
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <MPU6050_Read_Gyro+0x30>
    MPU6050_Read_GyroZ();
    12d0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <MPU6050_Read_GyroZ>
    12d4:	08 95       	ret

000012d6 <MPU6050_Read_AccZ>:
  }
  MPU6050.AccY=data;
  return data;
}

int MPU6050_Read_AccZ(void){
    12d6:	af 92       	push	r10
    12d8:	bf 92       	push	r11
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3F);
    12e6:	8f e3       	ldi	r24, 0x3F	; 63
    12e8:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    12ec:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    12ee:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    12f2:	b8 2e       	mov	r11, r24
  data <<= 8;
    12f4:	fd 2c       	mov	r15, r13
    12f6:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
    12f8:	80 e4       	ldi	r24, 0x40	; 64
    12fa:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    12fe:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1300:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    1304:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
    1306:	dd 24       	eor	r13, r13
    1308:	ec 28       	or	r14, r12
    130a:	fd 28       	or	r15, r13
    130c:	00 27       	eor	r16, r16
    130e:	f7 fc       	sbrc	r15, 7
    1310:	00 95       	com	r16
    1312:	10 2f       	mov	r17, r16
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	b8 01       	movw	r22, r16
    1318:	a7 01       	movw	r20, r14
    131a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    131e:	bb 20       	and	r11, r11
    1320:	11 f4       	brne	.+4      	; 0x1326 <MPU6050_Read_AccZ+0x50>
    1322:	aa 20       	and	r10, r10
    1324:	41 f0       	breq	.+16     	; 0x1336 <MPU6050_Read_AccZ+0x60>
    data=0;
	MPU6050.Error=0x03;
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	90 93 a6 01 	sts	0x01A6, r25
    132e:	80 93 a5 01 	sts	0x01A5, r24
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccZ=data;
    1336:	70 93 90 01 	sts	0x0190, r23
    133a:	60 93 8f 01 	sts	0x018F, r22
  return data;
}
    133e:	cb 01       	movw	r24, r22
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	08 95       	ret

00001352 <MPU6050_Read_AccY>:
  }
  MPU6050.AccX=data;
  return data;
}

int MPU6050_Read_AccY(void){
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3D);
    1362:	8d e3       	ldi	r24, 0x3D	; 61
    1364:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    1368:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    136a:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    136e:	b8 2e       	mov	r11, r24
  data <<= 8;
    1370:	fd 2c       	mov	r15, r13
    1372:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
    1374:	8e e3       	ldi	r24, 0x3E	; 62
    1376:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    137a:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    137c:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    1380:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
    1382:	dd 24       	eor	r13, r13
    1384:	ec 28       	or	r14, r12
    1386:	fd 28       	or	r15, r13
    1388:	00 27       	eor	r16, r16
    138a:	f7 fc       	sbrc	r15, 7
    138c:	00 95       	com	r16
    138e:	10 2f       	mov	r17, r16
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	b8 01       	movw	r22, r16
    1394:	a7 01       	movw	r20, r14
    1396:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    139a:	bb 20       	and	r11, r11
    139c:	11 f4       	brne	.+4      	; 0x13a2 <MPU6050_Read_AccY+0x50>
    139e:	aa 20       	and	r10, r10
    13a0:	41 f0       	breq	.+16     	; 0x13b2 <MPU6050_Read_AccY+0x60>
    data=0;
	MPU6050.Error=0x02;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	90 93 a6 01 	sts	0x01A6, r25
    13aa:	80 93 a5 01 	sts	0x01A5, r24
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccY=data;
    13b2:	70 93 8e 01 	sts	0x018E, r23
    13b6:	60 93 8d 01 	sts	0x018D, r22
  return data;
}
    13ba:	cb 01       	movw	r24, r22
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	08 95       	ret

000013ce <MPU6050_Read_AccX>:
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    I2C_Write_Register(0x6B, 0x00);
  }
}

int MPU6050_Read_AccX(void){
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3B);
    13de:	8b e3       	ldi	r24, 0x3B	; 59
    13e0:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    13e4:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    13e6:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    13ea:	b8 2e       	mov	r11, r24
  data <<= 8;
    13ec:	fd 2c       	mov	r15, r13
    13ee:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
    13f0:	8c e3       	ldi	r24, 0x3C	; 60
    13f2:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    13f6:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    13f8:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Get_Error>
    13fc:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
    13fe:	dd 24       	eor	r13, r13
    1400:	ec 28       	or	r14, r12
    1402:	fd 28       	or	r15, r13
    1404:	00 27       	eor	r16, r16
    1406:	f7 fc       	sbrc	r15, 7
    1408:	00 95       	com	r16
    140a:	10 2f       	mov	r17, r16
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	b8 01       	movw	r22, r16
    1410:	a7 01       	movw	r20, r14
    1412:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    1416:	bb 20       	and	r11, r11
    1418:	11 f4       	brne	.+4      	; 0x141e <MPU6050_Read_AccX+0x50>
    141a:	aa 20       	and	r10, r10
    141c:	41 f0       	breq	.+16     	; 0x142e <MPU6050_Read_AccX+0x60>
    data=0;
	MPU6050.Error=0x01;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	90 93 a6 01 	sts	0x01A6, r25
    1426:	80 93 a5 01 	sts	0x01A5, r24
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccX=data;
    142e:	70 93 8c 01 	sts	0x018C, r23
    1432:	60 93 8b 01 	sts	0x018B, r22
  return data;
}
    1436:	cb 01       	movw	r24, r22
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	08 95       	ret

0000144a <MPU6050_Read_Acc>:
  MPU6050.Temp=data;
  return data;
}

void MPU6050_Read_Acc(void){
  if(MPU6050.Error==0){
    144a:	80 91 a5 01 	lds	r24, 0x01A5
    144e:	90 91 a6 01 	lds	r25, 0x01A6
    1452:	89 2b       	or	r24, r25
    1454:	11 f4       	brne	.+4      	; 0x145a <MPU6050_Read_Acc+0x10>
    MPU6050_Read_AccX();
    1456:	0e 94 e7 09 	call	0x13ce	; 0x13ce <MPU6050_Read_AccX>
  }
  if(MPU6050.Error==0){
    145a:	80 91 a5 01 	lds	r24, 0x01A5
    145e:	90 91 a6 01 	lds	r25, 0x01A6
    1462:	89 2b       	or	r24, r25
    1464:	11 f4       	brne	.+4      	; 0x146a <MPU6050_Read_Acc+0x20>
    MPU6050_Read_AccY();
    1466:	0e 94 a9 09 	call	0x1352	; 0x1352 <MPU6050_Read_AccY>
  }
  if(MPU6050.Error==0){
    146a:	80 91 a5 01 	lds	r24, 0x01A5
    146e:	90 91 a6 01 	lds	r25, 0x01A6
    1472:	89 2b       	or	r24, r25
    1474:	11 f4       	brne	.+4      	; 0x147a <MPU6050_Read_Acc+0x30>
    MPU6050_Read_AccZ();
    1476:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <MPU6050_Read_AccZ>
    147a:	08 95       	ret

0000147c <MPU6050_Read_Acc_Gyro>:
    MPU6050_Read_GyroZ();
  }
}

void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
    147c:	0e 94 25 0a 	call	0x144a	; 0x144a <MPU6050_Read_Acc>
  MPU6050_Read_Gyro();
    1480:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MPU6050_Read_Gyro>
}
    1484:	08 95       	ret

00001486 <MPU6050_Set_Mode_Active>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    1486:	8b e6       	ldi	r24, 0x6B	; 107
    1488:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
    I2C_Write_Register(0x6B, 0x40);
  }
}

void MPU6050_Set_Mode_Active(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    148c:	86 ff       	sbrs	r24, 6
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <MPU6050_Set_Mode_Active+0x12>
    I2C_Write_Register(0x6B, 0x00);
    1490:	8b e6       	ldi	r24, 0x6B	; 107
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write_Register>
    1498:	08 95       	ret

0000149a <MPU6050_Restart>:
  MPU6050.GyroYCal=MPU6050_Get_GyroY();
  MPU6050.GyroZCal=MPU6050_Get_GyroZ();
  
}

void MPU6050_Restart(void){
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
  I2C_Error_Clear_All();
    14a0:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Error_Clear_All>
int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}

int MPU6050_Get_Error(void){
  return MPU6050.Error;
    14a4:	f0 90 a5 01 	lds	r15, 0x01A5
}

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
    14a8:	10 92 a6 01 	sts	0x01A6, r1
    14ac:	10 92 a5 01 	sts	0x01A5, r1
    14b0:	00 e7       	ldi	r16, 0x70	; 112
    14b2:	17 e1       	ldi	r17, 0x17	; 23
    14b4:	c8 01       	movw	r24, r16
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <MPU6050_Restart+0x1c>
void MPU6050_Restart(void){
  I2C_Error_Clear_All();
  uint8_t temp=MPU6050_Get_Error();
  MPU6050_Error_Clear();
  _delay_ms(2);
  I2C_Stop();
    14ba:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Stop>
    14be:	c8 01       	movw	r24, r16
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <MPU6050_Restart+0x26>
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
    14c4:	0e 94 43 0a 	call	0x1486	; 0x1486 <MPU6050_Set_Mode_Active>
    14c8:	c8 01       	movw	r24, r16
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <MPU6050_Restart+0x30>
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
    14ce:	0e 94 3e 0a 	call	0x147c	; 0x147c <MPU6050_Read_Acc_Gyro>
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    14d2:	8b e6       	ldi	r24, 0x6B	; 107
    14d4:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
  I2C_Stop();
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
  if(MPU6050_Get_Mode()!=0){
    14d8:	88 23       	and	r24, r24
    14da:	21 f0       	breq	.+8      	; 0x14e4 <MPU6050_Restart+0x4a>
    MPU6050.Error=temp;
    14dc:	f0 92 a5 01 	sts	0x01A5, r15
    14e0:	10 92 a6 01 	sts	0x01A6, r1
  }
}
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	08 95       	ret

000014ec <MPU6050_Init>:
    MPU6050.Roll=0;
    return 0;
  }
}

void MPU6050_Init(void){
    14ec:	1f 93       	push	r17
  I2C_Init();
    14ee:	0e 94 84 02 	call	0x508	; 0x508 <I2C_Init>
    14f2:	80 e3       	ldi	r24, 0x30	; 48
    14f4:	95 e7       	ldi	r25, 0x75	; 117
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <MPU6050_Init+0xa>
  _delay_ms(10);
  MPU6050_Struct_Init();
    14fa:	0e 94 29 07 	call	0xe52	; 0xe52 <MPU6050_Struct_Init>
  MPU6050_Set_Mode_Active();
    14fe:	0e 94 43 0a 	call	0x1486	; 0x1486 <MPU6050_Set_Mode_Active>
  #ifdef LPF_EN
	LPF_Init();
    1502:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	62 e3       	ldi	r22, 0x32	; 50
    150a:	0e 94 65 06 	call	0xcca	; 0xcca <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	62 e3       	ldi	r22, 0x32	; 50
    1512:	0e 94 65 06 	call	0xcca	; 0xcca <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	62 e3       	ldi	r22, 0x32	; 50
    151a:	0e 94 65 06 	call	0xcca	; 0xcca <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	62 e3       	ldi	r22, 0x32	; 50
    1522:	0e 94 65 06 	call	0xcca	; 0xcca <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	62 e3       	ldi	r22, 0x32	; 50
    152a:	0e 94 65 06 	call	0xcca	; 0xcca <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	62 e3       	ldi	r22, 0x32	; 50
    1532:	0e 94 65 06 	call	0xcca	; 0xcca <LPF_Set_Alpha>
    1536:	88 ee       	ldi	r24, 0xE8	; 232
    1538:	93 e0       	ldi	r25, 0x03	; 3
    153a:	2c e2       	ldi	r18, 0x2C	; 44
    153c:	31 e0       	ldi	r19, 0x01	; 1
    153e:	f9 01       	movw	r30, r18
    1540:	31 97       	sbiw	r30, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <MPU6050_Init+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	d9 f7       	brne	.-10     	; 0x153e <MPU6050_Init+0x52>
    1548:	10 e0       	ldi	r17, 0x00	; 0
  #endif
  _delay_ms(100);
  for(uint8_t i=0;i<32;i++){
    MPU6050_Read_Acc_Gyro();
    154a:	0e 94 3e 0a 	call	0x147c	; 0x147c <MPU6050_Read_Acc_Gyro>
	LPF_Set_Alpha(3,LPF_EN);
	LPF_Set_Alpha(4,LPF_EN);
	LPF_Set_Alpha(5,LPF_EN);
  #endif
  _delay_ms(100);
  for(uint8_t i=0;i<32;i++){
    154e:	1f 5f       	subi	r17, 0xFF	; 255
    1550:	10 32       	cpi	r17, 0x20	; 32
    1552:	d9 f7       	brne	.-10     	; 0x154a <MPU6050_Init+0x5e>
    MPU6050_Read_Acc_Gyro();
  }
  MPU6050.GyroXCal=MPU6050_Get_GyroX();
    1554:	80 91 91 01 	lds	r24, 0x0191
    1558:	90 91 92 01 	lds	r25, 0x0192
    155c:	90 93 98 01 	sts	0x0198, r25
    1560:	80 93 97 01 	sts	0x0197, r24
  MPU6050.GyroYCal=MPU6050_Get_GyroY();
    1564:	80 91 93 01 	lds	r24, 0x0193
    1568:	90 91 94 01 	lds	r25, 0x0194
    156c:	90 93 9a 01 	sts	0x019A, r25
    1570:	80 93 99 01 	sts	0x0199, r24
  MPU6050.GyroZCal=MPU6050_Get_GyroZ();
    1574:	80 91 95 01 	lds	r24, 0x0195
    1578:	90 91 96 01 	lds	r25, 0x0196
    157c:	90 93 9c 01 	sts	0x019C, r25
    1580:	80 93 9b 01 	sts	0x019B, r24
  
}
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <MPU6050_Set_Mode_Sleep>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    1588:	8b e6       	ldi	r24, 0x6B	; 107
    158a:	0e 94 02 02 	call	0x404	; 0x404 <I2C_Read_Register>
}

void MPU6050_Set_Mode_Sleep(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0){
    158e:	86 fd       	sbrc	r24, 6
    1590:	04 c0       	rjmp	.+8      	; 0x159a <MPU6050_Set_Mode_Sleep+0x12>
    I2C_Write_Register(0x6B, 0x40);
    1592:	8b e6       	ldi	r24, 0x6B	; 107
    1594:	60 e4       	ldi	r22, 0x40	; 64
    1596:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write_Register>
    159a:	08 95       	ret

0000159c <atan>:
    159c:	df 93       	push	r29
    159e:	dd 27       	eor	r29, r29
    15a0:	b9 2f       	mov	r27, r25
    15a2:	bf 77       	andi	r27, 0x7F	; 127
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	16 16       	cp	r1, r22
    15aa:	17 06       	cpc	r1, r23
    15ac:	48 07       	cpc	r20, r24
    15ae:	5b 07       	cpc	r21, r27
    15b0:	10 f4       	brcc	.+4      	; 0x15b6 <atan+0x1a>
    15b2:	d9 2f       	mov	r29, r25
    15b4:	67 d1       	rcall	.+718    	; 0x1884 <inverse>
    15b6:	9f 93       	push	r25
    15b8:	8f 93       	push	r24
    15ba:	7f 93       	push	r23
    15bc:	6f 93       	push	r22
    15be:	cc d1       	rcall	.+920    	; 0x1958 <square>
    15c0:	e8 e6       	ldi	r30, 0x68	; 104
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	f2 d0       	rcall	.+484    	; 0x17aa <__fp_powser>
    15c6:	24 d1       	rcall	.+584    	; 0x1810 <__fp_round>
    15c8:	2f 91       	pop	r18
    15ca:	3f 91       	pop	r19
    15cc:	4f 91       	pop	r20
    15ce:	5f 91       	pop	r21
    15d0:	6c d1       	rcall	.+728    	; 0x18aa <__mulsf3x>
    15d2:	dd 23       	and	r29, r29
    15d4:	49 f0       	breq	.+18     	; 0x15e8 <atan+0x4c>
    15d6:	90 58       	subi	r25, 0x80	; 128
    15d8:	a2 ea       	ldi	r26, 0xA2	; 162
    15da:	2a ed       	ldi	r18, 0xDA	; 218
    15dc:	3f e0       	ldi	r19, 0x0F	; 15
    15de:	49 ec       	ldi	r20, 0xC9	; 201
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	d0 78       	andi	r29, 0x80	; 128
    15e4:	5d 27       	eor	r21, r29
    15e6:	c8 d1       	rcall	.+912    	; 0x1978 <__addsf3x>
    15e8:	df 91       	pop	r29
    15ea:	12 c1       	rjmp	.+548    	; 0x1810 <__fp_round>

000015ec <__divsf3>:
    15ec:	0c d0       	rcall	.+24     	; 0x1606 <__divsf3x>
    15ee:	10 c1       	rjmp	.+544    	; 0x1810 <__fp_round>
    15f0:	08 d1       	rcall	.+528    	; 0x1802 <__fp_pscB>
    15f2:	40 f0       	brcs	.+16     	; 0x1604 <__divsf3+0x18>
    15f4:	ff d0       	rcall	.+510    	; 0x17f4 <__fp_pscA>
    15f6:	30 f0       	brcs	.+12     	; 0x1604 <__divsf3+0x18>
    15f8:	21 f4       	brne	.+8      	; 0x1602 <__divsf3+0x16>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	19 f0       	breq	.+6      	; 0x1604 <__divsf3+0x18>
    15fe:	cc c0       	rjmp	.+408    	; 0x1798 <__fp_inf>
    1600:	51 11       	cpse	r21, r1
    1602:	3a c1       	rjmp	.+628    	; 0x1878 <__fp_szero>
    1604:	cf c0       	rjmp	.+414    	; 0x17a4 <__fp_nan>

00001606 <__divsf3x>:
    1606:	15 d1       	rcall	.+554    	; 0x1832 <__fp_split3>
    1608:	98 f3       	brcs	.-26     	; 0x15f0 <__divsf3+0x4>

0000160a <__divsf3_pse>:
    160a:	99 23       	and	r25, r25
    160c:	c9 f3       	breq	.-14     	; 0x1600 <__divsf3+0x14>
    160e:	55 23       	and	r21, r21
    1610:	b1 f3       	breq	.-20     	; 0x15fe <__divsf3+0x12>
    1612:	95 1b       	sub	r25, r21
    1614:	55 0b       	sbc	r21, r21
    1616:	bb 27       	eor	r27, r27
    1618:	aa 27       	eor	r26, r26
    161a:	62 17       	cp	r22, r18
    161c:	73 07       	cpc	r23, r19
    161e:	84 07       	cpc	r24, r20
    1620:	38 f0       	brcs	.+14     	; 0x1630 <__divsf3_pse+0x26>
    1622:	9f 5f       	subi	r25, 0xFF	; 255
    1624:	5f 4f       	sbci	r21, 0xFF	; 255
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	44 1f       	adc	r20, r20
    162c:	aa 1f       	adc	r26, r26
    162e:	a9 f3       	breq	.-22     	; 0x161a <__divsf3_pse+0x10>
    1630:	33 d0       	rcall	.+102    	; 0x1698 <__divsf3_pse+0x8e>
    1632:	0e 2e       	mov	r0, r30
    1634:	3a f0       	brmi	.+14     	; 0x1644 <__divsf3_pse+0x3a>
    1636:	e0 e8       	ldi	r30, 0x80	; 128
    1638:	30 d0       	rcall	.+96     	; 0x169a <__divsf3_pse+0x90>
    163a:	91 50       	subi	r25, 0x01	; 1
    163c:	50 40       	sbci	r21, 0x00	; 0
    163e:	e6 95       	lsr	r30
    1640:	00 1c       	adc	r0, r0
    1642:	ca f7       	brpl	.-14     	; 0x1636 <__divsf3_pse+0x2c>
    1644:	29 d0       	rcall	.+82     	; 0x1698 <__divsf3_pse+0x8e>
    1646:	fe 2f       	mov	r31, r30
    1648:	27 d0       	rcall	.+78     	; 0x1698 <__divsf3_pse+0x8e>
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	bb 1f       	adc	r27, r27
    1652:	26 17       	cp	r18, r22
    1654:	37 07       	cpc	r19, r23
    1656:	48 07       	cpc	r20, r24
    1658:	ab 07       	cpc	r26, r27
    165a:	b0 e8       	ldi	r27, 0x80	; 128
    165c:	09 f0       	breq	.+2      	; 0x1660 <__divsf3_pse+0x56>
    165e:	bb 0b       	sbc	r27, r27
    1660:	80 2d       	mov	r24, r0
    1662:	bf 01       	movw	r22, r30
    1664:	ff 27       	eor	r31, r31
    1666:	93 58       	subi	r25, 0x83	; 131
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
    166a:	2a f0       	brmi	.+10     	; 0x1676 <__divsf3_pse+0x6c>
    166c:	9e 3f       	cpi	r25, 0xFE	; 254
    166e:	51 05       	cpc	r21, r1
    1670:	68 f0       	brcs	.+26     	; 0x168c <__divsf3_pse+0x82>
    1672:	92 c0       	rjmp	.+292    	; 0x1798 <__fp_inf>
    1674:	01 c1       	rjmp	.+514    	; 0x1878 <__fp_szero>
    1676:	5f 3f       	cpi	r21, 0xFF	; 255
    1678:	ec f3       	brlt	.-6      	; 0x1674 <__divsf3_pse+0x6a>
    167a:	98 3e       	cpi	r25, 0xE8	; 232
    167c:	dc f3       	brlt	.-10     	; 0x1674 <__divsf3_pse+0x6a>
    167e:	86 95       	lsr	r24
    1680:	77 95       	ror	r23
    1682:	67 95       	ror	r22
    1684:	b7 95       	ror	r27
    1686:	f7 95       	ror	r31
    1688:	9f 5f       	subi	r25, 0xFF	; 255
    168a:	c9 f7       	brne	.-14     	; 0x167e <__divsf3_pse+0x74>
    168c:	88 0f       	add	r24, r24
    168e:	91 1d       	adc	r25, r1
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret
    1698:	e1 e0       	ldi	r30, 0x01	; 1
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	bb 1f       	adc	r27, r27
    16a2:	62 17       	cp	r22, r18
    16a4:	73 07       	cpc	r23, r19
    16a6:	84 07       	cpc	r24, r20
    16a8:	ba 07       	cpc	r27, r26
    16aa:	20 f0       	brcs	.+8      	; 0x16b4 <__divsf3_pse+0xaa>
    16ac:	62 1b       	sub	r22, r18
    16ae:	73 0b       	sbc	r23, r19
    16b0:	84 0b       	sbc	r24, r20
    16b2:	ba 0b       	sbc	r27, r26
    16b4:	ee 1f       	adc	r30, r30
    16b6:	88 f7       	brcc	.-30     	; 0x169a <__divsf3_pse+0x90>
    16b8:	e0 95       	com	r30
    16ba:	08 95       	ret

000016bc <__fixsfsi>:
    16bc:	04 d0       	rcall	.+8      	; 0x16c6 <__fixunssfsi>
    16be:	68 94       	set
    16c0:	b1 11       	cpse	r27, r1
    16c2:	da c0       	rjmp	.+436    	; 0x1878 <__fp_szero>
    16c4:	08 95       	ret

000016c6 <__fixunssfsi>:
    16c6:	bd d0       	rcall	.+378    	; 0x1842 <__fp_splitA>
    16c8:	88 f0       	brcs	.+34     	; 0x16ec <__fixunssfsi+0x26>
    16ca:	9f 57       	subi	r25, 0x7F	; 127
    16cc:	90 f0       	brcs	.+36     	; 0x16f2 <__fixunssfsi+0x2c>
    16ce:	b9 2f       	mov	r27, r25
    16d0:	99 27       	eor	r25, r25
    16d2:	b7 51       	subi	r27, 0x17	; 23
    16d4:	a0 f0       	brcs	.+40     	; 0x16fe <__fixunssfsi+0x38>
    16d6:	d1 f0       	breq	.+52     	; 0x170c <__fixunssfsi+0x46>
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	1a f0       	brmi	.+6      	; 0x16e8 <__fixunssfsi+0x22>
    16e2:	ba 95       	dec	r27
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__fixunssfsi+0x12>
    16e6:	12 c0       	rjmp	.+36     	; 0x170c <__fixunssfsi+0x46>
    16e8:	b1 30       	cpi	r27, 0x01	; 1
    16ea:	81 f0       	breq	.+32     	; 0x170c <__fixunssfsi+0x46>
    16ec:	c4 d0       	rcall	.+392    	; 0x1876 <__fp_zero>
    16ee:	b1 e0       	ldi	r27, 0x01	; 1
    16f0:	08 95       	ret
    16f2:	c1 c0       	rjmp	.+386    	; 0x1876 <__fp_zero>
    16f4:	67 2f       	mov	r22, r23
    16f6:	78 2f       	mov	r23, r24
    16f8:	88 27       	eor	r24, r24
    16fa:	b8 5f       	subi	r27, 0xF8	; 248
    16fc:	39 f0       	breq	.+14     	; 0x170c <__fixunssfsi+0x46>
    16fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1700:	cc f3       	brlt	.-14     	; 0x16f4 <__fixunssfsi+0x2e>
    1702:	86 95       	lsr	r24
    1704:	77 95       	ror	r23
    1706:	67 95       	ror	r22
    1708:	b3 95       	inc	r27
    170a:	d9 f7       	brne	.-10     	; 0x1702 <__fixunssfsi+0x3c>
    170c:	3e f4       	brtc	.+14     	; 0x171c <__fixunssfsi+0x56>
    170e:	90 95       	com	r25
    1710:	80 95       	com	r24
    1712:	70 95       	com	r23
    1714:	61 95       	neg	r22
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	8f 4f       	sbci	r24, 0xFF	; 255
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	08 95       	ret

0000171e <__floatunsisf>:
    171e:	e8 94       	clt
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <__floatsisf+0x12>

00001722 <__floatsisf>:
    1722:	97 fb       	bst	r25, 7
    1724:	3e f4       	brtc	.+14     	; 0x1734 <__floatsisf+0x12>
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	99 23       	and	r25, r25
    1736:	a9 f0       	breq	.+42     	; 0x1762 <__floatsisf+0x40>
    1738:	f9 2f       	mov	r31, r25
    173a:	96 e9       	ldi	r25, 0x96	; 150
    173c:	bb 27       	eor	r27, r27
    173e:	93 95       	inc	r25
    1740:	f6 95       	lsr	r31
    1742:	87 95       	ror	r24
    1744:	77 95       	ror	r23
    1746:	67 95       	ror	r22
    1748:	b7 95       	ror	r27
    174a:	f1 11       	cpse	r31, r1
    174c:	f8 cf       	rjmp	.-16     	; 0x173e <__floatsisf+0x1c>
    174e:	fa f4       	brpl	.+62     	; 0x178e <__floatsisf+0x6c>
    1750:	bb 0f       	add	r27, r27
    1752:	11 f4       	brne	.+4      	; 0x1758 <__floatsisf+0x36>
    1754:	60 ff       	sbrs	r22, 0
    1756:	1b c0       	rjmp	.+54     	; 0x178e <__floatsisf+0x6c>
    1758:	6f 5f       	subi	r22, 0xFF	; 255
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	16 c0       	rjmp	.+44     	; 0x178e <__floatsisf+0x6c>
    1762:	88 23       	and	r24, r24
    1764:	11 f0       	breq	.+4      	; 0x176a <__floatsisf+0x48>
    1766:	96 e9       	ldi	r25, 0x96	; 150
    1768:	11 c0       	rjmp	.+34     	; 0x178c <__floatsisf+0x6a>
    176a:	77 23       	and	r23, r23
    176c:	21 f0       	breq	.+8      	; 0x1776 <__floatsisf+0x54>
    176e:	9e e8       	ldi	r25, 0x8E	; 142
    1770:	87 2f       	mov	r24, r23
    1772:	76 2f       	mov	r23, r22
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <__floatsisf+0x5e>
    1776:	66 23       	and	r22, r22
    1778:	71 f0       	breq	.+28     	; 0x1796 <__floatsisf+0x74>
    177a:	96 e8       	ldi	r25, 0x86	; 134
    177c:	86 2f       	mov	r24, r22
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	2a f0       	brmi	.+10     	; 0x178e <__floatsisf+0x6c>
    1784:	9a 95       	dec	r25
    1786:	66 0f       	add	r22, r22
    1788:	77 1f       	adc	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	da f7       	brpl	.-10     	; 0x1784 <__floatsisf+0x62>
    178e:	88 0f       	add	r24, r24
    1790:	96 95       	lsr	r25
    1792:	87 95       	ror	r24
    1794:	97 f9       	bld	r25, 7
    1796:	08 95       	ret

00001798 <__fp_inf>:
    1798:	97 f9       	bld	r25, 7
    179a:	9f 67       	ori	r25, 0x7F	; 127
    179c:	80 e8       	ldi	r24, 0x80	; 128
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	08 95       	ret

000017a4 <__fp_nan>:
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	80 ec       	ldi	r24, 0xC0	; 192
    17a8:	08 95       	ret

000017aa <__fp_powser>:
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	1f 93       	push	r17
    17b0:	0f 93       	push	r16
    17b2:	ff 92       	push	r15
    17b4:	ef 92       	push	r14
    17b6:	df 92       	push	r13
    17b8:	7b 01       	movw	r14, r22
    17ba:	8c 01       	movw	r16, r24
    17bc:	68 94       	set
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <__fp_powser+0x20>
    17c0:	da 2e       	mov	r13, r26
    17c2:	ef 01       	movw	r28, r30
    17c4:	72 d0       	rcall	.+228    	; 0x18aa <__mulsf3x>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e8 94       	clt
    17ca:	a5 91       	lpm	r26, Z+
    17cc:	25 91       	lpm	r18, Z+
    17ce:	35 91       	lpm	r19, Z+
    17d0:	45 91       	lpm	r20, Z+
    17d2:	55 91       	lpm	r21, Z+
    17d4:	ae f3       	brts	.-22     	; 0x17c0 <__fp_powser+0x16>
    17d6:	ef 01       	movw	r28, r30
    17d8:	cf d0       	rcall	.+414    	; 0x1978 <__addsf3x>
    17da:	fe 01       	movw	r30, r28
    17dc:	97 01       	movw	r18, r14
    17de:	a8 01       	movw	r20, r16
    17e0:	da 94       	dec	r13
    17e2:	79 f7       	brne	.-34     	; 0x17c2 <__fp_powser+0x18>
    17e4:	df 90       	pop	r13
    17e6:	ef 90       	pop	r14
    17e8:	ff 90       	pop	r15
    17ea:	0f 91       	pop	r16
    17ec:	1f 91       	pop	r17
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <__fp_pscA>:
    17f4:	00 24       	eor	r0, r0
    17f6:	0a 94       	dec	r0
    17f8:	16 16       	cp	r1, r22
    17fa:	17 06       	cpc	r1, r23
    17fc:	18 06       	cpc	r1, r24
    17fe:	09 06       	cpc	r0, r25
    1800:	08 95       	ret

00001802 <__fp_pscB>:
    1802:	00 24       	eor	r0, r0
    1804:	0a 94       	dec	r0
    1806:	12 16       	cp	r1, r18
    1808:	13 06       	cpc	r1, r19
    180a:	14 06       	cpc	r1, r20
    180c:	05 06       	cpc	r0, r21
    180e:	08 95       	ret

00001810 <__fp_round>:
    1810:	09 2e       	mov	r0, r25
    1812:	03 94       	inc	r0
    1814:	00 0c       	add	r0, r0
    1816:	11 f4       	brne	.+4      	; 0x181c <__fp_round+0xc>
    1818:	88 23       	and	r24, r24
    181a:	52 f0       	brmi	.+20     	; 0x1830 <__fp_round+0x20>
    181c:	bb 0f       	add	r27, r27
    181e:	40 f4       	brcc	.+16     	; 0x1830 <__fp_round+0x20>
    1820:	bf 2b       	or	r27, r31
    1822:	11 f4       	brne	.+4      	; 0x1828 <__fp_round+0x18>
    1824:	60 ff       	sbrs	r22, 0
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <__fp_round+0x20>
    1828:	6f 5f       	subi	r22, 0xFF	; 255
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	08 95       	ret

00001832 <__fp_split3>:
    1832:	57 fd       	sbrc	r21, 7
    1834:	90 58       	subi	r25, 0x80	; 128
    1836:	44 0f       	add	r20, r20
    1838:	55 1f       	adc	r21, r21
    183a:	59 f0       	breq	.+22     	; 0x1852 <__fp_splitA+0x10>
    183c:	5f 3f       	cpi	r21, 0xFF	; 255
    183e:	71 f0       	breq	.+28     	; 0x185c <__fp_splitA+0x1a>
    1840:	47 95       	ror	r20

00001842 <__fp_splitA>:
    1842:	88 0f       	add	r24, r24
    1844:	97 fb       	bst	r25, 7
    1846:	99 1f       	adc	r25, r25
    1848:	61 f0       	breq	.+24     	; 0x1862 <__fp_splitA+0x20>
    184a:	9f 3f       	cpi	r25, 0xFF	; 255
    184c:	79 f0       	breq	.+30     	; 0x186c <__fp_splitA+0x2a>
    184e:	87 95       	ror	r24
    1850:	08 95       	ret
    1852:	12 16       	cp	r1, r18
    1854:	13 06       	cpc	r1, r19
    1856:	14 06       	cpc	r1, r20
    1858:	55 1f       	adc	r21, r21
    185a:	f2 cf       	rjmp	.-28     	; 0x1840 <__fp_split3+0xe>
    185c:	46 95       	lsr	r20
    185e:	f1 df       	rcall	.-30     	; 0x1842 <__fp_splitA>
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <__fp_splitA+0x30>
    1862:	16 16       	cp	r1, r22
    1864:	17 06       	cpc	r1, r23
    1866:	18 06       	cpc	r1, r24
    1868:	99 1f       	adc	r25, r25
    186a:	f1 cf       	rjmp	.-30     	; 0x184e <__fp_splitA+0xc>
    186c:	86 95       	lsr	r24
    186e:	71 05       	cpc	r23, r1
    1870:	61 05       	cpc	r22, r1
    1872:	08 94       	sec
    1874:	08 95       	ret

00001876 <__fp_zero>:
    1876:	e8 94       	clt

00001878 <__fp_szero>:
    1878:	bb 27       	eor	r27, r27
    187a:	66 27       	eor	r22, r22
    187c:	77 27       	eor	r23, r23
    187e:	cb 01       	movw	r24, r22
    1880:	97 f9       	bld	r25, 7
    1882:	08 95       	ret

00001884 <inverse>:
    1884:	9b 01       	movw	r18, r22
    1886:	ac 01       	movw	r20, r24
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	80 e8       	ldi	r24, 0x80	; 128
    188e:	9f e3       	ldi	r25, 0x3F	; 63
    1890:	ad ce       	rjmp	.-678    	; 0x15ec <__divsf3>

00001892 <__mulsf3>:
    1892:	0b d0       	rcall	.+22     	; 0x18aa <__mulsf3x>
    1894:	bd cf       	rjmp	.-134    	; 0x1810 <__fp_round>
    1896:	ae df       	rcall	.-164    	; 0x17f4 <__fp_pscA>
    1898:	28 f0       	brcs	.+10     	; 0x18a4 <__mulsf3+0x12>
    189a:	b3 df       	rcall	.-154    	; 0x1802 <__fp_pscB>
    189c:	18 f0       	brcs	.+6      	; 0x18a4 <__mulsf3+0x12>
    189e:	95 23       	and	r25, r21
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <__mulsf3+0x12>
    18a2:	7a cf       	rjmp	.-268    	; 0x1798 <__fp_inf>
    18a4:	7f cf       	rjmp	.-258    	; 0x17a4 <__fp_nan>
    18a6:	11 24       	eor	r1, r1
    18a8:	e7 cf       	rjmp	.-50     	; 0x1878 <__fp_szero>

000018aa <__mulsf3x>:
    18aa:	c3 df       	rcall	.-122    	; 0x1832 <__fp_split3>
    18ac:	a0 f3       	brcs	.-24     	; 0x1896 <__mulsf3+0x4>

000018ae <__mulsf3_pse>:
    18ae:	95 9f       	mul	r25, r21
    18b0:	d1 f3       	breq	.-12     	; 0x18a6 <__mulsf3+0x14>
    18b2:	95 0f       	add	r25, r21
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	55 1f       	adc	r21, r21
    18b8:	62 9f       	mul	r22, r18
    18ba:	f0 01       	movw	r30, r0
    18bc:	72 9f       	mul	r23, r18
    18be:	bb 27       	eor	r27, r27
    18c0:	f0 0d       	add	r31, r0
    18c2:	b1 1d       	adc	r27, r1
    18c4:	63 9f       	mul	r22, r19
    18c6:	aa 27       	eor	r26, r26
    18c8:	f0 0d       	add	r31, r0
    18ca:	b1 1d       	adc	r27, r1
    18cc:	aa 1f       	adc	r26, r26
    18ce:	64 9f       	mul	r22, r20
    18d0:	66 27       	eor	r22, r22
    18d2:	b0 0d       	add	r27, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	66 1f       	adc	r22, r22
    18d8:	82 9f       	mul	r24, r18
    18da:	22 27       	eor	r18, r18
    18dc:	b0 0d       	add	r27, r0
    18de:	a1 1d       	adc	r26, r1
    18e0:	62 1f       	adc	r22, r18
    18e2:	73 9f       	mul	r23, r19
    18e4:	b0 0d       	add	r27, r0
    18e6:	a1 1d       	adc	r26, r1
    18e8:	62 1f       	adc	r22, r18
    18ea:	83 9f       	mul	r24, r19
    18ec:	a0 0d       	add	r26, r0
    18ee:	61 1d       	adc	r22, r1
    18f0:	22 1f       	adc	r18, r18
    18f2:	74 9f       	mul	r23, r20
    18f4:	33 27       	eor	r19, r19
    18f6:	a0 0d       	add	r26, r0
    18f8:	61 1d       	adc	r22, r1
    18fa:	23 1f       	adc	r18, r19
    18fc:	84 9f       	mul	r24, r20
    18fe:	60 0d       	add	r22, r0
    1900:	21 1d       	adc	r18, r1
    1902:	82 2f       	mov	r24, r18
    1904:	76 2f       	mov	r23, r22
    1906:	6a 2f       	mov	r22, r26
    1908:	11 24       	eor	r1, r1
    190a:	9f 57       	subi	r25, 0x7F	; 127
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	8a f0       	brmi	.+34     	; 0x1932 <__mulsf3_pse+0x84>
    1910:	e1 f0       	breq	.+56     	; 0x194a <__mulsf3_pse+0x9c>
    1912:	88 23       	and	r24, r24
    1914:	4a f0       	brmi	.+18     	; 0x1928 <__mulsf3_pse+0x7a>
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	bb 1f       	adc	r27, r27
    191c:	66 1f       	adc	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	91 50       	subi	r25, 0x01	; 1
    1924:	50 40       	sbci	r21, 0x00	; 0
    1926:	a9 f7       	brne	.-22     	; 0x1912 <__mulsf3_pse+0x64>
    1928:	9e 3f       	cpi	r25, 0xFE	; 254
    192a:	51 05       	cpc	r21, r1
    192c:	70 f0       	brcs	.+28     	; 0x194a <__mulsf3_pse+0x9c>
    192e:	34 cf       	rjmp	.-408    	; 0x1798 <__fp_inf>
    1930:	a3 cf       	rjmp	.-186    	; 0x1878 <__fp_szero>
    1932:	5f 3f       	cpi	r21, 0xFF	; 255
    1934:	ec f3       	brlt	.-6      	; 0x1930 <__mulsf3_pse+0x82>
    1936:	98 3e       	cpi	r25, 0xE8	; 232
    1938:	dc f3       	brlt	.-10     	; 0x1930 <__mulsf3_pse+0x82>
    193a:	86 95       	lsr	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	b7 95       	ror	r27
    1942:	f7 95       	ror	r31
    1944:	e7 95       	ror	r30
    1946:	9f 5f       	subi	r25, 0xFF	; 255
    1948:	c1 f7       	brne	.-16     	; 0x193a <__mulsf3_pse+0x8c>
    194a:	fe 2b       	or	r31, r30
    194c:	88 0f       	add	r24, r24
    194e:	91 1d       	adc	r25, r1
    1950:	96 95       	lsr	r25
    1952:	87 95       	ror	r24
    1954:	97 f9       	bld	r25, 7
    1956:	08 95       	ret

00001958 <square>:
    1958:	9b 01       	movw	r18, r22
    195a:	ac 01       	movw	r20, r24
    195c:	9a cf       	rjmp	.-204    	; 0x1892 <__mulsf3>
    195e:	4a df       	rcall	.-364    	; 0x17f4 <__fp_pscA>
    1960:	30 f0       	brcs	.+12     	; 0x196e <square+0x16>
    1962:	4f df       	rcall	.-354    	; 0x1802 <__fp_pscB>
    1964:	20 f0       	brcs	.+8      	; 0x196e <square+0x16>
    1966:	31 f4       	brne	.+12     	; 0x1974 <square+0x1c>
    1968:	9f 3f       	cpi	r25, 0xFF	; 255
    196a:	11 f4       	brne	.+4      	; 0x1970 <square+0x18>
    196c:	1e f4       	brtc	.+6      	; 0x1974 <square+0x1c>
    196e:	1a cf       	rjmp	.-460    	; 0x17a4 <__fp_nan>
    1970:	0e f4       	brtc	.+2      	; 0x1974 <square+0x1c>
    1972:	e0 95       	com	r30
    1974:	e7 fb       	bst	r30, 7
    1976:	10 cf       	rjmp	.-480    	; 0x1798 <__fp_inf>

00001978 <__addsf3x>:
    1978:	e9 2f       	mov	r30, r25
    197a:	5b df       	rcall	.-330    	; 0x1832 <__fp_split3>
    197c:	80 f3       	brcs	.-32     	; 0x195e <square+0x6>
    197e:	ba 17       	cp	r27, r26
    1980:	62 07       	cpc	r22, r18
    1982:	73 07       	cpc	r23, r19
    1984:	84 07       	cpc	r24, r20
    1986:	95 07       	cpc	r25, r21
    1988:	18 f0       	brcs	.+6      	; 0x1990 <__addsf3x+0x18>
    198a:	71 f4       	brne	.+28     	; 0x19a8 <__addsf3x+0x30>
    198c:	9e f5       	brtc	.+102    	; 0x19f4 <__addsf3x+0x7c>
    198e:	73 cf       	rjmp	.-282    	; 0x1876 <__fp_zero>
    1990:	0e f4       	brtc	.+2      	; 0x1994 <__addsf3x+0x1c>
    1992:	e0 95       	com	r30
    1994:	0b 2e       	mov	r0, r27
    1996:	ba 2f       	mov	r27, r26
    1998:	a0 2d       	mov	r26, r0
    199a:	0b 01       	movw	r0, r22
    199c:	b9 01       	movw	r22, r18
    199e:	90 01       	movw	r18, r0
    19a0:	0c 01       	movw	r0, r24
    19a2:	ca 01       	movw	r24, r20
    19a4:	a0 01       	movw	r20, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	ff 27       	eor	r31, r31
    19aa:	59 1b       	sub	r21, r25
    19ac:	99 f0       	breq	.+38     	; 0x19d4 <__addsf3x+0x5c>
    19ae:	59 3f       	cpi	r21, 0xF9	; 249
    19b0:	50 f4       	brcc	.+20     	; 0x19c6 <__addsf3x+0x4e>
    19b2:	50 3e       	cpi	r21, 0xE0	; 224
    19b4:	68 f1       	brcs	.+90     	; 0x1a10 <__addsf3x+0x98>
    19b6:	1a 16       	cp	r1, r26
    19b8:	f0 40       	sbci	r31, 0x00	; 0
    19ba:	a2 2f       	mov	r26, r18
    19bc:	23 2f       	mov	r18, r19
    19be:	34 2f       	mov	r19, r20
    19c0:	44 27       	eor	r20, r20
    19c2:	58 5f       	subi	r21, 0xF8	; 248
    19c4:	f3 cf       	rjmp	.-26     	; 0x19ac <__addsf3x+0x34>
    19c6:	46 95       	lsr	r20
    19c8:	37 95       	ror	r19
    19ca:	27 95       	ror	r18
    19cc:	a7 95       	ror	r26
    19ce:	f0 40       	sbci	r31, 0x00	; 0
    19d0:	53 95       	inc	r21
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__addsf3x+0x4e>
    19d4:	7e f4       	brtc	.+30     	; 0x19f4 <__addsf3x+0x7c>
    19d6:	1f 16       	cp	r1, r31
    19d8:	ba 0b       	sbc	r27, r26
    19da:	62 0b       	sbc	r22, r18
    19dc:	73 0b       	sbc	r23, r19
    19de:	84 0b       	sbc	r24, r20
    19e0:	ba f0       	brmi	.+46     	; 0x1a10 <__addsf3x+0x98>
    19e2:	91 50       	subi	r25, 0x01	; 1
    19e4:	a1 f0       	breq	.+40     	; 0x1a0e <__addsf3x+0x96>
    19e6:	ff 0f       	add	r31, r31
    19e8:	bb 1f       	adc	r27, r27
    19ea:	66 1f       	adc	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	c2 f7       	brpl	.-16     	; 0x19e2 <__addsf3x+0x6a>
    19f2:	0e c0       	rjmp	.+28     	; 0x1a10 <__addsf3x+0x98>
    19f4:	ba 0f       	add	r27, r26
    19f6:	62 1f       	adc	r22, r18
    19f8:	73 1f       	adc	r23, r19
    19fa:	84 1f       	adc	r24, r20
    19fc:	48 f4       	brcc	.+18     	; 0x1a10 <__addsf3x+0x98>
    19fe:	87 95       	ror	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	b7 95       	ror	r27
    1a06:	f7 95       	ror	r31
    1a08:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <__addsf3x+0x96>
    1a0c:	b3 cf       	rjmp	.-154    	; 0x1974 <square+0x1c>
    1a0e:	93 95       	inc	r25
    1a10:	88 0f       	add	r24, r24
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__addsf3x+0x9e>
    1a14:	99 27       	eor	r25, r25
    1a16:	ee 0f       	add	r30, r30
    1a18:	97 95       	ror	r25
    1a1a:	87 95       	ror	r24
    1a1c:	08 95       	ret

00001a1e <__mulsi3>:
    1a1e:	62 9f       	mul	r22, r18
    1a20:	d0 01       	movw	r26, r0
    1a22:	73 9f       	mul	r23, r19
    1a24:	f0 01       	movw	r30, r0
    1a26:	82 9f       	mul	r24, r18
    1a28:	e0 0d       	add	r30, r0
    1a2a:	f1 1d       	adc	r31, r1
    1a2c:	64 9f       	mul	r22, r20
    1a2e:	e0 0d       	add	r30, r0
    1a30:	f1 1d       	adc	r31, r1
    1a32:	92 9f       	mul	r25, r18
    1a34:	f0 0d       	add	r31, r0
    1a36:	83 9f       	mul	r24, r19
    1a38:	f0 0d       	add	r31, r0
    1a3a:	74 9f       	mul	r23, r20
    1a3c:	f0 0d       	add	r31, r0
    1a3e:	65 9f       	mul	r22, r21
    1a40:	f0 0d       	add	r31, r0
    1a42:	99 27       	eor	r25, r25
    1a44:	72 9f       	mul	r23, r18
    1a46:	b0 0d       	add	r27, r0
    1a48:	e1 1d       	adc	r30, r1
    1a4a:	f9 1f       	adc	r31, r25
    1a4c:	63 9f       	mul	r22, r19
    1a4e:	b0 0d       	add	r27, r0
    1a50:	e1 1d       	adc	r30, r1
    1a52:	f9 1f       	adc	r31, r25
    1a54:	bd 01       	movw	r22, r26
    1a56:	cf 01       	movw	r24, r30
    1a58:	11 24       	eor	r1, r1
    1a5a:	08 95       	ret

00001a5c <__divmodhi4>:
    1a5c:	97 fb       	bst	r25, 7
    1a5e:	09 2e       	mov	r0, r25
    1a60:	07 26       	eor	r0, r23
    1a62:	0a d0       	rcall	.+20     	; 0x1a78 <__divmodhi4_neg1>
    1a64:	77 fd       	sbrc	r23, 7
    1a66:	04 d0       	rcall	.+8      	; 0x1a70 <__divmodhi4_neg2>
    1a68:	49 d0       	rcall	.+146    	; 0x1afc <__udivmodhi4>
    1a6a:	06 d0       	rcall	.+12     	; 0x1a78 <__divmodhi4_neg1>
    1a6c:	00 20       	and	r0, r0
    1a6e:	1a f4       	brpl	.+6      	; 0x1a76 <__divmodhi4_exit>

00001a70 <__divmodhi4_neg2>:
    1a70:	70 95       	com	r23
    1a72:	61 95       	neg	r22
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255

00001a76 <__divmodhi4_exit>:
    1a76:	08 95       	ret

00001a78 <__divmodhi4_neg1>:
    1a78:	f6 f7       	brtc	.-4      	; 0x1a76 <__divmodhi4_exit>
    1a7a:	90 95       	com	r25
    1a7c:	81 95       	neg	r24
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	08 95       	ret

00001a82 <__udivmodsi4>:
    1a82:	a1 e2       	ldi	r26, 0x21	; 33
    1a84:	1a 2e       	mov	r1, r26
    1a86:	aa 1b       	sub	r26, r26
    1a88:	bb 1b       	sub	r27, r27
    1a8a:	fd 01       	movw	r30, r26
    1a8c:	0d c0       	rjmp	.+26     	; 0x1aa8 <__udivmodsi4_ep>

00001a8e <__udivmodsi4_loop>:
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	bb 1f       	adc	r27, r27
    1a92:	ee 1f       	adc	r30, r30
    1a94:	ff 1f       	adc	r31, r31
    1a96:	a2 17       	cp	r26, r18
    1a98:	b3 07       	cpc	r27, r19
    1a9a:	e4 07       	cpc	r30, r20
    1a9c:	f5 07       	cpc	r31, r21
    1a9e:	20 f0       	brcs	.+8      	; 0x1aa8 <__udivmodsi4_ep>
    1aa0:	a2 1b       	sub	r26, r18
    1aa2:	b3 0b       	sbc	r27, r19
    1aa4:	e4 0b       	sbc	r30, r20
    1aa6:	f5 0b       	sbc	r31, r21

00001aa8 <__udivmodsi4_ep>:
    1aa8:	66 1f       	adc	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	88 1f       	adc	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	1a 94       	dec	r1
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <__udivmodsi4_loop>
    1ab4:	60 95       	com	r22
    1ab6:	70 95       	com	r23
    1ab8:	80 95       	com	r24
    1aba:	90 95       	com	r25
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	bd 01       	movw	r22, r26
    1ac2:	cf 01       	movw	r24, r30
    1ac4:	08 95       	ret

00001ac6 <__divmodsi4>:
    1ac6:	97 fb       	bst	r25, 7
    1ac8:	09 2e       	mov	r0, r25
    1aca:	05 26       	eor	r0, r21
    1acc:	0e d0       	rcall	.+28     	; 0x1aea <__divmodsi4_neg1>
    1ace:	57 fd       	sbrc	r21, 7
    1ad0:	04 d0       	rcall	.+8      	; 0x1ada <__divmodsi4_neg2>
    1ad2:	d7 df       	rcall	.-82     	; 0x1a82 <__udivmodsi4>
    1ad4:	0a d0       	rcall	.+20     	; 0x1aea <__divmodsi4_neg1>
    1ad6:	00 1c       	adc	r0, r0
    1ad8:	38 f4       	brcc	.+14     	; 0x1ae8 <__divmodsi4_exit>

00001ada <__divmodsi4_neg2>:
    1ada:	50 95       	com	r21
    1adc:	40 95       	com	r20
    1ade:	30 95       	com	r19
    1ae0:	21 95       	neg	r18
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae6:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae8 <__divmodsi4_exit>:
    1ae8:	08 95       	ret

00001aea <__divmodsi4_neg1>:
    1aea:	f6 f7       	brtc	.-4      	; 0x1ae8 <__divmodsi4_exit>
    1aec:	90 95       	com	r25
    1aee:	80 95       	com	r24
    1af0:	70 95       	com	r23
    1af2:	61 95       	neg	r22
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	8f 4f       	sbci	r24, 0xFF	; 255
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	08 95       	ret

00001afc <__udivmodhi4>:
    1afc:	aa 1b       	sub	r26, r26
    1afe:	bb 1b       	sub	r27, r27
    1b00:	51 e1       	ldi	r21, 0x11	; 17
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <__udivmodhi4_ep>

00001b04 <__udivmodhi4_loop>:
    1b04:	aa 1f       	adc	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	a6 17       	cp	r26, r22
    1b0a:	b7 07       	cpc	r27, r23
    1b0c:	10 f0       	brcs	.+4      	; 0x1b12 <__udivmodhi4_ep>
    1b0e:	a6 1b       	sub	r26, r22
    1b10:	b7 0b       	sbc	r27, r23

00001b12 <__udivmodhi4_ep>:
    1b12:	88 1f       	adc	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	5a 95       	dec	r21
    1b18:	a9 f7       	brne	.-22     	; 0x1b04 <__udivmodhi4_loop>
    1b1a:	80 95       	com	r24
    1b1c:	90 95       	com	r25
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	08 95       	ret

00001b24 <_exit>:
    1b24:	f8 94       	cli

00001b26 <__stop_program>:
    1b26:	ff cf       	rjmp	.-2      	; 0x1b26 <__stop_program>
