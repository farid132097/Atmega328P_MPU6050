
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001628  000016bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800122  00800122  000016de  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000095e  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020a1  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085a  00000000  00000000  0000417d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001810  00000000  00000000  000049d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c0  00000000  00000000  000061e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000942  00000000  00000000  000068a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ced  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00007ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e8 e2       	ldi	r30, 0x28	; 40
      aa:	f6 e1       	ldi	r31, 0x16	; 22
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a7 38       	cpi	r26, 0x87	; 135
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29

  DDRD  |= (1<<4);
      d8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      da:	5c 98       	cbi	0x0b, 4	; 11
  
  I2C_Init();
      dc:	0e 94 98 03 	call	0x730	; 0x730 <I2C_Init>
  debug_init();
      e0:	0e 94 23 07 	call	0xe46	; 0xe46 <debug_init>
  Servo_Init(50);
      e4:	62 e3       	ldi	r22, 0x32	; 50
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 25 08 	call	0x104a	; 0x104a <Servo_Init>
  debug_tx_text_nl("Debug Started");
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0e 94 9c 05 	call	0xb38	; 0xb38 <debug_tx_text_nl>
  I2C_Set_Mode_Active();
      f8:	0e 94 47 02 	call	0x48e	; 0x48e <I2C_Set_Mode_Active>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      fc:	cc e2       	ldi	r28, 0x2C	; 44
      fe:	d1 e0       	ldi	r29, 0x01	; 1
	debug_tx_number_cm(I2C_Read_Roll_Angle());
	
	debug_tx_nl();
	_delay_ms(2);*/
	
	Servo_Set_Angle(45);
     100:	8d e2       	ldi	r24, 0x2D	; 45
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 0c 08 	call	0x1018	; 0x1018 <Servo_Set_Angle>
     108:	80 e2       	ldi	r24, 0x20	; 32
     10a:	9e e4       	ldi	r25, 0x4E	; 78
     10c:	fe 01       	movw	r30, r28
     10e:	31 97       	sbiw	r30, 0x01	; 1
     110:	f1 f7       	brne	.-4      	; 0x10e <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     114:	d9 f7       	brne	.-10     	; 0x10c <main+0x38>
	_delay_ms(2000);
	Servo_Set_Angle(90);
     116:	8a e5       	ldi	r24, 0x5A	; 90
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 0c 08 	call	0x1018	; 0x1018 <Servo_Set_Angle>
     11e:	80 e2       	ldi	r24, 0x20	; 32
     120:	9e e4       	ldi	r25, 0x4E	; 78
     122:	fe 01       	movw	r30, r28
     124:	31 97       	sbiw	r30, 0x01	; 1
     126:	f1 f7       	brne	.-4      	; 0x124 <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     12a:	d9 f7       	brne	.-10     	; 0x122 <main+0x4e>
	_delay_ms(2000);
	Servo_Set_Angle(135);
     12c:	87 e8       	ldi	r24, 0x87	; 135
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 0c 08 	call	0x1018	; 0x1018 <Servo_Set_Angle>
     134:	80 e2       	ldi	r24, 0x20	; 32
     136:	9e e4       	ldi	r25, 0x4E	; 78
     138:	fe 01       	movw	r30, r28
     13a:	31 97       	sbiw	r30, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     140:	d9 f7       	brne	.-10     	; 0x138 <main+0x64>
	_delay_ms(2000);
	Servo_Set_Angle(180);
     142:	84 eb       	ldi	r24, 0xB4	; 180
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 0c 08 	call	0x1018	; 0x1018 <Servo_Set_Angle>
     14a:	80 e2       	ldi	r24, 0x20	; 32
     14c:	9e e4       	ldi	r25, 0x4E	; 78
     14e:	fe 01       	movw	r30, r28
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     156:	d9 f7       	brne	.-10     	; 0x14e <main+0x7a>
     158:	d3 cf       	rjmp	.-90     	; 0x100 <main+0x2c>

0000015a <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     15a:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     15e:	10 92 23 01 	sts	0x0123, r1
}
     162:	08 95       	ret

00000164 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     164:	80 e5       	ldi	r24, 0x50	; 80
     166:	8a 95       	dec	r24
     168:	f1 f7       	brne	.-4      	; 0x166 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     16a:	08 95       	ret

0000016c <I2C_Bit_Delay>:
     16c:	80 ea       	ldi	r24, 0xA0	; 160
     16e:	8a 95       	dec	r24
     170:	f1 f7       	brne	.-4      	; 0x16e <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     172:	08 95       	ret

00000174 <I2C_Guard_Delay>:
     174:	88 e0       	ldi	r24, 0x08	; 8
     176:	8a 95       	dec	r24
     178:	f1 f7       	brne	.-4      	; 0x176 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     17a:	08 95       	ret

0000017c <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	11 f4       	brne	.+4      	; 0x184 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     180:	3c 9a       	sbi	0x07, 4	; 7
     182:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     184:	3c 98       	cbi	0x07, 4	; 7
     186:	08 95       	ret

00000188 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	11 f4       	brne	.+4      	; 0x190 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     18c:	44 9a       	sbi	0x08, 4	; 8
     18e:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     190:	44 98       	cbi	0x08, 4	; 8
     192:	08 95       	ret

00000194 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	19 f4       	brne	.+6      	; 0x19e <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     198:	44 9a       	sbi	0x08, 4	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     19a:	3c 98       	cbi	0x07, 4	; 7
     19c:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     19e:	44 98       	cbi	0x08, 4	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1a0:	3c 9a       	sbi	0x07, 4	; 7
     1a2:	08 95       	ret

000001a4 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     1a4:	86 b1       	in	r24, 0x06	; 6
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	24 e0       	ldi	r18, 0x04	; 4
     1aa:	96 95       	lsr	r25
     1ac:	87 95       	ror	r24
     1ae:	2a 95       	dec	r18
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1b2:	81 70       	andi	r24, 0x01	; 1
     1b4:	08 95       	ret

000001b6 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	11 f4       	brne	.+4      	; 0x1be <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1ba:	3d 9a       	sbi	0x07, 5	; 7
     1bc:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1be:	3d 98       	cbi	0x07, 5	; 7
     1c0:	08 95       	ret

000001c2 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	11 f4       	brne	.+4      	; 0x1ca <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1c6:	45 9a       	sbi	0x08, 5	; 8
     1c8:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1ca:	45 98       	cbi	0x08, 5	; 8
     1cc:	08 95       	ret

000001ce <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	19 f4       	brne	.+6      	; 0x1d8 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1d2:	45 9a       	sbi	0x08, 5	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1d4:	3d 98       	cbi	0x07, 5	; 7
     1d6:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1d8:	45 98       	cbi	0x08, 5	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1da:	3d 9a       	sbi	0x07, 5	; 7
     1dc:	08 95       	ret

000001de <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     1de:	86 b1       	in	r24, 0x06	; 6
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	35 e0       	ldi	r19, 0x05	; 5
     1e4:	96 95       	lsr	r25
     1e6:	87 95       	ror	r24
     1e8:	3a 95       	dec	r19
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1ec:	81 70       	andi	r24, 0x01	; 1
     1ee:	08 95       	ret

000001f0 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1f0:	3c 98       	cbi	0x07, 4	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
}
     1f8:	08 95       	ret

000001fa <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1fa:	3d 98       	cbi	0x07, 5	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
}
     202:	08 95       	ret

00000204 <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     204:	3c 9a       	sbi	0x07, 4	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     206:	3d 98       	cbi	0x07, 5	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
}
     214:	08 95       	ret

00000216 <I2C_Start>:

void I2C_Start(void){
     216:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     224:	10 e5       	ldi	r17, 0x50	; 80
     226:	81 2f       	mov	r24, r17
     228:	8a 95       	dec	r24
     22a:	f1 f7       	brne	.-4      	; 0x228 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     232:	81 2f       	mov	r24, r17
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     23e:	1a 95       	dec	r17
     240:	f1 f7       	brne	.-4      	; 0x23e <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     242:	1f 91       	pop	r17
     244:	08 95       	ret

00000246 <I2C_Stop>:

void I2C_Stop(void){
     246:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     254:	10 e5       	ldi	r17, 0x50	; 80
     256:	81 2f       	mov	r24, r17
     258:	8a 95       	dec	r24
     25a:	f1 f7       	brne	.-4      	; 0x258 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     262:	81 2f       	mov	r24, r17
     264:	8a 95       	dec	r24
     266:	f1 f7       	brne	.-4      	; 0x264 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     26e:	1a 95       	dec	r17
     270:	f1 f7       	brne	.-4      	; 0x26e <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	08 2f       	mov	r16, r24
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	50 e5       	ldi	r21, 0x50	; 80
     284:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     286:	48 e0       	ldi	r20, 0x08	; 8
     288:	e4 2e       	mov	r14, r20
     28a:	07 ff       	sbrs	r16, 7
     28c:	02 c0       	rjmp	.+4      	; 0x292 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	01 c0       	rjmp	.+2      	; 0x294 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     298:	8f 2d       	mov	r24, r15
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     2a4:	8f 2d       	mov	r24, r15
     2a6:	8a 95       	dec	r24
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     2b0:	8e 2d       	mov	r24, r14
     2b2:	8a 95       	dec	r24
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     2b6:	1f 5f       	subi	r17, 0xFF	; 255
     2b8:	18 30       	cpi	r17, 0x08	; 8
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     2bc:	00 0f       	add	r16, r16
     2be:	e5 cf       	rjmp	.-54     	; 0x28a <I2C_Data_Send+0x14>
  }
}
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	08 95       	ret

000002ca <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	60 e5       	ldi	r22, 0x50	; 80
     2dc:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     2de:	11 0f       	add	r17, r17
     2e0:	8f 2d       	mov	r24, r15
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     2ec:	35 99       	sbic	0x06, 5	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     2ee:	11 60       	ori	r17, 0x01	; 1
     2f0:	8f 2d       	mov	r24, r15
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     2fc:	0f 5f       	subi	r16, 0xFF	; 255
     2fe:	08 30       	cpi	r16, 0x08	; 8
     300:	71 f7       	brne	.-36     	; 0x2de <I2C_Data_Receive+0x14>
     302:	80 e5       	ldi	r24, 0x50	; 80
     304:	8a 95       	dec	r24
     306:	f1 f7       	brne	.-4      	; 0x304 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
  return data;
}
     30e:	81 2f       	mov	r24, r17
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	08 95       	ret

00000318 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     318:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     320:	10 e5       	ldi	r17, 0x50	; 80
     322:	81 2f       	mov	r24, r17
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     32e:	1a 95       	dec	r17
     330:	f1 f7       	brne	.-4      	; 0x32e <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
}
     338:	1f 91       	pop	r17
     33a:	08 95       	ret

0000033c <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     33c:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     344:	10 e5       	ldi	r17, 0x50	; 80
     346:	81 2f       	mov	r24, r17
     348:	8a 95       	dec	r24
     34a:	f1 f7       	brne	.-4      	; 0x348 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     352:	1a 95       	dec	r17
     354:	f1 f7       	brne	.-4      	; 0x352 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
}
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret

00000360 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_SDA_Set_Output>
     36a:	00 e5       	ldi	r16, 0x50	; 80
     36c:	80 2f       	mov	r24, r16
     36e:	8a 95       	dec	r24
     370:	f1 f7       	brne	.-4      	; 0x36e <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     378:	16 b1       	in	r17, 0x06	; 6
     37a:	0a 95       	dec	r16
     37c:	f1 f7       	brne	.-4      	; 0x37a <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_SCL_Set_Output>
     384:	88 e0       	ldi	r24, 0x08	; 8
     386:	8a 95       	dec	r24
     388:	f1 f7       	brne	.-4      	; 0x386 <I2C_Get_Ack+0x26>
     38a:	12 95       	swap	r17
     38c:	16 95       	lsr	r17
     38e:	17 70       	andi	r17, 0x07	; 7
     390:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     392:	81 2f       	mov	r24, r17
     394:	81 70       	andi	r24, 0x01	; 1
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     39c:	1f 93       	push	r17
     39e:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     3a0:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start>
  I2C_Data_Send(address);
     3a4:	81 2f       	mov	r24, r17
     3a6:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     3aa:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
     3ae:	18 2f       	mov	r17, r24
  I2C_Stop();
     3b0:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Stop>
  return ack;
}
     3b4:	81 2f       	mov	r24, r17
     3b6:	1f 91       	pop	r17
     3b8:	08 95       	ret

000003ba <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     3ba:	1f 93       	push	r17
     3bc:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     3be:	81 2f       	mov	r24, r17
     3c0:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_Send_Device_Address>
	if(sts==1){
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	11 f4       	brne	.+4      	; 0x3cc <I2C_Get_Device_Address+0x12>
     3c8:	81 2f       	mov	r24, r17
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     3cc:	1f 5f       	subi	r17, 0xFF	; 255
     3ce:	1f 3f       	cpi	r17, 0xFF	; 255
     3d0:	b1 f7       	brne	.-20     	; 0x3be <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     3d2:	1f 91       	pop	r17
     3d4:	08 95       	ret

000003d6 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     3e2:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     3e6:	80 91 22 01 	lds	r24, 0x0122
     3ea:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     3ee:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
     3f2:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     3f4:	81 2f       	mov	r24, r17
     3f6:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     3fa:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
     3fe:	f8 2e       	mov	r15, r24
  I2C_Stop();
     400:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Stop>
  I2C_Start();
     404:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     408:	80 91 23 01 	lds	r24, 0x0123
     40c:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     410:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
     414:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     416:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Data_Receive>
     41a:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     41c:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
     420:	08 2f       	mov	r16, r24
  I2C_Stop();
     422:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Stop>
  if(sts == 0x07){
     426:	ff 0c       	add	r15, r15
     428:	11 0f       	add	r17, r17
     42a:	11 0f       	add	r17, r17
     42c:	1f 29       	or	r17, r15
     42e:	1e 29       	or	r17, r14
     430:	00 0f       	add	r16, r16
     432:	00 0f       	add	r16, r16
     434:	00 0f       	add	r16, r16
     436:	01 2b       	or	r16, r17
     438:	07 30       	cpi	r16, 0x07	; 7
     43a:	11 f0       	breq	.+4      	; 0x440 <I2C_Read_Register+0x6a>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	01 c0       	rjmp	.+2      	; 0x442 <I2C_Read_Register+0x6c>
     440:	8d 2d       	mov	r24, r13
    sts = data;
  }else{
    sts = 0xFF;
  }
  return sts;
}
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	08 95       	ret

0000044e <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	18 2f       	mov	r17, r24
     454:	06 2f       	mov	r16, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     456:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     45a:	80 91 22 01 	lds	r24, 0x0122
     45e:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     462:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
  I2C_Data_Send(reg);
     466:	81 2f       	mov	r24, r17
     468:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     46c:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>

  I2C_Data_Send(val);
     470:	80 2f       	mov	r24, r16
     472:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     476:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Get_Ack>
  I2C_Stop();
     47a:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Stop>
  if(sts == 0x07){
    sts = data;
  }else{
    sts = 0xFF;
  }
}
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <I2C_Set_Mode_Sleep>:
	LPF_Set_Alpha(5,LPF_EN);
  #endif
}

void I2C_Set_Mode_Sleep(void){
  I2C_Write_Register(0x6B, 0x40);
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	60 e4       	ldi	r22, 0x40	; 64
     488:	0e 94 27 02 	call	0x44e	; 0x44e <I2C_Write_Register>
}
     48c:	08 95       	ret

0000048e <I2C_Set_Mode_Active>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
     48e:	8b e6       	ldi	r24, 0x6B	; 107
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	0e 94 27 02 	call	0x44e	; 0x44e <I2C_Write_Register>
}
     496:	08 95       	ret

00000498 <I2C_Read_Temp>:
    data = LPF_Get_Filtered_Value(5, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Temp(void){
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
     49c:	81 e4       	ldi	r24, 0x41	; 65
     49e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     4a2:	18 2f       	mov	r17, r24
     4a4:	00 e0       	ldi	r16, 0x00	; 0
  data |= I2C_Read_Register(0x42);
     4a6:	82 e4       	ldi	r24, 0x42	; 66
     4a8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
  data /=340;
     4ae:	80 2b       	or	r24, r16
     4b0:	91 2b       	or	r25, r17
     4b2:	64 e5       	ldi	r22, 0x54	; 84
     4b4:	71 e0       	ldi	r23, 0x01	; 1
     4b6:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     4ba:	9b 01       	movw	r18, r22
     4bc:	2c 5d       	subi	r18, 0xDC	; 220
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
  data +=36;
  return data;
}
     4c0:	c9 01       	movw	r24, r18
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <I2C_Read_Gyro_Z>:
    data = LPF_Get_Filtered_Value(4, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Z(void){
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
     4d0:	87 e4       	ldi	r24, 0x47	; 71
     4d2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     4d6:	f8 2e       	mov	r15, r24
     4d8:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
     4da:	88 e4       	ldi	r24, 0x48	; 72
     4dc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	e8 2a       	or	r14, r24
     4e4:	f9 2a       	or	r15, r25
     4e6:	00 27       	eor	r16, r16
     4e8:	f7 fc       	sbrc	r15, 7
     4ea:	00 95       	com	r16
     4ec:	10 2f       	mov	r17, r16
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	b8 01       	movw	r22, r16
     4f2:	a7 01       	movw	r20, r14
     4f4:	0e 94 a4 07 	call	0xf48	; 0xf48 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     4f8:	cb 01       	movw	r24, r22
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	08 95       	ret

00000504 <I2C_Read_Gyro_Y>:
    data = LPF_Get_Filtered_Value(3, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Y(void){
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x45);
     50c:	85 e4       	ldi	r24, 0x45	; 69
     50e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     512:	f8 2e       	mov	r15, r24
     514:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
     516:	86 e4       	ldi	r24, 0x46	; 70
     518:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	e8 2a       	or	r14, r24
     520:	f9 2a       	or	r15, r25
     522:	00 27       	eor	r16, r16
     524:	f7 fc       	sbrc	r15, 7
     526:	00 95       	com	r16
     528:	10 2f       	mov	r17, r16
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	b8 01       	movw	r22, r16
     52e:	a7 01       	movw	r20, r14
     530:	0e 94 a4 07 	call	0xf48	; 0xf48 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     534:	cb 01       	movw	r24, r22
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	08 95       	ret

00000540 <I2C_Read_Gyro_X>:
    data = LPF_Get_Filtered_Value(2, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_X(void){
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
     548:	83 e4       	ldi	r24, 0x43	; 67
     54a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     54e:	f8 2e       	mov	r15, r24
     550:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
     552:	84 e4       	ldi	r24, 0x44	; 68
     554:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	e8 2a       	or	r14, r24
     55c:	f9 2a       	or	r15, r25
     55e:	00 27       	eor	r16, r16
     560:	f7 fc       	sbrc	r15, 7
     562:	00 95       	com	r16
     564:	10 2f       	mov	r17, r16
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	b8 01       	movw	r22, r16
     56a:	a7 01       	movw	r20, r14
     56c:	0e 94 a4 07 	call	0xf48	; 0xf48 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     570:	cb 01       	movw	r24, r22
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	08 95       	ret

0000057c <I2C_Read_Acc_Z>:
    data = LPF_Get_Filtered_Value(1, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Z(void){
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
     584:	8f e3       	ldi	r24, 0x3F	; 63
     586:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     58a:	f8 2e       	mov	r15, r24
     58c:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	e8 2a       	or	r14, r24
     598:	f9 2a       	or	r15, r25
     59a:	00 27       	eor	r16, r16
     59c:	f7 fc       	sbrc	r15, 7
     59e:	00 95       	com	r16
     5a0:	10 2f       	mov	r17, r16
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	b8 01       	movw	r22, r16
     5a6:	a7 01       	movw	r20, r14
     5a8:	0e 94 a4 07 	call	0xf48	; 0xf48 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5ac:	cb 01       	movw	r24, r22
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	08 95       	ret

000005b8 <I2C_Read_Acc_Y>:
    data = LPF_Get_Filtered_Value(0, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Y(void){
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
     5c0:	8d e3       	ldi	r24, 0x3D	; 61
     5c2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     5c6:	f8 2e       	mov	r15, r24
     5c8:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
     5ca:	8e e3       	ldi	r24, 0x3E	; 62
     5cc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	e8 2a       	or	r14, r24
     5d4:	f9 2a       	or	r15, r25
     5d6:	00 27       	eor	r16, r16
     5d8:	f7 fc       	sbrc	r15, 7
     5da:	00 95       	com	r16
     5dc:	10 2f       	mov	r17, r16
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	b8 01       	movw	r22, r16
     5e2:	a7 01       	movw	r20, r14
     5e4:	0e 94 a4 07 	call	0xf48	; 0xf48 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5e8:	cb 01       	movw	r24, r22
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <I2C_Read_Roll_Angle>:
  pitch*=10.0;
  pitch*=57.3;
  return (int)pitch;
}

int I2C_Read_Roll_Angle(void){
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
  float ay=I2C_Read_Acc_Y();
     604:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <I2C_Read_Acc_Y>
     608:	7c 01       	movw	r14, r24
  float az=I2C_Read_Acc_Z();
     60a:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Read_Acc_Z>
     60e:	5c 01       	movw	r10, r24
  float divy=ay/az;
  float roll = atan(divy);
     610:	00 27       	eor	r16, r16
     612:	f7 fc       	sbrc	r15, 7
     614:	00 95       	com	r16
     616:	10 2f       	mov	r17, r16
     618:	c8 01       	movw	r24, r16
     61a:	b7 01       	movw	r22, r14
     61c:	0e 94 11 09 	call	0x1222	; 0x1222 <__floatsisf>
     620:	7b 01       	movw	r14, r22
     622:	8c 01       	movw	r16, r24
     624:	cc 24       	eor	r12, r12
     626:	b7 fc       	sbrc	r11, 7
     628:	c0 94       	com	r12
     62a:	dc 2c       	mov	r13, r12
     62c:	c6 01       	movw	r24, r12
     62e:	b5 01       	movw	r22, r10
     630:	0e 94 11 09 	call	0x1222	; 0x1222 <__floatsisf>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c8 01       	movw	r24, r16
     63a:	b7 01       	movw	r22, r14
     63c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__divsf3>
     640:	0e 94 4e 08 	call	0x109c	; 0x109c <atan>
  roll*=10.0;
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e2       	ldi	r20, 0x20	; 32
     64a:	51 e4       	ldi	r21, 0x41	; 65
     64c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     650:	23 e3       	ldi	r18, 0x33	; 51
     652:	33 e3       	ldi	r19, 0x33	; 51
     654:	45 e6       	ldi	r20, 0x65	; 101
     656:	52 e4       	ldi	r21, 0x42	; 66
     658:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     65c:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fixsfsi>
  roll*=57.3;
  return (int)roll;
}
     660:	cb 01       	movw	r24, r22
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	08 95       	ret

00000674 <I2C_Read_Acc_X>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
}

int16_t I2C_Read_Acc_X(void){
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
     67c:	8b e3       	ldi	r24, 0x3B	; 59
     67e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  data <<= 8;
     682:	f8 2e       	mov	r15, r24
     684:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
     686:	8c e3       	ldi	r24, 0x3C	; 60
     688:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	e8 2a       	or	r14, r24
     690:	f9 2a       	or	r15, r25
     692:	00 27       	eor	r16, r16
     694:	f7 fc       	sbrc	r15, 7
     696:	00 95       	com	r16
     698:	10 2f       	mov	r17, r16
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	b8 01       	movw	r22, r16
     69e:	a7 01       	movw	r20, r14
     6a0:	0e 94 a4 07 	call	0xf48	; 0xf48 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     6a4:	cb 01       	movw	r24, r22
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <I2C_Read_Pitch_Angle>:
  data /=340;
  data +=36;
  return data;
}

int I2C_Read_Pitch_Angle(void){
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
  float ax=I2C_Read_Acc_X();
     6c0:	0e 94 3a 03 	call	0x674	; 0x674 <I2C_Read_Acc_X>
     6c4:	7c 01       	movw	r14, r24
  float az=I2C_Read_Acc_Z();
     6c6:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Read_Acc_Z>
     6ca:	5c 01       	movw	r10, r24
  float divx=ax/az;
  float pitch = atan(divx);
     6cc:	00 27       	eor	r16, r16
     6ce:	f7 fc       	sbrc	r15, 7
     6d0:	00 95       	com	r16
     6d2:	10 2f       	mov	r17, r16
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 11 09 	call	0x1222	; 0x1222 <__floatsisf>
     6dc:	7b 01       	movw	r14, r22
     6de:	8c 01       	movw	r16, r24
     6e0:	cc 24       	eor	r12, r12
     6e2:	b7 fc       	sbrc	r11, 7
     6e4:	c0 94       	com	r12
     6e6:	dc 2c       	mov	r13, r12
     6e8:	c6 01       	movw	r24, r12
     6ea:	b5 01       	movw	r22, r10
     6ec:	0e 94 11 09 	call	0x1222	; 0x1222 <__floatsisf>
     6f0:	9b 01       	movw	r18, r22
     6f2:	ac 01       	movw	r20, r24
     6f4:	c8 01       	movw	r24, r16
     6f6:	b7 01       	movw	r22, r14
     6f8:	0e 94 76 08 	call	0x10ec	; 0x10ec <__divsf3>
     6fc:	0e 94 4e 08 	call	0x109c	; 0x109c <atan>
  pitch*=10.0;
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e2       	ldi	r20, 0x20	; 32
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     70c:	23 e3       	ldi	r18, 0x33	; 51
     70e:	33 e3       	ldi	r19, 0x33	; 51
     710:	45 e6       	ldi	r20, 0x65	; 101
     712:	52 e4       	ldi	r21, 0x42	; 66
     714:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     718:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fixsfsi>
  pitch*=57.3;
  return (int)pitch;
}
     71c:	cb 01       	movw	r24, r22
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	08 95       	ret

00000730 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     730:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     734:	10 92 23 01 	sts	0x0123, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     738:	0e 94 02 01 	call	0x204	; 0x204 <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     73c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_Get_Device_Address>
     740:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 93 23 01 	sts	0x0123, r24
  #ifdef LPF_EN
	LPF_Init();
     74a:	0e 94 09 08 	call	0x1012	; 0x1012 <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	6a e0       	ldi	r22, 0x0A	; 10
     752:	0e 94 8a 07 	call	0xf14	; 0xf14 <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	6a e0       	ldi	r22, 0x0A	; 10
     75a:	0e 94 8a 07 	call	0xf14	; 0xf14 <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	6a e0       	ldi	r22, 0x0A	; 10
     762:	0e 94 8a 07 	call	0xf14	; 0xf14 <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	6a e0       	ldi	r22, 0x0A	; 10
     76a:	0e 94 8a 07 	call	0xf14	; 0xf14 <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	6a e0       	ldi	r22, 0x0A	; 10
     772:	0e 94 8a 07 	call	0xf14	; 0xf14 <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	6a e0       	ldi	r22, 0x0A	; 10
     77a:	0e 94 8a 07 	call	0xf14	; 0xf14 <LPF_Set_Alpha>
  #endif
}
     77e:	08 95       	ret

00000780 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     780:	10 92 24 01 	sts	0x0124, r1
  debug.datareg=0;
     784:	10 92 25 01 	sts	0x0125, r1
  debug.databsy=1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 26 01 	sts	0x0126, r24
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     792:	fc 01       	movw	r30, r24
     794:	ec 5d       	subi	r30, 0xDC	; 220
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	13 82       	std	Z+3, r1	; 0x03
     79a:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     79c:	80 32       	cpi	r24, 0x20	; 32
     79e:	91 05       	cpc	r25, r1
     7a0:	c1 f7       	brne	.-16     	; 0x792 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     7a2:	10 92 47 01 	sts	0x0147, r1
     7a6:	e8 e4       	ldi	r30, 0x48	; 72
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     7aa:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	e0 35       	cpi	r30, 0x50	; 80
     7b0:	f8 07       	cpc	r31, r24
     7b2:	d9 f7       	brne	.-10     	; 0x7aa <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     7b4:	10 82       	st	Z, r1
}
     7b6:	08 95       	ret

000007b8 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     7b8:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     7ba:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     7bc:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     7c4:	e8 e6       	ldi	r30, 0x68	; 104
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	82 60       	ori	r24, 0x02	; 2
     7cc:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     7ce:	ec e6       	ldi	r30, 0x6C	; 108
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	80 64       	ori	r24, 0x40	; 64
     7d6:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     7d8:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     7da:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     7dc:	08 95       	ret

000007de <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     7e2:	ee e6       	ldi	r30, 0x6E	; 110
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	10 82       	st	Z, r1
  TCNT0 =200;
     7e8:	88 ec       	ldi	r24, 0xC8	; 200
     7ea:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     7f4:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     7f6:	08 95       	ret

000007f8 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     7f8:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     7fc:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     7fe:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     800:	08 95       	ret

00000802 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     802:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     804:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     806:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     808:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     80a:	08 95       	ret

0000080c <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     80c:	5d 9a       	sbi	0x0b, 5	; 11
}
     80e:	08 95       	ret

00000810 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     810:	5d 98       	cbi	0x0b, 5	; 11
}
     812:	08 95       	ret

00000814 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	11 f4       	brne	.+4      	; 0x81c <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     818:	5d 9a       	sbi	0x0b, 5	; 11
     81a:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     81c:	5d 98       	cbi	0x0b, 5	; 11
     81e:	08 95       	ret

00000820 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     820:	86 b1       	in	r24, 0x06	; 6
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	26 e0       	ldi	r18, 0x06	; 6
     826:	96 95       	lsr	r25
     828:	87 95       	ror	r24
     82a:	2a 95       	dec	r18
     82c:	e1 f7       	brne	.-8      	; 0x826 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	08 95       	ret

00000832 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     832:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     834:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     83a:	86 b5       	in	r24, 0x26	; 38
     83c:	82 33       	cpi	r24, 0x32	; 50
     83e:	e8 f3       	brcs	.-6      	; 0x83a <debug_delay+0x8>
    TCNT0=0;
     840:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     842:	86 b5       	in	r24, 0x26	; 38
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	82 17       	cp	r24, r18
     848:	93 07       	cpc	r25, r19
     84a:	d8 f3       	brcs	.-10     	; 0x842 <debug_delay+0x10>
  TCCR0B=0;
     84c:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     84e:	08 95       	ret

00000850 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     850:	80 91 1c 01 	lds	r24, 0x011C
     854:	90 91 1d 01 	lds	r25, 0x011D
     858:	0e 94 19 04 	call	0x832	; 0x832 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     85c:	08 95       	ret

0000085e <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     85e:	80 91 1e 01 	lds	r24, 0x011E
     862:	90 91 1f 01 	lds	r25, 0x011F
     866:	0e 94 19 04 	call	0x832	; 0x832 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     86a:	08 95       	ret

0000086c <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     86c:	80 91 20 01 	lds	r24, 0x0120
     870:	90 91 21 01 	lds	r25, 0x0121
     874:	0e 94 19 04 	call	0x832	; 0x832 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     878:	08 95       	ret

0000087a <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	df 93       	push	r29
     886:	cf 93       	push	r28
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	2a 97       	sbiw	r28, 0x0a	; 10
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     898:	fe 01       	movw	r30, r28
     89a:	31 96       	adiw	r30, 0x01	; 1
     89c:	9a e0       	ldi	r25, 0x0A	; 10
     89e:	df 01       	movw	r26, r30
     8a0:	1d 92       	st	X+, r1
     8a2:	9a 95       	dec	r25
     8a4:	e9 f7       	brne	.-6      	; 0x8a0 <debug_tx_byte+0x26>
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	9a 87       	std	Y+10, r25	; 0x0a
     8aa:	fe 01       	movw	r30, r28
     8ac:	32 96       	adiw	r30, 0x02	; 2
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     8b2:	48 2f       	mov	r20, r24
     8b4:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     8b6:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     8b8:	ca 01       	movw	r24, r20
     8ba:	02 2e       	mov	r0, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <debug_tx_byte+0x48>
     8be:	95 95       	asr	r25
     8c0:	87 95       	ror	r24
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <debug_tx_byte+0x44>
     8c6:	80 ff       	sbrs	r24, 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <debug_tx_byte+0x54>
	  buf[i+1]=1;
     8ca:	60 83       	st	Z, r22
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     8ce:	10 82       	st	Z, r1
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     8d6:	28 30       	cpi	r18, 0x08	; 8
     8d8:	31 05       	cpc	r19, r1
     8da:	71 f7       	brne	.-36     	; 0x8b8 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     8dc:	df b6       	in	r13, 0x3f	; 63
  cli();
     8de:	f8 94       	cli
     8e0:	8e 01       	movw	r16, r28
     8e2:	0f 5f       	subi	r16, 0xFF	; 255
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     8e6:	3b e0       	ldi	r19, 0x0B	; 11
     8e8:	e3 2e       	mov	r14, r19
     8ea:	f1 2c       	mov	r15, r1
     8ec:	ec 0e       	add	r14, r28
     8ee:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     8f0:	f8 01       	movw	r30, r16
     8f2:	80 81       	ld	r24, Z
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	11 f4       	brne	.+4      	; 0x8fc <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     8f8:	5d 9a       	sbi	0x0b, 5	; 11
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     8fc:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     8fe:	0e 94 28 04 	call	0x850	; 0x850 <debug_delay_index_0>
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     906:	0e 15       	cp	r16, r14
     908:	1f 05       	cpc	r17, r15
     90a:	91 f7       	brne	.-28     	; 0x8f0 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     90c:	df be       	out	0x3f, r13	; 63
}
     90e:	2a 96       	adiw	r28, 0x0a	; 10
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	08 95       	ret

0000092a <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     930:	36 9b       	sbis	0x06, 6	; 6
     932:	21 c0       	rjmp	.+66     	; 0x976 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	17 c0       	rjmp	.+46     	; 0x966 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     938:	0e 94 2f 04 	call	0x85e	; 0x85e <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     93c:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     93e:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     940:	17 30       	cpi	r17, 0x07	; 7
     942:	09 f0       	breq	.+2      	; 0x946 <debug_rx_byte+0x1c>
	    val>>=1;
     944:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     946:	1f 5f       	subi	r17, 0xFF	; 255
     948:	18 30       	cpi	r17, 0x08	; 8
     94a:	b1 f7       	brne	.-20     	; 0x938 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     94c:	0e 94 2f 04 	call	0x85e	; 0x85e <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     950:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     952:	f6 fc       	sbrc	r15, 6
     954:	07 c0       	rjmp	.+14     	; 0x964 <debug_rx_byte+0x3a>
     956:	86 ff       	sbrs	r24, 6
     958:	05 c0       	rjmp	.+10     	; 0x964 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     95a:	00 93 25 01 	sts	0x0125, r16
	  debug.error=0x00;
     95e:	10 92 24 01 	sts	0x0124, r1
     962:	03 c0       	rjmp	.+6      	; 0x96a <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 24 01 	sts	0x0124, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     96a:	80 91 25 01 	lds	r24, 0x0125
}
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     976:	0e 94 36 04 	call	0x86c	; 0x86c <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     97a:	f6 b0       	in	r15, 0x06	; 6
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	db cf       	rjmp	.-74     	; 0x938 <debug_rx_byte+0xe>

00000982 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     982:	80 91 25 01 	lds	r24, 0x0125
}
     986:	08 95       	ret

00000988 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     988:	10 92 25 01 	sts	0x0125, r1
}
     98c:	08 95       	ret

0000098e <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     98e:	80 93 25 01 	sts	0x0125, r24
}
     992:	08 95       	ret

00000994 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     994:	bf 92       	push	r11
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	7b 01       	movw	r14, r22
     9a8:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	e8 16       	cp	r14, r24
     9ae:	f1 04       	cpc	r15, r1
     9b0:	01 05       	cpc	r16, r1
     9b2:	11 05       	cpc	r17, r1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <debug_tx_hex+0x24>
     9b6:	30 f4       	brcc	.+12     	; 0x9c4 <debug_tx_hex+0x30>
     9b8:	c8 e0       	ldi	r28, 0x08	; 8
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	c6 2e       	mov	r12, r22
     9c0:	d1 2c       	mov	r13, r1
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	08 07       	cpc	r16, r24
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	18 07       	cpc	r17, r24
     9d4:	30 f0       	brcs	.+12     	; 0x9e2 <debug_tx_hex+0x4e>
     9d6:	c0 e2       	ldi	r28, 0x20	; 32
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	58 e0       	ldi	r21, 0x08	; 8
     9dc:	c5 2e       	mov	r12, r21
     9de:	d1 2c       	mov	r13, r1
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <debug_tx_hex+0x58>
     9e2:	c0 e1       	ldi	r28, 0x10	; 16
     9e4:	d0 e0       	ldi	r29, 0x00	; 0
     9e6:	44 e0       	ldi	r20, 0x04	; 4
     9e8:	c4 2e       	mov	r12, r20
     9ea:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     9ec:	80 e3       	ldi	r24, 0x30	; 48
     9ee:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
  debug_tx_byte('x');
     9f2:	88 e7       	ldi	r24, 0x78	; 120
     9f4:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
     9f8:	bb 24       	eor	r11, r11
     9fa:	17 c0       	rjmp	.+46     	; 0xa2a <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     9fc:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     9fe:	d8 01       	movw	r26, r16
     a00:	c7 01       	movw	r24, r14
     a02:	0c 2e       	mov	r0, r28
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <debug_tx_hex+0x7a>
     a06:	b6 95       	lsr	r27
     a08:	a7 95       	ror	r26
     a0a:	97 95       	ror	r25
     a0c:	87 95       	ror	r24
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <debug_tx_hex+0x72>
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	8f 70       	andi	r24, 0x0F	; 15
     a16:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     a18:	8a 30       	cpi	r24, 0x0A	; 10
     a1a:	91 05       	cpc	r25, r1
     a1c:	10 f0       	brcs	.+4      	; 0xa22 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     a1e:	c7 96       	adiw	r24, 0x37	; 55
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     a22:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     a24:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     a28:	b3 94       	inc	r11
     a2a:	8b 2d       	mov	r24, r11
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	8c 15       	cp	r24, r12
     a30:	9d 05       	cpc	r25, r13
     a32:	20 f3       	brcs	.-56     	; 0x9fc <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	08 95       	ret

00000a48 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     a48:	af 92       	push	r10
     a4a:	bf 92       	push	r11
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	7b 01       	movw	r14, r22
     a5e:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     a60:	6f 3f       	cpi	r22, 0xFF	; 255
     a62:	71 05       	cpc	r23, r1
     a64:	81 05       	cpc	r24, r1
     a66:	91 05       	cpc	r25, r1
     a68:	09 f0       	breq	.+2      	; 0xa6c <debug_tx_bin+0x24>
     a6a:	18 f4       	brcc	.+6      	; 0xa72 <debug_tx_bin+0x2a>
     a6c:	f7 e0       	ldi	r31, 0x07	; 7
     a6e:	df 2e       	mov	r13, r31
     a70:	0d c0       	rjmp	.+26     	; 0xa8c <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     a72:	60 30       	cpi	r22, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	73 07       	cpc	r23, r19
     a78:	31 e0       	ldi	r19, 0x01	; 1
     a7a:	83 07       	cpc	r24, r19
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	93 07       	cpc	r25, r19
     a80:	18 f0       	brcs	.+6      	; 0xa88 <debug_tx_bin+0x40>
     a82:	ef e1       	ldi	r30, 0x1F	; 31
     a84:	de 2e       	mov	r13, r30
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <debug_tx_bin+0x44>
     a88:	7f e0       	ldi	r23, 0x0F	; 15
     a8a:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     a8c:	80 e3       	ldi	r24, 0x30	; 48
     a8e:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
  debug_tx_byte('b');
     a92:	82 e6       	ldi	r24, 0x62	; 98
     a94:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
     a98:	c0 e0       	ldi	r28, 0x00	; 0
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     a9c:	cd 2c       	mov	r12, r13
     a9e:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     aa0:	56 01       	movw	r10, r12
     aa2:	08 94       	sec
     aa4:	a1 1c       	adc	r10, r1
     aa6:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     aa8:	c6 01       	movw	r24, r12
     aaa:	8c 1b       	sub	r24, r28
     aac:	9d 0b       	sbc	r25, r29
     aae:	a8 01       	movw	r20, r16
     ab0:	97 01       	movw	r18, r14
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <debug_tx_bin+0x74>
     ab4:	56 95       	lsr	r21
     ab6:	47 95       	ror	r20
     ab8:	37 95       	ror	r19
     aba:	27 95       	ror	r18
     abc:	8a 95       	dec	r24
     abe:	d2 f7       	brpl	.-12     	; 0xab4 <debug_tx_bin+0x6c>
     ac0:	da 01       	movw	r26, r20
     ac2:	c9 01       	movw	r24, r18
     ac4:	81 70       	andi	r24, 0x01	; 1
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	89 2b       	or	r24, r25
     aca:	11 f0       	breq	.+4      	; 0xad0 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     acc:	81 e3       	ldi	r24, 0x31	; 49
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     ad0:	80 e3       	ldi	r24, 0x30	; 48
     ad2:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
     ad6:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     ad8:	ca 15       	cp	r28, r10
     ada:	db 05       	cpc	r29, r11
     adc:	29 f7       	brne	.-54     	; 0xaa8 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	08 95       	ret

00000af4 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     af4:	8d e0       	ldi	r24, 0x0D	; 13
     af6:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
  debug_tx_byte('\n');
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
}
     b00:	08 95       	ret

00000b02 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     b02:	80 e2       	ldi	r24, 0x20	; 32
     b04:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
}
     b08:	08 95       	ret

00000b0a <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     b0a:	8c e2       	ldi	r24, 0x2C	; 44
     b0c:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
}
     b10:	08 95       	ret

00000b12 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24
     b1a:	10 e0       	ldi	r17, 0x00	; 0
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     b1e:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
        i++;
     b22:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     b24:	fe 01       	movw	r30, r28
     b26:	e1 0f       	add	r30, r17
     b28:	f1 1d       	adc	r31, r1
     b2a:	80 81       	ld	r24, Z
     b2c:	88 23       	and	r24, r24
     b2e:	b9 f7       	brne	.-18     	; 0xb1e <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     b38:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_nl();
     b3c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <debug_tx_nl>
}
     b40:	08 95       	ret

00000b42 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     b42:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     b46:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
}
     b4a:	08 95       	ret

00000b4c <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     b4c:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_cm();
     b50:	0e 94 85 05 	call	0xb0a	; 0xb0a <debug_tx_cm>
}
     b54:	08 95       	ret

00000b56 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     b68:	61 15       	cp	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	81 05       	cpc	r24, r1
     b6e:	91 05       	cpc	r25, r1
     b70:	31 f4       	brne	.+12     	; 0xb7e <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     b72:	10 92 48 01 	sts	0x0148, r1
    debug.input_num_digits=1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 50 01 	sts	0x0150, r24
     b7c:	23 c0       	rjmp	.+70     	; 0xbc4 <debug_determine_digit_numbers+0x6e>
     b7e:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     b80:	0b 2d       	mov	r16, r11
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	0c 5d       	subi	r16, 0xDC	; 220
     b86:	1e 4f       	sbci	r17, 0xFE	; 254
     b88:	c7 01       	movw	r24, r14
     b8a:	b6 01       	movw	r22, r12
     b8c:	2a e0       	ldi	r18, 0x0A	; 10
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__udivmodsi4>
     b98:	f8 01       	movw	r30, r16
     b9a:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     b9c:	c7 01       	movw	r24, r14
     b9e:	b6 01       	movw	r22, r12
     ba0:	2a e0       	ldi	r18, 0x0A	; 10
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__udivmodsi4>
     bac:	c9 01       	movw	r24, r18
     bae:	da 01       	movw	r26, r20
     bb0:	6c 01       	movw	r12, r24
     bb2:	7d 01       	movw	r14, r26
      i++;
     bb4:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     bb6:	c1 14       	cp	r12, r1
     bb8:	d1 04       	cpc	r13, r1
     bba:	e1 04       	cpc	r14, r1
     bbc:	f1 04       	cpc	r15, r1
     bbe:	01 f7       	brne	.-64     	; 0xb80 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     bc0:	b0 92 50 01 	sts	0x0150, r11
  }
}
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	bf 90       	pop	r11
     bd2:	08 95       	ret

00000bd4 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     bd4:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     bd6:	10 91 50 01 	lds	r17, 0x0150
     bda:	09 c0       	rjmp	.+18     	; 0xbee <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     bdc:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     bde:	e1 2f       	mov	r30, r17
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ec 5d       	subi	r30, 0xDC	; 220
     be4:	fe 4f       	sbci	r31, 0xFE	; 254
     be6:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     be8:	80 5d       	subi	r24, 0xD0	; 208
     bea:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     bee:	11 23       	and	r17, r17
     bf0:	a9 f7       	brne	.-22     	; 0xbdc <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     bf2:	1f 91       	pop	r17
     bf4:	08 95       	ret

00000bf6 <debug_tx_number>:

void debug_tx_number(int32_t num){
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	7b 01       	movw	r14, r22
     c00:	8c 01       	movw	r16, r24
  if(num<0){
     c02:	97 ff       	sbrs	r25, 7
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <debug_tx_number+0x26>
    debug_tx_byte('-');
     c06:	8d e2       	ldi	r24, 0x2D	; 45
     c08:	0e 94 3d 04 	call	0x87a	; 0x87a <debug_tx_byte>
	num=-num;
     c0c:	10 95       	com	r17
     c0e:	00 95       	com	r16
     c10:	f0 94       	com	r15
     c12:	e0 94       	com	r14
     c14:	e1 1c       	adc	r14, r1
     c16:	f1 1c       	adc	r15, r1
     c18:	01 1d       	adc	r16, r1
     c1a:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     c1c:	c8 01       	movw	r24, r16
     c1e:	b7 01       	movw	r22, r14
     c20:	0e 94 ab 05 	call	0xb56	; 0xb56 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     c24:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <debug_tx_number_digits>
}
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	08 95       	ret

00000c32 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     c32:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <debug_tx_number>
  debug_tx_nl();
     c36:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <debug_tx_nl>
}
     c3a:	08 95       	ret

00000c3c <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     c3c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <debug_tx_number>
  debug_tx_sp();
     c40:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
}
     c44:	08 95       	ret

00000c46 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     c46:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <debug_tx_number>
  debug_tx_text(",");
     c4a:	8e e0       	ldi	r24, 0x0E	; 14
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
}
     c52:	08 95       	ret

00000c54 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     c54:	0e 94 ca 04 	call	0x994	; 0x994 <debug_tx_hex>
  debug_tx_nl();
     c58:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <debug_tx_nl>
}
     c5c:	08 95       	ret

00000c5e <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     c5e:	0e 94 ca 04 	call	0x994	; 0x994 <debug_tx_hex>
  debug_tx_sp();
     c62:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
}
     c66:	08 95       	ret

00000c68 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     c68:	0e 94 ca 04 	call	0x994	; 0x994 <debug_tx_hex>
  debug_tx_text(",");
     c6c:	8e e0       	ldi	r24, 0x0E	; 14
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
}
     c74:	08 95       	ret

00000c76 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     c76:	0e 94 24 05 	call	0xa48	; 0xa48 <debug_tx_bin>
  debug_tx_nl();
     c7a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <debug_tx_nl>
}
     c7e:	08 95       	ret

00000c80 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     c80:	0e 94 24 05 	call	0xa48	; 0xa48 <debug_tx_bin>
  debug_tx_sp();
     c84:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
}
     c88:	08 95       	ret

00000c8a <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     c8a:	0e 94 24 05 	call	0xa48	; 0xa48 <debug_tx_bin>
  debug_tx_text(",");
     c8e:	8e e0       	ldi	r24, 0x0E	; 14
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
}
     c96:	08 95       	ret

00000c98 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	7a 01       	movw	r14, r20
     ca2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     ca4:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     ca8:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_nl(num);
     cac:	c8 01       	movw	r24, r16
     cae:	b7 01       	movw	r22, r14
     cb0:	0e 94 19 06 	call	0xc32	; 0xc32 <debug_tx_number_nl>
}
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	7a 01       	movw	r14, r20
     cc8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     cca:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     cce:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_sp(num);
     cd2:	c8 01       	movw	r24, r16
     cd4:	b7 01       	movw	r22, r14
     cd6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <debug_tx_number_sp>
}
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	08 95       	ret

00000ce4 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	7a 01       	movw	r14, r20
     cee:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     cf0:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     cf4:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_cm(num);
     cf8:	c8 01       	movw	r24, r16
     cfa:	b7 01       	movw	r22, r14
     cfc:	0e 94 23 06 	call	0xc46	; 0xc46 <debug_tx_number_cm>
}
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	08 95       	ret

00000d0a <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	7a 01       	movw	r14, r20
     d14:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     d16:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     d1a:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	0e 94 2a 06 	call	0xc54	; 0xc54 <debug_tx_number_hex_nl>
}
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	7a 01       	movw	r14, r20
     d3a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     d3c:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     d40:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     d44:	c8 01       	movw	r24, r16
     d46:	b7 01       	movw	r22, r14
     d48:	0e 94 2f 06 	call	0xc5e	; 0xc5e <debug_tx_number_hex_sp>
}
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	08 95       	ret

00000d56 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	7a 01       	movw	r14, r20
     d60:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     d62:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     d66:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     d6a:	c8 01       	movw	r24, r16
     d6c:	b7 01       	movw	r22, r14
     d6e:	0e 94 34 06 	call	0xc68	; 0xc68 <debug_tx_number_hex_cm>
}
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret

00000d7c <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	7a 01       	movw	r14, r20
     d86:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     d88:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     d8c:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     d90:	c8 01       	movw	r24, r16
     d92:	b7 01       	movw	r22, r14
     d94:	0e 94 3b 06 	call	0xc76	; 0xc76 <debug_tx_number_bin_nl>
}
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	08 95       	ret

00000da2 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	7a 01       	movw	r14, r20
     dac:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     dae:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     db2:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     db6:	c8 01       	movw	r24, r16
     db8:	b7 01       	movw	r22, r14
     dba:	0e 94 40 06 	call	0xc80	; 0xc80 <debug_tx_number_bin_sp>
}
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	08 95       	ret

00000dc8 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	7a 01       	movw	r14, r20
     dd2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     dd4:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_text>
  debug_tx_sp();
     dd8:	0e 94 81 05 	call	0xb02	; 0xb02 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     ddc:	c8 01       	movw	r24, r16
     dde:	b7 01       	movw	r22, r14
     de0:	0e 94 45 06 	call	0xc8a	; 0xc8a <debug_tx_number_bin_cm>
}
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     dee:	e4 e2       	ldi	r30, 0x24	; 36
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	e8 0f       	add	r30, r24
     df4:	f1 1d       	adc	r31, r1
     df6:	83 81       	ldd	r24, Z+3	; 0x03
}
     df8:	08 95       	ret

00000dfa <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     dfa:	80 91 47 01 	lds	r24, 0x0147
}
     dfe:	08 95       	ret

00000e00 <debug_flush_buf>:

void debug_flush_buf(void){
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     e04:	fc 01       	movw	r30, r24
     e06:	ec 5d       	subi	r30, 0xDC	; 220
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	13 82       	std	Z+3, r1	; 0x03
     e0c:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     e0e:	80 32       	cpi	r24, 0x20	; 32
     e10:	91 05       	cpc	r25, r1
     e12:	c1 f7       	brne	.-16     	; 0xe04 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     e14:	10 92 47 01 	sts	0x0147, r1
}
     e18:	08 95       	ret

00000e1a <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     e1a:	80 91 26 01 	lds	r24, 0x0126
}
     e1e:	08 95       	ret

00000e20 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     e20:	80 91 26 01 	lds	r24, 0x0126
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     e24:	88 23       	and	r24, r24
     e26:	11 f0       	breq	.+4      	; 0xe2c <debug_data_available_rx_buf+0xc>
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     e2c:	80 91 47 01 	lds	r24, 0x0147
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	88 23       	and	r24, r24
     e34:	09 f4       	brne	.+2      	; 0xe38 <debug_data_available_rx_buf+0x18>
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     e3c:	89 2f       	mov	r24, r25
     e3e:	08 95       	ret

00000e40 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     e40:	80 91 47 01 	lds	r24, 0x0147
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     e44:	08 95       	ret

00000e46 <debug_init>:

void debug_init(void){
  debug_struct_init();
     e46:	0e 94 c0 03 	call	0x780	; 0x780 <debug_struct_init>
  debug_timings_init();
     e4a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <debug_timings_init>
  debug_gpio_init();
     e4e:	0e 94 01 04 	call	0x802	; 0x802 <debug_gpio_init>
}
     e52:	08 95       	ret

00000e54 <__vector_4>:


ISR(ISR_PCINT_VECT){
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
  debug.databsy=1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 26 01 	sts	0x0126, r24
  uint8_t val=debug_rx_byte();
     e7c:	0e 94 95 04 	call	0x92a	; 0x92a <debug_rx_byte>
     e80:	98 2f       	mov	r25, r24
  if(debug.error==0){
     e82:	80 91 24 01 	lds	r24, 0x0124
     e86:	88 23       	and	r24, r24
     e88:	99 f4       	brne	.+38     	; 0xeb0 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     e8a:	e0 91 47 01 	lds	r30, 0x0147
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	ec 5d       	subi	r30, 0xDC	; 220
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     e96:	80 91 47 01 	lds	r24, 0x0147
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	80 93 47 01 	sts	0x0147, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     ea0:	80 91 47 01 	lds	r24, 0x0147
     ea4:	81 32       	cpi	r24, 0x21	; 33
     ea6:	10 f0       	brcs	.+4      	; 0xeac <__vector_4+0x58>
	  debug.bufindex=0;
     ea8:	10 92 47 01 	sts	0x0147, r1
	}
    debug_timer_start();
     eac:	0e 94 ef 03 	call	0x7de	; 0x7de <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_16>:

ISR(TIMER_OVF_VECT){
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     edc:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     ee0:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     ee2:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     ee4:	10 92 26 01 	sts	0x0126, r1
}
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     ef2:	e1 e5       	ldi	r30, 0x51	; 81
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     ef6:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	12 82       	std	Z+2, r1	; 0x02
     efc:	13 82       	std	Z+3, r1	; 0x03
     efe:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     f00:	15 82       	std	Z+5, r1	; 0x05
     f02:	16 82       	std	Z+6, r1	; 0x06
     f04:	17 82       	std	Z+7, r1	; 0x07
     f06:	10 86       	std	Z+8, r1	; 0x08
     f08:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	e7 38       	cpi	r30, 0x87	; 135
     f0e:	f8 07       	cpc	r31, r24
     f10:	91 f7       	brne	.-28     	; 0xef6 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     f12:	08 95       	ret

00000f14 <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	fc 01       	movw	r30, r24
     f18:	23 e0       	ldi	r18, 0x03	; 3
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	2a 95       	dec	r18
     f20:	e1 f7       	brne	.-8      	; 0xf1a <LPF_Set_Alpha+0x6>
     f22:	e8 0f       	add	r30, r24
     f24:	f9 1f       	adc	r31, r25
     f26:	ef 5a       	subi	r30, 0xAF	; 175
     f28:	fe 4f       	sbci	r31, 0xFE	; 254
     f2a:	60 83       	st	Z, r22
}
     f2c:	08 95       	ret

00000f2e <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	fc 01       	movw	r30, r24
     f32:	33 e0       	ldi	r19, 0x03	; 3
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	3a 95       	dec	r19
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <LPF_Get_Alpha+0x6>
     f3c:	e8 0f       	add	r30, r24
     f3e:	f9 1f       	adc	r31, r25
     f40:	ef 5a       	subi	r30, 0xAF	; 175
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     f44:	80 81       	ld	r24, Z
     f46:	08 95       	ret

00000f48 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     f48:	2f 92       	push	r2
     f4a:	3f 92       	push	r3
     f4c:	4f 92       	push	r4
     f4e:	5f 92       	push	r5
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	1a 01       	movw	r2, r20
     f6a:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	6c 01       	movw	r12, r24
     f70:	53 e0       	ldi	r21, 0x03	; 3
     f72:	cc 0c       	add	r12, r12
     f74:	dd 1c       	adc	r13, r13
     f76:	5a 95       	dec	r21
     f78:	e1 f7       	brne	.-8      	; 0xf72 <LPF_Get_Filtered_Value+0x2a>
     f7a:	c8 0e       	add	r12, r24
     f7c:	d9 1e       	adc	r13, r25
     f7e:	81 e5       	ldi	r24, 0x51	; 81
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	c8 0e       	add	r12, r24
     f84:	d9 1e       	adc	r13, r25
     f86:	f6 01       	movw	r30, r12
     f88:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     f8a:	62 2e       	mov	r6, r18
     f8c:	77 24       	eor	r7, r7
     f8e:	88 24       	eor	r8, r8
     f90:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     f92:	64 e6       	ldi	r22, 0x64	; 100
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	62 1b       	sub	r22, r18
     f98:	71 09       	sbc	r23, r1
     f9a:	88 27       	eor	r24, r24
     f9c:	77 fd       	sbrc	r23, 7
     f9e:	80 95       	com	r24
     fa0:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     fa2:	45 e0       	ldi	r20, 0x05	; 5
     fa4:	a4 2e       	mov	r10, r20
     fa6:	b1 2c       	mov	r11, r1
     fa8:	ac 0c       	add	r10, r12
     faa:	bd 1c       	adc	r11, r13
     fac:	25 81       	ldd	r18, Z+5	; 0x05
     fae:	36 81       	ldd	r19, Z+6	; 0x06
     fb0:	47 81       	ldd	r20, Z+7	; 0x07
     fb2:	50 85       	ldd	r21, Z+8	; 0x08
     fb4:	0e 94 8f 0a 	call	0x151e	; 0x151e <__mulsi3>
     fb8:	7b 01       	movw	r14, r22
     fba:	8c 01       	movw	r16, r24
     fbc:	c2 01       	movw	r24, r4
     fbe:	b1 01       	movw	r22, r2
     fc0:	a4 01       	movw	r20, r8
     fc2:	93 01       	movw	r18, r6
     fc4:	0e 94 8f 0a 	call	0x151e	; 0x151e <__mulsi3>
     fc8:	e6 0e       	add	r14, r22
     fca:	f7 1e       	adc	r15, r23
     fcc:	08 1f       	adc	r16, r24
     fce:	19 1f       	adc	r17, r25
     fd0:	c8 01       	movw	r24, r16
     fd2:	b7 01       	movw	r22, r14
     fd4:	24 e6       	ldi	r18, 0x64	; 100
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__divmodsi4>
     fe0:	ca 01       	movw	r24, r20
     fe2:	f6 01       	movw	r30, r12
     fe4:	25 83       	std	Z+5, r18	; 0x05
     fe6:	f5 01       	movw	r30, r10
     fe8:	31 83       	std	Z+1, r19	; 0x01
     fea:	42 83       	std	Z+2, r20	; 0x02
     fec:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     fee:	b9 01       	movw	r22, r18
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	9f 90       	pop	r9
    1002:	8f 90       	pop	r8
    1004:	7f 90       	pop	r7
    1006:	6f 90       	pop	r6
    1008:	5f 90       	pop	r5
    100a:	4f 90       	pop	r4
    100c:	3f 90       	pop	r3
    100e:	2f 90       	pop	r2
    1010:	08 95       	ret

00001012 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
    1012:	0e 94 79 07 	call	0xef2	; 0xef2 <LPF_Struct_Init>
    1016:	08 95       	ret

00001018 <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
    1018:	a0 e0       	ldi	r26, 0x00	; 0
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	21 e4       	ldi	r18, 0x41	; 65
    1022:	33 e0       	ldi	r19, 0x03	; 3
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	0e 94 8f 0a 	call	0x151e	; 0x151e <__mulsi3>
    102c:	60 51       	subi	r22, 0x10	; 16
    102e:	76 4b       	sbci	r23, 0xB6	; 182
    1030:	8d 4f       	sbci	r24, 0xFD	; 253
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
    1034:	24 e6       	ldi	r18, 0x64	; 100
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__udivmodsi4>
    1040:	30 93 89 00 	sts	0x0089, r19
    1044:	20 93 88 00 	sts	0x0088, r18
    1048:	08 95       	ret

0000104a <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
    104a:	9b 01       	movw	r18, r22
    104c:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
    104e:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
    1050:	60 e6       	ldi	r22, 0x60	; 96
    1052:	73 ee       	ldi	r23, 0xE3	; 227
    1054:	86 e1       	ldi	r24, 0x16	; 22
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__udivmodsi4>
    105c:	21 50       	subi	r18, 0x01	; 1
    105e:	30 40       	sbci	r19, 0x00	; 0
    1060:	30 93 87 00 	sts	0x0087, r19
    1064:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
    1068:	8c ed       	ldi	r24, 0xDC	; 220
    106a:	95 e0       	ldi	r25, 0x05	; 5
    106c:	90 93 89 00 	sts	0x0089, r25
    1070:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
    1074:	82 e8       	ldi	r24, 0x82	; 130
    1076:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    107a:	8a e1       	ldi	r24, 0x1A	; 26
    107c:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 0c 08 	call	0x1018	; 0x1018 <Servo_Set_Angle>
    1088:	88 ee       	ldi	r24, 0xE8	; 232
    108a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    108c:	2c e2       	ldi	r18, 0x2C	; 44
    108e:	31 e0       	ldi	r19, 0x01	; 1
    1090:	f9 01       	movw	r30, r18
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <Servo_Init+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	d9 f7       	brne	.-10     	; 0x1090 <Servo_Init+0x46>
  _delay_ms(100);
}
    109a:	08 95       	ret

0000109c <atan>:
    109c:	df 93       	push	r29
    109e:	dd 27       	eor	r29, r29
    10a0:	b9 2f       	mov	r27, r25
    10a2:	bf 77       	andi	r27, 0x7F	; 127
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	48 07       	cpc	r20, r24
    10ae:	5b 07       	cpc	r21, r27
    10b0:	10 f4       	brcc	.+4      	; 0x10b6 <atan+0x1a>
    10b2:	d9 2f       	mov	r29, r25
    10b4:	67 d1       	rcall	.+718    	; 0x1384 <inverse>
    10b6:	9f 93       	push	r25
    10b8:	8f 93       	push	r24
    10ba:	7f 93       	push	r23
    10bc:	6f 93       	push	r22
    10be:	cc d1       	rcall	.+920    	; 0x1458 <square>
    10c0:	e8 e6       	ldi	r30, 0x68	; 104
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	f2 d0       	rcall	.+484    	; 0x12aa <__fp_powser>
    10c6:	24 d1       	rcall	.+584    	; 0x1310 <__fp_round>
    10c8:	2f 91       	pop	r18
    10ca:	3f 91       	pop	r19
    10cc:	4f 91       	pop	r20
    10ce:	5f 91       	pop	r21
    10d0:	6c d1       	rcall	.+728    	; 0x13aa <__mulsf3x>
    10d2:	dd 23       	and	r29, r29
    10d4:	49 f0       	breq	.+18     	; 0x10e8 <atan+0x4c>
    10d6:	90 58       	subi	r25, 0x80	; 128
    10d8:	a2 ea       	ldi	r26, 0xA2	; 162
    10da:	2a ed       	ldi	r18, 0xDA	; 218
    10dc:	3f e0       	ldi	r19, 0x0F	; 15
    10de:	49 ec       	ldi	r20, 0xC9	; 201
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	d0 78       	andi	r29, 0x80	; 128
    10e4:	5d 27       	eor	r21, r29
    10e6:	c8 d1       	rcall	.+912    	; 0x1478 <__addsf3x>
    10e8:	df 91       	pop	r29
    10ea:	12 c1       	rjmp	.+548    	; 0x1310 <__fp_round>

000010ec <__divsf3>:
    10ec:	0c d0       	rcall	.+24     	; 0x1106 <__divsf3x>
    10ee:	10 c1       	rjmp	.+544    	; 0x1310 <__fp_round>
    10f0:	08 d1       	rcall	.+528    	; 0x1302 <__fp_pscB>
    10f2:	40 f0       	brcs	.+16     	; 0x1104 <__divsf3+0x18>
    10f4:	ff d0       	rcall	.+510    	; 0x12f4 <__fp_pscA>
    10f6:	30 f0       	brcs	.+12     	; 0x1104 <__divsf3+0x18>
    10f8:	21 f4       	brne	.+8      	; 0x1102 <__divsf3+0x16>
    10fa:	5f 3f       	cpi	r21, 0xFF	; 255
    10fc:	19 f0       	breq	.+6      	; 0x1104 <__divsf3+0x18>
    10fe:	cc c0       	rjmp	.+408    	; 0x1298 <__fp_inf>
    1100:	51 11       	cpse	r21, r1
    1102:	3a c1       	rjmp	.+628    	; 0x1378 <__fp_szero>
    1104:	cf c0       	rjmp	.+414    	; 0x12a4 <__fp_nan>

00001106 <__divsf3x>:
    1106:	15 d1       	rcall	.+554    	; 0x1332 <__fp_split3>
    1108:	98 f3       	brcs	.-26     	; 0x10f0 <__divsf3+0x4>

0000110a <__divsf3_pse>:
    110a:	99 23       	and	r25, r25
    110c:	c9 f3       	breq	.-14     	; 0x1100 <__divsf3+0x14>
    110e:	55 23       	and	r21, r21
    1110:	b1 f3       	breq	.-20     	; 0x10fe <__divsf3+0x12>
    1112:	95 1b       	sub	r25, r21
    1114:	55 0b       	sbc	r21, r21
    1116:	bb 27       	eor	r27, r27
    1118:	aa 27       	eor	r26, r26
    111a:	62 17       	cp	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	84 07       	cpc	r24, r20
    1120:	38 f0       	brcs	.+14     	; 0x1130 <__divsf3_pse+0x26>
    1122:	9f 5f       	subi	r25, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	44 1f       	adc	r20, r20
    112c:	aa 1f       	adc	r26, r26
    112e:	a9 f3       	breq	.-22     	; 0x111a <__divsf3_pse+0x10>
    1130:	33 d0       	rcall	.+102    	; 0x1198 <__divsf3_pse+0x8e>
    1132:	0e 2e       	mov	r0, r30
    1134:	3a f0       	brmi	.+14     	; 0x1144 <__divsf3_pse+0x3a>
    1136:	e0 e8       	ldi	r30, 0x80	; 128
    1138:	30 d0       	rcall	.+96     	; 0x119a <__divsf3_pse+0x90>
    113a:	91 50       	subi	r25, 0x01	; 1
    113c:	50 40       	sbci	r21, 0x00	; 0
    113e:	e6 95       	lsr	r30
    1140:	00 1c       	adc	r0, r0
    1142:	ca f7       	brpl	.-14     	; 0x1136 <__divsf3_pse+0x2c>
    1144:	29 d0       	rcall	.+82     	; 0x1198 <__divsf3_pse+0x8e>
    1146:	fe 2f       	mov	r31, r30
    1148:	27 d0       	rcall	.+78     	; 0x1198 <__divsf3_pse+0x8e>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	bb 1f       	adc	r27, r27
    1152:	26 17       	cp	r18, r22
    1154:	37 07       	cpc	r19, r23
    1156:	48 07       	cpc	r20, r24
    1158:	ab 07       	cpc	r26, r27
    115a:	b0 e8       	ldi	r27, 0x80	; 128
    115c:	09 f0       	breq	.+2      	; 0x1160 <__divsf3_pse+0x56>
    115e:	bb 0b       	sbc	r27, r27
    1160:	80 2d       	mov	r24, r0
    1162:	bf 01       	movw	r22, r30
    1164:	ff 27       	eor	r31, r31
    1166:	93 58       	subi	r25, 0x83	; 131
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	2a f0       	brmi	.+10     	; 0x1176 <__divsf3_pse+0x6c>
    116c:	9e 3f       	cpi	r25, 0xFE	; 254
    116e:	51 05       	cpc	r21, r1
    1170:	68 f0       	brcs	.+26     	; 0x118c <__divsf3_pse+0x82>
    1172:	92 c0       	rjmp	.+292    	; 0x1298 <__fp_inf>
    1174:	01 c1       	rjmp	.+514    	; 0x1378 <__fp_szero>
    1176:	5f 3f       	cpi	r21, 0xFF	; 255
    1178:	ec f3       	brlt	.-6      	; 0x1174 <__divsf3_pse+0x6a>
    117a:	98 3e       	cpi	r25, 0xE8	; 232
    117c:	dc f3       	brlt	.-10     	; 0x1174 <__divsf3_pse+0x6a>
    117e:	86 95       	lsr	r24
    1180:	77 95       	ror	r23
    1182:	67 95       	ror	r22
    1184:	b7 95       	ror	r27
    1186:	f7 95       	ror	r31
    1188:	9f 5f       	subi	r25, 0xFF	; 255
    118a:	c9 f7       	brne	.-14     	; 0x117e <__divsf3_pse+0x74>
    118c:	88 0f       	add	r24, r24
    118e:	91 1d       	adc	r25, r1
    1190:	96 95       	lsr	r25
    1192:	87 95       	ror	r24
    1194:	97 f9       	bld	r25, 7
    1196:	08 95       	ret
    1198:	e1 e0       	ldi	r30, 0x01	; 1
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	bb 1f       	adc	r27, r27
    11a2:	62 17       	cp	r22, r18
    11a4:	73 07       	cpc	r23, r19
    11a6:	84 07       	cpc	r24, r20
    11a8:	ba 07       	cpc	r27, r26
    11aa:	20 f0       	brcs	.+8      	; 0x11b4 <__divsf3_pse+0xaa>
    11ac:	62 1b       	sub	r22, r18
    11ae:	73 0b       	sbc	r23, r19
    11b0:	84 0b       	sbc	r24, r20
    11b2:	ba 0b       	sbc	r27, r26
    11b4:	ee 1f       	adc	r30, r30
    11b6:	88 f7       	brcc	.-30     	; 0x119a <__divsf3_pse+0x90>
    11b8:	e0 95       	com	r30
    11ba:	08 95       	ret

000011bc <__fixsfsi>:
    11bc:	04 d0       	rcall	.+8      	; 0x11c6 <__fixunssfsi>
    11be:	68 94       	set
    11c0:	b1 11       	cpse	r27, r1
    11c2:	da c0       	rjmp	.+436    	; 0x1378 <__fp_szero>
    11c4:	08 95       	ret

000011c6 <__fixunssfsi>:
    11c6:	bd d0       	rcall	.+378    	; 0x1342 <__fp_splitA>
    11c8:	88 f0       	brcs	.+34     	; 0x11ec <__fixunssfsi+0x26>
    11ca:	9f 57       	subi	r25, 0x7F	; 127
    11cc:	90 f0       	brcs	.+36     	; 0x11f2 <__fixunssfsi+0x2c>
    11ce:	b9 2f       	mov	r27, r25
    11d0:	99 27       	eor	r25, r25
    11d2:	b7 51       	subi	r27, 0x17	; 23
    11d4:	a0 f0       	brcs	.+40     	; 0x11fe <__fixunssfsi+0x38>
    11d6:	d1 f0       	breq	.+52     	; 0x120c <__fixunssfsi+0x46>
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	1a f0       	brmi	.+6      	; 0x11e8 <__fixunssfsi+0x22>
    11e2:	ba 95       	dec	r27
    11e4:	c9 f7       	brne	.-14     	; 0x11d8 <__fixunssfsi+0x12>
    11e6:	12 c0       	rjmp	.+36     	; 0x120c <__fixunssfsi+0x46>
    11e8:	b1 30       	cpi	r27, 0x01	; 1
    11ea:	81 f0       	breq	.+32     	; 0x120c <__fixunssfsi+0x46>
    11ec:	c4 d0       	rcall	.+392    	; 0x1376 <__fp_zero>
    11ee:	b1 e0       	ldi	r27, 0x01	; 1
    11f0:	08 95       	ret
    11f2:	c1 c0       	rjmp	.+386    	; 0x1376 <__fp_zero>
    11f4:	67 2f       	mov	r22, r23
    11f6:	78 2f       	mov	r23, r24
    11f8:	88 27       	eor	r24, r24
    11fa:	b8 5f       	subi	r27, 0xF8	; 248
    11fc:	39 f0       	breq	.+14     	; 0x120c <__fixunssfsi+0x46>
    11fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1200:	cc f3       	brlt	.-14     	; 0x11f4 <__fixunssfsi+0x2e>
    1202:	86 95       	lsr	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b3 95       	inc	r27
    120a:	d9 f7       	brne	.-10     	; 0x1202 <__fixunssfsi+0x3c>
    120c:	3e f4       	brtc	.+14     	; 0x121c <__fixunssfsi+0x56>
    120e:	90 95       	com	r25
    1210:	80 95       	com	r24
    1212:	70 95       	com	r23
    1214:	61 95       	neg	r22
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <__floatunsisf>:
    121e:	e8 94       	clt
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <__floatsisf+0x12>

00001222 <__floatsisf>:
    1222:	97 fb       	bst	r25, 7
    1224:	3e f4       	brtc	.+14     	; 0x1234 <__floatsisf+0x12>
    1226:	90 95       	com	r25
    1228:	80 95       	com	r24
    122a:	70 95       	com	r23
    122c:	61 95       	neg	r22
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	99 23       	and	r25, r25
    1236:	a9 f0       	breq	.+42     	; 0x1262 <__floatsisf+0x40>
    1238:	f9 2f       	mov	r31, r25
    123a:	96 e9       	ldi	r25, 0x96	; 150
    123c:	bb 27       	eor	r27, r27
    123e:	93 95       	inc	r25
    1240:	f6 95       	lsr	r31
    1242:	87 95       	ror	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f1 11       	cpse	r31, r1
    124c:	f8 cf       	rjmp	.-16     	; 0x123e <__floatsisf+0x1c>
    124e:	fa f4       	brpl	.+62     	; 0x128e <__floatsisf+0x6c>
    1250:	bb 0f       	add	r27, r27
    1252:	11 f4       	brne	.+4      	; 0x1258 <__floatsisf+0x36>
    1254:	60 ff       	sbrs	r22, 0
    1256:	1b c0       	rjmp	.+54     	; 0x128e <__floatsisf+0x6c>
    1258:	6f 5f       	subi	r22, 0xFF	; 255
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	8f 4f       	sbci	r24, 0xFF	; 255
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	16 c0       	rjmp	.+44     	; 0x128e <__floatsisf+0x6c>
    1262:	88 23       	and	r24, r24
    1264:	11 f0       	breq	.+4      	; 0x126a <__floatsisf+0x48>
    1266:	96 e9       	ldi	r25, 0x96	; 150
    1268:	11 c0       	rjmp	.+34     	; 0x128c <__floatsisf+0x6a>
    126a:	77 23       	and	r23, r23
    126c:	21 f0       	breq	.+8      	; 0x1276 <__floatsisf+0x54>
    126e:	9e e8       	ldi	r25, 0x8E	; 142
    1270:	87 2f       	mov	r24, r23
    1272:	76 2f       	mov	r23, r22
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <__floatsisf+0x5e>
    1276:	66 23       	and	r22, r22
    1278:	71 f0       	breq	.+28     	; 0x1296 <__floatsisf+0x74>
    127a:	96 e8       	ldi	r25, 0x86	; 134
    127c:	86 2f       	mov	r24, r22
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	2a f0       	brmi	.+10     	; 0x128e <__floatsisf+0x6c>
    1284:	9a 95       	dec	r25
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	da f7       	brpl	.-10     	; 0x1284 <__floatsisf+0x62>
    128e:	88 0f       	add	r24, r24
    1290:	96 95       	lsr	r25
    1292:	87 95       	ror	r24
    1294:	97 f9       	bld	r25, 7
    1296:	08 95       	ret

00001298 <__fp_inf>:
    1298:	97 f9       	bld	r25, 7
    129a:	9f 67       	ori	r25, 0x7F	; 127
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <__fp_nan>:
    12a4:	9f ef       	ldi	r25, 0xFF	; 255
    12a6:	80 ec       	ldi	r24, 0xC0	; 192
    12a8:	08 95       	ret

000012aa <__fp_powser>:
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	1f 93       	push	r17
    12b0:	0f 93       	push	r16
    12b2:	ff 92       	push	r15
    12b4:	ef 92       	push	r14
    12b6:	df 92       	push	r13
    12b8:	7b 01       	movw	r14, r22
    12ba:	8c 01       	movw	r16, r24
    12bc:	68 94       	set
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <__fp_powser+0x20>
    12c0:	da 2e       	mov	r13, r26
    12c2:	ef 01       	movw	r28, r30
    12c4:	72 d0       	rcall	.+228    	; 0x13aa <__mulsf3x>
    12c6:	fe 01       	movw	r30, r28
    12c8:	e8 94       	clt
    12ca:	a5 91       	lpm	r26, Z+
    12cc:	25 91       	lpm	r18, Z+
    12ce:	35 91       	lpm	r19, Z+
    12d0:	45 91       	lpm	r20, Z+
    12d2:	55 91       	lpm	r21, Z+
    12d4:	ae f3       	brts	.-22     	; 0x12c0 <__fp_powser+0x16>
    12d6:	ef 01       	movw	r28, r30
    12d8:	cf d0       	rcall	.+414    	; 0x1478 <__addsf3x>
    12da:	fe 01       	movw	r30, r28
    12dc:	97 01       	movw	r18, r14
    12de:	a8 01       	movw	r20, r16
    12e0:	da 94       	dec	r13
    12e2:	79 f7       	brne	.-34     	; 0x12c2 <__fp_powser+0x18>
    12e4:	df 90       	pop	r13
    12e6:	ef 90       	pop	r14
    12e8:	ff 90       	pop	r15
    12ea:	0f 91       	pop	r16
    12ec:	1f 91       	pop	r17
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <__fp_pscA>:
    12f4:	00 24       	eor	r0, r0
    12f6:	0a 94       	dec	r0
    12f8:	16 16       	cp	r1, r22
    12fa:	17 06       	cpc	r1, r23
    12fc:	18 06       	cpc	r1, r24
    12fe:	09 06       	cpc	r0, r25
    1300:	08 95       	ret

00001302 <__fp_pscB>:
    1302:	00 24       	eor	r0, r0
    1304:	0a 94       	dec	r0
    1306:	12 16       	cp	r1, r18
    1308:	13 06       	cpc	r1, r19
    130a:	14 06       	cpc	r1, r20
    130c:	05 06       	cpc	r0, r21
    130e:	08 95       	ret

00001310 <__fp_round>:
    1310:	09 2e       	mov	r0, r25
    1312:	03 94       	inc	r0
    1314:	00 0c       	add	r0, r0
    1316:	11 f4       	brne	.+4      	; 0x131c <__fp_round+0xc>
    1318:	88 23       	and	r24, r24
    131a:	52 f0       	brmi	.+20     	; 0x1330 <__fp_round+0x20>
    131c:	bb 0f       	add	r27, r27
    131e:	40 f4       	brcc	.+16     	; 0x1330 <__fp_round+0x20>
    1320:	bf 2b       	or	r27, r31
    1322:	11 f4       	brne	.+4      	; 0x1328 <__fp_round+0x18>
    1324:	60 ff       	sbrs	r22, 0
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <__fp_round+0x20>
    1328:	6f 5f       	subi	r22, 0xFF	; 255
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__fp_split3>:
    1332:	57 fd       	sbrc	r21, 7
    1334:	90 58       	subi	r25, 0x80	; 128
    1336:	44 0f       	add	r20, r20
    1338:	55 1f       	adc	r21, r21
    133a:	59 f0       	breq	.+22     	; 0x1352 <__fp_splitA+0x10>
    133c:	5f 3f       	cpi	r21, 0xFF	; 255
    133e:	71 f0       	breq	.+28     	; 0x135c <__fp_splitA+0x1a>
    1340:	47 95       	ror	r20

00001342 <__fp_splitA>:
    1342:	88 0f       	add	r24, r24
    1344:	97 fb       	bst	r25, 7
    1346:	99 1f       	adc	r25, r25
    1348:	61 f0       	breq	.+24     	; 0x1362 <__fp_splitA+0x20>
    134a:	9f 3f       	cpi	r25, 0xFF	; 255
    134c:	79 f0       	breq	.+30     	; 0x136c <__fp_splitA+0x2a>
    134e:	87 95       	ror	r24
    1350:	08 95       	ret
    1352:	12 16       	cp	r1, r18
    1354:	13 06       	cpc	r1, r19
    1356:	14 06       	cpc	r1, r20
    1358:	55 1f       	adc	r21, r21
    135a:	f2 cf       	rjmp	.-28     	; 0x1340 <__fp_split3+0xe>
    135c:	46 95       	lsr	r20
    135e:	f1 df       	rcall	.-30     	; 0x1342 <__fp_splitA>
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <__fp_splitA+0x30>
    1362:	16 16       	cp	r1, r22
    1364:	17 06       	cpc	r1, r23
    1366:	18 06       	cpc	r1, r24
    1368:	99 1f       	adc	r25, r25
    136a:	f1 cf       	rjmp	.-30     	; 0x134e <__fp_splitA+0xc>
    136c:	86 95       	lsr	r24
    136e:	71 05       	cpc	r23, r1
    1370:	61 05       	cpc	r22, r1
    1372:	08 94       	sec
    1374:	08 95       	ret

00001376 <__fp_zero>:
    1376:	e8 94       	clt

00001378 <__fp_szero>:
    1378:	bb 27       	eor	r27, r27
    137a:	66 27       	eor	r22, r22
    137c:	77 27       	eor	r23, r23
    137e:	cb 01       	movw	r24, r22
    1380:	97 f9       	bld	r25, 7
    1382:	08 95       	ret

00001384 <inverse>:
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	80 e8       	ldi	r24, 0x80	; 128
    138e:	9f e3       	ldi	r25, 0x3F	; 63
    1390:	ad ce       	rjmp	.-678    	; 0x10ec <__divsf3>

00001392 <__mulsf3>:
    1392:	0b d0       	rcall	.+22     	; 0x13aa <__mulsf3x>
    1394:	bd cf       	rjmp	.-134    	; 0x1310 <__fp_round>
    1396:	ae df       	rcall	.-164    	; 0x12f4 <__fp_pscA>
    1398:	28 f0       	brcs	.+10     	; 0x13a4 <__mulsf3+0x12>
    139a:	b3 df       	rcall	.-154    	; 0x1302 <__fp_pscB>
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <__mulsf3+0x12>
    139e:	95 23       	and	r25, r21
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <__mulsf3+0x12>
    13a2:	7a cf       	rjmp	.-268    	; 0x1298 <__fp_inf>
    13a4:	7f cf       	rjmp	.-258    	; 0x12a4 <__fp_nan>
    13a6:	11 24       	eor	r1, r1
    13a8:	e7 cf       	rjmp	.-50     	; 0x1378 <__fp_szero>

000013aa <__mulsf3x>:
    13aa:	c3 df       	rcall	.-122    	; 0x1332 <__fp_split3>
    13ac:	a0 f3       	brcs	.-24     	; 0x1396 <__mulsf3+0x4>

000013ae <__mulsf3_pse>:
    13ae:	95 9f       	mul	r25, r21
    13b0:	d1 f3       	breq	.-12     	; 0x13a6 <__mulsf3+0x14>
    13b2:	95 0f       	add	r25, r21
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	55 1f       	adc	r21, r21
    13b8:	62 9f       	mul	r22, r18
    13ba:	f0 01       	movw	r30, r0
    13bc:	72 9f       	mul	r23, r18
    13be:	bb 27       	eor	r27, r27
    13c0:	f0 0d       	add	r31, r0
    13c2:	b1 1d       	adc	r27, r1
    13c4:	63 9f       	mul	r22, r19
    13c6:	aa 27       	eor	r26, r26
    13c8:	f0 0d       	add	r31, r0
    13ca:	b1 1d       	adc	r27, r1
    13cc:	aa 1f       	adc	r26, r26
    13ce:	64 9f       	mul	r22, r20
    13d0:	66 27       	eor	r22, r22
    13d2:	b0 0d       	add	r27, r0
    13d4:	a1 1d       	adc	r26, r1
    13d6:	66 1f       	adc	r22, r22
    13d8:	82 9f       	mul	r24, r18
    13da:	22 27       	eor	r18, r18
    13dc:	b0 0d       	add	r27, r0
    13de:	a1 1d       	adc	r26, r1
    13e0:	62 1f       	adc	r22, r18
    13e2:	73 9f       	mul	r23, r19
    13e4:	b0 0d       	add	r27, r0
    13e6:	a1 1d       	adc	r26, r1
    13e8:	62 1f       	adc	r22, r18
    13ea:	83 9f       	mul	r24, r19
    13ec:	a0 0d       	add	r26, r0
    13ee:	61 1d       	adc	r22, r1
    13f0:	22 1f       	adc	r18, r18
    13f2:	74 9f       	mul	r23, r20
    13f4:	33 27       	eor	r19, r19
    13f6:	a0 0d       	add	r26, r0
    13f8:	61 1d       	adc	r22, r1
    13fa:	23 1f       	adc	r18, r19
    13fc:	84 9f       	mul	r24, r20
    13fe:	60 0d       	add	r22, r0
    1400:	21 1d       	adc	r18, r1
    1402:	82 2f       	mov	r24, r18
    1404:	76 2f       	mov	r23, r22
    1406:	6a 2f       	mov	r22, r26
    1408:	11 24       	eor	r1, r1
    140a:	9f 57       	subi	r25, 0x7F	; 127
    140c:	50 40       	sbci	r21, 0x00	; 0
    140e:	8a f0       	brmi	.+34     	; 0x1432 <__mulsf3_pse+0x84>
    1410:	e1 f0       	breq	.+56     	; 0x144a <__mulsf3_pse+0x9c>
    1412:	88 23       	and	r24, r24
    1414:	4a f0       	brmi	.+18     	; 0x1428 <__mulsf3_pse+0x7a>
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	bb 1f       	adc	r27, r27
    141c:	66 1f       	adc	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	91 50       	subi	r25, 0x01	; 1
    1424:	50 40       	sbci	r21, 0x00	; 0
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__mulsf3_pse+0x64>
    1428:	9e 3f       	cpi	r25, 0xFE	; 254
    142a:	51 05       	cpc	r21, r1
    142c:	70 f0       	brcs	.+28     	; 0x144a <__mulsf3_pse+0x9c>
    142e:	34 cf       	rjmp	.-408    	; 0x1298 <__fp_inf>
    1430:	a3 cf       	rjmp	.-186    	; 0x1378 <__fp_szero>
    1432:	5f 3f       	cpi	r21, 0xFF	; 255
    1434:	ec f3       	brlt	.-6      	; 0x1430 <__mulsf3_pse+0x82>
    1436:	98 3e       	cpi	r25, 0xE8	; 232
    1438:	dc f3       	brlt	.-10     	; 0x1430 <__mulsf3_pse+0x82>
    143a:	86 95       	lsr	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f7 95       	ror	r31
    1444:	e7 95       	ror	r30
    1446:	9f 5f       	subi	r25, 0xFF	; 255
    1448:	c1 f7       	brne	.-16     	; 0x143a <__mulsf3_pse+0x8c>
    144a:	fe 2b       	or	r31, r30
    144c:	88 0f       	add	r24, r24
    144e:	91 1d       	adc	r25, r1
    1450:	96 95       	lsr	r25
    1452:	87 95       	ror	r24
    1454:	97 f9       	bld	r25, 7
    1456:	08 95       	ret

00001458 <square>:
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
    145c:	9a cf       	rjmp	.-204    	; 0x1392 <__mulsf3>
    145e:	4a df       	rcall	.-364    	; 0x12f4 <__fp_pscA>
    1460:	30 f0       	brcs	.+12     	; 0x146e <square+0x16>
    1462:	4f df       	rcall	.-354    	; 0x1302 <__fp_pscB>
    1464:	20 f0       	brcs	.+8      	; 0x146e <square+0x16>
    1466:	31 f4       	brne	.+12     	; 0x1474 <square+0x1c>
    1468:	9f 3f       	cpi	r25, 0xFF	; 255
    146a:	11 f4       	brne	.+4      	; 0x1470 <square+0x18>
    146c:	1e f4       	brtc	.+6      	; 0x1474 <square+0x1c>
    146e:	1a cf       	rjmp	.-460    	; 0x12a4 <__fp_nan>
    1470:	0e f4       	brtc	.+2      	; 0x1474 <square+0x1c>
    1472:	e0 95       	com	r30
    1474:	e7 fb       	bst	r30, 7
    1476:	10 cf       	rjmp	.-480    	; 0x1298 <__fp_inf>

00001478 <__addsf3x>:
    1478:	e9 2f       	mov	r30, r25
    147a:	5b df       	rcall	.-330    	; 0x1332 <__fp_split3>
    147c:	80 f3       	brcs	.-32     	; 0x145e <square+0x6>
    147e:	ba 17       	cp	r27, r26
    1480:	62 07       	cpc	r22, r18
    1482:	73 07       	cpc	r23, r19
    1484:	84 07       	cpc	r24, r20
    1486:	95 07       	cpc	r25, r21
    1488:	18 f0       	brcs	.+6      	; 0x1490 <__addsf3x+0x18>
    148a:	71 f4       	brne	.+28     	; 0x14a8 <__addsf3x+0x30>
    148c:	9e f5       	brtc	.+102    	; 0x14f4 <__addsf3x+0x7c>
    148e:	73 cf       	rjmp	.-282    	; 0x1376 <__fp_zero>
    1490:	0e f4       	brtc	.+2      	; 0x1494 <__addsf3x+0x1c>
    1492:	e0 95       	com	r30
    1494:	0b 2e       	mov	r0, r27
    1496:	ba 2f       	mov	r27, r26
    1498:	a0 2d       	mov	r26, r0
    149a:	0b 01       	movw	r0, r22
    149c:	b9 01       	movw	r22, r18
    149e:	90 01       	movw	r18, r0
    14a0:	0c 01       	movw	r0, r24
    14a2:	ca 01       	movw	r24, r20
    14a4:	a0 01       	movw	r20, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	ff 27       	eor	r31, r31
    14aa:	59 1b       	sub	r21, r25
    14ac:	99 f0       	breq	.+38     	; 0x14d4 <__addsf3x+0x5c>
    14ae:	59 3f       	cpi	r21, 0xF9	; 249
    14b0:	50 f4       	brcc	.+20     	; 0x14c6 <__addsf3x+0x4e>
    14b2:	50 3e       	cpi	r21, 0xE0	; 224
    14b4:	68 f1       	brcs	.+90     	; 0x1510 <__addsf3x+0x98>
    14b6:	1a 16       	cp	r1, r26
    14b8:	f0 40       	sbci	r31, 0x00	; 0
    14ba:	a2 2f       	mov	r26, r18
    14bc:	23 2f       	mov	r18, r19
    14be:	34 2f       	mov	r19, r20
    14c0:	44 27       	eor	r20, r20
    14c2:	58 5f       	subi	r21, 0xF8	; 248
    14c4:	f3 cf       	rjmp	.-26     	; 0x14ac <__addsf3x+0x34>
    14c6:	46 95       	lsr	r20
    14c8:	37 95       	ror	r19
    14ca:	27 95       	ror	r18
    14cc:	a7 95       	ror	r26
    14ce:	f0 40       	sbci	r31, 0x00	; 0
    14d0:	53 95       	inc	r21
    14d2:	c9 f7       	brne	.-14     	; 0x14c6 <__addsf3x+0x4e>
    14d4:	7e f4       	brtc	.+30     	; 0x14f4 <__addsf3x+0x7c>
    14d6:	1f 16       	cp	r1, r31
    14d8:	ba 0b       	sbc	r27, r26
    14da:	62 0b       	sbc	r22, r18
    14dc:	73 0b       	sbc	r23, r19
    14de:	84 0b       	sbc	r24, r20
    14e0:	ba f0       	brmi	.+46     	; 0x1510 <__addsf3x+0x98>
    14e2:	91 50       	subi	r25, 0x01	; 1
    14e4:	a1 f0       	breq	.+40     	; 0x150e <__addsf3x+0x96>
    14e6:	ff 0f       	add	r31, r31
    14e8:	bb 1f       	adc	r27, r27
    14ea:	66 1f       	adc	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	c2 f7       	brpl	.-16     	; 0x14e2 <__addsf3x+0x6a>
    14f2:	0e c0       	rjmp	.+28     	; 0x1510 <__addsf3x+0x98>
    14f4:	ba 0f       	add	r27, r26
    14f6:	62 1f       	adc	r22, r18
    14f8:	73 1f       	adc	r23, r19
    14fa:	84 1f       	adc	r24, r20
    14fc:	48 f4       	brcc	.+18     	; 0x1510 <__addsf3x+0x98>
    14fe:	87 95       	ror	r24
    1500:	77 95       	ror	r23
    1502:	67 95       	ror	r22
    1504:	b7 95       	ror	r27
    1506:	f7 95       	ror	r31
    1508:	9e 3f       	cpi	r25, 0xFE	; 254
    150a:	08 f0       	brcs	.+2      	; 0x150e <__addsf3x+0x96>
    150c:	b3 cf       	rjmp	.-154    	; 0x1474 <square+0x1c>
    150e:	93 95       	inc	r25
    1510:	88 0f       	add	r24, r24
    1512:	08 f0       	brcs	.+2      	; 0x1516 <__addsf3x+0x9e>
    1514:	99 27       	eor	r25, r25
    1516:	ee 0f       	add	r30, r30
    1518:	97 95       	ror	r25
    151a:	87 95       	ror	r24
    151c:	08 95       	ret

0000151e <__mulsi3>:
    151e:	62 9f       	mul	r22, r18
    1520:	d0 01       	movw	r26, r0
    1522:	73 9f       	mul	r23, r19
    1524:	f0 01       	movw	r30, r0
    1526:	82 9f       	mul	r24, r18
    1528:	e0 0d       	add	r30, r0
    152a:	f1 1d       	adc	r31, r1
    152c:	64 9f       	mul	r22, r20
    152e:	e0 0d       	add	r30, r0
    1530:	f1 1d       	adc	r31, r1
    1532:	92 9f       	mul	r25, r18
    1534:	f0 0d       	add	r31, r0
    1536:	83 9f       	mul	r24, r19
    1538:	f0 0d       	add	r31, r0
    153a:	74 9f       	mul	r23, r20
    153c:	f0 0d       	add	r31, r0
    153e:	65 9f       	mul	r22, r21
    1540:	f0 0d       	add	r31, r0
    1542:	99 27       	eor	r25, r25
    1544:	72 9f       	mul	r23, r18
    1546:	b0 0d       	add	r27, r0
    1548:	e1 1d       	adc	r30, r1
    154a:	f9 1f       	adc	r31, r25
    154c:	63 9f       	mul	r22, r19
    154e:	b0 0d       	add	r27, r0
    1550:	e1 1d       	adc	r30, r1
    1552:	f9 1f       	adc	r31, r25
    1554:	bd 01       	movw	r22, r26
    1556:	cf 01       	movw	r24, r30
    1558:	11 24       	eor	r1, r1
    155a:	08 95       	ret

0000155c <__divmodhi4>:
    155c:	97 fb       	bst	r25, 7
    155e:	09 2e       	mov	r0, r25
    1560:	07 26       	eor	r0, r23
    1562:	0a d0       	rcall	.+20     	; 0x1578 <__divmodhi4_neg1>
    1564:	77 fd       	sbrc	r23, 7
    1566:	04 d0       	rcall	.+8      	; 0x1570 <__divmodhi4_neg2>
    1568:	49 d0       	rcall	.+146    	; 0x15fc <__udivmodhi4>
    156a:	06 d0       	rcall	.+12     	; 0x1578 <__divmodhi4_neg1>
    156c:	00 20       	and	r0, r0
    156e:	1a f4       	brpl	.+6      	; 0x1576 <__divmodhi4_exit>

00001570 <__divmodhi4_neg2>:
    1570:	70 95       	com	r23
    1572:	61 95       	neg	r22
    1574:	7f 4f       	sbci	r23, 0xFF	; 255

00001576 <__divmodhi4_exit>:
    1576:	08 95       	ret

00001578 <__divmodhi4_neg1>:
    1578:	f6 f7       	brtc	.-4      	; 0x1576 <__divmodhi4_exit>
    157a:	90 95       	com	r25
    157c:	81 95       	neg	r24
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	08 95       	ret

00001582 <__udivmodsi4>:
    1582:	a1 e2       	ldi	r26, 0x21	; 33
    1584:	1a 2e       	mov	r1, r26
    1586:	aa 1b       	sub	r26, r26
    1588:	bb 1b       	sub	r27, r27
    158a:	fd 01       	movw	r30, r26
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <__udivmodsi4_ep>

0000158e <__udivmodsi4_loop>:
    158e:	aa 1f       	adc	r26, r26
    1590:	bb 1f       	adc	r27, r27
    1592:	ee 1f       	adc	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	a2 17       	cp	r26, r18
    1598:	b3 07       	cpc	r27, r19
    159a:	e4 07       	cpc	r30, r20
    159c:	f5 07       	cpc	r31, r21
    159e:	20 f0       	brcs	.+8      	; 0x15a8 <__udivmodsi4_ep>
    15a0:	a2 1b       	sub	r26, r18
    15a2:	b3 0b       	sbc	r27, r19
    15a4:	e4 0b       	sbc	r30, r20
    15a6:	f5 0b       	sbc	r31, r21

000015a8 <__udivmodsi4_ep>:
    15a8:	66 1f       	adc	r22, r22
    15aa:	77 1f       	adc	r23, r23
    15ac:	88 1f       	adc	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	1a 94       	dec	r1
    15b2:	69 f7       	brne	.-38     	; 0x158e <__udivmodsi4_loop>
    15b4:	60 95       	com	r22
    15b6:	70 95       	com	r23
    15b8:	80 95       	com	r24
    15ba:	90 95       	com	r25
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	bd 01       	movw	r22, r26
    15c2:	cf 01       	movw	r24, r30
    15c4:	08 95       	ret

000015c6 <__divmodsi4>:
    15c6:	97 fb       	bst	r25, 7
    15c8:	09 2e       	mov	r0, r25
    15ca:	05 26       	eor	r0, r21
    15cc:	0e d0       	rcall	.+28     	; 0x15ea <__divmodsi4_neg1>
    15ce:	57 fd       	sbrc	r21, 7
    15d0:	04 d0       	rcall	.+8      	; 0x15da <__divmodsi4_neg2>
    15d2:	d7 df       	rcall	.-82     	; 0x1582 <__udivmodsi4>
    15d4:	0a d0       	rcall	.+20     	; 0x15ea <__divmodsi4_neg1>
    15d6:	00 1c       	adc	r0, r0
    15d8:	38 f4       	brcc	.+14     	; 0x15e8 <__divmodsi4_exit>

000015da <__divmodsi4_neg2>:
    15da:	50 95       	com	r21
    15dc:	40 95       	com	r20
    15de:	30 95       	com	r19
    15e0:	21 95       	neg	r18
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	4f 4f       	sbci	r20, 0xFF	; 255
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255

000015e8 <__divmodsi4_exit>:
    15e8:	08 95       	ret

000015ea <__divmodsi4_neg1>:
    15ea:	f6 f7       	brtc	.-4      	; 0x15e8 <__divmodsi4_exit>
    15ec:	90 95       	com	r25
    15ee:	80 95       	com	r24
    15f0:	70 95       	com	r23
    15f2:	61 95       	neg	r22
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8f 4f       	sbci	r24, 0xFF	; 255
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	08 95       	ret

000015fc <__udivmodhi4>:
    15fc:	aa 1b       	sub	r26, r26
    15fe:	bb 1b       	sub	r27, r27
    1600:	51 e1       	ldi	r21, 0x11	; 17
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <__udivmodhi4_ep>

00001604 <__udivmodhi4_loop>:
    1604:	aa 1f       	adc	r26, r26
    1606:	bb 1f       	adc	r27, r27
    1608:	a6 17       	cp	r26, r22
    160a:	b7 07       	cpc	r27, r23
    160c:	10 f0       	brcs	.+4      	; 0x1612 <__udivmodhi4_ep>
    160e:	a6 1b       	sub	r26, r22
    1610:	b7 0b       	sbc	r27, r23

00001612 <__udivmodhi4_ep>:
    1612:	88 1f       	adc	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	5a 95       	dec	r21
    1618:	a9 f7       	brne	.-22     	; 0x1604 <__udivmodhi4_loop>
    161a:	80 95       	com	r24
    161c:	90 95       	com	r25
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	08 95       	ret

00001624 <_exit>:
    1624:	f8 94       	cli

00001626 <__stop_program>:
    1626:	ff cf       	rjmp	.-2      	; 0x1626 <__stop_program>
