
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001c24  00001cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800122  00800122  00001cda  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c57  00000000  00000000  00001dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027fc  00000000  00000000  00002a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac8  00000000  00000000  0000520d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fcc  00000000  00000000  00005cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008e0  00000000  00000000  00007ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bd7  00000000  00000000  00008584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dcc  00000000  00000000  0000915b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00009f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e4 e2       	ldi	r30, 0x24	; 36
      aa:	fc e1       	ldi	r31, 0x1C	; 28
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a7 3a       	cpi	r26, 0xA7	; 167
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29

  DDRD  |= (1<<4);
      f0:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      f2:	5c 98       	cbi	0x0b, 4	; 11
  
  Timer_Init();
      f4:	0e 94 2f 0b 	call	0x165e	; 0x165e <Timer_Init>
  debug_init();
      f8:	0e 94 4b 06 	call	0xc96	; 0xc96 <debug_init>
  debug_tx_text_nl("Debug Started");
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 c4 04 	call	0x988	; 0x988 <debug_tx_text_nl>
  
  MPU6050_Init();
     104:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MPU6050_Init>
     108:	aa 24       	eor	r10, r10
     10a:	bb 24       	eor	r11, r11
     10c:	65 01       	movw	r12, r10
     10e:	ee 24       	eor	r14, r14
     110:	ff 24       	eor	r15, r15
     112:	87 01       	movw	r16, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     114:	c8 e9       	ldi	r28, 0x98	; 152
     116:	da e3       	ldi	r29, 0x3A	; 58
  int32_t ang_z=0;
  int32_t temp=0;
  while(1){
	
	
	MPU6050_Read_Acc_Gyro();
     118:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MPU6050_Read_Acc_Gyro>
	
	int32_t time=Timer_Get_Time();
     11c:	0e 94 37 0b 	call	0x166e	; 0x166e <Timer_Get_Time>
     120:	96 2e       	mov	r9, r22
     122:	87 2e       	mov	r8, r23
     124:	78 2e       	mov	r7, r24
     126:	69 2e       	mov	r6, r25
	Timer_Start();
     128:	0e 94 32 0b 	call	0x1664	; 0x1664 <Timer_Start>
	
	if(MPU6050_Get_Error()==0){
     12c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <MPU6050_Get_Error>
     130:	89 2b       	or	r24, r25
     132:	09 f0       	breq	.+2      	; 0x136 <main+0x62>
     134:	51 c0       	rjmp	.+162    	; 0x1d8 <main+0x104>
	  
	  temp = MPU6050_Get_GyroX();
     136:	0e 94 be 07 	call	0xf7c	; 0xf7c <MPU6050_Get_GyroX>
     13a:	aa 27       	eor	r26, r26
     13c:	97 fd       	sbrc	r25, 7
     13e:	a0 95       	com	r26
     140:	ba 2f       	mov	r27, r26
	  temp*= time;
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	29 2d       	mov	r18, r9
     148:	38 2d       	mov	r19, r8
     14a:	47 2d       	mov	r20, r7
     14c:	56 2d       	mov	r21, r6
     14e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsi3>
	  temp/= 100000;
	  ang_x+=temp;
     152:	20 ea       	ldi	r18, 0xA0	; 160
     154:	36 e8       	ldi	r19, 0x86	; 134
     156:	41 e0       	ldi	r20, 0x01	; 1
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divmodsi4>
     15e:	a2 0e       	add	r10, r18
     160:	b3 1e       	adc	r11, r19
     162:	c4 1e       	adc	r12, r20
     164:	d5 1e       	adc	r13, r21
	  
	  temp = MPU6050_Get_GyroY();
     166:	0e 94 c3 07 	call	0xf86	; 0xf86 <MPU6050_Get_GyroY>
     16a:	aa 27       	eor	r26, r26
     16c:	97 fd       	sbrc	r25, 7
     16e:	a0 95       	com	r26
     170:	ba 2f       	mov	r27, r26
	  temp*= time;
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	29 2d       	mov	r18, r9
     178:	38 2d       	mov	r19, r8
     17a:	47 2d       	mov	r20, r7
     17c:	56 2d       	mov	r21, r6
     17e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsi3>
	  temp/= 100000;
	  ang_y+=temp;
     182:	20 ea       	ldi	r18, 0xA0	; 160
     184:	36 e8       	ldi	r19, 0x86	; 134
     186:	41 e0       	ldi	r20, 0x01	; 1
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divmodsi4>
     18e:	e2 0e       	add	r14, r18
     190:	f3 1e       	adc	r15, r19
     192:	04 1f       	adc	r16, r20
     194:	15 1f       	adc	r17, r21
	  
	  temp = MPU6050_Get_GyroZ();
     196:	0e 94 c8 07 	call	0xf90	; 0xf90 <MPU6050_Get_GyroZ>
	  temp*= time;
	  temp/= 100000;
	  ang_z+=temp;
	  
	  debug_tx_number_cm(MPU6050_Read_Pitch());
     19a:	0e 94 42 08 	call	0x1084	; 0x1084 <MPU6050_Read_Pitch>
     19e:	aa 27       	eor	r26, r26
     1a0:	97 fd       	sbrc	r25, 7
     1a2:	a0 95       	com	r26
     1a4:	ba 2f       	mov	r27, r26
     1a6:	bc 01       	movw	r22, r24
     1a8:	cd 01       	movw	r24, r26
     1aa:	0e 94 4b 05 	call	0xa96	; 0xa96 <debug_tx_number_cm>
	  debug_tx_number_cm(MPU6050_Read_Roll());
     1ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <MPU6050_Read_Roll>
     1b2:	aa 27       	eor	r26, r26
     1b4:	97 fd       	sbrc	r25, 7
     1b6:	a0 95       	com	r26
     1b8:	ba 2f       	mov	r27, r26
     1ba:	bc 01       	movw	r22, r24
     1bc:	cd 01       	movw	r24, r26
     1be:	0e 94 4b 05 	call	0xa96	; 0xa96 <debug_tx_number_cm>
	  debug_tx_number_cm(ang_x);
     1c2:	c6 01       	movw	r24, r12
     1c4:	b5 01       	movw	r22, r10
     1c6:	0e 94 4b 05 	call	0xa96	; 0xa96 <debug_tx_number_cm>
	  debug_tx_number_cm(ang_y);
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 4b 05 	call	0xa96	; 0xa96 <debug_tx_number_cm>
	  //debug_tx_number_cm(ang_z);
	  debug_tx_nl();
     1d2:	0e 94 a2 04 	call	0x944	; 0x944 <debug_tx_nl>
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <main+0x108>
	}else{
	  MPU6050_Restart();
     1d8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <MPU6050_Restart>
     1dc:	ce 01       	movw	r24, r28
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x10a>
     1e2:	9a cf       	rjmp	.-204    	; 0x118 <main+0x44>

000001e4 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     1e4:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     1e8:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     1f2:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     1f6:	10 92 27 01 	sts	0x0127, r1
     1fa:	10 92 26 01 	sts	0x0126, r1
}
     1fe:	08 95       	ret

00000200 <I2C_Error_Clear>:

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     200:	10 92 25 01 	sts	0x0125, r1
}
     204:	08 95       	ret

00000206 <I2C_Error_Accu_Clear>:

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     206:	10 92 27 01 	sts	0x0127, r1
     20a:	10 92 26 01 	sts	0x0126, r1
}
     20e:	08 95       	ret

00000210 <I2C_Error_Clear_All>:
  I2C.Error=0x00;
  I2C.ErrorAccu=0x00;
}

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     210:	10 92 25 01 	sts	0x0125, r1
}

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     214:	10 92 27 01 	sts	0x0127, r1
     218:	10 92 26 01 	sts	0x0126, r1
}

void I2C_Error_Clear_All(void){
  I2C_Error_Clear();
  I2C_Error_Accu_Clear();
}
     21c:	08 95       	ret

0000021e <I2C_Get_Error>:

uint8_t I2C_Get_Error(void){
  return I2C.Error;
}
     21e:	80 91 25 01 	lds	r24, 0x0125
     222:	08 95       	ret

00000224 <I2C_Get_ErrorAccu>:

uint16_t I2C_Get_ErrorAccu(void){
  return I2C.ErrorAccu;
}
     224:	80 91 26 01 	lds	r24, 0x0126
     228:	90 91 27 01 	lds	r25, 0x0127
     22c:	08 95       	ret

0000022e <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     22e:	80 e5       	ldi	r24, 0x50	; 80
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     234:	08 95       	ret

00000236 <I2C_Bit_Delay>:
     236:	80 ea       	ldi	r24, 0xA0	; 160
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     23c:	08 95       	ret

0000023e <I2C_Guard_Delay>:
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	8a 95       	dec	r24
     242:	f1 f7       	brne	.-4      	; 0x240 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     244:	08 95       	ret

00000246 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	11 f4       	brne	.+4      	; 0x24e <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     24a:	3d 9a       	sbi	0x07, 5	; 7
     24c:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     24e:	3d 98       	cbi	0x07, 5	; 7
     250:	08 95       	ret

00000252 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	11 f4       	brne	.+4      	; 0x25a <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     256:	45 9a       	sbi	0x08, 5	; 8
     258:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     25a:	45 98       	cbi	0x08, 5	; 8
     25c:	08 95       	ret

0000025e <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     25e:	81 30       	cpi	r24, 0x01	; 1
     260:	19 f4       	brne	.+6      	; 0x268 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     262:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     264:	3d 98       	cbi	0x07, 5	; 7
     266:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     268:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     26a:	3d 9a       	sbi	0x07, 5	; 7
     26c:	08 95       	ret

0000026e <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     26e:	86 b1       	in	r24, 0x06	; 6
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	25 e0       	ldi	r18, 0x05	; 5
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	2a 95       	dec	r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     27c:	81 70       	andi	r24, 0x01	; 1
     27e:	08 95       	ret

00000280 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	11 f4       	brne	.+4      	; 0x288 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     284:	3c 9a       	sbi	0x07, 4	; 7
     286:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     288:	3c 98       	cbi	0x07, 4	; 7
     28a:	08 95       	ret

0000028c <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	11 f4       	brne	.+4      	; 0x294 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     290:	44 9a       	sbi	0x08, 4	; 8
     292:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     294:	44 98       	cbi	0x08, 4	; 8
     296:	08 95       	ret

00000298 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	19 f4       	brne	.+6      	; 0x2a2 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     29c:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     29e:	3c 98       	cbi	0x07, 4	; 7
     2a0:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     2a2:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     2a4:	3c 9a       	sbi	0x07, 4	; 7
     2a6:	08 95       	ret

000002a8 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     2a8:	86 b1       	in	r24, 0x06	; 6
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	34 e0       	ldi	r19, 0x04	; 4
     2ae:	96 95       	lsr	r25
     2b0:	87 95       	ror	r24
     2b2:	3a 95       	dec	r19
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     2b6:	81 70       	andi	r24, 0x01	; 1
     2b8:	08 95       	ret

000002ba <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     2ba:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}
     2c2:	08 95       	ret

000002c4 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     2c4:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
}
     2cc:	08 95       	ret

000002ce <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     2ce:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     2d0:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
}
     2de:	08 95       	ret

000002e0 <I2C_Start>:

void I2C_Start(void){
     2e0:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     2ee:	10 e5       	ldi	r17, 0x50	; 80
     2f0:	81 2f       	mov	r24, r17
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     2fc:	81 2f       	mov	r24, r17
     2fe:	8a 95       	dec	r24
     300:	f1 f7       	brne	.-4      	; 0x2fe <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     308:	1a 95       	dec	r17
     30a:	f1 f7       	brne	.-4      	; 0x308 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     30c:	1f 91       	pop	r17
     30e:	08 95       	ret

00000310 <I2C_Stop>:

void I2C_Stop(void){
     310:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     31e:	10 e5       	ldi	r17, 0x50	; 80
     320:	81 2f       	mov	r24, r17
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     32c:	81 2f       	mov	r24, r17
     32e:	8a 95       	dec	r24
     330:	f1 f7       	brne	.-4      	; 0x32e <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     338:	1a 95       	dec	r17
     33a:	f1 f7       	brne	.-4      	; 0x338 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     33c:	1f 91       	pop	r17
     33e:	08 95       	ret

00000340 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	08 2f       	mov	r16, r24
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	50 e5       	ldi	r21, 0x50	; 80
     34e:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     350:	48 e0       	ldi	r20, 0x08	; 8
     352:	e4 2e       	mov	r14, r20
     354:	07 ff       	sbrs	r16, 7
     356:	02 c0       	rjmp	.+4      	; 0x35c <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	01 c0       	rjmp	.+2      	; 0x35e <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     362:	8f 2d       	mov	r24, r15
     364:	8a 95       	dec	r24
     366:	f1 f7       	brne	.-4      	; 0x364 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     36e:	8f 2d       	mov	r24, r15
     370:	8a 95       	dec	r24
     372:	f1 f7       	brne	.-4      	; 0x370 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     37a:	8e 2d       	mov	r24, r14
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     380:	1f 5f       	subi	r17, 0xFF	; 255
     382:	18 30       	cpi	r17, 0x08	; 8
     384:	11 f0       	breq	.+4      	; 0x38a <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     386:	00 0f       	add	r16, r16
     388:	e5 cf       	rjmp	.-54     	; 0x354 <I2C_Data_Send+0x14>
  }
}
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	08 95       	ret

00000394 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	60 e5       	ldi	r22, 0x50	; 80
     3a6:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     3a8:	11 0f       	add	r17, r17
     3aa:	8f 2d       	mov	r24, r15
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     3b6:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     3b8:	11 60       	ori	r17, 0x01	; 1
     3ba:	8f 2d       	mov	r24, r15
     3bc:	8a 95       	dec	r24
     3be:	f1 f7       	brne	.-4      	; 0x3bc <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	08 30       	cpi	r16, 0x08	; 8
     3ca:	71 f7       	brne	.-36     	; 0x3a8 <I2C_Data_Receive+0x14>
     3cc:	80 e5       	ldi	r24, 0x50	; 80
     3ce:	8a 95       	dec	r24
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  return data;
}
     3d8:	81 2f       	mov	r24, r17
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     3e2:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     3ea:	10 e5       	ldi	r17, 0x50	; 80
     3ec:	81 2f       	mov	r24, r17
     3ee:	8a 95       	dec	r24
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     3f8:	1a 95       	dec	r17
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}
     402:	1f 91       	pop	r17
     404:	08 95       	ret

00000406 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     406:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     40e:	10 e5       	ldi	r17, 0x50	; 80
     410:	81 2f       	mov	r24, r17
     412:	8a 95       	dec	r24
     414:	f1 f7       	brne	.-4      	; 0x412 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     41c:	1a 95       	dec	r17
     41e:	f1 f7       	brne	.-4      	; 0x41c <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}
     426:	1f 91       	pop	r17
     428:	08 95       	ret

0000042a <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     434:	00 e5       	ldi	r16, 0x50	; 80
     436:	80 2f       	mov	r24, r16
     438:	8a 95       	dec	r24
     43a:	f1 f7       	brne	.-4      	; 0x438 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     442:	16 b1       	in	r17, 0x06	; 6
     444:	0a 95       	dec	r16
     446:	f1 f7       	brne	.-4      	; 0x444 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     44e:	88 e0       	ldi	r24, 0x08	; 8
     450:	8a 95       	dec	r24
     452:	f1 f7       	brne	.-4      	; 0x450 <I2C_Get_Ack+0x26>
     454:	12 95       	swap	r17
     456:	1f 70       	andi	r17, 0x0F	; 15
     458:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     45a:	81 2f       	mov	r24, r17
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     464:	1f 93       	push	r17
     466:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     468:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(address);
     46c:	81 2f       	mov	r24, r17
     46e:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     472:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     476:	18 2f       	mov	r17, r24
  I2C_Stop();
     478:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  return ack;
}
     47c:	81 2f       	mov	r24, r17
     47e:	1f 91       	pop	r17
     480:	08 95       	ret

00000482 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     482:	1f 93       	push	r17
     484:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     486:	81 2f       	mov	r24, r17
     488:	0e 94 32 02 	call	0x464	; 0x464 <I2C_Send_Device_Address>
	if(sts==1){
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	11 f4       	brne	.+4      	; 0x494 <I2C_Get_Device_Address+0x12>
     490:	81 2f       	mov	r24, r17
     492:	03 c0       	rjmp	.+6      	; 0x49a <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     494:	1f 5f       	subi	r17, 0xFF	; 255
     496:	1f 3f       	cpi	r17, 0xFF	; 255
     498:	b1 f7       	brne	.-20     	; 0x486 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     49a:	1f 91       	pop	r17
     49c:	08 95       	ret

0000049e <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     4aa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     4ae:	80 91 22 01 	lds	r24, 0x0122
     4b2:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     4b6:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     4ba:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     4bc:	81 2f       	mov	r24, r17
     4be:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     4c2:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     4c6:	f8 2e       	mov	r15, r24
  I2C_Stop();
     4c8:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  I2C_Start();
     4cc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     4d0:	80 91 23 01 	lds	r24, 0x0123
     4d4:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     4d8:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     4dc:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     4de:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_Data_Receive>
     4e2:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     4e4:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     4e8:	08 2f       	mov	r16, r24
  I2C_Stop();
     4ea:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  if(sts == 0x07){
     4ee:	ff 0c       	add	r15, r15
     4f0:	11 0f       	add	r17, r17
     4f2:	11 0f       	add	r17, r17
     4f4:	1f 29       	or	r17, r15
     4f6:	1e 29       	or	r17, r14
     4f8:	00 0f       	add	r16, r16
     4fa:	00 0f       	add	r16, r16
     4fc:	00 0f       	add	r16, r16
     4fe:	01 2b       	or	r16, r17
     500:	07 30       	cpi	r16, 0x07	; 7
     502:	21 f4       	brne	.+8      	; 0x50c <I2C_Read_Register+0x6e>
    sts = data;
	I2C.Error=0x00;
     504:	10 92 25 01 	sts	0x0125, r1
     508:	8d 2d       	mov	r24, r13
     50a:	0d c0       	rjmp	.+26     	; 0x526 <I2C_Read_Register+0x88>
  }else{
    data=0;
	I2C.Error=0x01;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     512:	80 91 26 01 	lds	r24, 0x0126
     516:	90 91 27 01 	lds	r25, 0x0127
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	90 93 27 01 	sts	0x0127, r25
     520:	80 93 26 01 	sts	0x0126, r24
     524:	8f ef       	ldi	r24, 0xFF	; 255
    sts = 0xFF;
  }
  return sts;
}
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	08 95       	ret

00000532 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	18 2f       	mov	r17, r24
     53c:	f6 2e       	mov	r15, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     53e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     542:	80 91 22 01 	lds	r24, 0x0122
     546:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     54a:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     54e:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     550:	81 2f       	mov	r24, r17
     552:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     556:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     55a:	08 2f       	mov	r16, r24
  I2C_Data_Send(val);
     55c:	8f 2d       	mov	r24, r15
     55e:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     562:	0e 94 15 02 	call	0x42a	; 0x42a <I2C_Get_Ack>
     566:	18 2f       	mov	r17, r24
  I2C_Stop();
     568:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  if(sts == 0x07){
     56c:	00 0f       	add	r16, r16
     56e:	11 0f       	add	r17, r17
     570:	11 0f       	add	r17, r17
     572:	10 2b       	or	r17, r16
     574:	1e 29       	or	r17, r14
     576:	17 30       	cpi	r17, 0x07	; 7
     578:	19 f4       	brne	.+6      	; 0x580 <I2C_Write_Register+0x4e>
    sts = data;
	I2C.Error=0x00;
     57a:	10 92 25 01 	sts	0x0125, r1
     57e:	0c c0       	rjmp	.+24     	; 0x598 <I2C_Write_Register+0x66>
  }else{
	I2C.Error=0x02;
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     586:	80 91 26 01 	lds	r24, 0x0126
     58a:	90 91 27 01 	lds	r25, 0x0127
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	90 93 27 01 	sts	0x0127, r25
     594:	80 93 26 01 	sts	0x0126, r24
    sts = 0xFF;
  }
}
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	08 95       	ret

000005a2 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     5a2:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     5a6:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     5b0:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     5b4:	10 92 27 01 	sts	0x0127, r1
     5b8:	10 92 26 01 	sts	0x0126, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     5bc:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     5c0:	0e 94 41 02 	call	0x482	; 0x482 <I2C_Get_Device_Address>
     5c4:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 23 01 	sts	0x0123, r24
}
     5ce:	08 95       	ret

000005d0 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     5d0:	10 92 28 01 	sts	0x0128, r1
  debug.datareg=0;
     5d4:	10 92 29 01 	sts	0x0129, r1
  debug.databsy=1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 2a 01 	sts	0x012A, r24
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     5e2:	fc 01       	movw	r30, r24
     5e4:	e8 5d       	subi	r30, 0xD8	; 216
     5e6:	fe 4f       	sbci	r31, 0xFE	; 254
     5e8:	13 82       	std	Z+3, r1	; 0x03
     5ea:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     5ec:	80 32       	cpi	r24, 0x20	; 32
     5ee:	91 05       	cpc	r25, r1
     5f0:	c1 f7       	brne	.-16     	; 0x5e2 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     5f2:	10 92 4b 01 	sts	0x014B, r1
     5f6:	ec e4       	ldi	r30, 0x4C	; 76
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     5fa:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	e4 35       	cpi	r30, 0x54	; 84
     600:	f8 07       	cpc	r31, r24
     602:	d9 f7       	brne	.-10     	; 0x5fa <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     604:	10 82       	st	Z, r1
}
     606:	08 95       	ret

00000608 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     608:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     60a:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     60c:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     614:	e8 e6       	ldi	r30, 0x68	; 104
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	82 60       	ori	r24, 0x02	; 2
     61c:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     61e:	ec e6       	ldi	r30, 0x6C	; 108
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	80 64       	ori	r24, 0x40	; 64
     626:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     628:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     62a:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     62c:	08 95       	ret

0000062e <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     632:	ee e6       	ldi	r30, 0x6E	; 110
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	10 82       	st	Z, r1
  TCNT0 =200;
     638:	88 ec       	ldi	r24, 0xC8	; 200
     63a:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     644:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     646:	08 95       	ret

00000648 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     648:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     64c:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     64e:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     650:	08 95       	ret

00000652 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     652:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     654:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     656:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     658:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     65a:	08 95       	ret

0000065c <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     65c:	5d 9a       	sbi	0x0b, 5	; 11
}
     65e:	08 95       	ret

00000660 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     660:	5d 98       	cbi	0x0b, 5	; 11
}
     662:	08 95       	ret

00000664 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	11 f4       	brne	.+4      	; 0x66c <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     668:	5d 9a       	sbi	0x0b, 5	; 11
     66a:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     66c:	5d 98       	cbi	0x0b, 5	; 11
     66e:	08 95       	ret

00000670 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     670:	86 b1       	in	r24, 0x06	; 6
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	26 e0       	ldi	r18, 0x06	; 6
     676:	96 95       	lsr	r25
     678:	87 95       	ror	r24
     67a:	2a 95       	dec	r18
     67c:	e1 f7       	brne	.-8      	; 0x676 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     67e:	81 70       	andi	r24, 0x01	; 1
     680:	08 95       	ret

00000682 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     682:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     684:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     68a:	86 b5       	in	r24, 0x26	; 38
     68c:	82 33       	cpi	r24, 0x32	; 50
     68e:	e8 f3       	brcs	.-6      	; 0x68a <debug_delay+0x8>
    TCNT0=0;
     690:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     692:	86 b5       	in	r24, 0x26	; 38
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	82 17       	cp	r24, r18
     698:	93 07       	cpc	r25, r19
     69a:	d8 f3       	brcs	.-10     	; 0x692 <debug_delay+0x10>
  TCCR0B=0;
     69c:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     69e:	08 95       	ret

000006a0 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     6a0:	80 91 1c 01 	lds	r24, 0x011C
     6a4:	90 91 1d 01 	lds	r25, 0x011D
     6a8:	0e 94 41 03 	call	0x682	; 0x682 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     6ac:	08 95       	ret

000006ae <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     6ae:	80 91 1e 01 	lds	r24, 0x011E
     6b2:	90 91 1f 01 	lds	r25, 0x011F
     6b6:	0e 94 41 03 	call	0x682	; 0x682 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     6ba:	08 95       	ret

000006bc <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     6bc:	80 91 20 01 	lds	r24, 0x0120
     6c0:	90 91 21 01 	lds	r25, 0x0121
     6c4:	0e 94 41 03 	call	0x682	; 0x682 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     6c8:	08 95       	ret

000006ca <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	2a 97       	sbiw	r28, 0x0a	; 10
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     6e8:	fe 01       	movw	r30, r28
     6ea:	31 96       	adiw	r30, 0x01	; 1
     6ec:	9a e0       	ldi	r25, 0x0A	; 10
     6ee:	df 01       	movw	r26, r30
     6f0:	1d 92       	st	X+, r1
     6f2:	9a 95       	dec	r25
     6f4:	e9 f7       	brne	.-6      	; 0x6f0 <debug_tx_byte+0x26>
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	9a 87       	std	Y+10, r25	; 0x0a
     6fa:	fe 01       	movw	r30, r28
     6fc:	32 96       	adiw	r30, 0x02	; 2
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     702:	48 2f       	mov	r20, r24
     704:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     706:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     708:	ca 01       	movw	r24, r20
     70a:	02 2e       	mov	r0, r18
     70c:	02 c0       	rjmp	.+4      	; 0x712 <debug_tx_byte+0x48>
     70e:	95 95       	asr	r25
     710:	87 95       	ror	r24
     712:	0a 94       	dec	r0
     714:	e2 f7       	brpl	.-8      	; 0x70e <debug_tx_byte+0x44>
     716:	80 ff       	sbrs	r24, 0
     718:	02 c0       	rjmp	.+4      	; 0x71e <debug_tx_byte+0x54>
	  buf[i+1]=1;
     71a:	60 83       	st	Z, r22
     71c:	01 c0       	rjmp	.+2      	; 0x720 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     71e:	10 82       	st	Z, r1
     720:	2f 5f       	subi	r18, 0xFF	; 255
     722:	3f 4f       	sbci	r19, 0xFF	; 255
     724:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     726:	28 30       	cpi	r18, 0x08	; 8
     728:	31 05       	cpc	r19, r1
     72a:	71 f7       	brne	.-36     	; 0x708 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     72c:	df b6       	in	r13, 0x3f	; 63
  cli();
     72e:	f8 94       	cli
     730:	8e 01       	movw	r16, r28
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     736:	3b e0       	ldi	r19, 0x0B	; 11
     738:	e3 2e       	mov	r14, r19
     73a:	f1 2c       	mov	r15, r1
     73c:	ec 0e       	add	r14, r28
     73e:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     740:	f8 01       	movw	r30, r16
     742:	80 81       	ld	r24, Z
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	11 f4       	brne	.+4      	; 0x74c <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     748:	5d 9a       	sbi	0x0b, 5	; 11
     74a:	01 c0       	rjmp	.+2      	; 0x74e <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     74c:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     74e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <debug_delay_index_0>
     752:	0f 5f       	subi	r16, 0xFF	; 255
     754:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     756:	0e 15       	cp	r16, r14
     758:	1f 05       	cpc	r17, r15
     75a:	91 f7       	brne	.-28     	; 0x740 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     75c:	df be       	out	0x3f, r13	; 63
}
     75e:	2a 96       	adiw	r28, 0x0a	; 10
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	08 95       	ret

0000077a <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     780:	36 9b       	sbis	0x06, 6	; 6
     782:	21 c0       	rjmp	.+66     	; 0x7c6 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	17 c0       	rjmp	.+46     	; 0x7b6 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     788:	0e 94 57 03 	call	0x6ae	; 0x6ae <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     78c:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     78e:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     790:	17 30       	cpi	r17, 0x07	; 7
     792:	09 f0       	breq	.+2      	; 0x796 <debug_rx_byte+0x1c>
	    val>>=1;
     794:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     796:	1f 5f       	subi	r17, 0xFF	; 255
     798:	18 30       	cpi	r17, 0x08	; 8
     79a:	b1 f7       	brne	.-20     	; 0x788 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     79c:	0e 94 57 03 	call	0x6ae	; 0x6ae <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     7a0:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     7a2:	f6 fc       	sbrc	r15, 6
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <debug_rx_byte+0x3a>
     7a6:	86 ff       	sbrs	r24, 6
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     7aa:	00 93 29 01 	sts	0x0129, r16
	  debug.error=0x00;
     7ae:	10 92 28 01 	sts	0x0128, r1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 28 01 	sts	0x0128, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     7ba:	80 91 29 01 	lds	r24, 0x0129
}
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     7c6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     7ca:	f6 b0       	in	r15, 0x06	; 6
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	db cf       	rjmp	.-74     	; 0x788 <debug_rx_byte+0xe>

000007d2 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     7d2:	80 91 29 01 	lds	r24, 0x0129
}
     7d6:	08 95       	ret

000007d8 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     7d8:	10 92 29 01 	sts	0x0129, r1
}
     7dc:	08 95       	ret

000007de <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     7de:	80 93 29 01 	sts	0x0129, r24
}
     7e2:	08 95       	ret

000007e4 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	e8 16       	cp	r14, r24
     7fe:	f1 04       	cpc	r15, r1
     800:	01 05       	cpc	r16, r1
     802:	11 05       	cpc	r17, r1
     804:	09 f0       	breq	.+2      	; 0x808 <debug_tx_hex+0x24>
     806:	30 f4       	brcc	.+12     	; 0x814 <debug_tx_hex+0x30>
     808:	c8 e0       	ldi	r28, 0x08	; 8
     80a:	d0 e0       	ldi	r29, 0x00	; 0
     80c:	62 e0       	ldi	r22, 0x02	; 2
     80e:	c6 2e       	mov	r12, r22
     810:	d1 2c       	mov	r13, r1
     812:	14 c0       	rjmp	.+40     	; 0x83c <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	e8 16       	cp	r14, r24
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	f8 06       	cpc	r15, r24
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	08 07       	cpc	r16, r24
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	18 07       	cpc	r17, r24
     824:	30 f0       	brcs	.+12     	; 0x832 <debug_tx_hex+0x4e>
     826:	c0 e2       	ldi	r28, 0x20	; 32
     828:	d0 e0       	ldi	r29, 0x00	; 0
     82a:	58 e0       	ldi	r21, 0x08	; 8
     82c:	c5 2e       	mov	r12, r21
     82e:	d1 2c       	mov	r13, r1
     830:	05 c0       	rjmp	.+10     	; 0x83c <debug_tx_hex+0x58>
     832:	c0 e1       	ldi	r28, 0x10	; 16
     834:	d0 e0       	ldi	r29, 0x00	; 0
     836:	44 e0       	ldi	r20, 0x04	; 4
     838:	c4 2e       	mov	r12, r20
     83a:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     83c:	80 e3       	ldi	r24, 0x30	; 48
     83e:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
  debug_tx_byte('x');
     842:	88 e7       	ldi	r24, 0x78	; 120
     844:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
     848:	bb 24       	eor	r11, r11
     84a:	17 c0       	rjmp	.+46     	; 0x87a <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     84c:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     84e:	d8 01       	movw	r26, r16
     850:	c7 01       	movw	r24, r14
     852:	0c 2e       	mov	r0, r28
     854:	04 c0       	rjmp	.+8      	; 0x85e <debug_tx_hex+0x7a>
     856:	b6 95       	lsr	r27
     858:	a7 95       	ror	r26
     85a:	97 95       	ror	r25
     85c:	87 95       	ror	r24
     85e:	0a 94       	dec	r0
     860:	d2 f7       	brpl	.-12     	; 0x856 <debug_tx_hex+0x72>
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	8f 70       	andi	r24, 0x0F	; 15
     866:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     868:	8a 30       	cpi	r24, 0x0A	; 10
     86a:	91 05       	cpc	r25, r1
     86c:	10 f0       	brcs	.+4      	; 0x872 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     86e:	c7 96       	adiw	r24, 0x37	; 55
     870:	01 c0       	rjmp	.+2      	; 0x874 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     872:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     874:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     878:	b3 94       	inc	r11
     87a:	8b 2d       	mov	r24, r11
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	8c 15       	cp	r24, r12
     880:	9d 05       	cpc	r25, r13
     882:	20 f3       	brcs	.-56     	; 0x84c <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	08 95       	ret

00000898 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	7b 01       	movw	r14, r22
     8ae:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     8b0:	6f 3f       	cpi	r22, 0xFF	; 255
     8b2:	71 05       	cpc	r23, r1
     8b4:	81 05       	cpc	r24, r1
     8b6:	91 05       	cpc	r25, r1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <debug_tx_bin+0x24>
     8ba:	18 f4       	brcc	.+6      	; 0x8c2 <debug_tx_bin+0x2a>
     8bc:	f7 e0       	ldi	r31, 0x07	; 7
     8be:	df 2e       	mov	r13, r31
     8c0:	0d c0       	rjmp	.+26     	; 0x8dc <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     8c2:	60 30       	cpi	r22, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	73 07       	cpc	r23, r19
     8c8:	31 e0       	ldi	r19, 0x01	; 1
     8ca:	83 07       	cpc	r24, r19
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	93 07       	cpc	r25, r19
     8d0:	18 f0       	brcs	.+6      	; 0x8d8 <debug_tx_bin+0x40>
     8d2:	ef e1       	ldi	r30, 0x1F	; 31
     8d4:	de 2e       	mov	r13, r30
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <debug_tx_bin+0x44>
     8d8:	7f e0       	ldi	r23, 0x0F	; 15
     8da:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     8dc:	80 e3       	ldi	r24, 0x30	; 48
     8de:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
  debug_tx_byte('b');
     8e2:	82 e6       	ldi	r24, 0x62	; 98
     8e4:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
     8e8:	c0 e0       	ldi	r28, 0x00	; 0
     8ea:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     8ec:	cd 2c       	mov	r12, r13
     8ee:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     8f0:	56 01       	movw	r10, r12
     8f2:	08 94       	sec
     8f4:	a1 1c       	adc	r10, r1
     8f6:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     8f8:	c6 01       	movw	r24, r12
     8fa:	8c 1b       	sub	r24, r28
     8fc:	9d 0b       	sbc	r25, r29
     8fe:	a8 01       	movw	r20, r16
     900:	97 01       	movw	r18, r14
     902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
     904:	56 95       	lsr	r21
     906:	47 95       	ror	r20
     908:	37 95       	ror	r19
     90a:	27 95       	ror	r18
     90c:	8a 95       	dec	r24
     90e:	d2 f7       	brpl	.-12     	; 0x904 <__stack+0x5>
     910:	da 01       	movw	r26, r20
     912:	c9 01       	movw	r24, r18
     914:	81 70       	andi	r24, 0x01	; 1
     916:	90 70       	andi	r25, 0x00	; 0
     918:	89 2b       	or	r24, r25
     91a:	11 f0       	breq	.+4      	; 0x920 <__stack+0x21>
      debug_tx_byte( 49 );   
     91c:	81 e3       	ldi	r24, 0x31	; 49
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0x23>
    }else{
      debug_tx_byte( 48 );         
     920:	80 e3       	ldi	r24, 0x30	; 48
     922:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
     926:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     928:	ca 15       	cp	r28, r10
     92a:	db 05       	cpc	r29, r11
     92c:	29 f7       	brne	.-54     	; 0x8f8 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	08 95       	ret

00000944 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     944:	8d e0       	ldi	r24, 0x0D	; 13
     946:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
  debug_tx_byte('\n');
     94a:	8a e0       	ldi	r24, 0x0A	; 10
     94c:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
}
     950:	08 95       	ret

00000952 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
}
     958:	08 95       	ret

0000095a <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     95a:	8c e2       	ldi	r24, 0x2C	; 44
     95c:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
}
     960:	08 95       	ret

00000962 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	03 c0       	rjmp	.+6      	; 0x974 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     96e:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
        i++;
     972:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     974:	fe 01       	movw	r30, r28
     976:	e1 0f       	add	r30, r17
     978:	f1 1d       	adc	r31, r1
     97a:	80 81       	ld	r24, Z
     97c:	88 23       	and	r24, r24
     97e:	b9 f7       	brne	.-18     	; 0x96e <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	08 95       	ret

00000988 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     988:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_nl();
     98c:	0e 94 a2 04 	call	0x944	; 0x944 <debug_tx_nl>
}
     990:	08 95       	ret

00000992 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     992:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     996:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
}
     99a:	08 95       	ret

0000099c <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     99c:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_cm();
     9a0:	0e 94 ad 04 	call	0x95a	; 0x95a <debug_tx_cm>
}
     9a4:	08 95       	ret

000009a6 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     9b8:	61 15       	cp	r22, r1
     9ba:	71 05       	cpc	r23, r1
     9bc:	81 05       	cpc	r24, r1
     9be:	91 05       	cpc	r25, r1
     9c0:	31 f4       	brne	.+12     	; 0x9ce <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     9c2:	10 92 4c 01 	sts	0x014C, r1
    debug.input_num_digits=1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 54 01 	sts	0x0154, r24
     9cc:	23 c0       	rjmp	.+70     	; 0xa14 <debug_determine_digit_numbers+0x6e>
     9ce:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     9d0:	0b 2d       	mov	r16, r11
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	08 5d       	subi	r16, 0xD8	; 216
     9d6:	1e 4f       	sbci	r17, 0xFE	; 254
     9d8:	c7 01       	movw	r24, r14
     9da:	b6 01       	movw	r22, r12
     9dc:	2a e0       	ldi	r18, 0x0A	; 10
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     9e8:	f8 01       	movw	r30, r16
     9ea:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	2a e0       	ldi	r18, 0x0A	; 10
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     9fc:	c9 01       	movw	r24, r18
     9fe:	da 01       	movw	r26, r20
     a00:	6c 01       	movw	r12, r24
     a02:	7d 01       	movw	r14, r26
      i++;
     a04:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     a06:	c1 14       	cp	r12, r1
     a08:	d1 04       	cpc	r13, r1
     a0a:	e1 04       	cpc	r14, r1
     a0c:	f1 04       	cpc	r15, r1
     a0e:	01 f7       	brne	.-64     	; 0x9d0 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     a10:	b0 92 54 01 	sts	0x0154, r11
  }
}
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	08 95       	ret

00000a24 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     a24:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     a26:	10 91 54 01 	lds	r17, 0x0154
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     a2c:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     a2e:	e1 2f       	mov	r30, r17
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	e8 5d       	subi	r30, 0xD8	; 216
     a34:	fe 4f       	sbci	r31, 0xFE	; 254
     a36:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     a38:	80 5d       	subi	r24, 0xD0	; 208
     a3a:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     a3e:	11 23       	and	r17, r17
     a40:	a9 f7       	brne	.-22     	; 0xa2c <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     a42:	1f 91       	pop	r17
     a44:	08 95       	ret

00000a46 <debug_tx_number>:

void debug_tx_number(int32_t num){
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	7b 01       	movw	r14, r22
     a50:	8c 01       	movw	r16, r24
  if(num<0){
     a52:	97 ff       	sbrs	r25, 7
     a54:	0b c0       	rjmp	.+22     	; 0xa6c <debug_tx_number+0x26>
    debug_tx_byte('-');
     a56:	8d e2       	ldi	r24, 0x2D	; 45
     a58:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_tx_byte>
	num=-num;
     a5c:	10 95       	com	r17
     a5e:	00 95       	com	r16
     a60:	f0 94       	com	r15
     a62:	e0 94       	com	r14
     a64:	e1 1c       	adc	r14, r1
     a66:	f1 1c       	adc	r15, r1
     a68:	01 1d       	adc	r16, r1
     a6a:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     a6c:	c8 01       	movw	r24, r16
     a6e:	b7 01       	movw	r22, r14
     a70:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     a74:	0e 94 12 05 	call	0xa24	; 0xa24 <debug_tx_number_digits>
}
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     a82:	0e 94 23 05 	call	0xa46	; 0xa46 <debug_tx_number>
  debug_tx_nl();
     a86:	0e 94 a2 04 	call	0x944	; 0x944 <debug_tx_nl>
}
     a8a:	08 95       	ret

00000a8c <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     a8c:	0e 94 23 05 	call	0xa46	; 0xa46 <debug_tx_number>
  debug_tx_sp();
     a90:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
}
     a94:	08 95       	ret

00000a96 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     a96:	0e 94 23 05 	call	0xa46	; 0xa46 <debug_tx_number>
  debug_tx_text(",");
     a9a:	8e e0       	ldi	r24, 0x0E	; 14
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
}
     aa2:	08 95       	ret

00000aa4 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     aa4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <debug_tx_hex>
  debug_tx_nl();
     aa8:	0e 94 a2 04 	call	0x944	; 0x944 <debug_tx_nl>
}
     aac:	08 95       	ret

00000aae <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     aae:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <debug_tx_hex>
  debug_tx_sp();
     ab2:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
}
     ab6:	08 95       	ret

00000ab8 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     ab8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <debug_tx_hex>
  debug_tx_text(",");
     abc:	8e e0       	ldi	r24, 0x0E	; 14
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
}
     ac4:	08 95       	ret

00000ac6 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     ac6:	0e 94 4c 04 	call	0x898	; 0x898 <debug_tx_bin>
  debug_tx_nl();
     aca:	0e 94 a2 04 	call	0x944	; 0x944 <debug_tx_nl>
}
     ace:	08 95       	ret

00000ad0 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     ad0:	0e 94 4c 04 	call	0x898	; 0x898 <debug_tx_bin>
  debug_tx_sp();
     ad4:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
}
     ad8:	08 95       	ret

00000ada <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     ada:	0e 94 4c 04 	call	0x898	; 0x898 <debug_tx_bin>
  debug_tx_text(",");
     ade:	8e e0       	ldi	r24, 0x0E	; 14
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
}
     ae6:	08 95       	ret

00000ae8 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	7a 01       	movw	r14, r20
     af2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     af4:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     af8:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_nl(num);
     afc:	c8 01       	movw	r24, r16
     afe:	b7 01       	movw	r22, r14
     b00:	0e 94 41 05 	call	0xa82	; 0xa82 <debug_tx_number_nl>
}
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	08 95       	ret

00000b0e <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	7a 01       	movw	r14, r20
     b18:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b1a:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     b1e:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_sp(num);
     b22:	c8 01       	movw	r24, r16
     b24:	b7 01       	movw	r22, r14
     b26:	0e 94 46 05 	call	0xa8c	; 0xa8c <debug_tx_number_sp>
}
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	08 95       	ret

00000b34 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	7a 01       	movw	r14, r20
     b3e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b40:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     b44:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_cm(num);
     b48:	c8 01       	movw	r24, r16
     b4a:	b7 01       	movw	r22, r14
     b4c:	0e 94 4b 05 	call	0xa96	; 0xa96 <debug_tx_number_cm>
}
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	08 95       	ret

00000b5a <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	7a 01       	movw	r14, r20
     b64:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b66:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     b6a:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     b6e:	c8 01       	movw	r24, r16
     b70:	b7 01       	movw	r22, r14
     b72:	0e 94 52 05 	call	0xaa4	; 0xaa4 <debug_tx_number_hex_nl>
}
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	7a 01       	movw	r14, r20
     b8a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b8c:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     b90:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     b94:	c8 01       	movw	r24, r16
     b96:	b7 01       	movw	r22, r14
     b98:	0e 94 57 05 	call	0xaae	; 0xaae <debug_tx_number_hex_sp>
}
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	7a 01       	movw	r14, r20
     bb0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     bb2:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     bb6:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     bba:	c8 01       	movw	r24, r16
     bbc:	b7 01       	movw	r22, r14
     bbe:	0e 94 5c 05 	call	0xab8	; 0xab8 <debug_tx_number_hex_cm>
}
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	7a 01       	movw	r14, r20
     bd6:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     bd8:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     bdc:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     be0:	c8 01       	movw	r24, r16
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 63 05 	call	0xac6	; 0xac6 <debug_tx_number_bin_nl>
}
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	08 95       	ret

00000bf2 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	7a 01       	movw	r14, r20
     bfc:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     bfe:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     c02:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     c06:	c8 01       	movw	r24, r16
     c08:	b7 01       	movw	r22, r14
     c0a:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_number_bin_sp>
}
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	7a 01       	movw	r14, r20
     c22:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c24:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_text>
  debug_tx_sp();
     c28:	0e 94 a9 04 	call	0x952	; 0x952 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     c2c:	c8 01       	movw	r24, r16
     c2e:	b7 01       	movw	r22, r14
     c30:	0e 94 6d 05 	call	0xada	; 0xada <debug_tx_number_bin_cm>
}
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	08 95       	ret

00000c3e <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     c3e:	e8 e2       	ldi	r30, 0x28	; 40
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	e8 0f       	add	r30, r24
     c44:	f1 1d       	adc	r31, r1
     c46:	83 81       	ldd	r24, Z+3	; 0x03
}
     c48:	08 95       	ret

00000c4a <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     c4a:	80 91 4b 01 	lds	r24, 0x014B
}
     c4e:	08 95       	ret

00000c50 <debug_flush_buf>:

void debug_flush_buf(void){
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     c54:	fc 01       	movw	r30, r24
     c56:	e8 5d       	subi	r30, 0xD8	; 216
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	13 82       	std	Z+3, r1	; 0x03
     c5c:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     c5e:	80 32       	cpi	r24, 0x20	; 32
     c60:	91 05       	cpc	r25, r1
     c62:	c1 f7       	brne	.-16     	; 0xc54 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     c64:	10 92 4b 01 	sts	0x014B, r1
}
     c68:	08 95       	ret

00000c6a <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     c6a:	80 91 2a 01 	lds	r24, 0x012A
}
     c6e:	08 95       	ret

00000c70 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     c70:	80 91 2a 01 	lds	r24, 0x012A
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <debug_data_available_rx_buf+0xc>
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     c7c:	80 91 4b 01 	lds	r24, 0x014B
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <debug_data_available_rx_buf+0x18>
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     c8c:	89 2f       	mov	r24, r25
     c8e:	08 95       	ret

00000c90 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     c90:	80 91 4b 01 	lds	r24, 0x014B
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     c94:	08 95       	ret

00000c96 <debug_init>:

void debug_init(void){
  debug_struct_init();
     c96:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_struct_init>
  debug_timings_init();
     c9a:	0e 94 04 03 	call	0x608	; 0x608 <debug_timings_init>
  debug_gpio_init();
     c9e:	0e 94 29 03 	call	0x652	; 0x652 <debug_gpio_init>
}
     ca2:	08 95       	ret

00000ca4 <__vector_4>:


ISR(ISR_PCINT_VECT){
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
  debug.databsy=1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 2a 01 	sts	0x012A, r24
  uint8_t val=debug_rx_byte();
     ccc:	0e 94 bd 03 	call	0x77a	; 0x77a <debug_rx_byte>
     cd0:	98 2f       	mov	r25, r24
  if(debug.error==0){
     cd2:	80 91 28 01 	lds	r24, 0x0128
     cd6:	88 23       	and	r24, r24
     cd8:	99 f4       	brne	.+38     	; 0xd00 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     cda:	e0 91 4b 01 	lds	r30, 0x014B
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	e8 5d       	subi	r30, 0xD8	; 216
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     ce6:	80 91 4b 01 	lds	r24, 0x014B
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	80 93 4b 01 	sts	0x014B, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     cf0:	80 91 4b 01 	lds	r24, 0x014B
     cf4:	81 32       	cpi	r24, 0x21	; 33
     cf6:	10 f0       	brcs	.+4      	; 0xcfc <__vector_4+0x58>
	  debug.bufindex=0;
     cf8:	10 92 4b 01 	sts	0x014B, r1
	}
    debug_timer_start();
     cfc:	0e 94 17 03 	call	0x62e	; 0x62e <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_16>:

ISR(TIMER_OVF_VECT){
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     d2c:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     d30:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     d32:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     d34:	10 92 2a 01 	sts	0x012A, r1
}
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     d42:	e5 e5       	ldi	r30, 0x55	; 85
     d44:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     d46:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     d48:	11 82       	std	Z+1, r1	; 0x01
     d4a:	12 82       	std	Z+2, r1	; 0x02
     d4c:	13 82       	std	Z+3, r1	; 0x03
     d4e:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     d50:	15 82       	std	Z+5, r1	; 0x05
     d52:	16 82       	std	Z+6, r1	; 0x06
     d54:	17 82       	std	Z+7, r1	; 0x07
     d56:	10 86       	std	Z+8, r1	; 0x08
     d58:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	eb 38       	cpi	r30, 0x8B	; 139
     d5e:	f8 07       	cpc	r31, r24
     d60:	91 f7       	brne	.-28     	; 0xd46 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     d62:	08 95       	ret

00000d64 <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	fc 01       	movw	r30, r24
     d68:	23 e0       	ldi	r18, 0x03	; 3
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	2a 95       	dec	r18
     d70:	e1 f7       	brne	.-8      	; 0xd6a <LPF_Set_Alpha+0x6>
     d72:	e8 0f       	add	r30, r24
     d74:	f9 1f       	adc	r31, r25
     d76:	eb 5a       	subi	r30, 0xAB	; 171
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	60 83       	st	Z, r22
}
     d7c:	08 95       	ret

00000d7e <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	fc 01       	movw	r30, r24
     d82:	33 e0       	ldi	r19, 0x03	; 3
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	3a 95       	dec	r19
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <LPF_Get_Alpha+0x6>
     d8c:	e8 0f       	add	r30, r24
     d8e:	f9 1f       	adc	r31, r25
     d90:	eb 5a       	subi	r30, 0xAB	; 171
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     d94:	80 81       	ld	r24, Z
     d96:	08 95       	ret

00000d98 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     d98:	2f 92       	push	r2
     d9a:	3f 92       	push	r3
     d9c:	4f 92       	push	r4
     d9e:	5f 92       	push	r5
     da0:	6f 92       	push	r6
     da2:	7f 92       	push	r7
     da4:	8f 92       	push	r8
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	1a 01       	movw	r2, r20
     dba:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	6c 01       	movw	r12, r24
     dc0:	53 e0       	ldi	r21, 0x03	; 3
     dc2:	cc 0c       	add	r12, r12
     dc4:	dd 1c       	adc	r13, r13
     dc6:	5a 95       	dec	r21
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <LPF_Get_Filtered_Value+0x2a>
     dca:	c8 0e       	add	r12, r24
     dcc:	d9 1e       	adc	r13, r25
     dce:	85 e5       	ldi	r24, 0x55	; 85
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	c8 0e       	add	r12, r24
     dd4:	d9 1e       	adc	r13, r25
     dd6:	f6 01       	movw	r30, r12
     dd8:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     dda:	62 2e       	mov	r6, r18
     ddc:	77 24       	eor	r7, r7
     dde:	88 24       	eor	r8, r8
     de0:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     de2:	64 e6       	ldi	r22, 0x64	; 100
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	62 1b       	sub	r22, r18
     de8:	71 09       	sbc	r23, r1
     dea:	88 27       	eor	r24, r24
     dec:	77 fd       	sbrc	r23, 7
     dee:	80 95       	com	r24
     df0:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     df2:	45 e0       	ldi	r20, 0x05	; 5
     df4:	a4 2e       	mov	r10, r20
     df6:	b1 2c       	mov	r11, r1
     df8:	ac 0c       	add	r10, r12
     dfa:	bd 1c       	adc	r11, r13
     dfc:	25 81       	ldd	r18, Z+5	; 0x05
     dfe:	36 81       	ldd	r19, Z+6	; 0x06
     e00:	47 81       	ldd	r20, Z+7	; 0x07
     e02:	50 85       	ldd	r21, Z+8	; 0x08
     e04:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsi3>
     e08:	7b 01       	movw	r14, r22
     e0a:	8c 01       	movw	r16, r24
     e0c:	c2 01       	movw	r24, r4
     e0e:	b1 01       	movw	r22, r2
     e10:	a4 01       	movw	r20, r8
     e12:	93 01       	movw	r18, r6
     e14:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsi3>
     e18:	e6 0e       	add	r14, r22
     e1a:	f7 1e       	adc	r15, r23
     e1c:	08 1f       	adc	r16, r24
     e1e:	19 1f       	adc	r17, r25
     e20:	c8 01       	movw	r24, r16
     e22:	b7 01       	movw	r22, r14
     e24:	24 e6       	ldi	r18, 0x64	; 100
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divmodsi4>
     e30:	ca 01       	movw	r24, r20
     e32:	f6 01       	movw	r30, r12
     e34:	25 83       	std	Z+5, r18	; 0x05
     e36:	f5 01       	movw	r30, r10
     e38:	31 83       	std	Z+1, r19	; 0x01
     e3a:	42 83       	std	Z+2, r20	; 0x02
     e3c:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     e3e:	b9 01       	movw	r22, r18
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	bf 90       	pop	r11
     e4e:	af 90       	pop	r10
     e50:	9f 90       	pop	r9
     e52:	8f 90       	pop	r8
     e54:	7f 90       	pop	r7
     e56:	6f 90       	pop	r6
     e58:	5f 90       	pop	r5
     e5a:	4f 90       	pop	r4
     e5c:	3f 90       	pop	r3
     e5e:	2f 90       	pop	r2
     e60:	08 95       	ret

00000e62 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     e62:	0e 94 a1 06 	call	0xd42	; 0xd42 <LPF_Struct_Init>
     e66:	08 95       	ret

00000e68 <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
     e68:	a0 e0       	ldi	r26, 0x00	; 0
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	21 e4       	ldi	r18, 0x41	; 65
     e72:	33 e0       	ldi	r19, 0x03	; 3
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsi3>
     e7c:	60 51       	subi	r22, 0x10	; 16
     e7e:	76 4b       	sbci	r23, 0xB6	; 182
     e80:	8d 4f       	sbci	r24, 0xFD	; 253
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
     e84:	24 e6       	ldi	r18, 0x64	; 100
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     e90:	30 93 89 00 	sts	0x0089, r19
     e94:	20 93 88 00 	sts	0x0088, r18
     e98:	08 95       	ret

00000e9a <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
     e9e:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
     ea0:	60 e6       	ldi	r22, 0x60	; 96
     ea2:	73 ee       	ldi	r23, 0xE3	; 227
     ea4:	86 e1       	ldi	r24, 0x16	; 22
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	30 40       	sbci	r19, 0x00	; 0
     eb0:	30 93 87 00 	sts	0x0087, r19
     eb4:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
     eb8:	8c ed       	ldi	r24, 0xDC	; 220
     eba:	95 e0       	ldi	r25, 0x05	; 5
     ebc:	90 93 89 00 	sts	0x0089, r25
     ec0:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
     ec4:	82 e8       	ldi	r24, 0x82	; 130
     ec6:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     eca:	8a e1       	ldi	r24, 0x1A	; 26
     ecc:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 34 07 	call	0xe68	; 0xe68 <Servo_Set_Angle>
     ed8:	88 ee       	ldi	r24, 0xE8	; 232
     eda:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     edc:	2c e2       	ldi	r18, 0x2C	; 44
     ede:	31 e0       	ldi	r19, 0x01	; 1
     ee0:	f9 01       	movw	r30, r18
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <Servo_Init+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	d9 f7       	brne	.-10     	; 0xee0 <Servo_Init+0x46>
  _delay_ms(100);
}
     eea:	08 95       	ret

00000eec <MPU6050_Struct_Init>:
}mpu6050_t;

mpu6050_t MPU6050;

void MPU6050_Struct_Init(void){
  MPU6050.AccX=0;
     eec:	10 92 8c 01 	sts	0x018C, r1
     ef0:	10 92 8b 01 	sts	0x018B, r1
  MPU6050.AccY=0;
     ef4:	10 92 8e 01 	sts	0x018E, r1
     ef8:	10 92 8d 01 	sts	0x018D, r1
  MPU6050.AccZ=0;
     efc:	10 92 90 01 	sts	0x0190, r1
     f00:	10 92 8f 01 	sts	0x018F, r1
  MPU6050.GyroX=0;
     f04:	10 92 92 01 	sts	0x0192, r1
     f08:	10 92 91 01 	sts	0x0191, r1
  MPU6050.GyroY=0;
     f0c:	10 92 94 01 	sts	0x0194, r1
     f10:	10 92 93 01 	sts	0x0193, r1
  MPU6050.GyroZ=0;
     f14:	10 92 96 01 	sts	0x0196, r1
     f18:	10 92 95 01 	sts	0x0195, r1
  MPU6050.GyroXCal=0;
     f1c:	10 92 98 01 	sts	0x0198, r1
     f20:	10 92 97 01 	sts	0x0197, r1
  MPU6050.GyroYCal=0;
     f24:	10 92 9a 01 	sts	0x019A, r1
     f28:	10 92 99 01 	sts	0x0199, r1
  MPU6050.GyroZCal=0;
     f2c:	10 92 9c 01 	sts	0x019C, r1
     f30:	10 92 9b 01 	sts	0x019B, r1
  MPU6050.Pitch=0;
     f34:	10 92 9e 01 	sts	0x019E, r1
     f38:	10 92 9d 01 	sts	0x019D, r1
  MPU6050.Roll=0;
     f3c:	10 92 a0 01 	sts	0x01A0, r1
     f40:	10 92 9f 01 	sts	0x019F, r1
  MPU6050.Yaw=0;
     f44:	10 92 a2 01 	sts	0x01A2, r1
     f48:	10 92 a1 01 	sts	0x01A1, r1
  MPU6050.Temp=0;
     f4c:	10 92 a4 01 	sts	0x01A4, r1
     f50:	10 92 a3 01 	sts	0x01A3, r1
  MPU6050.Error=0;
     f54:	10 92 a6 01 	sts	0x01A6, r1
     f58:	10 92 a5 01 	sts	0x01A5, r1
}
     f5c:	08 95       	ret

00000f5e <MPU6050_Get_AccX>:

int MPU6050_Get_AccX(void){
  return MPU6050.AccX;
}
     f5e:	80 91 8b 01 	lds	r24, 0x018B
     f62:	90 91 8c 01 	lds	r25, 0x018C
     f66:	08 95       	ret

00000f68 <MPU6050_Get_AccY>:

int MPU6050_Get_AccY(void){
  return MPU6050.AccY;
}
     f68:	80 91 8d 01 	lds	r24, 0x018D
     f6c:	90 91 8e 01 	lds	r25, 0x018E
     f70:	08 95       	ret

00000f72 <MPU6050_Get_AccZ>:

int MPU6050_Get_AccZ(void){
  return MPU6050.AccZ;
}
     f72:	80 91 8f 01 	lds	r24, 0x018F
     f76:	90 91 90 01 	lds	r25, 0x0190
     f7a:	08 95       	ret

00000f7c <MPU6050_Get_GyroX>:

int MPU6050_Get_GyroX(void){
  return MPU6050.GyroX;
}
     f7c:	80 91 91 01 	lds	r24, 0x0191
     f80:	90 91 92 01 	lds	r25, 0x0192
     f84:	08 95       	ret

00000f86 <MPU6050_Get_GyroY>:

int MPU6050_Get_GyroY(void){
  return MPU6050.GyroY;
}
     f86:	80 91 93 01 	lds	r24, 0x0193
     f8a:	90 91 94 01 	lds	r25, 0x0194
     f8e:	08 95       	ret

00000f90 <MPU6050_Get_GyroZ>:

int MPU6050_Get_GyroZ(void){
  return MPU6050.GyroZ;
}
     f90:	80 91 95 01 	lds	r24, 0x0195
     f94:	90 91 96 01 	lds	r25, 0x0196
     f98:	08 95       	ret

00000f9a <MPU6050_Get_GyroXCal>:

int MPU6050_Get_GyroXCal(void){
  return MPU6050.GyroXCal;
}
     f9a:	80 91 97 01 	lds	r24, 0x0197
     f9e:	90 91 98 01 	lds	r25, 0x0198
     fa2:	08 95       	ret

00000fa4 <MPU6050_Get_GyroYCal>:

int MPU6050_Get_GyroYCal(void){
  return MPU6050.GyroYCal;
}
     fa4:	80 91 99 01 	lds	r24, 0x0199
     fa8:	90 91 9a 01 	lds	r25, 0x019A
     fac:	08 95       	ret

00000fae <MPU6050_Get_GyroZCal>:

int MPU6050_Get_GyroZCal(void){
  return MPU6050.GyroZCal;
}
     fae:	80 91 9b 01 	lds	r24, 0x019B
     fb2:	90 91 9c 01 	lds	r25, 0x019C
     fb6:	08 95       	ret

00000fb8 <MPU6050_Get_Pitch>:

int MPU6050_Get_Pitch(void){
  return MPU6050.Pitch;
}
     fb8:	80 91 9d 01 	lds	r24, 0x019D
     fbc:	90 91 9e 01 	lds	r25, 0x019E
     fc0:	08 95       	ret

00000fc2 <MPU6050_Get_Roll>:

int MPU6050_Get_Roll(void){
  return MPU6050.Roll;
}
     fc2:	80 91 9f 01 	lds	r24, 0x019F
     fc6:	90 91 a0 01 	lds	r25, 0x01A0
     fca:	08 95       	ret

00000fcc <MPU6050_Get_Yaw>:

int MPU6050_Get_Yaw(void){
  return MPU6050.Yaw;
}
     fcc:	80 91 a1 01 	lds	r24, 0x01A1
     fd0:	90 91 a2 01 	lds	r25, 0x01A2
     fd4:	08 95       	ret

00000fd6 <MPU6050_Get_Temp>:

int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}
     fd6:	80 91 a3 01 	lds	r24, 0x01A3
     fda:	90 91 a4 01 	lds	r25, 0x01A4
     fde:	08 95       	ret

00000fe0 <MPU6050_Get_Error>:

int MPU6050_Get_Error(void){
  return MPU6050.Error;
}
     fe0:	80 91 a5 01 	lds	r24, 0x01A5
     fe4:	90 91 a6 01 	lds	r25, 0x01A6
     fe8:	08 95       	ret

00000fea <MPU6050_Error_Clear>:

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
     fea:	10 92 a6 01 	sts	0x01A6, r1
     fee:	10 92 a5 01 	sts	0x01A5, r1
}
     ff2:	08 95       	ret

00000ff4 <MPU6050_Read_Roll>:
    MPU6050.Pitch=0;
    return 0;
  }
}

int MPU6050_Read_Roll(void){
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
  if(MPU6050.Error==0){
     ffc:	80 91 a5 01 	lds	r24, 0x01A5
    1000:	90 91 a6 01 	lds	r25, 0x01A6
    1004:	89 2b       	or	r24, r25
    1006:	91 f5       	brne	.+100    	; 0x106c <MPU6050_Read_Roll+0x78>
    float ay=MPU6050_Get_AccY();
    float az=MPU6050_Get_AccZ();
    float divy=ay/az;
    float roll = atan(divy);
    1008:	60 91 8d 01 	lds	r22, 0x018D
    100c:	70 91 8e 01 	lds	r23, 0x018E
    1010:	88 27       	eor	r24, r24
    1012:	77 fd       	sbrc	r23, 7
    1014:	80 95       	com	r24
    1016:	98 2f       	mov	r25, r24
    1018:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    101c:	7b 01       	movw	r14, r22
    101e:	8c 01       	movw	r16, r24
    1020:	60 91 8f 01 	lds	r22, 0x018F
    1024:	70 91 90 01 	lds	r23, 0x0190
    1028:	88 27       	eor	r24, r24
    102a:	77 fd       	sbrc	r23, 7
    102c:	80 95       	com	r24
    102e:	98 2f       	mov	r25, r24
    1030:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	c8 01       	movw	r24, r16
    103a:	b7 01       	movw	r22, r14
    103c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__divsf3>
    1040:	0e 94 4c 0b 	call	0x1698	; 0x1698 <atan>
    roll*=10.0;
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
    roll*=57.3;
	MPU6050.Roll=(int)roll;
    1050:	23 e3       	ldi	r18, 0x33	; 51
    1052:	33 e3       	ldi	r19, 0x33	; 51
    1054:	45 e6       	ldi	r20, 0x65	; 101
    1056:	52 e4       	ldi	r21, 0x42	; 66
    1058:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
    105c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fixsfsi>
    1060:	9b 01       	movw	r18, r22
    1062:	70 93 a0 01 	sts	0x01A0, r23
    1066:	60 93 9f 01 	sts	0x019F, r22
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <MPU6050_Read_Roll+0x84>
    return MPU6050.Roll;
  }else{
    MPU6050.Roll=0;
    106c:	10 92 a0 01 	sts	0x01A0, r1
    1070:	10 92 9f 01 	sts	0x019F, r1
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
    1078:	c9 01       	movw	r24, r18
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	08 95       	ret

00001084 <MPU6050_Read_Pitch>:
void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
  MPU6050_Read_Gyro();
}

int MPU6050_Read_Pitch(void){
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
  if(MPU6050.Error==0){
    108c:	80 91 a5 01 	lds	r24, 0x01A5
    1090:	90 91 a6 01 	lds	r25, 0x01A6
    1094:	89 2b       	or	r24, r25
    1096:	91 f5       	brne	.+100    	; 0x10fc <MPU6050_Read_Pitch+0x78>
    float ax=MPU6050_Get_AccX();
    float az=MPU6050_Get_AccZ();
    float divx=ax/az;
    float pitch = atan(divx);
    1098:	60 91 8b 01 	lds	r22, 0x018B
    109c:	70 91 8c 01 	lds	r23, 0x018C
    10a0:	88 27       	eor	r24, r24
    10a2:	77 fd       	sbrc	r23, 7
    10a4:	80 95       	com	r24
    10a6:	98 2f       	mov	r25, r24
    10a8:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    10ac:	7b 01       	movw	r14, r22
    10ae:	8c 01       	movw	r16, r24
    10b0:	60 91 8f 01 	lds	r22, 0x018F
    10b4:	70 91 90 01 	lds	r23, 0x0190
    10b8:	88 27       	eor	r24, r24
    10ba:	77 fd       	sbrc	r23, 7
    10bc:	80 95       	com	r24
    10be:	98 2f       	mov	r25, r24
    10c0:	0e 94 0f 0c 	call	0x181e	; 0x181e <__floatsisf>
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__divsf3>
    10d0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <atan>
    pitch*=10.0;
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
    pitch*=57.3;
	MPU6050.Pitch=(int)pitch;
    10e0:	23 e3       	ldi	r18, 0x33	; 51
    10e2:	33 e3       	ldi	r19, 0x33	; 51
    10e4:	45 e6       	ldi	r20, 0x65	; 101
    10e6:	52 e4       	ldi	r21, 0x42	; 66
    10e8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
    10ec:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fixsfsi>
    10f0:	9b 01       	movw	r18, r22
    10f2:	70 93 9e 01 	sts	0x019E, r23
    10f6:	60 93 9d 01 	sts	0x019D, r22
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <MPU6050_Read_Pitch+0x84>
	return MPU6050.Pitch;
  }else{
    MPU6050.Pitch=0;
    10fc:	10 92 9e 01 	sts	0x019E, r1
    1100:	10 92 9d 01 	sts	0x019D, r1
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
    1108:	c9 01       	movw	r24, r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	08 95       	ret

00001114 <MPU6050_Get_Mode>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    1114:	8b e6       	ldi	r24, 0x6B	; 107
    1116:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
}
    111a:	08 95       	ret

0000111c <MPU6050_Read_Temp>:
  data/=131;
  MPU6050.GyroZ=data;
  return (int16_t)data;
}

int MPU6050_Read_Temp(void){
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
    1122:	81 e4       	ldi	r24, 0x41	; 65
    1124:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1128:	f8 2e       	mov	r15, r24
  error1 = I2C_Get_Error();
    112a:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    112e:	18 2f       	mov	r17, r24
  data <<= 8;
  data |= I2C_Read_Register(0x42);
    1130:	82 e4       	ldi	r24, 0x42	; 66
    1132:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1136:	08 2f       	mov	r16, r24
  error2 = I2C_Get_Error();
    1138:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
  data /=340;
  data +=36;
  if( (error1!=0) || (error2!=0) ){
    113c:	11 23       	and	r17, r17
    113e:	81 f4       	brne	.+32     	; 0x1160 <MPU6050_Read_Temp+0x44>
    1140:	88 23       	and	r24, r24
    1142:	71 f4       	brne	.+28     	; 0x1160 <MPU6050_Read_Temp+0x44>

int MPU6050_Read_Temp(void){
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
  error1 = I2C_Get_Error();
  data <<= 8;
    1144:	9f 2d       	mov	r25, r15
    1146:	80 e0       	ldi	r24, 0x00	; 0
  data |= I2C_Read_Register(0x42);
    1148:	20 2f       	mov	r18, r16
    114a:	30 e0       	ldi	r19, 0x00	; 0
  error2 = I2C_Get_Error();
  data /=340;
    114c:	82 2b       	or	r24, r18
    114e:	93 2b       	or	r25, r19
    1150:	64 e5       	ldi	r22, 0x54	; 84
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divmodhi4>
  data +=36;
    1158:	9b 01       	movw	r18, r22
    115a:	2c 5d       	subi	r18, 0xDC	; 220
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <MPU6050_Read_Temp+0x54>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x21;
    1160:	81 e2       	ldi	r24, 0x21	; 33
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	90 93 a6 01 	sts	0x01A6, r25
    1168:	80 93 a5 01 	sts	0x01A5, r24
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
  }
  MPU6050.Temp=data;
    1170:	30 93 a4 01 	sts	0x01A4, r19
    1174:	20 93 a3 01 	sts	0x01A3, r18
  return data;
}
    1178:	c9 01       	movw	r24, r18
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	08 95       	ret

00001182 <MPU6050_Read_GyroZ>:
  data/=131;
  MPU6050.GyroY=data;
  return data;
}

int MPU6050_Read_GyroZ(void){
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x47);
    1192:	87 e4       	ldi	r24, 0x47	; 71
    1194:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1198:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    119a:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    119e:	b8 2e       	mov	r11, r24
  data <<= 8;
    11a0:	fd 2c       	mov	r15, r13
    11a2:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
    11a4:	88 e4       	ldi	r24, 0x48	; 72
    11a6:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    11aa:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    11ac:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    11b0:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    11b2:	dd 24       	eor	r13, r13
    11b4:	ec 28       	or	r14, r12
    11b6:	fd 28       	or	r15, r13
    11b8:	00 27       	eor	r16, r16
    11ba:	f7 fc       	sbrc	r15, 7
    11bc:	00 95       	com	r16
    11be:	10 2f       	mov	r17, r16
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	b8 01       	movw	r22, r16
    11c4:	a7 01       	movw	r20, r14
    11c6:	0e 94 cc 06 	call	0xd98	; 0xd98 <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroZCal;
    11ca:	20 91 9b 01 	lds	r18, 0x019B
    11ce:	30 91 9c 01 	lds	r19, 0x019C
  if( (error1!=0) || (error2!=0) ){
    11d2:	bb 20       	and	r11, r11
    11d4:	31 f4       	brne	.+12     	; 0x11e2 <MPU6050_Read_GyroZ+0x60>
    11d6:	aa 20       	and	r10, r10
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <MPU6050_Read_GyroZ+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x48);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    11da:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroZCal;
    11dc:	82 1b       	sub	r24, r18
    11de:	93 0b       	sbc	r25, r19
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <MPU6050_Read_GyroZ+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x13;
    11e2:	83 e1       	ldi	r24, 0x13	; 19
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	90 93 a6 01 	sts	0x01A6, r25
    11ea:	80 93 a5 01 	sts	0x01A5, r24
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    11f2:	63 e8       	ldi	r22, 0x83	; 131
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divmodhi4>
    11fa:	cb 01       	movw	r24, r22
  MPU6050.GyroZ=data;
    11fc:	60 93 95 01 	sts	0x0195, r22
    1200:	90 93 96 01 	sts	0x0196, r25
  return (int16_t)data;
}
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	bf 90       	pop	r11
    1212:	af 90       	pop	r10
    1214:	08 95       	ret

00001216 <MPU6050_Read_GyroY>:
  data/=131;
  MPU6050.GyroX=data;
  return data;
}

int MPU6050_Read_GyroY(void){
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x45);
    1226:	85 e4       	ldi	r24, 0x45	; 69
    1228:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    122c:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    122e:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1232:	b8 2e       	mov	r11, r24
  data <<= 8;
    1234:	fd 2c       	mov	r15, r13
    1236:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
    1238:	86 e4       	ldi	r24, 0x46	; 70
    123a:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    123e:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1240:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1244:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    1246:	dd 24       	eor	r13, r13
    1248:	ec 28       	or	r14, r12
    124a:	fd 28       	or	r15, r13
    124c:	00 27       	eor	r16, r16
    124e:	f7 fc       	sbrc	r15, 7
    1250:	00 95       	com	r16
    1252:	10 2f       	mov	r17, r16
    1254:	84 e0       	ldi	r24, 0x04	; 4
    1256:	b8 01       	movw	r22, r16
    1258:	a7 01       	movw	r20, r14
    125a:	0e 94 cc 06 	call	0xd98	; 0xd98 <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroYCal;
    125e:	20 91 99 01 	lds	r18, 0x0199
    1262:	30 91 9a 01 	lds	r19, 0x019A
  if( (error1!=0) || (error2!=0) ){
    1266:	bb 20       	and	r11, r11
    1268:	31 f4       	brne	.+12     	; 0x1276 <MPU6050_Read_GyroY+0x60>
    126a:	aa 20       	and	r10, r10
    126c:	21 f4       	brne	.+8      	; 0x1276 <MPU6050_Read_GyroY+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x46);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    126e:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroYCal;
    1270:	82 1b       	sub	r24, r18
    1272:	93 0b       	sbc	r25, r19
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <MPU6050_Read_GyroY+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x12;
    1276:	82 e1       	ldi	r24, 0x12	; 18
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	90 93 a6 01 	sts	0x01A6, r25
    127e:	80 93 a5 01 	sts	0x01A5, r24
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    1286:	63 e8       	ldi	r22, 0x83	; 131
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divmodhi4>
    128e:	cb 01       	movw	r24, r22
  MPU6050.GyroY=data;
    1290:	60 93 93 01 	sts	0x0193, r22
    1294:	90 93 94 01 	sts	0x0194, r25
  return data;
}
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	08 95       	ret

000012aa <MPU6050_Read_GyroX>:
  }
  MPU6050.AccZ=data;
  return data;
}

int MPU6050_Read_GyroX(void){
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x43);
    12ba:	83 e4       	ldi	r24, 0x43	; 67
    12bc:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    12c0:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    12c2:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    12c6:	b8 2e       	mov	r11, r24
  data <<= 8;
    12c8:	fd 2c       	mov	r15, r13
    12ca:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
    12cc:	84 e4       	ldi	r24, 0x44	; 68
    12ce:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    12d2:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    12d4:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    12d8:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    12da:	dd 24       	eor	r13, r13
    12dc:	ec 28       	or	r14, r12
    12de:	fd 28       	or	r15, r13
    12e0:	00 27       	eor	r16, r16
    12e2:	f7 fc       	sbrc	r15, 7
    12e4:	00 95       	com	r16
    12e6:	10 2f       	mov	r17, r16
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	b8 01       	movw	r22, r16
    12ec:	a7 01       	movw	r20, r14
    12ee:	0e 94 cc 06 	call	0xd98	; 0xd98 <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroXCal;
    12f2:	20 91 97 01 	lds	r18, 0x0197
    12f6:	30 91 98 01 	lds	r19, 0x0198
  if( (error1!=0) || (error2!=0) ){
    12fa:	bb 20       	and	r11, r11
    12fc:	31 f4       	brne	.+12     	; 0x130a <MPU6050_Read_GyroX+0x60>
    12fe:	aa 20       	and	r10, r10
    1300:	21 f4       	brne	.+8      	; 0x130a <MPU6050_Read_GyroX+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x44);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    1302:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroXCal;
    1304:	82 1b       	sub	r24, r18
    1306:	93 0b       	sbc	r25, r19
    1308:	08 c0       	rjmp	.+16     	; 0x131a <MPU6050_Read_GyroX+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x11;
    130a:	81 e1       	ldi	r24, 0x11	; 17
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	90 93 a6 01 	sts	0x01A6, r25
    1312:	80 93 a5 01 	sts	0x01A5, r24
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    131a:	63 e8       	ldi	r22, 0x83	; 131
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divmodhi4>
    1322:	cb 01       	movw	r24, r22
  MPU6050.GyroX=data;
    1324:	60 93 91 01 	sts	0x0191, r22
    1328:	90 93 92 01 	sts	0x0192, r25
  return data;
}
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	08 95       	ret

0000133e <MPU6050_Read_Gyro>:
    MPU6050_Read_AccZ();
  }
}

void MPU6050_Read_Gyro(void){
  if(MPU6050.Error==0){
    133e:	80 91 a5 01 	lds	r24, 0x01A5
    1342:	90 91 a6 01 	lds	r25, 0x01A6
    1346:	89 2b       	or	r24, r25
    1348:	11 f4       	brne	.+4      	; 0x134e <MPU6050_Read_Gyro+0x10>
    MPU6050_Read_GyroX();
    134a:	0e 94 55 09 	call	0x12aa	; 0x12aa <MPU6050_Read_GyroX>
  }
  if(MPU6050.Error==0){
    134e:	80 91 a5 01 	lds	r24, 0x01A5
    1352:	90 91 a6 01 	lds	r25, 0x01A6
    1356:	89 2b       	or	r24, r25
    1358:	11 f4       	brne	.+4      	; 0x135e <MPU6050_Read_Gyro+0x20>
    MPU6050_Read_GyroY();
    135a:	0e 94 0b 09 	call	0x1216	; 0x1216 <MPU6050_Read_GyroY>
  }
  if(MPU6050.Error==0){
    135e:	80 91 a5 01 	lds	r24, 0x01A5
    1362:	90 91 a6 01 	lds	r25, 0x01A6
    1366:	89 2b       	or	r24, r25
    1368:	11 f4       	brne	.+4      	; 0x136e <MPU6050_Read_Gyro+0x30>
    MPU6050_Read_GyroZ();
    136a:	0e 94 c1 08 	call	0x1182	; 0x1182 <MPU6050_Read_GyroZ>
    136e:	08 95       	ret

00001370 <MPU6050_Read_AccZ>:
  }
  MPU6050.AccY=data;
  return data;
}

int MPU6050_Read_AccZ(void){
    1370:	af 92       	push	r10
    1372:	bf 92       	push	r11
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3F);
    1380:	8f e3       	ldi	r24, 0x3F	; 63
    1382:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1386:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1388:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    138c:	b8 2e       	mov	r11, r24
  data <<= 8;
    138e:	fd 2c       	mov	r15, r13
    1390:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
    1392:	80 e4       	ldi	r24, 0x40	; 64
    1394:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1398:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    139a:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    139e:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
    13a0:	dd 24       	eor	r13, r13
    13a2:	ec 28       	or	r14, r12
    13a4:	fd 28       	or	r15, r13
    13a6:	00 27       	eor	r16, r16
    13a8:	f7 fc       	sbrc	r15, 7
    13aa:	00 95       	com	r16
    13ac:	10 2f       	mov	r17, r16
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	b8 01       	movw	r22, r16
    13b2:	a7 01       	movw	r20, r14
    13b4:	0e 94 cc 06 	call	0xd98	; 0xd98 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    13b8:	bb 20       	and	r11, r11
    13ba:	11 f4       	brne	.+4      	; 0x13c0 <MPU6050_Read_AccZ+0x50>
    13bc:	aa 20       	and	r10, r10
    13be:	41 f0       	breq	.+16     	; 0x13d0 <MPU6050_Read_AccZ+0x60>
    data=0;
	MPU6050.Error=0x03;
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	90 93 a6 01 	sts	0x01A6, r25
    13c8:	80 93 a5 01 	sts	0x01A5, r24
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccZ=data;
    13d0:	70 93 90 01 	sts	0x0190, r23
    13d4:	60 93 8f 01 	sts	0x018F, r22
  return data;
}
    13d8:	cb 01       	movw	r24, r22
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	bf 90       	pop	r11
    13e8:	af 90       	pop	r10
    13ea:	08 95       	ret

000013ec <MPU6050_Read_AccY>:
  }
  MPU6050.AccX=data;
  return data;
}

int MPU6050_Read_AccY(void){
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3D);
    13fc:	8d e3       	ldi	r24, 0x3D	; 61
    13fe:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1402:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1404:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1408:	b8 2e       	mov	r11, r24
  data <<= 8;
    140a:	fd 2c       	mov	r15, r13
    140c:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
    140e:	8e e3       	ldi	r24, 0x3E	; 62
    1410:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1414:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1416:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    141a:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
    141c:	dd 24       	eor	r13, r13
    141e:	ec 28       	or	r14, r12
    1420:	fd 28       	or	r15, r13
    1422:	00 27       	eor	r16, r16
    1424:	f7 fc       	sbrc	r15, 7
    1426:	00 95       	com	r16
    1428:	10 2f       	mov	r17, r16
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	b8 01       	movw	r22, r16
    142e:	a7 01       	movw	r20, r14
    1430:	0e 94 cc 06 	call	0xd98	; 0xd98 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    1434:	bb 20       	and	r11, r11
    1436:	11 f4       	brne	.+4      	; 0x143c <MPU6050_Read_AccY+0x50>
    1438:	aa 20       	and	r10, r10
    143a:	41 f0       	breq	.+16     	; 0x144c <MPU6050_Read_AccY+0x60>
    data=0;
	MPU6050.Error=0x02;
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	90 93 a6 01 	sts	0x01A6, r25
    1444:	80 93 a5 01 	sts	0x01A5, r24
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccY=data;
    144c:	70 93 8e 01 	sts	0x018E, r23
    1450:	60 93 8d 01 	sts	0x018D, r22
  return data;
}
    1454:	cb 01       	movw	r24, r22
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	08 95       	ret

00001468 <MPU6050_Read_AccX>:
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    I2C_Write_Register(0x6B, 0x00);
  }
}

int MPU6050_Read_AccX(void){
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3B);
    1478:	8b e3       	ldi	r24, 0x3B	; 59
    147a:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    147e:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1480:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1484:	b8 2e       	mov	r11, r24
  data <<= 8;
    1486:	fd 2c       	mov	r15, r13
    1488:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
    148a:	8c e3       	ldi	r24, 0x3C	; 60
    148c:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    1490:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1492:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1496:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
    1498:	dd 24       	eor	r13, r13
    149a:	ec 28       	or	r14, r12
    149c:	fd 28       	or	r15, r13
    149e:	00 27       	eor	r16, r16
    14a0:	f7 fc       	sbrc	r15, 7
    14a2:	00 95       	com	r16
    14a4:	10 2f       	mov	r17, r16
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	b8 01       	movw	r22, r16
    14aa:	a7 01       	movw	r20, r14
    14ac:	0e 94 cc 06 	call	0xd98	; 0xd98 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    14b0:	bb 20       	and	r11, r11
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <MPU6050_Read_AccX+0x50>
    14b4:	aa 20       	and	r10, r10
    14b6:	41 f0       	breq	.+16     	; 0x14c8 <MPU6050_Read_AccX+0x60>
    data=0;
	MPU6050.Error=0x01;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	90 93 a6 01 	sts	0x01A6, r25
    14c0:	80 93 a5 01 	sts	0x01A5, r24
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccX=data;
    14c8:	70 93 8c 01 	sts	0x018C, r23
    14cc:	60 93 8b 01 	sts	0x018B, r22
  return data;
}
    14d0:	cb 01       	movw	r24, r22
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	bf 90       	pop	r11
    14e0:	af 90       	pop	r10
    14e2:	08 95       	ret

000014e4 <MPU6050_Read_Acc>:
  MPU6050.Temp=data;
  return data;
}

void MPU6050_Read_Acc(void){
  if(MPU6050.Error==0){
    14e4:	80 91 a5 01 	lds	r24, 0x01A5
    14e8:	90 91 a6 01 	lds	r25, 0x01A6
    14ec:	89 2b       	or	r24, r25
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <MPU6050_Read_Acc+0x10>
    MPU6050_Read_AccX();
    14f0:	0e 94 34 0a 	call	0x1468	; 0x1468 <MPU6050_Read_AccX>
  }
  if(MPU6050.Error==0){
    14f4:	80 91 a5 01 	lds	r24, 0x01A5
    14f8:	90 91 a6 01 	lds	r25, 0x01A6
    14fc:	89 2b       	or	r24, r25
    14fe:	11 f4       	brne	.+4      	; 0x1504 <MPU6050_Read_Acc+0x20>
    MPU6050_Read_AccY();
    1500:	0e 94 f6 09 	call	0x13ec	; 0x13ec <MPU6050_Read_AccY>
  }
  if(MPU6050.Error==0){
    1504:	80 91 a5 01 	lds	r24, 0x01A5
    1508:	90 91 a6 01 	lds	r25, 0x01A6
    150c:	89 2b       	or	r24, r25
    150e:	11 f4       	brne	.+4      	; 0x1514 <MPU6050_Read_Acc+0x30>
    MPU6050_Read_AccZ();
    1510:	0e 94 b8 09 	call	0x1370	; 0x1370 <MPU6050_Read_AccZ>
    1514:	08 95       	ret

00001516 <MPU6050_Read_Acc_Gyro>:
    MPU6050_Read_GyroZ();
  }
}

void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
    1516:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MPU6050_Read_Acc>
  MPU6050_Read_Gyro();
    151a:	0e 94 9f 09 	call	0x133e	; 0x133e <MPU6050_Read_Gyro>
}
    151e:	08 95       	ret

00001520 <MPU6050_Set_Mode_Active>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    1520:	8b e6       	ldi	r24, 0x6B	; 107
    1522:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
    I2C_Write_Register(0x6B, 0x40);
  }
}

void MPU6050_Set_Mode_Active(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    1526:	86 ff       	sbrs	r24, 6
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <MPU6050_Set_Mode_Active+0x12>
    I2C_Write_Register(0x6B, 0x00);
    152a:	8b e6       	ldi	r24, 0x6B	; 107
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	0e 94 99 02 	call	0x532	; 0x532 <I2C_Write_Register>
    1532:	08 95       	ret

00001534 <MPU6050_Restart>:
  MPU6050.GyroYCal=MPU6050_Get_GyroY();
  MPU6050.GyroZCal=MPU6050_Get_GyroZ();
  
}

void MPU6050_Restart(void){
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
  I2C_Error_Clear_All();
    153a:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Error_Clear_All>
int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}

int MPU6050_Get_Error(void){
  return MPU6050.Error;
    153e:	f0 90 a5 01 	lds	r15, 0x01A5
}

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
    1542:	10 92 a6 01 	sts	0x01A6, r1
    1546:	10 92 a5 01 	sts	0x01A5, r1
    154a:	00 e7       	ldi	r16, 0x70	; 112
    154c:	17 e1       	ldi	r17, 0x17	; 23
    154e:	c8 01       	movw	r24, r16
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <MPU6050_Restart+0x1c>
void MPU6050_Restart(void){
  I2C_Error_Clear_All();
  uint8_t temp=MPU6050_Get_Error();
  MPU6050_Error_Clear();
  _delay_ms(2);
  I2C_Stop();
    1554:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
    1558:	c8 01       	movw	r24, r16
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <MPU6050_Restart+0x26>
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
    155e:	0e 94 90 0a 	call	0x1520	; 0x1520 <MPU6050_Set_Mode_Active>
    1562:	c8 01       	movw	r24, r16
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <MPU6050_Restart+0x30>
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
    1568:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MPU6050_Read_Acc_Gyro>
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    156c:	8b e6       	ldi	r24, 0x6B	; 107
    156e:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
  I2C_Stop();
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
  if(MPU6050_Get_Mode()!=0){
    1572:	88 23       	and	r24, r24
    1574:	21 f0       	breq	.+8      	; 0x157e <MPU6050_Restart+0x4a>
    MPU6050.Error=temp;
    1576:	f0 92 a5 01 	sts	0x01A5, r15
    157a:	10 92 a6 01 	sts	0x01A6, r1
  }
}
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	08 95       	ret

00001586 <MPU6050_Init>:
    MPU6050.Roll=0;
    return 0;
  }
}

void MPU6050_Init(void){
    1586:	1f 93       	push	r17
  I2C_Init();
    1588:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <I2C_Init>
    158c:	80 e3       	ldi	r24, 0x30	; 48
    158e:	95 e7       	ldi	r25, 0x75	; 117
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <MPU6050_Init+0xa>
  _delay_ms(10);
  MPU6050_Struct_Init();
    1594:	0e 94 76 07 	call	0xeec	; 0xeec <MPU6050_Struct_Init>
  MPU6050_Set_Mode_Active();
    1598:	0e 94 90 0a 	call	0x1520	; 0x1520 <MPU6050_Set_Mode_Active>
  #ifdef LPF_EN
	LPF_Init();
    159c:	0e 94 31 07 	call	0xe62	; 0xe62 <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	62 e3       	ldi	r22, 0x32	; 50
    15a4:	0e 94 b2 06 	call	0xd64	; 0xd64 <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	62 e3       	ldi	r22, 0x32	; 50
    15ac:	0e 94 b2 06 	call	0xd64	; 0xd64 <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	62 e3       	ldi	r22, 0x32	; 50
    15b4:	0e 94 b2 06 	call	0xd64	; 0xd64 <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	62 e3       	ldi	r22, 0x32	; 50
    15bc:	0e 94 b2 06 	call	0xd64	; 0xd64 <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	62 e3       	ldi	r22, 0x32	; 50
    15c4:	0e 94 b2 06 	call	0xd64	; 0xd64 <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
    15c8:	85 e0       	ldi	r24, 0x05	; 5
    15ca:	62 e3       	ldi	r22, 0x32	; 50
    15cc:	0e 94 b2 06 	call	0xd64	; 0xd64 <LPF_Set_Alpha>
    15d0:	88 ee       	ldi	r24, 0xE8	; 232
    15d2:	93 e0       	ldi	r25, 0x03	; 3
    15d4:	2c e2       	ldi	r18, 0x2C	; 44
    15d6:	31 e0       	ldi	r19, 0x01	; 1
    15d8:	f9 01       	movw	r30, r18
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <MPU6050_Init+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	d9 f7       	brne	.-10     	; 0x15d8 <MPU6050_Init+0x52>
    15e2:	10 e0       	ldi	r17, 0x00	; 0
  #endif
  _delay_ms(100);
  for(uint8_t i=0;i<32;i++){
    MPU6050_Read_Acc_Gyro();
    15e4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MPU6050_Read_Acc_Gyro>
	LPF_Set_Alpha(3,LPF_EN);
	LPF_Set_Alpha(4,LPF_EN);
	LPF_Set_Alpha(5,LPF_EN);
  #endif
  _delay_ms(100);
  for(uint8_t i=0;i<32;i++){
    15e8:	1f 5f       	subi	r17, 0xFF	; 255
    15ea:	10 32       	cpi	r17, 0x20	; 32
    15ec:	d9 f7       	brne	.-10     	; 0x15e4 <MPU6050_Init+0x5e>
    MPU6050_Read_Acc_Gyro();
  }
  MPU6050.GyroXCal=MPU6050_Get_GyroX();
    15ee:	80 91 91 01 	lds	r24, 0x0191
    15f2:	90 91 92 01 	lds	r25, 0x0192
    15f6:	90 93 98 01 	sts	0x0198, r25
    15fa:	80 93 97 01 	sts	0x0197, r24
  MPU6050.GyroYCal=MPU6050_Get_GyroY();
    15fe:	80 91 93 01 	lds	r24, 0x0193
    1602:	90 91 94 01 	lds	r25, 0x0194
    1606:	90 93 9a 01 	sts	0x019A, r25
    160a:	80 93 99 01 	sts	0x0199, r24
  MPU6050.GyroZCal=MPU6050_Get_GyroZ();
    160e:	80 91 95 01 	lds	r24, 0x0195
    1612:	90 91 96 01 	lds	r25, 0x0196
    1616:	90 93 9c 01 	sts	0x019C, r25
    161a:	80 93 9b 01 	sts	0x019B, r24
  
}
    161e:	1f 91       	pop	r17
    1620:	08 95       	ret

00001622 <MPU6050_Set_Mode_Sleep>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    1622:	8b e6       	ldi	r24, 0x6B	; 107
    1624:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Read_Register>
}

void MPU6050_Set_Mode_Sleep(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0){
    1628:	86 fd       	sbrc	r24, 6
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <MPU6050_Set_Mode_Sleep+0x12>
    I2C_Write_Register(0x6B, 0x40);
    162c:	8b e6       	ldi	r24, 0x6B	; 107
    162e:	60 e4       	ldi	r22, 0x40	; 64
    1630:	0e 94 99 02 	call	0x532	; 0x532 <I2C_Write_Register>
    1634:	08 95       	ret

00001636 <Timer_Struct_Init>:
#include <math.h>
#include "time.h"

void Timer_Struct_Init(void){
  
}
    1636:	08 95       	ret

00001638 <Timer_Config_Reg>:

void Timer_Config_Reg(void){
  TCCR1A = 0x00;
    1638:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0x00;
    163c:	a1 e8       	ldi	r26, 0x81	; 129
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	1c 92       	st	X, r1
  TCCR1C = 0x00;
    1642:	10 92 82 00 	sts	0x0082, r1
  TCNT1  = 0x00;
    1646:	e4 e8       	ldi	r30, 0x84	; 132
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	11 82       	std	Z+1, r1	; 0x01
    164c:	10 82       	st	Z, r1
  TIMSK1 = 0x00;
    164e:	10 92 6f 00 	sts	0x006F, r1
  TIFR1  = 0x00;
    1652:	16 ba       	out	0x16, r1	; 22
  TCCR1B = (1<<CS10)|(1<<CS11);
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	8c 93       	st	X, r24
  TCNT1  = 0;
    1658:	11 82       	std	Z+1, r1	; 0x01
    165a:	10 82       	st	Z, r1
}
    165c:	08 95       	ret

0000165e <Timer_Init>:

void Timer_Init(void){
  Timer_Struct_Init();
  Timer_Config_Reg();
    165e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <Timer_Config_Reg>
}
    1662:	08 95       	ret

00001664 <Timer_Start>:

void Timer_Start(void){
  TCNT1  = 0;
    1664:	10 92 85 00 	sts	0x0085, r1
    1668:	10 92 84 00 	sts	0x0084, r1
}
    166c:	08 95       	ret

0000166e <Timer_Get_Time>:

uint32_t Timer_Get_Time(void){
  uint32_t temp=0;
  temp=TCNT1;
    166e:	60 91 84 00 	lds	r22, 0x0084
    1672:	70 91 85 00 	lds	r23, 0x0085
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
  temp*=533;  //multiplied by 5.33us*100
    167a:	25 e1       	ldi	r18, 0x15	; 21
    167c:	32 e0       	ldi	r19, 0x02	; 2
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsi3>
    1686:	24 e6       	ldi	r18, 0x64	; 100
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
    1692:	ca 01       	movw	r24, r20
  temp/=100;
  return temp;
}
    1694:	b9 01       	movw	r22, r18
    1696:	08 95       	ret

00001698 <atan>:
    1698:	df 93       	push	r29
    169a:	dd 27       	eor	r29, r29
    169c:	b9 2f       	mov	r27, r25
    169e:	bf 77       	andi	r27, 0x7F	; 127
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	5f e3       	ldi	r21, 0x3F	; 63
    16a4:	16 16       	cp	r1, r22
    16a6:	17 06       	cpc	r1, r23
    16a8:	48 07       	cpc	r20, r24
    16aa:	5b 07       	cpc	r21, r27
    16ac:	10 f4       	brcc	.+4      	; 0x16b2 <atan+0x1a>
    16ae:	d9 2f       	mov	r29, r25
    16b0:	67 d1       	rcall	.+718    	; 0x1980 <inverse>
    16b2:	9f 93       	push	r25
    16b4:	8f 93       	push	r24
    16b6:	7f 93       	push	r23
    16b8:	6f 93       	push	r22
    16ba:	cc d1       	rcall	.+920    	; 0x1a54 <square>
    16bc:	e8 e6       	ldi	r30, 0x68	; 104
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	f2 d0       	rcall	.+484    	; 0x18a6 <__fp_powser>
    16c2:	24 d1       	rcall	.+584    	; 0x190c <__fp_round>
    16c4:	2f 91       	pop	r18
    16c6:	3f 91       	pop	r19
    16c8:	4f 91       	pop	r20
    16ca:	5f 91       	pop	r21
    16cc:	6c d1       	rcall	.+728    	; 0x19a6 <__mulsf3x>
    16ce:	dd 23       	and	r29, r29
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <atan+0x4c>
    16d2:	90 58       	subi	r25, 0x80	; 128
    16d4:	a2 ea       	ldi	r26, 0xA2	; 162
    16d6:	2a ed       	ldi	r18, 0xDA	; 218
    16d8:	3f e0       	ldi	r19, 0x0F	; 15
    16da:	49 ec       	ldi	r20, 0xC9	; 201
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	d0 78       	andi	r29, 0x80	; 128
    16e0:	5d 27       	eor	r21, r29
    16e2:	c8 d1       	rcall	.+912    	; 0x1a74 <__addsf3x>
    16e4:	df 91       	pop	r29
    16e6:	12 c1       	rjmp	.+548    	; 0x190c <__fp_round>

000016e8 <__divsf3>:
    16e8:	0c d0       	rcall	.+24     	; 0x1702 <__divsf3x>
    16ea:	10 c1       	rjmp	.+544    	; 0x190c <__fp_round>
    16ec:	08 d1       	rcall	.+528    	; 0x18fe <__fp_pscB>
    16ee:	40 f0       	brcs	.+16     	; 0x1700 <__divsf3+0x18>
    16f0:	ff d0       	rcall	.+510    	; 0x18f0 <__fp_pscA>
    16f2:	30 f0       	brcs	.+12     	; 0x1700 <__divsf3+0x18>
    16f4:	21 f4       	brne	.+8      	; 0x16fe <__divsf3+0x16>
    16f6:	5f 3f       	cpi	r21, 0xFF	; 255
    16f8:	19 f0       	breq	.+6      	; 0x1700 <__divsf3+0x18>
    16fa:	cc c0       	rjmp	.+408    	; 0x1894 <__fp_inf>
    16fc:	51 11       	cpse	r21, r1
    16fe:	3a c1       	rjmp	.+628    	; 0x1974 <__fp_szero>
    1700:	cf c0       	rjmp	.+414    	; 0x18a0 <__fp_nan>

00001702 <__divsf3x>:
    1702:	15 d1       	rcall	.+554    	; 0x192e <__fp_split3>
    1704:	98 f3       	brcs	.-26     	; 0x16ec <__divsf3+0x4>

00001706 <__divsf3_pse>:
    1706:	99 23       	and	r25, r25
    1708:	c9 f3       	breq	.-14     	; 0x16fc <__divsf3+0x14>
    170a:	55 23       	and	r21, r21
    170c:	b1 f3       	breq	.-20     	; 0x16fa <__divsf3+0x12>
    170e:	95 1b       	sub	r25, r21
    1710:	55 0b       	sbc	r21, r21
    1712:	bb 27       	eor	r27, r27
    1714:	aa 27       	eor	r26, r26
    1716:	62 17       	cp	r22, r18
    1718:	73 07       	cpc	r23, r19
    171a:	84 07       	cpc	r24, r20
    171c:	38 f0       	brcs	.+14     	; 0x172c <__divsf3_pse+0x26>
    171e:	9f 5f       	subi	r25, 0xFF	; 255
    1720:	5f 4f       	sbci	r21, 0xFF	; 255
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	44 1f       	adc	r20, r20
    1728:	aa 1f       	adc	r26, r26
    172a:	a9 f3       	breq	.-22     	; 0x1716 <__divsf3_pse+0x10>
    172c:	33 d0       	rcall	.+102    	; 0x1794 <__divsf3_pse+0x8e>
    172e:	0e 2e       	mov	r0, r30
    1730:	3a f0       	brmi	.+14     	; 0x1740 <__divsf3_pse+0x3a>
    1732:	e0 e8       	ldi	r30, 0x80	; 128
    1734:	30 d0       	rcall	.+96     	; 0x1796 <__divsf3_pse+0x90>
    1736:	91 50       	subi	r25, 0x01	; 1
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	e6 95       	lsr	r30
    173c:	00 1c       	adc	r0, r0
    173e:	ca f7       	brpl	.-14     	; 0x1732 <__divsf3_pse+0x2c>
    1740:	29 d0       	rcall	.+82     	; 0x1794 <__divsf3_pse+0x8e>
    1742:	fe 2f       	mov	r31, r30
    1744:	27 d0       	rcall	.+78     	; 0x1794 <__divsf3_pse+0x8e>
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	bb 1f       	adc	r27, r27
    174e:	26 17       	cp	r18, r22
    1750:	37 07       	cpc	r19, r23
    1752:	48 07       	cpc	r20, r24
    1754:	ab 07       	cpc	r26, r27
    1756:	b0 e8       	ldi	r27, 0x80	; 128
    1758:	09 f0       	breq	.+2      	; 0x175c <__divsf3_pse+0x56>
    175a:	bb 0b       	sbc	r27, r27
    175c:	80 2d       	mov	r24, r0
    175e:	bf 01       	movw	r22, r30
    1760:	ff 27       	eor	r31, r31
    1762:	93 58       	subi	r25, 0x83	; 131
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	2a f0       	brmi	.+10     	; 0x1772 <__divsf3_pse+0x6c>
    1768:	9e 3f       	cpi	r25, 0xFE	; 254
    176a:	51 05       	cpc	r21, r1
    176c:	68 f0       	brcs	.+26     	; 0x1788 <__divsf3_pse+0x82>
    176e:	92 c0       	rjmp	.+292    	; 0x1894 <__fp_inf>
    1770:	01 c1       	rjmp	.+514    	; 0x1974 <__fp_szero>
    1772:	5f 3f       	cpi	r21, 0xFF	; 255
    1774:	ec f3       	brlt	.-6      	; 0x1770 <__divsf3_pse+0x6a>
    1776:	98 3e       	cpi	r25, 0xE8	; 232
    1778:	dc f3       	brlt	.-10     	; 0x1770 <__divsf3_pse+0x6a>
    177a:	86 95       	lsr	r24
    177c:	77 95       	ror	r23
    177e:	67 95       	ror	r22
    1780:	b7 95       	ror	r27
    1782:	f7 95       	ror	r31
    1784:	9f 5f       	subi	r25, 0xFF	; 255
    1786:	c9 f7       	brne	.-14     	; 0x177a <__divsf3_pse+0x74>
    1788:	88 0f       	add	r24, r24
    178a:	91 1d       	adc	r25, r1
    178c:	96 95       	lsr	r25
    178e:	87 95       	ror	r24
    1790:	97 f9       	bld	r25, 7
    1792:	08 95       	ret
    1794:	e1 e0       	ldi	r30, 0x01	; 1
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	bb 1f       	adc	r27, r27
    179e:	62 17       	cp	r22, r18
    17a0:	73 07       	cpc	r23, r19
    17a2:	84 07       	cpc	r24, r20
    17a4:	ba 07       	cpc	r27, r26
    17a6:	20 f0       	brcs	.+8      	; 0x17b0 <__divsf3_pse+0xaa>
    17a8:	62 1b       	sub	r22, r18
    17aa:	73 0b       	sbc	r23, r19
    17ac:	84 0b       	sbc	r24, r20
    17ae:	ba 0b       	sbc	r27, r26
    17b0:	ee 1f       	adc	r30, r30
    17b2:	88 f7       	brcc	.-30     	; 0x1796 <__divsf3_pse+0x90>
    17b4:	e0 95       	com	r30
    17b6:	08 95       	ret

000017b8 <__fixsfsi>:
    17b8:	04 d0       	rcall	.+8      	; 0x17c2 <__fixunssfsi>
    17ba:	68 94       	set
    17bc:	b1 11       	cpse	r27, r1
    17be:	da c0       	rjmp	.+436    	; 0x1974 <__fp_szero>
    17c0:	08 95       	ret

000017c2 <__fixunssfsi>:
    17c2:	bd d0       	rcall	.+378    	; 0x193e <__fp_splitA>
    17c4:	88 f0       	brcs	.+34     	; 0x17e8 <__fixunssfsi+0x26>
    17c6:	9f 57       	subi	r25, 0x7F	; 127
    17c8:	90 f0       	brcs	.+36     	; 0x17ee <__fixunssfsi+0x2c>
    17ca:	b9 2f       	mov	r27, r25
    17cc:	99 27       	eor	r25, r25
    17ce:	b7 51       	subi	r27, 0x17	; 23
    17d0:	a0 f0       	brcs	.+40     	; 0x17fa <__fixunssfsi+0x38>
    17d2:	d1 f0       	breq	.+52     	; 0x1808 <__fixunssfsi+0x46>
    17d4:	66 0f       	add	r22, r22
    17d6:	77 1f       	adc	r23, r23
    17d8:	88 1f       	adc	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	1a f0       	brmi	.+6      	; 0x17e4 <__fixunssfsi+0x22>
    17de:	ba 95       	dec	r27
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <__fixunssfsi+0x12>
    17e2:	12 c0       	rjmp	.+36     	; 0x1808 <__fixunssfsi+0x46>
    17e4:	b1 30       	cpi	r27, 0x01	; 1
    17e6:	81 f0       	breq	.+32     	; 0x1808 <__fixunssfsi+0x46>
    17e8:	c4 d0       	rcall	.+392    	; 0x1972 <__fp_zero>
    17ea:	b1 e0       	ldi	r27, 0x01	; 1
    17ec:	08 95       	ret
    17ee:	c1 c0       	rjmp	.+386    	; 0x1972 <__fp_zero>
    17f0:	67 2f       	mov	r22, r23
    17f2:	78 2f       	mov	r23, r24
    17f4:	88 27       	eor	r24, r24
    17f6:	b8 5f       	subi	r27, 0xF8	; 248
    17f8:	39 f0       	breq	.+14     	; 0x1808 <__fixunssfsi+0x46>
    17fa:	b9 3f       	cpi	r27, 0xF9	; 249
    17fc:	cc f3       	brlt	.-14     	; 0x17f0 <__fixunssfsi+0x2e>
    17fe:	86 95       	lsr	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b3 95       	inc	r27
    1806:	d9 f7       	brne	.-10     	; 0x17fe <__fixunssfsi+0x3c>
    1808:	3e f4       	brtc	.+14     	; 0x1818 <__fixunssfsi+0x56>
    180a:	90 95       	com	r25
    180c:	80 95       	com	r24
    180e:	70 95       	com	r23
    1810:	61 95       	neg	r22
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	08 95       	ret

0000181a <__floatunsisf>:
    181a:	e8 94       	clt
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <__floatsisf+0x12>

0000181e <__floatsisf>:
    181e:	97 fb       	bst	r25, 7
    1820:	3e f4       	brtc	.+14     	; 0x1830 <__floatsisf+0x12>
    1822:	90 95       	com	r25
    1824:	80 95       	com	r24
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	99 23       	and	r25, r25
    1832:	a9 f0       	breq	.+42     	; 0x185e <__floatsisf+0x40>
    1834:	f9 2f       	mov	r31, r25
    1836:	96 e9       	ldi	r25, 0x96	; 150
    1838:	bb 27       	eor	r27, r27
    183a:	93 95       	inc	r25
    183c:	f6 95       	lsr	r31
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	b7 95       	ror	r27
    1846:	f1 11       	cpse	r31, r1
    1848:	f8 cf       	rjmp	.-16     	; 0x183a <__floatsisf+0x1c>
    184a:	fa f4       	brpl	.+62     	; 0x188a <__floatsisf+0x6c>
    184c:	bb 0f       	add	r27, r27
    184e:	11 f4       	brne	.+4      	; 0x1854 <__floatsisf+0x36>
    1850:	60 ff       	sbrs	r22, 0
    1852:	1b c0       	rjmp	.+54     	; 0x188a <__floatsisf+0x6c>
    1854:	6f 5f       	subi	r22, 0xFF	; 255
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	16 c0       	rjmp	.+44     	; 0x188a <__floatsisf+0x6c>
    185e:	88 23       	and	r24, r24
    1860:	11 f0       	breq	.+4      	; 0x1866 <__floatsisf+0x48>
    1862:	96 e9       	ldi	r25, 0x96	; 150
    1864:	11 c0       	rjmp	.+34     	; 0x1888 <__floatsisf+0x6a>
    1866:	77 23       	and	r23, r23
    1868:	21 f0       	breq	.+8      	; 0x1872 <__floatsisf+0x54>
    186a:	9e e8       	ldi	r25, 0x8E	; 142
    186c:	87 2f       	mov	r24, r23
    186e:	76 2f       	mov	r23, r22
    1870:	05 c0       	rjmp	.+10     	; 0x187c <__floatsisf+0x5e>
    1872:	66 23       	and	r22, r22
    1874:	71 f0       	breq	.+28     	; 0x1892 <__floatsisf+0x74>
    1876:	96 e8       	ldi	r25, 0x86	; 134
    1878:	86 2f       	mov	r24, r22
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	2a f0       	brmi	.+10     	; 0x188a <__floatsisf+0x6c>
    1880:	9a 95       	dec	r25
    1882:	66 0f       	add	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	da f7       	brpl	.-10     	; 0x1880 <__floatsisf+0x62>
    188a:	88 0f       	add	r24, r24
    188c:	96 95       	lsr	r25
    188e:	87 95       	ror	r24
    1890:	97 f9       	bld	r25, 7
    1892:	08 95       	ret

00001894 <__fp_inf>:
    1894:	97 f9       	bld	r25, 7
    1896:	9f 67       	ori	r25, 0x7F	; 127
    1898:	80 e8       	ldi	r24, 0x80	; 128
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	08 95       	ret

000018a0 <__fp_nan>:
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	80 ec       	ldi	r24, 0xC0	; 192
    18a4:	08 95       	ret

000018a6 <__fp_powser>:
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	1f 93       	push	r17
    18ac:	0f 93       	push	r16
    18ae:	ff 92       	push	r15
    18b0:	ef 92       	push	r14
    18b2:	df 92       	push	r13
    18b4:	7b 01       	movw	r14, r22
    18b6:	8c 01       	movw	r16, r24
    18b8:	68 94       	set
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <__fp_powser+0x20>
    18bc:	da 2e       	mov	r13, r26
    18be:	ef 01       	movw	r28, r30
    18c0:	72 d0       	rcall	.+228    	; 0x19a6 <__mulsf3x>
    18c2:	fe 01       	movw	r30, r28
    18c4:	e8 94       	clt
    18c6:	a5 91       	lpm	r26, Z+
    18c8:	25 91       	lpm	r18, Z+
    18ca:	35 91       	lpm	r19, Z+
    18cc:	45 91       	lpm	r20, Z+
    18ce:	55 91       	lpm	r21, Z+
    18d0:	ae f3       	brts	.-22     	; 0x18bc <__fp_powser+0x16>
    18d2:	ef 01       	movw	r28, r30
    18d4:	cf d0       	rcall	.+414    	; 0x1a74 <__addsf3x>
    18d6:	fe 01       	movw	r30, r28
    18d8:	97 01       	movw	r18, r14
    18da:	a8 01       	movw	r20, r16
    18dc:	da 94       	dec	r13
    18de:	79 f7       	brne	.-34     	; 0x18be <__fp_powser+0x18>
    18e0:	df 90       	pop	r13
    18e2:	ef 90       	pop	r14
    18e4:	ff 90       	pop	r15
    18e6:	0f 91       	pop	r16
    18e8:	1f 91       	pop	r17
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <__fp_pscA>:
    18f0:	00 24       	eor	r0, r0
    18f2:	0a 94       	dec	r0
    18f4:	16 16       	cp	r1, r22
    18f6:	17 06       	cpc	r1, r23
    18f8:	18 06       	cpc	r1, r24
    18fa:	09 06       	cpc	r0, r25
    18fc:	08 95       	ret

000018fe <__fp_pscB>:
    18fe:	00 24       	eor	r0, r0
    1900:	0a 94       	dec	r0
    1902:	12 16       	cp	r1, r18
    1904:	13 06       	cpc	r1, r19
    1906:	14 06       	cpc	r1, r20
    1908:	05 06       	cpc	r0, r21
    190a:	08 95       	ret

0000190c <__fp_round>:
    190c:	09 2e       	mov	r0, r25
    190e:	03 94       	inc	r0
    1910:	00 0c       	add	r0, r0
    1912:	11 f4       	brne	.+4      	; 0x1918 <__fp_round+0xc>
    1914:	88 23       	and	r24, r24
    1916:	52 f0       	brmi	.+20     	; 0x192c <__fp_round+0x20>
    1918:	bb 0f       	add	r27, r27
    191a:	40 f4       	brcc	.+16     	; 0x192c <__fp_round+0x20>
    191c:	bf 2b       	or	r27, r31
    191e:	11 f4       	brne	.+4      	; 0x1924 <__fp_round+0x18>
    1920:	60 ff       	sbrs	r22, 0
    1922:	04 c0       	rjmp	.+8      	; 0x192c <__fp_round+0x20>
    1924:	6f 5f       	subi	r22, 0xFF	; 255
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	8f 4f       	sbci	r24, 0xFF	; 255
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	08 95       	ret

0000192e <__fp_split3>:
    192e:	57 fd       	sbrc	r21, 7
    1930:	90 58       	subi	r25, 0x80	; 128
    1932:	44 0f       	add	r20, r20
    1934:	55 1f       	adc	r21, r21
    1936:	59 f0       	breq	.+22     	; 0x194e <__fp_splitA+0x10>
    1938:	5f 3f       	cpi	r21, 0xFF	; 255
    193a:	71 f0       	breq	.+28     	; 0x1958 <__fp_splitA+0x1a>
    193c:	47 95       	ror	r20

0000193e <__fp_splitA>:
    193e:	88 0f       	add	r24, r24
    1940:	97 fb       	bst	r25, 7
    1942:	99 1f       	adc	r25, r25
    1944:	61 f0       	breq	.+24     	; 0x195e <__fp_splitA+0x20>
    1946:	9f 3f       	cpi	r25, 0xFF	; 255
    1948:	79 f0       	breq	.+30     	; 0x1968 <__fp_splitA+0x2a>
    194a:	87 95       	ror	r24
    194c:	08 95       	ret
    194e:	12 16       	cp	r1, r18
    1950:	13 06       	cpc	r1, r19
    1952:	14 06       	cpc	r1, r20
    1954:	55 1f       	adc	r21, r21
    1956:	f2 cf       	rjmp	.-28     	; 0x193c <__fp_split3+0xe>
    1958:	46 95       	lsr	r20
    195a:	f1 df       	rcall	.-30     	; 0x193e <__fp_splitA>
    195c:	08 c0       	rjmp	.+16     	; 0x196e <__fp_splitA+0x30>
    195e:	16 16       	cp	r1, r22
    1960:	17 06       	cpc	r1, r23
    1962:	18 06       	cpc	r1, r24
    1964:	99 1f       	adc	r25, r25
    1966:	f1 cf       	rjmp	.-30     	; 0x194a <__fp_splitA+0xc>
    1968:	86 95       	lsr	r24
    196a:	71 05       	cpc	r23, r1
    196c:	61 05       	cpc	r22, r1
    196e:	08 94       	sec
    1970:	08 95       	ret

00001972 <__fp_zero>:
    1972:	e8 94       	clt

00001974 <__fp_szero>:
    1974:	bb 27       	eor	r27, r27
    1976:	66 27       	eor	r22, r22
    1978:	77 27       	eor	r23, r23
    197a:	cb 01       	movw	r24, r22
    197c:	97 f9       	bld	r25, 7
    197e:	08 95       	ret

00001980 <inverse>:
    1980:	9b 01       	movw	r18, r22
    1982:	ac 01       	movw	r20, r24
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	80 e8       	ldi	r24, 0x80	; 128
    198a:	9f e3       	ldi	r25, 0x3F	; 63
    198c:	ad ce       	rjmp	.-678    	; 0x16e8 <__divsf3>

0000198e <__mulsf3>:
    198e:	0b d0       	rcall	.+22     	; 0x19a6 <__mulsf3x>
    1990:	bd cf       	rjmp	.-134    	; 0x190c <__fp_round>
    1992:	ae df       	rcall	.-164    	; 0x18f0 <__fp_pscA>
    1994:	28 f0       	brcs	.+10     	; 0x19a0 <__mulsf3+0x12>
    1996:	b3 df       	rcall	.-154    	; 0x18fe <__fp_pscB>
    1998:	18 f0       	brcs	.+6      	; 0x19a0 <__mulsf3+0x12>
    199a:	95 23       	and	r25, r21
    199c:	09 f0       	breq	.+2      	; 0x19a0 <__mulsf3+0x12>
    199e:	7a cf       	rjmp	.-268    	; 0x1894 <__fp_inf>
    19a0:	7f cf       	rjmp	.-258    	; 0x18a0 <__fp_nan>
    19a2:	11 24       	eor	r1, r1
    19a4:	e7 cf       	rjmp	.-50     	; 0x1974 <__fp_szero>

000019a6 <__mulsf3x>:
    19a6:	c3 df       	rcall	.-122    	; 0x192e <__fp_split3>
    19a8:	a0 f3       	brcs	.-24     	; 0x1992 <__mulsf3+0x4>

000019aa <__mulsf3_pse>:
    19aa:	95 9f       	mul	r25, r21
    19ac:	d1 f3       	breq	.-12     	; 0x19a2 <__mulsf3+0x14>
    19ae:	95 0f       	add	r25, r21
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	55 1f       	adc	r21, r21
    19b4:	62 9f       	mul	r22, r18
    19b6:	f0 01       	movw	r30, r0
    19b8:	72 9f       	mul	r23, r18
    19ba:	bb 27       	eor	r27, r27
    19bc:	f0 0d       	add	r31, r0
    19be:	b1 1d       	adc	r27, r1
    19c0:	63 9f       	mul	r22, r19
    19c2:	aa 27       	eor	r26, r26
    19c4:	f0 0d       	add	r31, r0
    19c6:	b1 1d       	adc	r27, r1
    19c8:	aa 1f       	adc	r26, r26
    19ca:	64 9f       	mul	r22, r20
    19cc:	66 27       	eor	r22, r22
    19ce:	b0 0d       	add	r27, r0
    19d0:	a1 1d       	adc	r26, r1
    19d2:	66 1f       	adc	r22, r22
    19d4:	82 9f       	mul	r24, r18
    19d6:	22 27       	eor	r18, r18
    19d8:	b0 0d       	add	r27, r0
    19da:	a1 1d       	adc	r26, r1
    19dc:	62 1f       	adc	r22, r18
    19de:	73 9f       	mul	r23, r19
    19e0:	b0 0d       	add	r27, r0
    19e2:	a1 1d       	adc	r26, r1
    19e4:	62 1f       	adc	r22, r18
    19e6:	83 9f       	mul	r24, r19
    19e8:	a0 0d       	add	r26, r0
    19ea:	61 1d       	adc	r22, r1
    19ec:	22 1f       	adc	r18, r18
    19ee:	74 9f       	mul	r23, r20
    19f0:	33 27       	eor	r19, r19
    19f2:	a0 0d       	add	r26, r0
    19f4:	61 1d       	adc	r22, r1
    19f6:	23 1f       	adc	r18, r19
    19f8:	84 9f       	mul	r24, r20
    19fa:	60 0d       	add	r22, r0
    19fc:	21 1d       	adc	r18, r1
    19fe:	82 2f       	mov	r24, r18
    1a00:	76 2f       	mov	r23, r22
    1a02:	6a 2f       	mov	r22, r26
    1a04:	11 24       	eor	r1, r1
    1a06:	9f 57       	subi	r25, 0x7F	; 127
    1a08:	50 40       	sbci	r21, 0x00	; 0
    1a0a:	8a f0       	brmi	.+34     	; 0x1a2e <__mulsf3_pse+0x84>
    1a0c:	e1 f0       	breq	.+56     	; 0x1a46 <__mulsf3_pse+0x9c>
    1a0e:	88 23       	and	r24, r24
    1a10:	4a f0       	brmi	.+18     	; 0x1a24 <__mulsf3_pse+0x7a>
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	bb 1f       	adc	r27, r27
    1a18:	66 1f       	adc	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	91 50       	subi	r25, 0x01	; 1
    1a20:	50 40       	sbci	r21, 0x00	; 0
    1a22:	a9 f7       	brne	.-22     	; 0x1a0e <__mulsf3_pse+0x64>
    1a24:	9e 3f       	cpi	r25, 0xFE	; 254
    1a26:	51 05       	cpc	r21, r1
    1a28:	70 f0       	brcs	.+28     	; 0x1a46 <__mulsf3_pse+0x9c>
    1a2a:	34 cf       	rjmp	.-408    	; 0x1894 <__fp_inf>
    1a2c:	a3 cf       	rjmp	.-186    	; 0x1974 <__fp_szero>
    1a2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a30:	ec f3       	brlt	.-6      	; 0x1a2c <__mulsf3_pse+0x82>
    1a32:	98 3e       	cpi	r25, 0xE8	; 232
    1a34:	dc f3       	brlt	.-10     	; 0x1a2c <__mulsf3_pse+0x82>
    1a36:	86 95       	lsr	r24
    1a38:	77 95       	ror	r23
    1a3a:	67 95       	ror	r22
    1a3c:	b7 95       	ror	r27
    1a3e:	f7 95       	ror	r31
    1a40:	e7 95       	ror	r30
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	c1 f7       	brne	.-16     	; 0x1a36 <__mulsf3_pse+0x8c>
    1a46:	fe 2b       	or	r31, r30
    1a48:	88 0f       	add	r24, r24
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	96 95       	lsr	r25
    1a4e:	87 95       	ror	r24
    1a50:	97 f9       	bld	r25, 7
    1a52:	08 95       	ret

00001a54 <square>:
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
    1a58:	9a cf       	rjmp	.-204    	; 0x198e <__mulsf3>
    1a5a:	4a df       	rcall	.-364    	; 0x18f0 <__fp_pscA>
    1a5c:	30 f0       	brcs	.+12     	; 0x1a6a <square+0x16>
    1a5e:	4f df       	rcall	.-354    	; 0x18fe <__fp_pscB>
    1a60:	20 f0       	brcs	.+8      	; 0x1a6a <square+0x16>
    1a62:	31 f4       	brne	.+12     	; 0x1a70 <square+0x1c>
    1a64:	9f 3f       	cpi	r25, 0xFF	; 255
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <square+0x18>
    1a68:	1e f4       	brtc	.+6      	; 0x1a70 <square+0x1c>
    1a6a:	1a cf       	rjmp	.-460    	; 0x18a0 <__fp_nan>
    1a6c:	0e f4       	brtc	.+2      	; 0x1a70 <square+0x1c>
    1a6e:	e0 95       	com	r30
    1a70:	e7 fb       	bst	r30, 7
    1a72:	10 cf       	rjmp	.-480    	; 0x1894 <__fp_inf>

00001a74 <__addsf3x>:
    1a74:	e9 2f       	mov	r30, r25
    1a76:	5b df       	rcall	.-330    	; 0x192e <__fp_split3>
    1a78:	80 f3       	brcs	.-32     	; 0x1a5a <square+0x6>
    1a7a:	ba 17       	cp	r27, r26
    1a7c:	62 07       	cpc	r22, r18
    1a7e:	73 07       	cpc	r23, r19
    1a80:	84 07       	cpc	r24, r20
    1a82:	95 07       	cpc	r25, r21
    1a84:	18 f0       	brcs	.+6      	; 0x1a8c <__addsf3x+0x18>
    1a86:	71 f4       	brne	.+28     	; 0x1aa4 <__addsf3x+0x30>
    1a88:	9e f5       	brtc	.+102    	; 0x1af0 <__addsf3x+0x7c>
    1a8a:	73 cf       	rjmp	.-282    	; 0x1972 <__fp_zero>
    1a8c:	0e f4       	brtc	.+2      	; 0x1a90 <__addsf3x+0x1c>
    1a8e:	e0 95       	com	r30
    1a90:	0b 2e       	mov	r0, r27
    1a92:	ba 2f       	mov	r27, r26
    1a94:	a0 2d       	mov	r26, r0
    1a96:	0b 01       	movw	r0, r22
    1a98:	b9 01       	movw	r22, r18
    1a9a:	90 01       	movw	r18, r0
    1a9c:	0c 01       	movw	r0, r24
    1a9e:	ca 01       	movw	r24, r20
    1aa0:	a0 01       	movw	r20, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	ff 27       	eor	r31, r31
    1aa6:	59 1b       	sub	r21, r25
    1aa8:	99 f0       	breq	.+38     	; 0x1ad0 <__addsf3x+0x5c>
    1aaa:	59 3f       	cpi	r21, 0xF9	; 249
    1aac:	50 f4       	brcc	.+20     	; 0x1ac2 <__addsf3x+0x4e>
    1aae:	50 3e       	cpi	r21, 0xE0	; 224
    1ab0:	68 f1       	brcs	.+90     	; 0x1b0c <__addsf3x+0x98>
    1ab2:	1a 16       	cp	r1, r26
    1ab4:	f0 40       	sbci	r31, 0x00	; 0
    1ab6:	a2 2f       	mov	r26, r18
    1ab8:	23 2f       	mov	r18, r19
    1aba:	34 2f       	mov	r19, r20
    1abc:	44 27       	eor	r20, r20
    1abe:	58 5f       	subi	r21, 0xF8	; 248
    1ac0:	f3 cf       	rjmp	.-26     	; 0x1aa8 <__addsf3x+0x34>
    1ac2:	46 95       	lsr	r20
    1ac4:	37 95       	ror	r19
    1ac6:	27 95       	ror	r18
    1ac8:	a7 95       	ror	r26
    1aca:	f0 40       	sbci	r31, 0x00	; 0
    1acc:	53 95       	inc	r21
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__addsf3x+0x4e>
    1ad0:	7e f4       	brtc	.+30     	; 0x1af0 <__addsf3x+0x7c>
    1ad2:	1f 16       	cp	r1, r31
    1ad4:	ba 0b       	sbc	r27, r26
    1ad6:	62 0b       	sbc	r22, r18
    1ad8:	73 0b       	sbc	r23, r19
    1ada:	84 0b       	sbc	r24, r20
    1adc:	ba f0       	brmi	.+46     	; 0x1b0c <__addsf3x+0x98>
    1ade:	91 50       	subi	r25, 0x01	; 1
    1ae0:	a1 f0       	breq	.+40     	; 0x1b0a <__addsf3x+0x96>
    1ae2:	ff 0f       	add	r31, r31
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	66 1f       	adc	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	88 1f       	adc	r24, r24
    1aec:	c2 f7       	brpl	.-16     	; 0x1ade <__addsf3x+0x6a>
    1aee:	0e c0       	rjmp	.+28     	; 0x1b0c <__addsf3x+0x98>
    1af0:	ba 0f       	add	r27, r26
    1af2:	62 1f       	adc	r22, r18
    1af4:	73 1f       	adc	r23, r19
    1af6:	84 1f       	adc	r24, r20
    1af8:	48 f4       	brcc	.+18     	; 0x1b0c <__addsf3x+0x98>
    1afa:	87 95       	ror	r24
    1afc:	77 95       	ror	r23
    1afe:	67 95       	ror	r22
    1b00:	b7 95       	ror	r27
    1b02:	f7 95       	ror	r31
    1b04:	9e 3f       	cpi	r25, 0xFE	; 254
    1b06:	08 f0       	brcs	.+2      	; 0x1b0a <__addsf3x+0x96>
    1b08:	b3 cf       	rjmp	.-154    	; 0x1a70 <square+0x1c>
    1b0a:	93 95       	inc	r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <__addsf3x+0x9e>
    1b10:	99 27       	eor	r25, r25
    1b12:	ee 0f       	add	r30, r30
    1b14:	97 95       	ror	r25
    1b16:	87 95       	ror	r24
    1b18:	08 95       	ret

00001b1a <__mulsi3>:
    1b1a:	62 9f       	mul	r22, r18
    1b1c:	d0 01       	movw	r26, r0
    1b1e:	73 9f       	mul	r23, r19
    1b20:	f0 01       	movw	r30, r0
    1b22:	82 9f       	mul	r24, r18
    1b24:	e0 0d       	add	r30, r0
    1b26:	f1 1d       	adc	r31, r1
    1b28:	64 9f       	mul	r22, r20
    1b2a:	e0 0d       	add	r30, r0
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	92 9f       	mul	r25, r18
    1b30:	f0 0d       	add	r31, r0
    1b32:	83 9f       	mul	r24, r19
    1b34:	f0 0d       	add	r31, r0
    1b36:	74 9f       	mul	r23, r20
    1b38:	f0 0d       	add	r31, r0
    1b3a:	65 9f       	mul	r22, r21
    1b3c:	f0 0d       	add	r31, r0
    1b3e:	99 27       	eor	r25, r25
    1b40:	72 9f       	mul	r23, r18
    1b42:	b0 0d       	add	r27, r0
    1b44:	e1 1d       	adc	r30, r1
    1b46:	f9 1f       	adc	r31, r25
    1b48:	63 9f       	mul	r22, r19
    1b4a:	b0 0d       	add	r27, r0
    1b4c:	e1 1d       	adc	r30, r1
    1b4e:	f9 1f       	adc	r31, r25
    1b50:	bd 01       	movw	r22, r26
    1b52:	cf 01       	movw	r24, r30
    1b54:	11 24       	eor	r1, r1
    1b56:	08 95       	ret

00001b58 <__divmodhi4>:
    1b58:	97 fb       	bst	r25, 7
    1b5a:	09 2e       	mov	r0, r25
    1b5c:	07 26       	eor	r0, r23
    1b5e:	0a d0       	rcall	.+20     	; 0x1b74 <__divmodhi4_neg1>
    1b60:	77 fd       	sbrc	r23, 7
    1b62:	04 d0       	rcall	.+8      	; 0x1b6c <__divmodhi4_neg2>
    1b64:	49 d0       	rcall	.+146    	; 0x1bf8 <__udivmodhi4>
    1b66:	06 d0       	rcall	.+12     	; 0x1b74 <__divmodhi4_neg1>
    1b68:	00 20       	and	r0, r0
    1b6a:	1a f4       	brpl	.+6      	; 0x1b72 <__divmodhi4_exit>

00001b6c <__divmodhi4_neg2>:
    1b6c:	70 95       	com	r23
    1b6e:	61 95       	neg	r22
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255

00001b72 <__divmodhi4_exit>:
    1b72:	08 95       	ret

00001b74 <__divmodhi4_neg1>:
    1b74:	f6 f7       	brtc	.-4      	; 0x1b72 <__divmodhi4_exit>
    1b76:	90 95       	com	r25
    1b78:	81 95       	neg	r24
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	08 95       	ret

00001b7e <__udivmodsi4>:
    1b7e:	a1 e2       	ldi	r26, 0x21	; 33
    1b80:	1a 2e       	mov	r1, r26
    1b82:	aa 1b       	sub	r26, r26
    1b84:	bb 1b       	sub	r27, r27
    1b86:	fd 01       	movw	r30, r26
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <__udivmodsi4_ep>

00001b8a <__udivmodsi4_loop>:
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	ee 1f       	adc	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	a2 17       	cp	r26, r18
    1b94:	b3 07       	cpc	r27, r19
    1b96:	e4 07       	cpc	r30, r20
    1b98:	f5 07       	cpc	r31, r21
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__udivmodsi4_ep>
    1b9c:	a2 1b       	sub	r26, r18
    1b9e:	b3 0b       	sbc	r27, r19
    1ba0:	e4 0b       	sbc	r30, r20
    1ba2:	f5 0b       	sbc	r31, r21

00001ba4 <__udivmodsi4_ep>:
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	1a 94       	dec	r1
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <__udivmodsi4_loop>
    1bb0:	60 95       	com	r22
    1bb2:	70 95       	com	r23
    1bb4:	80 95       	com	r24
    1bb6:	90 95       	com	r25
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	bd 01       	movw	r22, r26
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret

00001bc2 <__divmodsi4>:
    1bc2:	97 fb       	bst	r25, 7
    1bc4:	09 2e       	mov	r0, r25
    1bc6:	05 26       	eor	r0, r21
    1bc8:	0e d0       	rcall	.+28     	; 0x1be6 <__divmodsi4_neg1>
    1bca:	57 fd       	sbrc	r21, 7
    1bcc:	04 d0       	rcall	.+8      	; 0x1bd6 <__divmodsi4_neg2>
    1bce:	d7 df       	rcall	.-82     	; 0x1b7e <__udivmodsi4>
    1bd0:	0a d0       	rcall	.+20     	; 0x1be6 <__divmodsi4_neg1>
    1bd2:	00 1c       	adc	r0, r0
    1bd4:	38 f4       	brcc	.+14     	; 0x1be4 <__divmodsi4_exit>

00001bd6 <__divmodsi4_neg2>:
    1bd6:	50 95       	com	r21
    1bd8:	40 95       	com	r20
    1bda:	30 95       	com	r19
    1bdc:	21 95       	neg	r18
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	4f 4f       	sbci	r20, 0xFF	; 255
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255

00001be4 <__divmodsi4_exit>:
    1be4:	08 95       	ret

00001be6 <__divmodsi4_neg1>:
    1be6:	f6 f7       	brtc	.-4      	; 0x1be4 <__divmodsi4_exit>
    1be8:	90 95       	com	r25
    1bea:	80 95       	com	r24
    1bec:	70 95       	com	r23
    1bee:	61 95       	neg	r22
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	08 95       	ret

00001bf8 <__udivmodhi4>:
    1bf8:	aa 1b       	sub	r26, r26
    1bfa:	bb 1b       	sub	r27, r27
    1bfc:	51 e1       	ldi	r21, 0x11	; 17
    1bfe:	07 c0       	rjmp	.+14     	; 0x1c0e <__udivmodhi4_ep>

00001c00 <__udivmodhi4_loop>:
    1c00:	aa 1f       	adc	r26, r26
    1c02:	bb 1f       	adc	r27, r27
    1c04:	a6 17       	cp	r26, r22
    1c06:	b7 07       	cpc	r27, r23
    1c08:	10 f0       	brcs	.+4      	; 0x1c0e <__udivmodhi4_ep>
    1c0a:	a6 1b       	sub	r26, r22
    1c0c:	b7 0b       	sbc	r27, r23

00001c0e <__udivmodhi4_ep>:
    1c0e:	88 1f       	adc	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	5a 95       	dec	r21
    1c14:	a9 f7       	brne	.-22     	; 0x1c00 <__udivmodhi4_loop>
    1c16:	80 95       	com	r24
    1c18:	90 95       	com	r25
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	08 95       	ret

00001c20 <_exit>:
    1c20:	f8 94       	cli

00001c22 <__stop_program>:
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <__stop_program>
