
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001a46  00001ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  00800122  00800122  00001afc  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b5e  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000259f  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a01  00000000  00000000  00004cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d2d  00000000  00000000  000056ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000820  00000000  00000000  000073e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000afe  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d3d  00000000  00000000  00008706  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00009443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e6 e4       	ldi	r30, 0x46	; 70
      aa:	fa e1       	ldi	r31, 0x1A	; 26
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a1 3a       	cpi	r26, 0xA1	; 161
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29

  DDRD  |= (1<<4);
      d8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      da:	5c 98       	cbi	0x0b, 4	; 11
  
  MPU6050_Init();
      dc:	0e 94 24 0a 	call	0x1448	; 0x1448 <MPU6050_Init>
  debug_init();
      e0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <debug_init>
  Servo_Init(50);
      e4:	62 e3       	ldi	r22, 0x32	; 50
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Servo_Init>
  debug_tx_text_nl("Debug Started");
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <debug_tx_text_nl>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f8:	c0 e3       	ldi	r28, 0x30	; 48
      fa:	d5 e7       	ldi	r29, 0x75	; 117
  
  
  while(1){
	
	MPU6050_Read_Acc();
      fc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <MPU6050_Read_Acc>
	
	if(MPU6050_Get_Error()==0){
     100:	0e 94 75 07 	call	0xeea	; 0xeea <MPU6050_Get_Error>
     104:	89 2b       	or	r24, r25
     106:	b9 f4       	brne	.+46     	; 0x136 <main+0x62>
	  debug_tx_number_cm(MPU6050_Read_Pitch());
     108:	0e 94 c7 07 	call	0xf8e	; 0xf8e <MPU6050_Read_Pitch>
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	bc 01       	movw	r22, r24
     116:	cd 01       	movw	r24, r26
     118:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <debug_tx_number_cm>
	  debug_tx_number_cm(MPU6050_Read_Roll());
     11c:	0e 94 7f 07 	call	0xefe	; 0xefe <MPU6050_Read_Roll>
     120:	aa 27       	eor	r26, r26
     122:	97 fd       	sbrc	r25, 7
     124:	a0 95       	com	r26
     126:	ba 2f       	mov	r27, r26
     128:	bc 01       	movw	r22, r24
     12a:	cd 01       	movw	r24, r26
     12c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <debug_tx_number_cm>
	  debug_tx_nl();
     130:	0e 94 51 04 	call	0x8a2	; 0x8a2 <debug_tx_nl>
     134:	02 c0       	rjmp	.+4      	; 0x13a <main+0x66>
	}else{
	  MPU6050_Restart();
     136:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <MPU6050_Restart>
     13a:	ce 01       	movw	r24, r28
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x68>
     140:	dd cf       	rjmp	.-70     	; 0xfc <main+0x28>

00000142 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     142:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     146:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     150:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     154:	10 92 27 01 	sts	0x0127, r1
     158:	10 92 26 01 	sts	0x0126, r1
}
     15c:	08 95       	ret

0000015e <I2C_Error_Clear>:

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     15e:	10 92 25 01 	sts	0x0125, r1
}
     162:	08 95       	ret

00000164 <I2C_Error_Accu_Clear>:

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     164:	10 92 27 01 	sts	0x0127, r1
     168:	10 92 26 01 	sts	0x0126, r1
}
     16c:	08 95       	ret

0000016e <I2C_Error_Clear_All>:
  I2C.Error=0x00;
  I2C.ErrorAccu=0x00;
}

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     16e:	10 92 25 01 	sts	0x0125, r1
}

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     172:	10 92 27 01 	sts	0x0127, r1
     176:	10 92 26 01 	sts	0x0126, r1
}

void I2C_Error_Clear_All(void){
  I2C_Error_Clear();
  I2C_Error_Accu_Clear();
}
     17a:	08 95       	ret

0000017c <I2C_Get_Error>:

uint8_t I2C_Get_Error(void){
  return I2C.Error;
}
     17c:	80 91 25 01 	lds	r24, 0x0125
     180:	08 95       	ret

00000182 <I2C_Get_ErrorAccu>:

uint16_t I2C_Get_ErrorAccu(void){
  return I2C.ErrorAccu;
}
     182:	80 91 26 01 	lds	r24, 0x0126
     186:	90 91 27 01 	lds	r25, 0x0127
     18a:	08 95       	ret

0000018c <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     18c:	80 e5       	ldi	r24, 0x50	; 80
     18e:	8a 95       	dec	r24
     190:	f1 f7       	brne	.-4      	; 0x18e <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     192:	08 95       	ret

00000194 <I2C_Bit_Delay>:
     194:	80 ea       	ldi	r24, 0xA0	; 160
     196:	8a 95       	dec	r24
     198:	f1 f7       	brne	.-4      	; 0x196 <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     19a:	08 95       	ret

0000019c <I2C_Guard_Delay>:
     19c:	88 e0       	ldi	r24, 0x08	; 8
     19e:	8a 95       	dec	r24
     1a0:	f1 f7       	brne	.-4      	; 0x19e <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     1a2:	08 95       	ret

000001a4 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	11 f4       	brne	.+4      	; 0x1ac <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1a8:	3d 9a       	sbi	0x07, 5	; 7
     1aa:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1ac:	3d 98       	cbi	0x07, 5	; 7
     1ae:	08 95       	ret

000001b0 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     1b4:	45 9a       	sbi	0x08, 5	; 8
     1b6:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     1b8:	45 98       	cbi	0x08, 5	; 8
     1ba:	08 95       	ret

000001bc <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	19 f4       	brne	.+6      	; 0x1c6 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     1c0:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1c2:	3d 98       	cbi	0x07, 5	; 7
     1c4:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     1c6:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1c8:	3d 9a       	sbi	0x07, 5	; 7
     1ca:	08 95       	ret

000001cc <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	25 e0       	ldi	r18, 0x05	; 5
     1d2:	96 95       	lsr	r25
     1d4:	87 95       	ror	r24
     1d6:	2a 95       	dec	r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1da:	81 70       	andi	r24, 0x01	; 1
     1dc:	08 95       	ret

000001de <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	11 f4       	brne	.+4      	; 0x1e6 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1e2:	3c 9a       	sbi	0x07, 4	; 7
     1e4:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1e6:	3c 98       	cbi	0x07, 4	; 7
     1e8:	08 95       	ret

000001ea <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1ee:	44 9a       	sbi	0x08, 4	; 8
     1f0:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1f2:	44 98       	cbi	0x08, 4	; 8
     1f4:	08 95       	ret

000001f6 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	19 f4       	brne	.+6      	; 0x200 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1fa:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1fc:	3c 98       	cbi	0x07, 4	; 7
     1fe:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     200:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     202:	3c 9a       	sbi	0x07, 4	; 7
     204:	08 95       	ret

00000206 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     206:	86 b1       	in	r24, 0x06	; 6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	34 e0       	ldi	r19, 0x04	; 4
     20c:	96 95       	lsr	r25
     20e:	87 95       	ror	r24
     210:	3a 95       	dec	r19
     212:	e1 f7       	brne	.-8      	; 0x20c <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     214:	81 70       	andi	r24, 0x01	; 1
     216:	08 95       	ret

00000218 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     218:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
}
     220:	08 95       	ret

00000222 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     222:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
}
     22a:	08 95       	ret

0000022c <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     22c:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     22e:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
}
     23c:	08 95       	ret

0000023e <I2C_Start>:

void I2C_Start(void){
     23e:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     24c:	10 e5       	ldi	r17, 0x50	; 80
     24e:	81 2f       	mov	r24, r17
     250:	8a 95       	dec	r24
     252:	f1 f7       	brne	.-4      	; 0x250 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     25a:	81 2f       	mov	r24, r17
     25c:	8a 95       	dec	r24
     25e:	f1 f7       	brne	.-4      	; 0x25c <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     266:	1a 95       	dec	r17
     268:	f1 f7       	brne	.-4      	; 0x266 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     26a:	1f 91       	pop	r17
     26c:	08 95       	ret

0000026e <I2C_Stop>:

void I2C_Stop(void){
     26e:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     27c:	10 e5       	ldi	r17, 0x50	; 80
     27e:	81 2f       	mov	r24, r17
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     28a:	81 2f       	mov	r24, r17
     28c:	8a 95       	dec	r24
     28e:	f1 f7       	brne	.-4      	; 0x28c <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     296:	1a 95       	dec	r17
     298:	f1 f7       	brne	.-4      	; 0x296 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     29a:	1f 91       	pop	r17
     29c:	08 95       	ret

0000029e <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	08 2f       	mov	r16, r24
     2a8:	10 e0       	ldi	r17, 0x00	; 0
     2aa:	50 e5       	ldi	r21, 0x50	; 80
     2ac:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     2ae:	48 e0       	ldi	r20, 0x08	; 8
     2b0:	e4 2e       	mov	r14, r20
     2b2:	07 ff       	sbrs	r16, 7
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     2c0:	8f 2d       	mov	r24, r15
     2c2:	8a 95       	dec	r24
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     2cc:	8f 2d       	mov	r24, r15
     2ce:	8a 95       	dec	r24
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     2d8:	8e 2d       	mov	r24, r14
     2da:	8a 95       	dec	r24
     2dc:	f1 f7       	brne	.-4      	; 0x2da <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     2de:	1f 5f       	subi	r17, 0xFF	; 255
     2e0:	18 30       	cpi	r17, 0x08	; 8
     2e2:	11 f0       	breq	.+4      	; 0x2e8 <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     2e4:	00 0f       	add	r16, r16
     2e6:	e5 cf       	rjmp	.-54     	; 0x2b2 <I2C_Data_Send+0x14>
  }
}
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	08 95       	ret

000002f2 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	60 e5       	ldi	r22, 0x50	; 80
     304:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     306:	11 0f       	add	r17, r17
     308:	8f 2d       	mov	r24, r15
     30a:	8a 95       	dec	r24
     30c:	f1 f7       	brne	.-4      	; 0x30a <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     314:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     316:	11 60       	ori	r17, 0x01	; 1
     318:	8f 2d       	mov	r24, r15
     31a:	8a 95       	dec	r24
     31c:	f1 f7       	brne	.-4      	; 0x31a <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     324:	0f 5f       	subi	r16, 0xFF	; 255
     326:	08 30       	cpi	r16, 0x08	; 8
     328:	71 f7       	brne	.-36     	; 0x306 <I2C_Data_Receive+0x14>
     32a:	80 e5       	ldi	r24, 0x50	; 80
     32c:	8a 95       	dec	r24
     32e:	f1 f7       	brne	.-4      	; 0x32c <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
  return data;
}
     336:	81 2f       	mov	r24, r17
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	08 95       	ret

00000340 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     340:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     348:	10 e5       	ldi	r17, 0x50	; 80
     34a:	81 2f       	mov	r24, r17
     34c:	8a 95       	dec	r24
     34e:	f1 f7       	brne	.-4      	; 0x34c <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     356:	1a 95       	dec	r17
     358:	f1 f7       	brne	.-4      	; 0x356 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
}
     360:	1f 91       	pop	r17
     362:	08 95       	ret

00000364 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     364:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     36c:	10 e5       	ldi	r17, 0x50	; 80
     36e:	81 2f       	mov	r24, r17
     370:	8a 95       	dec	r24
     372:	f1 f7       	brne	.-4      	; 0x370 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     37a:	1a 95       	dec	r17
     37c:	f1 f7       	brne	.-4      	; 0x37a <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
}
     384:	1f 91       	pop	r17
     386:	08 95       	ret

00000388 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <I2C_SDA_Set_Output>
     392:	00 e5       	ldi	r16, 0x50	; 80
     394:	80 2f       	mov	r24, r16
     396:	8a 95       	dec	r24
     398:	f1 f7       	brne	.-4      	; 0x396 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     3a0:	16 b1       	in	r17, 0x06	; 6
     3a2:	0a 95       	dec	r16
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_SCL_Set_Output>
     3ac:	88 e0       	ldi	r24, 0x08	; 8
     3ae:	8a 95       	dec	r24
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <I2C_Get_Ack+0x26>
     3b2:	12 95       	swap	r17
     3b4:	1f 70       	andi	r17, 0x0F	; 15
     3b6:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     3b8:	81 2f       	mov	r24, r17
     3ba:	81 70       	andi	r24, 0x01	; 1
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret

000003c2 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     3c2:	1f 93       	push	r17
     3c4:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     3c6:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_Start>
  I2C_Data_Send(address);
     3ca:	81 2f       	mov	r24, r17
     3cc:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  ack = I2C_Get_Ack();
     3d0:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     3d4:	18 2f       	mov	r17, r24
  I2C_Stop();
     3d6:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Stop>
  return ack;
}
     3da:	81 2f       	mov	r24, r17
     3dc:	1f 91       	pop	r17
     3de:	08 95       	ret

000003e0 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     3e0:	1f 93       	push	r17
     3e2:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     3e4:	81 2f       	mov	r24, r17
     3e6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Send_Device_Address>
	if(sts==1){
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <I2C_Get_Device_Address+0x12>
     3ee:	81 2f       	mov	r24, r17
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     3f2:	1f 5f       	subi	r17, 0xFF	; 255
     3f4:	1f 3f       	cpi	r17, 0xFF	; 255
     3f6:	b1 f7       	brne	.-20     	; 0x3e4 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     3f8:	1f 91       	pop	r17
     3fa:	08 95       	ret

000003fc <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     408:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     40c:	80 91 22 01 	lds	r24, 0x0122
     410:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     414:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     418:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     41a:	81 2f       	mov	r24, r17
     41c:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     420:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     424:	f8 2e       	mov	r15, r24
  I2C_Stop();
     426:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Stop>
  I2C_Start();
     42a:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     42e:	80 91 23 01 	lds	r24, 0x0123
     432:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     436:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     43a:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     43c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <I2C_Data_Receive>
     440:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     442:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     446:	08 2f       	mov	r16, r24
  I2C_Stop();
     448:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Stop>
  if(sts == 0x07){
     44c:	ff 0c       	add	r15, r15
     44e:	11 0f       	add	r17, r17
     450:	11 0f       	add	r17, r17
     452:	1f 29       	or	r17, r15
     454:	1e 29       	or	r17, r14
     456:	00 0f       	add	r16, r16
     458:	00 0f       	add	r16, r16
     45a:	00 0f       	add	r16, r16
     45c:	01 2b       	or	r16, r17
     45e:	07 30       	cpi	r16, 0x07	; 7
     460:	21 f4       	brne	.+8      	; 0x46a <I2C_Read_Register+0x6e>
    sts = data;
	I2C.Error=0x00;
     462:	10 92 25 01 	sts	0x0125, r1
     466:	8d 2d       	mov	r24, r13
     468:	0d c0       	rjmp	.+26     	; 0x484 <I2C_Read_Register+0x88>
  }else{
    data=0;
	I2C.Error=0x01;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     470:	80 91 26 01 	lds	r24, 0x0126
     474:	90 91 27 01 	lds	r25, 0x0127
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 27 01 	sts	0x0127, r25
     47e:	80 93 26 01 	sts	0x0126, r24
     482:	8f ef       	ldi	r24, 0xFF	; 255
    sts = 0xFF;
  }
  return sts;
}
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	08 95       	ret

00000490 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	18 2f       	mov	r17, r24
     49a:	f6 2e       	mov	r15, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     49c:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     4a0:	80 91 22 01 	lds	r24, 0x0122
     4a4:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     4a8:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     4ac:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     4ae:	81 2f       	mov	r24, r17
     4b0:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     4b4:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     4b8:	08 2f       	mov	r16, r24
  I2C_Data_Send(val);
     4ba:	8f 2d       	mov	r24, r15
     4bc:	0e 94 4f 01 	call	0x29e	; 0x29e <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     4c0:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Ack>
     4c4:	18 2f       	mov	r17, r24
  I2C_Stop();
     4c6:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Stop>
  if(sts == 0x07){
     4ca:	00 0f       	add	r16, r16
     4cc:	11 0f       	add	r17, r17
     4ce:	11 0f       	add	r17, r17
     4d0:	10 2b       	or	r17, r16
     4d2:	1e 29       	or	r17, r14
     4d4:	17 30       	cpi	r17, 0x07	; 7
     4d6:	19 f4       	brne	.+6      	; 0x4de <I2C_Write_Register+0x4e>
    sts = data;
	I2C.Error=0x00;
     4d8:	10 92 25 01 	sts	0x0125, r1
     4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <I2C_Write_Register+0x66>
  }else{
	I2C.Error=0x02;
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     4e4:	80 91 26 01 	lds	r24, 0x0126
     4e8:	90 91 27 01 	lds	r25, 0x0127
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	90 93 27 01 	sts	0x0127, r25
     4f2:	80 93 26 01 	sts	0x0126, r24
    sts = 0xFF;
  }
}
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	08 95       	ret

00000500 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     500:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     504:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     50e:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     512:	10 92 27 01 	sts	0x0127, r1
     516:	10 92 26 01 	sts	0x0126, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     51a:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     51e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <I2C_Get_Device_Address>
     522:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     526:	8f 5f       	subi	r24, 0xFF	; 255
     528:	80 93 23 01 	sts	0x0123, r24
}
     52c:	08 95       	ret

0000052e <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     52e:	10 92 28 01 	sts	0x0128, r1
  debug.datareg=0;
     532:	10 92 29 01 	sts	0x0129, r1
  debug.databsy=1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 2a 01 	sts	0x012A, r24
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     540:	fc 01       	movw	r30, r24
     542:	e8 5d       	subi	r30, 0xD8	; 216
     544:	fe 4f       	sbci	r31, 0xFE	; 254
     546:	13 82       	std	Z+3, r1	; 0x03
     548:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     54a:	80 32       	cpi	r24, 0x20	; 32
     54c:	91 05       	cpc	r25, r1
     54e:	c1 f7       	brne	.-16     	; 0x540 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     550:	10 92 4b 01 	sts	0x014B, r1
     554:	ec e4       	ldi	r30, 0x4C	; 76
     556:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     558:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	e4 35       	cpi	r30, 0x54	; 84
     55e:	f8 07       	cpc	r31, r24
     560:	d9 f7       	brne	.-10     	; 0x558 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     562:	10 82       	st	Z, r1
}
     564:	08 95       	ret

00000566 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     566:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     568:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     56a:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     572:	e8 e6       	ldi	r30, 0x68	; 104
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	82 60       	ori	r24, 0x02	; 2
     57a:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     57c:	ec e6       	ldi	r30, 0x6C	; 108
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	80 64       	ori	r24, 0x40	; 64
     584:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     586:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     588:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     58a:	08 95       	ret

0000058c <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     58c:	8f ef       	ldi	r24, 0xFF	; 255
     58e:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     590:	ee e6       	ldi	r30, 0x6E	; 110
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	10 82       	st	Z, r1
  TCNT0 =200;
     596:	88 ec       	ldi	r24, 0xC8	; 200
     598:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     5a2:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     5a4:	08 95       	ret

000005a6 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     5a6:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     5aa:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     5ac:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     5ae:	08 95       	ret

000005b0 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     5b0:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     5b2:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     5b4:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     5b6:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     5b8:	08 95       	ret

000005ba <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     5ba:	5d 9a       	sbi	0x0b, 5	; 11
}
     5bc:	08 95       	ret

000005be <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     5be:	5d 98       	cbi	0x0b, 5	; 11
}
     5c0:	08 95       	ret

000005c2 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	11 f4       	brne	.+4      	; 0x5ca <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     5c6:	5d 9a       	sbi	0x0b, 5	; 11
     5c8:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     5ca:	5d 98       	cbi	0x0b, 5	; 11
     5cc:	08 95       	ret

000005ce <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     5ce:	86 b1       	in	r24, 0x06	; 6
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	26 e0       	ldi	r18, 0x06	; 6
     5d4:	96 95       	lsr	r25
     5d6:	87 95       	ror	r24
     5d8:	2a 95       	dec	r18
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     5dc:	81 70       	andi	r24, 0x01	; 1
     5de:	08 95       	ret

000005e0 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     5e0:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     5e2:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     5e8:	86 b5       	in	r24, 0x26	; 38
     5ea:	82 33       	cpi	r24, 0x32	; 50
     5ec:	e8 f3       	brcs	.-6      	; 0x5e8 <debug_delay+0x8>
    TCNT0=0;
     5ee:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     5f0:	86 b5       	in	r24, 0x26	; 38
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	82 17       	cp	r24, r18
     5f6:	93 07       	cpc	r25, r19
     5f8:	d8 f3       	brcs	.-10     	; 0x5f0 <debug_delay+0x10>
  TCCR0B=0;
     5fa:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     5fc:	08 95       	ret

000005fe <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     5fe:	80 91 1c 01 	lds	r24, 0x011C
     602:	90 91 1d 01 	lds	r25, 0x011D
     606:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     60a:	08 95       	ret

0000060c <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     60c:	80 91 1e 01 	lds	r24, 0x011E
     610:	90 91 1f 01 	lds	r25, 0x011F
     614:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     618:	08 95       	ret

0000061a <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     61a:	80 91 20 01 	lds	r24, 0x0120
     61e:	90 91 21 01 	lds	r25, 0x0121
     622:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     626:	08 95       	ret

00000628 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2a 97       	sbiw	r28, 0x0a	; 10
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     646:	fe 01       	movw	r30, r28
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	9a e0       	ldi	r25, 0x0A	; 10
     64c:	df 01       	movw	r26, r30
     64e:	1d 92       	st	X+, r1
     650:	9a 95       	dec	r25
     652:	e9 f7       	brne	.-6      	; 0x64e <debug_tx_byte+0x26>
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	9a 87       	std	Y+10, r25	; 0x0a
     658:	fe 01       	movw	r30, r28
     65a:	32 96       	adiw	r30, 0x02	; 2
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     660:	48 2f       	mov	r20, r24
     662:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     664:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     666:	ca 01       	movw	r24, r20
     668:	02 2e       	mov	r0, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <debug_tx_byte+0x48>
     66c:	95 95       	asr	r25
     66e:	87 95       	ror	r24
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <debug_tx_byte+0x44>
     674:	80 ff       	sbrs	r24, 0
     676:	02 c0       	rjmp	.+4      	; 0x67c <debug_tx_byte+0x54>
	  buf[i+1]=1;
     678:	60 83       	st	Z, r22
     67a:	01 c0       	rjmp	.+2      	; 0x67e <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     67c:	10 82       	st	Z, r1
     67e:	2f 5f       	subi	r18, 0xFF	; 255
     680:	3f 4f       	sbci	r19, 0xFF	; 255
     682:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     684:	28 30       	cpi	r18, 0x08	; 8
     686:	31 05       	cpc	r19, r1
     688:	71 f7       	brne	.-36     	; 0x666 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     68a:	df b6       	in	r13, 0x3f	; 63
  cli();
     68c:	f8 94       	cli
     68e:	8e 01       	movw	r16, r28
     690:	0f 5f       	subi	r16, 0xFF	; 255
     692:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     694:	3b e0       	ldi	r19, 0x0B	; 11
     696:	e3 2e       	mov	r14, r19
     698:	f1 2c       	mov	r15, r1
     69a:	ec 0e       	add	r14, r28
     69c:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     69e:	f8 01       	movw	r30, r16
     6a0:	80 81       	ld	r24, Z
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	11 f4       	brne	.+4      	; 0x6aa <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     6a6:	5d 9a       	sbi	0x0b, 5	; 11
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     6aa:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     6ac:	0e 94 ff 02 	call	0x5fe	; 0x5fe <debug_delay_index_0>
     6b0:	0f 5f       	subi	r16, 0xFF	; 255
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     6b4:	0e 15       	cp	r16, r14
     6b6:	1f 05       	cpc	r17, r15
     6b8:	91 f7       	brne	.-28     	; 0x69e <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     6ba:	df be       	out	0x3f, r13	; 63
}
     6bc:	2a 96       	adiw	r28, 0x0a	; 10
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	08 95       	ret

000006d8 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     6de:	36 9b       	sbis	0x06, 6	; 6
     6e0:	21 c0       	rjmp	.+66     	; 0x724 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	17 c0       	rjmp	.+46     	; 0x714 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     6e6:	0e 94 06 03 	call	0x60c	; 0x60c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     6ea:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     6ec:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     6ee:	17 30       	cpi	r17, 0x07	; 7
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <debug_rx_byte+0x1c>
	    val>>=1;
     6f2:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     6f4:	1f 5f       	subi	r17, 0xFF	; 255
     6f6:	18 30       	cpi	r17, 0x08	; 8
     6f8:	b1 f7       	brne	.-20     	; 0x6e6 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     6fa:	0e 94 06 03 	call	0x60c	; 0x60c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     6fe:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     700:	f6 fc       	sbrc	r15, 6
     702:	07 c0       	rjmp	.+14     	; 0x712 <debug_rx_byte+0x3a>
     704:	86 ff       	sbrs	r24, 6
     706:	05 c0       	rjmp	.+10     	; 0x712 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     708:	00 93 29 01 	sts	0x0129, r16
	  debug.error=0x00;
     70c:	10 92 28 01 	sts	0x0128, r1
     710:	03 c0       	rjmp	.+6      	; 0x718 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 28 01 	sts	0x0128, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     718:	80 91 29 01 	lds	r24, 0x0129
}
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     724:	0e 94 0d 03 	call	0x61a	; 0x61a <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     728:	f6 b0       	in	r15, 0x06	; 6
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	db cf       	rjmp	.-74     	; 0x6e6 <debug_rx_byte+0xe>

00000730 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     730:	80 91 29 01 	lds	r24, 0x0129
}
     734:	08 95       	ret

00000736 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     736:	10 92 29 01 	sts	0x0129, r1
}
     73a:	08 95       	ret

0000073c <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     73c:	80 93 29 01 	sts	0x0129, r24
}
     740:	08 95       	ret

00000742 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	7b 01       	movw	r14, r22
     756:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	e8 16       	cp	r14, r24
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	09 f0       	breq	.+2      	; 0x766 <debug_tx_hex+0x24>
     764:	30 f4       	brcc	.+12     	; 0x772 <debug_tx_hex+0x30>
     766:	c8 e0       	ldi	r28, 0x08	; 8
     768:	d0 e0       	ldi	r29, 0x00	; 0
     76a:	62 e0       	ldi	r22, 0x02	; 2
     76c:	c6 2e       	mov	r12, r22
     76e:	d1 2c       	mov	r13, r1
     770:	14 c0       	rjmp	.+40     	; 0x79a <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	e8 16       	cp	r14, r24
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	f8 06       	cpc	r15, r24
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	08 07       	cpc	r16, r24
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	18 07       	cpc	r17, r24
     782:	30 f0       	brcs	.+12     	; 0x790 <debug_tx_hex+0x4e>
     784:	c0 e2       	ldi	r28, 0x20	; 32
     786:	d0 e0       	ldi	r29, 0x00	; 0
     788:	58 e0       	ldi	r21, 0x08	; 8
     78a:	c5 2e       	mov	r12, r21
     78c:	d1 2c       	mov	r13, r1
     78e:	05 c0       	rjmp	.+10     	; 0x79a <debug_tx_hex+0x58>
     790:	c0 e1       	ldi	r28, 0x10	; 16
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	44 e0       	ldi	r20, 0x04	; 4
     796:	c4 2e       	mov	r12, r20
     798:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     79a:	80 e3       	ldi	r24, 0x30	; 48
     79c:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
  debug_tx_byte('x');
     7a0:	88 e7       	ldi	r24, 0x78	; 120
     7a2:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
     7a6:	bb 24       	eor	r11, r11
     7a8:	17 c0       	rjmp	.+46     	; 0x7d8 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     7aa:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     7ac:	d8 01       	movw	r26, r16
     7ae:	c7 01       	movw	r24, r14
     7b0:	0c 2e       	mov	r0, r28
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <debug_tx_hex+0x7a>
     7b4:	b6 95       	lsr	r27
     7b6:	a7 95       	ror	r26
     7b8:	97 95       	ror	r25
     7ba:	87 95       	ror	r24
     7bc:	0a 94       	dec	r0
     7be:	d2 f7       	brpl	.-12     	; 0x7b4 <debug_tx_hex+0x72>
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     7c6:	8a 30       	cpi	r24, 0x0A	; 10
     7c8:	91 05       	cpc	r25, r1
     7ca:	10 f0       	brcs	.+4      	; 0x7d0 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     7cc:	c7 96       	adiw	r24, 0x37	; 55
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     7d0:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     7d2:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     7d6:	b3 94       	inc	r11
     7d8:	8b 2d       	mov	r24, r11
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	8c 15       	cp	r24, r12
     7de:	9d 05       	cpc	r25, r13
     7e0:	20 f3       	brcs	.-56     	; 0x7aa <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	08 95       	ret

000007f6 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	7b 01       	movw	r14, r22
     80c:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     80e:	6f 3f       	cpi	r22, 0xFF	; 255
     810:	71 05       	cpc	r23, r1
     812:	81 05       	cpc	r24, r1
     814:	91 05       	cpc	r25, r1
     816:	09 f0       	breq	.+2      	; 0x81a <debug_tx_bin+0x24>
     818:	18 f4       	brcc	.+6      	; 0x820 <debug_tx_bin+0x2a>
     81a:	f7 e0       	ldi	r31, 0x07	; 7
     81c:	df 2e       	mov	r13, r31
     81e:	0d c0       	rjmp	.+26     	; 0x83a <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     820:	60 30       	cpi	r22, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	73 07       	cpc	r23, r19
     826:	31 e0       	ldi	r19, 0x01	; 1
     828:	83 07       	cpc	r24, r19
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	93 07       	cpc	r25, r19
     82e:	18 f0       	brcs	.+6      	; 0x836 <debug_tx_bin+0x40>
     830:	ef e1       	ldi	r30, 0x1F	; 31
     832:	de 2e       	mov	r13, r30
     834:	02 c0       	rjmp	.+4      	; 0x83a <debug_tx_bin+0x44>
     836:	7f e0       	ldi	r23, 0x0F	; 15
     838:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     83a:	80 e3       	ldi	r24, 0x30	; 48
     83c:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
  debug_tx_byte('b');
     840:	82 e6       	ldi	r24, 0x62	; 98
     842:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
     846:	c0 e0       	ldi	r28, 0x00	; 0
     848:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     84a:	cd 2c       	mov	r12, r13
     84c:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     84e:	56 01       	movw	r10, r12
     850:	08 94       	sec
     852:	a1 1c       	adc	r10, r1
     854:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     856:	c6 01       	movw	r24, r12
     858:	8c 1b       	sub	r24, r28
     85a:	9d 0b       	sbc	r25, r29
     85c:	a8 01       	movw	r20, r16
     85e:	97 01       	movw	r18, r14
     860:	04 c0       	rjmp	.+8      	; 0x86a <debug_tx_bin+0x74>
     862:	56 95       	lsr	r21
     864:	47 95       	ror	r20
     866:	37 95       	ror	r19
     868:	27 95       	ror	r18
     86a:	8a 95       	dec	r24
     86c:	d2 f7       	brpl	.-12     	; 0x862 <debug_tx_bin+0x6c>
     86e:	da 01       	movw	r26, r20
     870:	c9 01       	movw	r24, r18
     872:	81 70       	andi	r24, 0x01	; 1
     874:	90 70       	andi	r25, 0x00	; 0
     876:	89 2b       	or	r24, r25
     878:	11 f0       	breq	.+4      	; 0x87e <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     87a:	81 e3       	ldi	r24, 0x31	; 49
     87c:	01 c0       	rjmp	.+2      	; 0x880 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     87e:	80 e3       	ldi	r24, 0x30	; 48
     880:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
     884:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     886:	ca 15       	cp	r28, r10
     888:	db 05       	cpc	r29, r11
     88a:	29 f7       	brne	.-54     	; 0x856 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	af 90       	pop	r10
     8a0:	08 95       	ret

000008a2 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     8a2:	8d e0       	ldi	r24, 0x0D	; 13
     8a4:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
  debug_tx_byte('\n');
     8a8:	8a e0       	ldi	r24, 0x0A	; 10
     8aa:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
}
     8ae:	08 95       	ret

000008b0 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     8b0:	80 e2       	ldi	r24, 0x20	; 32
     8b2:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
}
     8b6:	08 95       	ret

000008b8 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     8b8:	8c e2       	ldi	r24, 0x2C	; 44
     8ba:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
}
     8be:	08 95       	ret

000008c0 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     8cc:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
        i++;
     8d0:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     8d2:	fe 01       	movw	r30, r28
     8d4:	e1 0f       	add	r30, r17
     8d6:	f1 1d       	adc	r31, r1
     8d8:	80 81       	ld	r24, Z
     8da:	88 23       	and	r24, r24
     8dc:	b9 f7       	brne	.-18     	; 0x8cc <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	08 95       	ret

000008e6 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     8e6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_nl();
     8ea:	0e 94 51 04 	call	0x8a2	; 0x8a2 <debug_tx_nl>
}
     8ee:	08 95       	ret

000008f0 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     8f0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     8f4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
}
     8f8:	08 95       	ret

000008fa <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     8fa:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_cm();
     8fe:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <debug_tx_cm>
}
     902:	08 95       	ret

00000904 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	81 05       	cpc	r24, r1
     91c:	91 05       	cpc	r25, r1
     91e:	31 f4       	brne	.+12     	; 0x92c <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     920:	10 92 4c 01 	sts	0x014C, r1
    debug.input_num_digits=1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 54 01 	sts	0x0154, r24
     92a:	23 c0       	rjmp	.+70     	; 0x972 <debug_determine_digit_numbers+0x6e>
     92c:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     92e:	0b 2d       	mov	r16, r11
     930:	10 e0       	ldi	r17, 0x00	; 0
     932:	08 5d       	subi	r16, 0xD8	; 216
     934:	1e 4f       	sbci	r17, 0xFE	; 254
     936:	c7 01       	movw	r24, r14
     938:	b6 01       	movw	r22, r12
     93a:	2a e0       	ldi	r18, 0x0A	; 10
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodsi4>
     946:	f8 01       	movw	r30, r16
     948:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	2a e0       	ldi	r18, 0x0A	; 10
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodsi4>
     95a:	c9 01       	movw	r24, r18
     95c:	da 01       	movw	r26, r20
     95e:	6c 01       	movw	r12, r24
     960:	7d 01       	movw	r14, r26
      i++;
     962:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     964:	c1 14       	cp	r12, r1
     966:	d1 04       	cpc	r13, r1
     968:	e1 04       	cpc	r14, r1
     96a:	f1 04       	cpc	r15, r1
     96c:	01 f7       	brne	.-64     	; 0x92e <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     96e:	b0 92 54 01 	sts	0x0154, r11
  }
}
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	08 95       	ret

00000982 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     982:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     984:	10 91 54 01 	lds	r17, 0x0154
     988:	09 c0       	rjmp	.+18     	; 0x99c <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     98a:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     98c:	e1 2f       	mov	r30, r17
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e8 5d       	subi	r30, 0xD8	; 216
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     996:	80 5d       	subi	r24, 0xD0	; 208
     998:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     99c:	11 23       	and	r17, r17
     99e:	a9 f7       	brne	.-22     	; 0x98a <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     9a0:	1f 91       	pop	r17
     9a2:	08 95       	ret

000009a4 <debug_tx_number>:

void debug_tx_number(int32_t num){
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	7b 01       	movw	r14, r22
     9ae:	8c 01       	movw	r16, r24
  if(num<0){
     9b0:	97 ff       	sbrs	r25, 7
     9b2:	0b c0       	rjmp	.+22     	; 0x9ca <debug_tx_number+0x26>
    debug_tx_byte('-');
     9b4:	8d e2       	ldi	r24, 0x2D	; 45
     9b6:	0e 94 14 03 	call	0x628	; 0x628 <debug_tx_byte>
	num=-num;
     9ba:	10 95       	com	r17
     9bc:	00 95       	com	r16
     9be:	f0 94       	com	r15
     9c0:	e0 94       	com	r14
     9c2:	e1 1c       	adc	r14, r1
     9c4:	f1 1c       	adc	r15, r1
     9c6:	01 1d       	adc	r16, r1
     9c8:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     9ca:	c8 01       	movw	r24, r16
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 82 04 	call	0x904	; 0x904 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     9d2:	0e 94 c1 04 	call	0x982	; 0x982 <debug_tx_number_digits>
}
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     9e0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <debug_tx_number>
  debug_tx_nl();
     9e4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <debug_tx_nl>
}
     9e8:	08 95       	ret

000009ea <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     9ea:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <debug_tx_number>
  debug_tx_sp();
     9ee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
}
     9f2:	08 95       	ret

000009f4 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     9f4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <debug_tx_number>
  debug_tx_text(",");
     9f8:	8e e0       	ldi	r24, 0x0E	; 14
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
}
     a00:	08 95       	ret

00000a02 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     a02:	0e 94 a1 03 	call	0x742	; 0x742 <debug_tx_hex>
  debug_tx_nl();
     a06:	0e 94 51 04 	call	0x8a2	; 0x8a2 <debug_tx_nl>
}
     a0a:	08 95       	ret

00000a0c <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     a0c:	0e 94 a1 03 	call	0x742	; 0x742 <debug_tx_hex>
  debug_tx_sp();
     a10:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
}
     a14:	08 95       	ret

00000a16 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     a16:	0e 94 a1 03 	call	0x742	; 0x742 <debug_tx_hex>
  debug_tx_text(",");
     a1a:	8e e0       	ldi	r24, 0x0E	; 14
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
}
     a22:	08 95       	ret

00000a24 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     a24:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <debug_tx_bin>
  debug_tx_nl();
     a28:	0e 94 51 04 	call	0x8a2	; 0x8a2 <debug_tx_nl>
}
     a2c:	08 95       	ret

00000a2e <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     a2e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <debug_tx_bin>
  debug_tx_sp();
     a32:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
}
     a36:	08 95       	ret

00000a38 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     a38:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <debug_tx_bin>
  debug_tx_text(",");
     a3c:	8e e0       	ldi	r24, 0x0E	; 14
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
}
     a44:	08 95       	ret

00000a46 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	7a 01       	movw	r14, r20
     a50:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     a52:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     a56:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_nl(num);
     a5a:	c8 01       	movw	r24, r16
     a5c:	b7 01       	movw	r22, r14
     a5e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <debug_tx_number_nl>
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	7a 01       	movw	r14, r20
     a76:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     a78:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     a7c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_sp(num);
     a80:	c8 01       	movw	r24, r16
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 f5 04 	call	0x9ea	; 0x9ea <debug_tx_number_sp>
}
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	08 95       	ret

00000a92 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	7a 01       	movw	r14, r20
     a9c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     a9e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     aa2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_cm(num);
     aa6:	c8 01       	movw	r24, r16
     aa8:	b7 01       	movw	r22, r14
     aaa:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <debug_tx_number_cm>
}
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	7a 01       	movw	r14, r20
     ac2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     ac4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     ac8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     acc:	c8 01       	movw	r24, r16
     ace:	b7 01       	movw	r22, r14
     ad0:	0e 94 01 05 	call	0xa02	; 0xa02 <debug_tx_number_hex_nl>
}
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	7a 01       	movw	r14, r20
     ae8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     aea:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     aee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     af2:	c8 01       	movw	r24, r16
     af4:	b7 01       	movw	r22, r14
     af6:	0e 94 06 05 	call	0xa0c	; 0xa0c <debug_tx_number_hex_sp>
}
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7a 01       	movw	r14, r20
     b0e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b10:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     b14:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     b18:	c8 01       	movw	r24, r16
     b1a:	b7 01       	movw	r22, r14
     b1c:	0e 94 0b 05 	call	0xa16	; 0xa16 <debug_tx_number_hex_cm>
}
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	08 95       	ret

00000b2a <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	7a 01       	movw	r14, r20
     b34:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b36:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     b3a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 12 05 	call	0xa24	; 0xa24 <debug_tx_number_bin_nl>
}
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret

00000b50 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	7a 01       	movw	r14, r20
     b5a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b5c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     b60:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     b64:	c8 01       	movw	r24, r16
     b66:	b7 01       	movw	r22, r14
     b68:	0e 94 17 05 	call	0xa2e	; 0xa2e <debug_tx_number_bin_sp>
}
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	7a 01       	movw	r14, r20
     b80:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b82:	0e 94 60 04 	call	0x8c0	; 0x8c0 <debug_tx_text>
  debug_tx_sp();
     b86:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     b8a:	c8 01       	movw	r24, r16
     b8c:	b7 01       	movw	r22, r14
     b8e:	0e 94 1c 05 	call	0xa38	; 0xa38 <debug_tx_number_bin_cm>
}
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     b9c:	e8 e2       	ldi	r30, 0x28	; 40
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	e8 0f       	add	r30, r24
     ba2:	f1 1d       	adc	r31, r1
     ba4:	83 81       	ldd	r24, Z+3	; 0x03
}
     ba6:	08 95       	ret

00000ba8 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     ba8:	80 91 4b 01 	lds	r24, 0x014B
}
     bac:	08 95       	ret

00000bae <debug_flush_buf>:

void debug_flush_buf(void){
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     bb2:	fc 01       	movw	r30, r24
     bb4:	e8 5d       	subi	r30, 0xD8	; 216
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	13 82       	std	Z+3, r1	; 0x03
     bba:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     bbc:	80 32       	cpi	r24, 0x20	; 32
     bbe:	91 05       	cpc	r25, r1
     bc0:	c1 f7       	brne	.-16     	; 0xbb2 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     bc2:	10 92 4b 01 	sts	0x014B, r1
}
     bc6:	08 95       	ret

00000bc8 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     bc8:	80 91 2a 01 	lds	r24, 0x012A
}
     bcc:	08 95       	ret

00000bce <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     bce:	80 91 2a 01 	lds	r24, 0x012A
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     bd2:	88 23       	and	r24, r24
     bd4:	11 f0       	breq	.+4      	; 0xbda <debug_data_available_rx_buf+0xc>
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 c0       	rjmp	.+16     	; 0xbea <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     bda:	80 91 4b 01 	lds	r24, 0x014B
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <debug_data_available_rx_buf+0x18>
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     bea:	89 2f       	mov	r24, r25
     bec:	08 95       	ret

00000bee <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     bee:	80 91 4b 01 	lds	r24, 0x014B
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     bf2:	08 95       	ret

00000bf4 <debug_init>:

void debug_init(void){
  debug_struct_init();
     bf4:	0e 94 97 02 	call	0x52e	; 0x52e <debug_struct_init>
  debug_timings_init();
     bf8:	0e 94 b3 02 	call	0x566	; 0x566 <debug_timings_init>
  debug_gpio_init();
     bfc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <debug_gpio_init>
}
     c00:	08 95       	ret

00000c02 <__vector_4>:


ISR(ISR_PCINT_VECT){
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
  debug.databsy=1;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 2a 01 	sts	0x012A, r24
  uint8_t val=debug_rx_byte();
     c2a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <debug_rx_byte>
     c2e:	98 2f       	mov	r25, r24
  if(debug.error==0){
     c30:	80 91 28 01 	lds	r24, 0x0128
     c34:	88 23       	and	r24, r24
     c36:	99 f4       	brne	.+38     	; 0xc5e <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     c38:	e0 91 4b 01 	lds	r30, 0x014B
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	e8 5d       	subi	r30, 0xD8	; 216
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     c44:	80 91 4b 01 	lds	r24, 0x014B
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 4b 01 	sts	0x014B, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     c4e:	80 91 4b 01 	lds	r24, 0x014B
     c52:	81 32       	cpi	r24, 0x21	; 33
     c54:	10 f0       	brcs	.+4      	; 0xc5a <__vector_4+0x58>
	  debug.bufindex=0;
     c56:	10 92 4b 01 	sts	0x014B, r1
	}
    debug_timer_start();
     c5a:	0e 94 c6 02 	call	0x58c	; 0x58c <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <__vector_16>:

ISR(TIMER_OVF_VECT){
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     c8a:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     c8e:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     c90:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     c92:	10 92 2a 01 	sts	0x012A, r1
}
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0
     c9c:	1f 90       	pop	r1
     c9e:	18 95       	reti

00000ca0 <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     ca0:	e5 e5       	ldi	r30, 0x55	; 85
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     ca4:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     ca6:	11 82       	std	Z+1, r1	; 0x01
     ca8:	12 82       	std	Z+2, r1	; 0x02
     caa:	13 82       	std	Z+3, r1	; 0x03
     cac:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     cae:	15 82       	std	Z+5, r1	; 0x05
     cb0:	16 82       	std	Z+6, r1	; 0x06
     cb2:	17 82       	std	Z+7, r1	; 0x07
     cb4:	10 86       	std	Z+8, r1	; 0x08
     cb6:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	eb 38       	cpi	r30, 0x8B	; 139
     cbc:	f8 07       	cpc	r31, r24
     cbe:	91 f7       	brne	.-28     	; 0xca4 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     cc0:	08 95       	ret

00000cc2 <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	fc 01       	movw	r30, r24
     cc6:	23 e0       	ldi	r18, 0x03	; 3
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	2a 95       	dec	r18
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <LPF_Set_Alpha+0x6>
     cd0:	e8 0f       	add	r30, r24
     cd2:	f9 1f       	adc	r31, r25
     cd4:	eb 5a       	subi	r30, 0xAB	; 171
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	60 83       	st	Z, r22
}
     cda:	08 95       	ret

00000cdc <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	33 e0       	ldi	r19, 0x03	; 3
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	3a 95       	dec	r19
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <LPF_Get_Alpha+0x6>
     cea:	e8 0f       	add	r30, r24
     cec:	f9 1f       	adc	r31, r25
     cee:	eb 5a       	subi	r30, 0xAB	; 171
     cf0:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     cf2:	80 81       	ld	r24, Z
     cf4:	08 95       	ret

00000cf6 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     cf6:	2f 92       	push	r2
     cf8:	3f 92       	push	r3
     cfa:	4f 92       	push	r4
     cfc:	5f 92       	push	r5
     cfe:	6f 92       	push	r6
     d00:	7f 92       	push	r7
     d02:	8f 92       	push	r8
     d04:	9f 92       	push	r9
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	1a 01       	movw	r2, r20
     d18:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	6c 01       	movw	r12, r24
     d1e:	53 e0       	ldi	r21, 0x03	; 3
     d20:	cc 0c       	add	r12, r12
     d22:	dd 1c       	adc	r13, r13
     d24:	5a 95       	dec	r21
     d26:	e1 f7       	brne	.-8      	; 0xd20 <LPF_Get_Filtered_Value+0x2a>
     d28:	c8 0e       	add	r12, r24
     d2a:	d9 1e       	adc	r13, r25
     d2c:	85 e5       	ldi	r24, 0x55	; 85
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	c8 0e       	add	r12, r24
     d32:	d9 1e       	adc	r13, r25
     d34:	f6 01       	movw	r30, r12
     d36:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     d38:	62 2e       	mov	r6, r18
     d3a:	77 24       	eor	r7, r7
     d3c:	88 24       	eor	r8, r8
     d3e:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     d40:	64 e6       	ldi	r22, 0x64	; 100
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	62 1b       	sub	r22, r18
     d46:	71 09       	sbc	r23, r1
     d48:	88 27       	eor	r24, r24
     d4a:	77 fd       	sbrc	r23, 7
     d4c:	80 95       	com	r24
     d4e:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     d50:	45 e0       	ldi	r20, 0x05	; 5
     d52:	a4 2e       	mov	r10, r20
     d54:	b1 2c       	mov	r11, r1
     d56:	ac 0c       	add	r10, r12
     d58:	bd 1c       	adc	r11, r13
     d5a:	25 81       	ldd	r18, Z+5	; 0x05
     d5c:	36 81       	ldd	r19, Z+6	; 0x06
     d5e:	47 81       	ldd	r20, Z+7	; 0x07
     d60:	50 85       	ldd	r21, Z+8	; 0x08
     d62:	0e 94 9e 0c 	call	0x193c	; 0x193c <__mulsi3>
     d66:	7b 01       	movw	r14, r22
     d68:	8c 01       	movw	r16, r24
     d6a:	c2 01       	movw	r24, r4
     d6c:	b1 01       	movw	r22, r2
     d6e:	a4 01       	movw	r20, r8
     d70:	93 01       	movw	r18, r6
     d72:	0e 94 9e 0c 	call	0x193c	; 0x193c <__mulsi3>
     d76:	e6 0e       	add	r14, r22
     d78:	f7 1e       	adc	r15, r23
     d7a:	08 1f       	adc	r16, r24
     d7c:	19 1f       	adc	r17, r25
     d7e:	c8 01       	movw	r24, r16
     d80:	b7 01       	movw	r22, r14
     d82:	24 e6       	ldi	r18, 0x64	; 100
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divmodsi4>
     d8e:	ca 01       	movw	r24, r20
     d90:	f6 01       	movw	r30, r12
     d92:	25 83       	std	Z+5, r18	; 0x05
     d94:	f5 01       	movw	r30, r10
     d96:	31 83       	std	Z+1, r19	; 0x01
     d98:	42 83       	std	Z+2, r20	; 0x02
     d9a:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     d9c:	b9 01       	movw	r22, r18
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	7f 90       	pop	r7
     db4:	6f 90       	pop	r6
     db6:	5f 90       	pop	r5
     db8:	4f 90       	pop	r4
     dba:	3f 90       	pop	r3
     dbc:	2f 90       	pop	r2
     dbe:	08 95       	ret

00000dc0 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     dc0:	0e 94 50 06 	call	0xca0	; 0xca0 <LPF_Struct_Init>
     dc4:	08 95       	ret

00000dc6 <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	21 e4       	ldi	r18, 0x41	; 65
     dd0:	33 e0       	ldi	r19, 0x03	; 3
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	0e 94 9e 0c 	call	0x193c	; 0x193c <__mulsi3>
     dda:	60 51       	subi	r22, 0x10	; 16
     ddc:	76 4b       	sbci	r23, 0xB6	; 182
     dde:	8d 4f       	sbci	r24, 0xFD	; 253
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
     de2:	24 e6       	ldi	r18, 0x64	; 100
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodsi4>
     dee:	30 93 89 00 	sts	0x0089, r19
     df2:	20 93 88 00 	sts	0x0088, r18
     df6:	08 95       	ret

00000df8 <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
     dfc:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
     dfe:	60 e6       	ldi	r22, 0x60	; 96
     e00:	73 ee       	ldi	r23, 0xE3	; 227
     e02:	86 e1       	ldi	r24, 0x16	; 22
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodsi4>
     e0a:	21 50       	subi	r18, 0x01	; 1
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	30 93 87 00 	sts	0x0087, r19
     e12:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
     e16:	8c ed       	ldi	r24, 0xDC	; 220
     e18:	95 e0       	ldi	r25, 0x05	; 5
     e1a:	90 93 89 00 	sts	0x0089, r25
     e1e:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
     e22:	82 e8       	ldi	r24, 0x82	; 130
     e24:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     e28:	8a e1       	ldi	r24, 0x1A	; 26
     e2a:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <Servo_Set_Angle>
     e36:	88 ee       	ldi	r24, 0xE8	; 232
     e38:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e3a:	2c e2       	ldi	r18, 0x2C	; 44
     e3c:	31 e0       	ldi	r19, 0x01	; 1
     e3e:	f9 01       	movw	r30, r18
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <Servo_Init+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e46:	d9 f7       	brne	.-10     	; 0xe3e <Servo_Init+0x46>
  _delay_ms(100);
}
     e48:	08 95       	ret

00000e4a <MPU6050_Struct_Init>:
}mpu6050_t;

mpu6050_t MPU6050;

void MPU6050_Struct_Init(void){
  MPU6050.AccX=0;
     e4a:	10 92 8c 01 	sts	0x018C, r1
     e4e:	10 92 8b 01 	sts	0x018B, r1
  MPU6050.AccY=0;
     e52:	10 92 8e 01 	sts	0x018E, r1
     e56:	10 92 8d 01 	sts	0x018D, r1
  MPU6050.AccZ=0;
     e5a:	10 92 90 01 	sts	0x0190, r1
     e5e:	10 92 8f 01 	sts	0x018F, r1
  MPU6050.GyroX=0;
     e62:	10 92 92 01 	sts	0x0192, r1
     e66:	10 92 91 01 	sts	0x0191, r1
  MPU6050.GyroY=0;
     e6a:	10 92 94 01 	sts	0x0194, r1
     e6e:	10 92 93 01 	sts	0x0193, r1
  MPU6050.GyroZ=0;
     e72:	10 92 96 01 	sts	0x0196, r1
     e76:	10 92 95 01 	sts	0x0195, r1
  MPU6050.Pitch=0;
     e7a:	10 92 98 01 	sts	0x0198, r1
     e7e:	10 92 97 01 	sts	0x0197, r1
  MPU6050.Roll=0;
     e82:	10 92 9a 01 	sts	0x019A, r1
     e86:	10 92 99 01 	sts	0x0199, r1
  MPU6050.Yaw=0;
     e8a:	10 92 9c 01 	sts	0x019C, r1
     e8e:	10 92 9b 01 	sts	0x019B, r1
  MPU6050.Temp=0;
     e92:	10 92 9e 01 	sts	0x019E, r1
     e96:	10 92 9d 01 	sts	0x019D, r1
  MPU6050.Error=0;
     e9a:	10 92 a0 01 	sts	0x01A0, r1
     e9e:	10 92 9f 01 	sts	0x019F, r1
}
     ea2:	08 95       	ret

00000ea4 <MPU6050_Get_AccX>:

int MPU6050_Get_AccX(void){
  return MPU6050.AccX;
}
     ea4:	80 91 8b 01 	lds	r24, 0x018B
     ea8:	90 91 8c 01 	lds	r25, 0x018C
     eac:	08 95       	ret

00000eae <MPU6050_Get_AccY>:

int MPU6050_Get_AccY(void){
  return MPU6050.AccY;
}
     eae:	80 91 8d 01 	lds	r24, 0x018D
     eb2:	90 91 8e 01 	lds	r25, 0x018E
     eb6:	08 95       	ret

00000eb8 <MPU6050_Get_AccZ>:

int MPU6050_Get_AccZ(void){
  return MPU6050.AccZ;
}
     eb8:	80 91 8f 01 	lds	r24, 0x018F
     ebc:	90 91 90 01 	lds	r25, 0x0190
     ec0:	08 95       	ret

00000ec2 <MPU6050_Get_GyroX>:

int MPU6050_Get_GyroX(void){
  return MPU6050.GyroX;
}
     ec2:	80 91 91 01 	lds	r24, 0x0191
     ec6:	90 91 92 01 	lds	r25, 0x0192
     eca:	08 95       	ret

00000ecc <MPU6050_Get_GyroY>:

int MPU6050_Get_GyroY(void){
  return MPU6050.GyroY;
}
     ecc:	80 91 93 01 	lds	r24, 0x0193
     ed0:	90 91 94 01 	lds	r25, 0x0194
     ed4:	08 95       	ret

00000ed6 <MPU6050_Get_GyroZ>:

int MPU6050_Get_GyroZ(void){
  return MPU6050.GyroZ;
}
     ed6:	80 91 95 01 	lds	r24, 0x0195
     eda:	90 91 96 01 	lds	r25, 0x0196
     ede:	08 95       	ret

00000ee0 <MPU6050_Get_Temp>:

int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}
     ee0:	80 91 9d 01 	lds	r24, 0x019D
     ee4:	90 91 9e 01 	lds	r25, 0x019E
     ee8:	08 95       	ret

00000eea <MPU6050_Get_Error>:

int MPU6050_Get_Error(void){
  return MPU6050.Error;
}
     eea:	80 91 9f 01 	lds	r24, 0x019F
     eee:	90 91 a0 01 	lds	r25, 0x01A0
     ef2:	08 95       	ret

00000ef4 <MPU6050_Error_Clear>:

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
     ef4:	10 92 a0 01 	sts	0x01A0, r1
     ef8:	10 92 9f 01 	sts	0x019F, r1
}
     efc:	08 95       	ret

00000efe <MPU6050_Read_Roll>:
    MPU6050.Pitch=0;
    return 0;
  }
}

int MPU6050_Read_Roll(void){
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
  if(MPU6050.Error==0){
     f06:	80 91 9f 01 	lds	r24, 0x019F
     f0a:	90 91 a0 01 	lds	r25, 0x01A0
     f0e:	89 2b       	or	r24, r25
     f10:	91 f5       	brne	.+100    	; 0xf76 <MPU6050_Read_Roll+0x78>
    float ay=MPU6050_Get_AccY();
    float az=MPU6050_Get_AccZ();
    float divy=ay/az;
    float roll = atan(divy);
     f12:	60 91 8d 01 	lds	r22, 0x018D
     f16:	70 91 8e 01 	lds	r23, 0x018E
     f1a:	88 27       	eor	r24, r24
     f1c:	77 fd       	sbrc	r23, 7
     f1e:	80 95       	com	r24
     f20:	98 2f       	mov	r25, r24
     f22:	0e 94 20 0b 	call	0x1640	; 0x1640 <__floatsisf>
     f26:	7b 01       	movw	r14, r22
     f28:	8c 01       	movw	r16, r24
     f2a:	60 91 8f 01 	lds	r22, 0x018F
     f2e:	70 91 90 01 	lds	r23, 0x0190
     f32:	88 27       	eor	r24, r24
     f34:	77 fd       	sbrc	r23, 7
     f36:	80 95       	com	r24
     f38:	98 2f       	mov	r25, r24
     f3a:	0e 94 20 0b 	call	0x1640	; 0x1640 <__floatsisf>
     f3e:	9b 01       	movw	r18, r22
     f40:	ac 01       	movw	r20, r24
     f42:	c8 01       	movw	r24, r16
     f44:	b7 01       	movw	r22, r14
     f46:	0e 94 85 0a 	call	0x150a	; 0x150a <__divsf3>
     f4a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <atan>
    roll*=10.0;
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
    roll*=57.3;
	MPU6050.Roll=(int)roll;
     f5a:	23 e3       	ldi	r18, 0x33	; 51
     f5c:	33 e3       	ldi	r19, 0x33	; 51
     f5e:	45 e6       	ldi	r20, 0x65	; 101
     f60:	52 e4       	ldi	r21, 0x42	; 66
     f62:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     f66:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fixsfsi>
     f6a:	9b 01       	movw	r18, r22
     f6c:	70 93 9a 01 	sts	0x019A, r23
     f70:	60 93 99 01 	sts	0x0199, r22
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <MPU6050_Read_Roll+0x84>
    return MPU6050.Roll;
  }else{
    MPU6050.Roll=0;
     f76:	10 92 9a 01 	sts	0x019A, r1
     f7a:	10 92 99 01 	sts	0x0199, r1
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
     f82:	c9 01       	movw	r24, r18
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	08 95       	ret

00000f8e <MPU6050_Read_Pitch>:
void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
  MPU6050_Read_Gyro();
}

int MPU6050_Read_Pitch(void){
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
  if(MPU6050.Error==0){
     f96:	80 91 9f 01 	lds	r24, 0x019F
     f9a:	90 91 a0 01 	lds	r25, 0x01A0
     f9e:	89 2b       	or	r24, r25
     fa0:	91 f5       	brne	.+100    	; 0x1006 <MPU6050_Read_Pitch+0x78>
    float ax=MPU6050_Get_AccX();
    float az=MPU6050_Get_AccZ();
    float divx=ax/az;
    float pitch = atan(divx);
     fa2:	60 91 8b 01 	lds	r22, 0x018B
     fa6:	70 91 8c 01 	lds	r23, 0x018C
     faa:	88 27       	eor	r24, r24
     fac:	77 fd       	sbrc	r23, 7
     fae:	80 95       	com	r24
     fb0:	98 2f       	mov	r25, r24
     fb2:	0e 94 20 0b 	call	0x1640	; 0x1640 <__floatsisf>
     fb6:	7b 01       	movw	r14, r22
     fb8:	8c 01       	movw	r16, r24
     fba:	60 91 8f 01 	lds	r22, 0x018F
     fbe:	70 91 90 01 	lds	r23, 0x0190
     fc2:	88 27       	eor	r24, r24
     fc4:	77 fd       	sbrc	r23, 7
     fc6:	80 95       	com	r24
     fc8:	98 2f       	mov	r25, r24
     fca:	0e 94 20 0b 	call	0x1640	; 0x1640 <__floatsisf>
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	c8 01       	movw	r24, r16
     fd4:	b7 01       	movw	r22, r14
     fd6:	0e 94 85 0a 	call	0x150a	; 0x150a <__divsf3>
     fda:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <atan>
    pitch*=10.0;
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
    pitch*=57.3;
	MPU6050.Pitch=(int)pitch;
     fea:	23 e3       	ldi	r18, 0x33	; 51
     fec:	33 e3       	ldi	r19, 0x33	; 51
     fee:	45 e6       	ldi	r20, 0x65	; 101
     ff0:	52 e4       	ldi	r21, 0x42	; 66
     ff2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     ff6:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fixsfsi>
     ffa:	9b 01       	movw	r18, r22
     ffc:	70 93 98 01 	sts	0x0198, r23
    1000:	60 93 97 01 	sts	0x0197, r22
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <MPU6050_Read_Pitch+0x84>
	return MPU6050.Pitch;
  }else{
    MPU6050.Pitch=0;
    1006:	10 92 98 01 	sts	0x0198, r1
    100a:	10 92 97 01 	sts	0x0197, r1
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
    1012:	c9 01       	movw	r24, r18
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	08 95       	ret

0000101e <MPU6050_Get_Mode>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    101e:	8b e6       	ldi	r24, 0x6B	; 107
    1020:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
}
    1024:	08 95       	ret

00001026 <MPU6050_Read_Temp>:
  }
  MPU6050.GyroZ=data;
  return (int16_t)data;
}

int MPU6050_Read_Temp(void){
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
    102c:	81 e4       	ldi	r24, 0x41	; 65
    102e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    1032:	f8 2e       	mov	r15, r24
  error1 = I2C_Get_Error();
    1034:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    1038:	18 2f       	mov	r17, r24
  data <<= 8;
  data |= I2C_Read_Register(0x42);
    103a:	82 e4       	ldi	r24, 0x42	; 66
    103c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    1040:	08 2f       	mov	r16, r24
  error2 = I2C_Get_Error();
    1042:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
  data /=340;
  data +=36;
  if( (error1!=0) || (error2!=0) ){
    1046:	11 23       	and	r17, r17
    1048:	81 f4       	brne	.+32     	; 0x106a <MPU6050_Read_Temp+0x44>
    104a:	88 23       	and	r24, r24
    104c:	71 f4       	brne	.+28     	; 0x106a <MPU6050_Read_Temp+0x44>

int MPU6050_Read_Temp(void){
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
  error1 = I2C_Get_Error();
  data <<= 8;
    104e:	9f 2d       	mov	r25, r15
    1050:	80 e0       	ldi	r24, 0x00	; 0
  data |= I2C_Read_Register(0x42);
    1052:	20 2f       	mov	r18, r16
    1054:	30 e0       	ldi	r19, 0x00	; 0
  error2 = I2C_Get_Error();
  data /=340;
    1056:	82 2b       	or	r24, r18
    1058:	93 2b       	or	r25, r19
    105a:	64 e5       	ldi	r22, 0x54	; 84
    105c:	71 e0       	ldi	r23, 0x01	; 1
    105e:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divmodhi4>
  data +=36;
    1062:	9b 01       	movw	r18, r22
    1064:	2c 5d       	subi	r18, 0xDC	; 220
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	08 c0       	rjmp	.+16     	; 0x107a <MPU6050_Read_Temp+0x54>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x21;
    106a:	81 e2       	ldi	r24, 0x21	; 33
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 a0 01 	sts	0x01A0, r25
    1072:	80 93 9f 01 	sts	0x019F, r24
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
  }
  MPU6050.Temp=data;
    107a:	30 93 9e 01 	sts	0x019E, r19
    107e:	20 93 9d 01 	sts	0x019D, r18
  return data;
}
    1082:	c9 01       	movw	r24, r18
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	08 95       	ret

0000108c <MPU6050_Read_GyroZ>:
  }
  MPU6050.GyroY=data;
  return data;
}

int MPU6050_Read_GyroZ(void){
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x47);
    109c:	87 e4       	ldi	r24, 0x47	; 71
    109e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    10a2:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    10a4:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    10a8:	b8 2e       	mov	r11, r24
  data <<= 8;
    10aa:	fd 2c       	mov	r15, r13
    10ac:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
    10ae:	88 e4       	ldi	r24, 0x48	; 72
    10b0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    10b4:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    10b6:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    10ba:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    10bc:	dd 24       	eor	r13, r13
    10be:	ec 28       	or	r14, r12
    10c0:	fd 28       	or	r15, r13
    10c2:	00 27       	eor	r16, r16
    10c4:	f7 fc       	sbrc	r15, 7
    10c6:	00 95       	com	r16
    10c8:	10 2f       	mov	r17, r16
    10ca:	85 e0       	ldi	r24, 0x05	; 5
    10cc:	b8 01       	movw	r22, r16
    10ce:	a7 01       	movw	r20, r14
    10d0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    10d4:	bb 20       	and	r11, r11
    10d6:	11 f4       	brne	.+4      	; 0x10dc <MPU6050_Read_GyroZ+0x50>
    10d8:	aa 20       	and	r10, r10
    10da:	41 f0       	breq	.+16     	; 0x10ec <MPU6050_Read_GyroZ+0x60>
    data=0;
	MPU6050.Error=0x13;
    10dc:	83 e1       	ldi	r24, 0x13	; 19
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 a0 01 	sts	0x01A0, r25
    10e4:	80 93 9f 01 	sts	0x019F, r24
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.GyroZ=data;
    10ec:	70 93 96 01 	sts	0x0196, r23
    10f0:	60 93 95 01 	sts	0x0195, r22
  return (int16_t)data;
}
    10f4:	cb 01       	movw	r24, r22
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	08 95       	ret

00001108 <MPU6050_Read_GyroY>:
  }
  MPU6050.GyroX=data;
  return data;
}

int MPU6050_Read_GyroY(void){
    1108:	af 92       	push	r10
    110a:	bf 92       	push	r11
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x45);
    1118:	85 e4       	ldi	r24, 0x45	; 69
    111a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    111e:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1120:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    1124:	b8 2e       	mov	r11, r24
  data <<= 8;
    1126:	fd 2c       	mov	r15, r13
    1128:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
    112a:	86 e4       	ldi	r24, 0x46	; 70
    112c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    1130:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1132:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    1136:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    1138:	dd 24       	eor	r13, r13
    113a:	ec 28       	or	r14, r12
    113c:	fd 28       	or	r15, r13
    113e:	00 27       	eor	r16, r16
    1140:	f7 fc       	sbrc	r15, 7
    1142:	00 95       	com	r16
    1144:	10 2f       	mov	r17, r16
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	b8 01       	movw	r22, r16
    114a:	a7 01       	movw	r20, r14
    114c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    1150:	bb 20       	and	r11, r11
    1152:	11 f4       	brne	.+4      	; 0x1158 <MPU6050_Read_GyroY+0x50>
    1154:	aa 20       	and	r10, r10
    1156:	41 f0       	breq	.+16     	; 0x1168 <MPU6050_Read_GyroY+0x60>
    data=0;
	MPU6050.Error=0x12;
    1158:	82 e1       	ldi	r24, 0x12	; 18
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	90 93 a0 01 	sts	0x01A0, r25
    1160:	80 93 9f 01 	sts	0x019F, r24
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.GyroY=data;
    1168:	70 93 94 01 	sts	0x0194, r23
    116c:	60 93 93 01 	sts	0x0193, r22
  return data;
}
    1170:	cb 01       	movw	r24, r22
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
    117e:	bf 90       	pop	r11
    1180:	af 90       	pop	r10
    1182:	08 95       	ret

00001184 <MPU6050_Read_GyroX>:
  }
  MPU6050.AccZ=data;
  return data;
}

int MPU6050_Read_GyroX(void){
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x43);
    1194:	83 e4       	ldi	r24, 0x43	; 67
    1196:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    119a:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    119c:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    11a0:	b8 2e       	mov	r11, r24
  data <<= 8;
    11a2:	fd 2c       	mov	r15, r13
    11a4:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
    11a6:	84 e4       	ldi	r24, 0x44	; 68
    11a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    11ac:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    11ae:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    11b2:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    11b4:	dd 24       	eor	r13, r13
    11b6:	ec 28       	or	r14, r12
    11b8:	fd 28       	or	r15, r13
    11ba:	00 27       	eor	r16, r16
    11bc:	f7 fc       	sbrc	r15, 7
    11be:	00 95       	com	r16
    11c0:	10 2f       	mov	r17, r16
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	b8 01       	movw	r22, r16
    11c6:	a7 01       	movw	r20, r14
    11c8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    11cc:	bb 20       	and	r11, r11
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <MPU6050_Read_GyroX+0x50>
    11d0:	aa 20       	and	r10, r10
    11d2:	41 f0       	breq	.+16     	; 0x11e4 <MPU6050_Read_GyroX+0x60>
    data=0;
	MPU6050.Error=0x11;
    11d4:	81 e1       	ldi	r24, 0x11	; 17
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	90 93 a0 01 	sts	0x01A0, r25
    11dc:	80 93 9f 01 	sts	0x019F, r24
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.GyroX=data;
    11e4:	70 93 92 01 	sts	0x0192, r23
    11e8:	60 93 91 01 	sts	0x0191, r22
  return data;
}
    11ec:	cb 01       	movw	r24, r22
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	bf 90       	pop	r11
    11fc:	af 90       	pop	r10
    11fe:	08 95       	ret

00001200 <MPU6050_Read_Gyro>:
    MPU6050_Read_AccZ();
  }
}

void MPU6050_Read_Gyro(void){
  if(MPU6050.Error==0){
    1200:	80 91 9f 01 	lds	r24, 0x019F
    1204:	90 91 a0 01 	lds	r25, 0x01A0
    1208:	89 2b       	or	r24, r25
    120a:	11 f4       	brne	.+4      	; 0x1210 <MPU6050_Read_Gyro+0x10>
    MPU6050_Read_GyroX();
    120c:	0e 94 c2 08 	call	0x1184	; 0x1184 <MPU6050_Read_GyroX>
  }
  if(MPU6050.Error==0){
    1210:	80 91 9f 01 	lds	r24, 0x019F
    1214:	90 91 a0 01 	lds	r25, 0x01A0
    1218:	89 2b       	or	r24, r25
    121a:	11 f4       	brne	.+4      	; 0x1220 <MPU6050_Read_Gyro+0x20>
    MPU6050_Read_GyroY();
    121c:	0e 94 84 08 	call	0x1108	; 0x1108 <MPU6050_Read_GyroY>
  }
  if(MPU6050.Error==0){
    1220:	80 91 9f 01 	lds	r24, 0x019F
    1224:	90 91 a0 01 	lds	r25, 0x01A0
    1228:	89 2b       	or	r24, r25
    122a:	11 f4       	brne	.+4      	; 0x1230 <MPU6050_Read_Gyro+0x30>
    MPU6050_Read_GyroZ();
    122c:	0e 94 46 08 	call	0x108c	; 0x108c <MPU6050_Read_GyroZ>
    1230:	08 95       	ret

00001232 <MPU6050_Read_AccZ>:
  }
  MPU6050.AccY=data;
  return data;
}

int MPU6050_Read_AccZ(void){
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3F);
    1242:	8f e3       	ldi	r24, 0x3F	; 63
    1244:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    1248:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    124a:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    124e:	b8 2e       	mov	r11, r24
  data <<= 8;
    1250:	fd 2c       	mov	r15, r13
    1252:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
    1254:	80 e4       	ldi	r24, 0x40	; 64
    1256:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    125a:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    125c:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    1260:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
    1262:	dd 24       	eor	r13, r13
    1264:	ec 28       	or	r14, r12
    1266:	fd 28       	or	r15, r13
    1268:	00 27       	eor	r16, r16
    126a:	f7 fc       	sbrc	r15, 7
    126c:	00 95       	com	r16
    126e:	10 2f       	mov	r17, r16
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	b8 01       	movw	r22, r16
    1274:	a7 01       	movw	r20, r14
    1276:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    127a:	bb 20       	and	r11, r11
    127c:	11 f4       	brne	.+4      	; 0x1282 <MPU6050_Read_AccZ+0x50>
    127e:	aa 20       	and	r10, r10
    1280:	41 f0       	breq	.+16     	; 0x1292 <MPU6050_Read_AccZ+0x60>
    data=0;
	MPU6050.Error=0x03;
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	90 93 a0 01 	sts	0x01A0, r25
    128a:	80 93 9f 01 	sts	0x019F, r24
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccZ=data;
    1292:	70 93 90 01 	sts	0x0190, r23
    1296:	60 93 8f 01 	sts	0x018F, r22
  return data;
}
    129a:	cb 01       	movw	r24, r22
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	08 95       	ret

000012ae <MPU6050_Read_AccY>:
  }
  MPU6050.AccX=data;
  return data;
}

int MPU6050_Read_AccY(void){
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3D);
    12be:	8d e3       	ldi	r24, 0x3D	; 61
    12c0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    12c4:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    12c6:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    12ca:	b8 2e       	mov	r11, r24
  data <<= 8;
    12cc:	fd 2c       	mov	r15, r13
    12ce:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
    12d0:	8e e3       	ldi	r24, 0x3E	; 62
    12d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    12d6:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    12d8:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    12dc:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
    12de:	dd 24       	eor	r13, r13
    12e0:	ec 28       	or	r14, r12
    12e2:	fd 28       	or	r15, r13
    12e4:	00 27       	eor	r16, r16
    12e6:	f7 fc       	sbrc	r15, 7
    12e8:	00 95       	com	r16
    12ea:	10 2f       	mov	r17, r16
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	b8 01       	movw	r22, r16
    12f0:	a7 01       	movw	r20, r14
    12f2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    12f6:	bb 20       	and	r11, r11
    12f8:	11 f4       	brne	.+4      	; 0x12fe <MPU6050_Read_AccY+0x50>
    12fa:	aa 20       	and	r10, r10
    12fc:	41 f0       	breq	.+16     	; 0x130e <MPU6050_Read_AccY+0x60>
    data=0;
	MPU6050.Error=0x02;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 a0 01 	sts	0x01A0, r25
    1306:	80 93 9f 01 	sts	0x019F, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccY=data;
    130e:	70 93 8e 01 	sts	0x018E, r23
    1312:	60 93 8d 01 	sts	0x018D, r22
  return data;
}
    1316:	cb 01       	movw	r24, r22
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	08 95       	ret

0000132a <MPU6050_Read_AccX>:
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    I2C_Write_Register(0x6B, 0x00);
  }
}

int MPU6050_Read_AccX(void){
    132a:	af 92       	push	r10
    132c:	bf 92       	push	r11
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3B);
    133a:	8b e3       	ldi	r24, 0x3B	; 59
    133c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    1340:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1342:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    1346:	b8 2e       	mov	r11, r24
  data <<= 8;
    1348:	fd 2c       	mov	r15, r13
    134a:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
    134c:	8c e3       	ldi	r24, 0x3C	; 60
    134e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    1352:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1354:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Get_Error>
    1358:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
    135a:	dd 24       	eor	r13, r13
    135c:	ec 28       	or	r14, r12
    135e:	fd 28       	or	r15, r13
    1360:	00 27       	eor	r16, r16
    1362:	f7 fc       	sbrc	r15, 7
    1364:	00 95       	com	r16
    1366:	10 2f       	mov	r17, r16
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	b8 01       	movw	r22, r16
    136c:	a7 01       	movw	r20, r14
    136e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    1372:	bb 20       	and	r11, r11
    1374:	11 f4       	brne	.+4      	; 0x137a <MPU6050_Read_AccX+0x50>
    1376:	aa 20       	and	r10, r10
    1378:	41 f0       	breq	.+16     	; 0x138a <MPU6050_Read_AccX+0x60>
    data=0;
	MPU6050.Error=0x01;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	90 93 a0 01 	sts	0x01A0, r25
    1382:	80 93 9f 01 	sts	0x019F, r24
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccX=data;
    138a:	70 93 8c 01 	sts	0x018C, r23
    138e:	60 93 8b 01 	sts	0x018B, r22
  return data;
}
    1392:	cb 01       	movw	r24, r22
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	08 95       	ret

000013a6 <MPU6050_Read_Acc>:
  MPU6050.Temp=data;
  return data;
}

void MPU6050_Read_Acc(void){
  if(MPU6050.Error==0){
    13a6:	80 91 9f 01 	lds	r24, 0x019F
    13aa:	90 91 a0 01 	lds	r25, 0x01A0
    13ae:	89 2b       	or	r24, r25
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <MPU6050_Read_Acc+0x10>
    MPU6050_Read_AccX();
    13b2:	0e 94 95 09 	call	0x132a	; 0x132a <MPU6050_Read_AccX>
  }
  if(MPU6050.Error==0){
    13b6:	80 91 9f 01 	lds	r24, 0x019F
    13ba:	90 91 a0 01 	lds	r25, 0x01A0
    13be:	89 2b       	or	r24, r25
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <MPU6050_Read_Acc+0x20>
    MPU6050_Read_AccY();
    13c2:	0e 94 57 09 	call	0x12ae	; 0x12ae <MPU6050_Read_AccY>
  }
  if(MPU6050.Error==0){
    13c6:	80 91 9f 01 	lds	r24, 0x019F
    13ca:	90 91 a0 01 	lds	r25, 0x01A0
    13ce:	89 2b       	or	r24, r25
    13d0:	11 f4       	brne	.+4      	; 0x13d6 <MPU6050_Read_Acc+0x30>
    MPU6050_Read_AccZ();
    13d2:	0e 94 19 09 	call	0x1232	; 0x1232 <MPU6050_Read_AccZ>
    13d6:	08 95       	ret

000013d8 <MPU6050_Read_Acc_Gyro>:
    MPU6050_Read_GyroZ();
  }
}

void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
    13d8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <MPU6050_Read_Acc>
  MPU6050_Read_Gyro();
    13dc:	0e 94 00 09 	call	0x1200	; 0x1200 <MPU6050_Read_Gyro>
}
    13e0:	08 95       	ret

000013e2 <MPU6050_Set_Mode_Active>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    13e2:	8b e6       	ldi	r24, 0x6B	; 107
    13e4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
    I2C_Write_Register(0x6B, 0x40);
  }
}

void MPU6050_Set_Mode_Active(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    13e8:	86 ff       	sbrs	r24, 6
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <MPU6050_Set_Mode_Active+0x12>
    I2C_Write_Register(0x6B, 0x00);
    13ec:	8b e6       	ldi	r24, 0x6B	; 107
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Write_Register>
    13f4:	08 95       	ret

000013f6 <MPU6050_Restart>:
	LPF_Set_Alpha(4,LPF_EN);
	LPF_Set_Alpha(5,LPF_EN);
  #endif
}

void MPU6050_Restart(void){
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
  I2C_Error_Clear_All();
    13fc:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Error_Clear_All>
int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}

int MPU6050_Get_Error(void){
  return MPU6050.Error;
    1400:	f0 90 9f 01 	lds	r15, 0x019F
}

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
    1404:	10 92 a0 01 	sts	0x01A0, r1
    1408:	10 92 9f 01 	sts	0x019F, r1
    140c:	00 e7       	ldi	r16, 0x70	; 112
    140e:	17 e1       	ldi	r17, 0x17	; 23
    1410:	c8 01       	movw	r24, r16
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <MPU6050_Restart+0x1c>
void MPU6050_Restart(void){
  I2C_Error_Clear_All();
  uint8_t temp=MPU6050_Get_Error();
  MPU6050_Error_Clear();
  _delay_ms(2);
  I2C_Stop();
    1416:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Stop>
    141a:	c8 01       	movw	r24, r16
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <MPU6050_Restart+0x26>
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
    1420:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MPU6050_Set_Mode_Active>
    1424:	c8 01       	movw	r24, r16
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <MPU6050_Restart+0x30>
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
    142a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <MPU6050_Read_Acc_Gyro>
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    142e:	8b e6       	ldi	r24, 0x6B	; 107
    1430:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
  I2C_Stop();
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
  if(MPU6050_Get_Mode()!=0){
    1434:	88 23       	and	r24, r24
    1436:	21 f0       	breq	.+8      	; 0x1440 <MPU6050_Restart+0x4a>
    MPU6050.Error=temp;
    1438:	f0 92 9f 01 	sts	0x019F, r15
    143c:	10 92 a0 01 	sts	0x01A0, r1
  }
}
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	08 95       	ret

00001448 <MPU6050_Init>:
    MPU6050.Roll=0;
    return 0;
  }
}

void MPU6050_Init(void){
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
  I2C_Init();
    144c:	0e 94 80 02 	call	0x500	; 0x500 <I2C_Init>
    1450:	00 e3       	ldi	r16, 0x30	; 48
    1452:	15 e7       	ldi	r17, 0x75	; 117
    1454:	c8 01       	movw	r24, r16
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <MPU6050_Init+0xe>
  _delay_ms(10);
  MPU6050_Struct_Init();
    145a:	0e 94 25 07 	call	0xe4a	; 0xe4a <MPU6050_Struct_Init>
  MPU6050_Set_Mode_Active();
    145e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MPU6050_Set_Mode_Active>
    1462:	c8 01       	movw	r24, r16
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <MPU6050_Init+0x1c>
  _delay_ms(10);
  MPU6050_Read_Acc_Gyro();
    1468:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <MPU6050_Read_Acc_Gyro>
  #ifdef LPF_EN
	LPF_Init();
    146c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	6a e0       	ldi	r22, 0x0A	; 10
    1474:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	6a e0       	ldi	r22, 0x0A	; 10
    147c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	6a e0       	ldi	r22, 0x0A	; 10
    1484:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	6a e0       	ldi	r22, 0x0A	; 10
    148c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
    1490:	84 e0       	ldi	r24, 0x04	; 4
    1492:	6a e0       	ldi	r22, 0x0A	; 10
    1494:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	6a e0       	ldi	r22, 0x0A	; 10
    149c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LPF_Set_Alpha>
  #endif
}
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	08 95       	ret

000014a6 <MPU6050_Set_Mode_Sleep>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    14a6:	8b e6       	ldi	r24, 0x6B	; 107
    14a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Read_Register>
}

void MPU6050_Set_Mode_Sleep(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0){
    14ac:	86 fd       	sbrc	r24, 6
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <MPU6050_Set_Mode_Sleep+0x12>
    I2C_Write_Register(0x6B, 0x40);
    14b0:	8b e6       	ldi	r24, 0x6B	; 107
    14b2:	60 e4       	ldi	r22, 0x40	; 64
    14b4:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Write_Register>
    14b8:	08 95       	ret

000014ba <atan>:
    14ba:	df 93       	push	r29
    14bc:	dd 27       	eor	r29, r29
    14be:	b9 2f       	mov	r27, r25
    14c0:	bf 77       	andi	r27, 0x7F	; 127
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	16 16       	cp	r1, r22
    14c8:	17 06       	cpc	r1, r23
    14ca:	48 07       	cpc	r20, r24
    14cc:	5b 07       	cpc	r21, r27
    14ce:	10 f4       	brcc	.+4      	; 0x14d4 <atan+0x1a>
    14d0:	d9 2f       	mov	r29, r25
    14d2:	67 d1       	rcall	.+718    	; 0x17a2 <inverse>
    14d4:	9f 93       	push	r25
    14d6:	8f 93       	push	r24
    14d8:	7f 93       	push	r23
    14da:	6f 93       	push	r22
    14dc:	cc d1       	rcall	.+920    	; 0x1876 <square>
    14de:	e8 e6       	ldi	r30, 0x68	; 104
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	f2 d0       	rcall	.+484    	; 0x16c8 <__fp_powser>
    14e4:	24 d1       	rcall	.+584    	; 0x172e <__fp_round>
    14e6:	2f 91       	pop	r18
    14e8:	3f 91       	pop	r19
    14ea:	4f 91       	pop	r20
    14ec:	5f 91       	pop	r21
    14ee:	6c d1       	rcall	.+728    	; 0x17c8 <__mulsf3x>
    14f0:	dd 23       	and	r29, r29
    14f2:	49 f0       	breq	.+18     	; 0x1506 <atan+0x4c>
    14f4:	90 58       	subi	r25, 0x80	; 128
    14f6:	a2 ea       	ldi	r26, 0xA2	; 162
    14f8:	2a ed       	ldi	r18, 0xDA	; 218
    14fa:	3f e0       	ldi	r19, 0x0F	; 15
    14fc:	49 ec       	ldi	r20, 0xC9	; 201
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	d0 78       	andi	r29, 0x80	; 128
    1502:	5d 27       	eor	r21, r29
    1504:	c8 d1       	rcall	.+912    	; 0x1896 <__addsf3x>
    1506:	df 91       	pop	r29
    1508:	12 c1       	rjmp	.+548    	; 0x172e <__fp_round>

0000150a <__divsf3>:
    150a:	0c d0       	rcall	.+24     	; 0x1524 <__divsf3x>
    150c:	10 c1       	rjmp	.+544    	; 0x172e <__fp_round>
    150e:	08 d1       	rcall	.+528    	; 0x1720 <__fp_pscB>
    1510:	40 f0       	brcs	.+16     	; 0x1522 <__divsf3+0x18>
    1512:	ff d0       	rcall	.+510    	; 0x1712 <__fp_pscA>
    1514:	30 f0       	brcs	.+12     	; 0x1522 <__divsf3+0x18>
    1516:	21 f4       	brne	.+8      	; 0x1520 <__divsf3+0x16>
    1518:	5f 3f       	cpi	r21, 0xFF	; 255
    151a:	19 f0       	breq	.+6      	; 0x1522 <__divsf3+0x18>
    151c:	cc c0       	rjmp	.+408    	; 0x16b6 <__fp_inf>
    151e:	51 11       	cpse	r21, r1
    1520:	3a c1       	rjmp	.+628    	; 0x1796 <__fp_szero>
    1522:	cf c0       	rjmp	.+414    	; 0x16c2 <__fp_nan>

00001524 <__divsf3x>:
    1524:	15 d1       	rcall	.+554    	; 0x1750 <__fp_split3>
    1526:	98 f3       	brcs	.-26     	; 0x150e <__divsf3+0x4>

00001528 <__divsf3_pse>:
    1528:	99 23       	and	r25, r25
    152a:	c9 f3       	breq	.-14     	; 0x151e <__divsf3+0x14>
    152c:	55 23       	and	r21, r21
    152e:	b1 f3       	breq	.-20     	; 0x151c <__divsf3+0x12>
    1530:	95 1b       	sub	r25, r21
    1532:	55 0b       	sbc	r21, r21
    1534:	bb 27       	eor	r27, r27
    1536:	aa 27       	eor	r26, r26
    1538:	62 17       	cp	r22, r18
    153a:	73 07       	cpc	r23, r19
    153c:	84 07       	cpc	r24, r20
    153e:	38 f0       	brcs	.+14     	; 0x154e <__divsf3_pse+0x26>
    1540:	9f 5f       	subi	r25, 0xFF	; 255
    1542:	5f 4f       	sbci	r21, 0xFF	; 255
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	44 1f       	adc	r20, r20
    154a:	aa 1f       	adc	r26, r26
    154c:	a9 f3       	breq	.-22     	; 0x1538 <__divsf3_pse+0x10>
    154e:	33 d0       	rcall	.+102    	; 0x15b6 <__divsf3_pse+0x8e>
    1550:	0e 2e       	mov	r0, r30
    1552:	3a f0       	brmi	.+14     	; 0x1562 <__divsf3_pse+0x3a>
    1554:	e0 e8       	ldi	r30, 0x80	; 128
    1556:	30 d0       	rcall	.+96     	; 0x15b8 <__divsf3_pse+0x90>
    1558:	91 50       	subi	r25, 0x01	; 1
    155a:	50 40       	sbci	r21, 0x00	; 0
    155c:	e6 95       	lsr	r30
    155e:	00 1c       	adc	r0, r0
    1560:	ca f7       	brpl	.-14     	; 0x1554 <__divsf3_pse+0x2c>
    1562:	29 d0       	rcall	.+82     	; 0x15b6 <__divsf3_pse+0x8e>
    1564:	fe 2f       	mov	r31, r30
    1566:	27 d0       	rcall	.+78     	; 0x15b6 <__divsf3_pse+0x8e>
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	bb 1f       	adc	r27, r27
    1570:	26 17       	cp	r18, r22
    1572:	37 07       	cpc	r19, r23
    1574:	48 07       	cpc	r20, r24
    1576:	ab 07       	cpc	r26, r27
    1578:	b0 e8       	ldi	r27, 0x80	; 128
    157a:	09 f0       	breq	.+2      	; 0x157e <__divsf3_pse+0x56>
    157c:	bb 0b       	sbc	r27, r27
    157e:	80 2d       	mov	r24, r0
    1580:	bf 01       	movw	r22, r30
    1582:	ff 27       	eor	r31, r31
    1584:	93 58       	subi	r25, 0x83	; 131
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	2a f0       	brmi	.+10     	; 0x1594 <__divsf3_pse+0x6c>
    158a:	9e 3f       	cpi	r25, 0xFE	; 254
    158c:	51 05       	cpc	r21, r1
    158e:	68 f0       	brcs	.+26     	; 0x15aa <__divsf3_pse+0x82>
    1590:	92 c0       	rjmp	.+292    	; 0x16b6 <__fp_inf>
    1592:	01 c1       	rjmp	.+514    	; 0x1796 <__fp_szero>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	ec f3       	brlt	.-6      	; 0x1592 <__divsf3_pse+0x6a>
    1598:	98 3e       	cpi	r25, 0xE8	; 232
    159a:	dc f3       	brlt	.-10     	; 0x1592 <__divsf3_pse+0x6a>
    159c:	86 95       	lsr	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f7 95       	ror	r31
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__divsf3_pse+0x74>
    15aa:	88 0f       	add	r24, r24
    15ac:	91 1d       	adc	r25, r1
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	97 f9       	bld	r25, 7
    15b4:	08 95       	ret
    15b6:	e1 e0       	ldi	r30, 0x01	; 1
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	bb 1f       	adc	r27, r27
    15c0:	62 17       	cp	r22, r18
    15c2:	73 07       	cpc	r23, r19
    15c4:	84 07       	cpc	r24, r20
    15c6:	ba 07       	cpc	r27, r26
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__divsf3_pse+0xaa>
    15ca:	62 1b       	sub	r22, r18
    15cc:	73 0b       	sbc	r23, r19
    15ce:	84 0b       	sbc	r24, r20
    15d0:	ba 0b       	sbc	r27, r26
    15d2:	ee 1f       	adc	r30, r30
    15d4:	88 f7       	brcc	.-30     	; 0x15b8 <__divsf3_pse+0x90>
    15d6:	e0 95       	com	r30
    15d8:	08 95       	ret

000015da <__fixsfsi>:
    15da:	04 d0       	rcall	.+8      	; 0x15e4 <__fixunssfsi>
    15dc:	68 94       	set
    15de:	b1 11       	cpse	r27, r1
    15e0:	da c0       	rjmp	.+436    	; 0x1796 <__fp_szero>
    15e2:	08 95       	ret

000015e4 <__fixunssfsi>:
    15e4:	bd d0       	rcall	.+378    	; 0x1760 <__fp_splitA>
    15e6:	88 f0       	brcs	.+34     	; 0x160a <__fixunssfsi+0x26>
    15e8:	9f 57       	subi	r25, 0x7F	; 127
    15ea:	90 f0       	brcs	.+36     	; 0x1610 <__fixunssfsi+0x2c>
    15ec:	b9 2f       	mov	r27, r25
    15ee:	99 27       	eor	r25, r25
    15f0:	b7 51       	subi	r27, 0x17	; 23
    15f2:	a0 f0       	brcs	.+40     	; 0x161c <__fixunssfsi+0x38>
    15f4:	d1 f0       	breq	.+52     	; 0x162a <__fixunssfsi+0x46>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	1a f0       	brmi	.+6      	; 0x1606 <__fixunssfsi+0x22>
    1600:	ba 95       	dec	r27
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__fixunssfsi+0x12>
    1604:	12 c0       	rjmp	.+36     	; 0x162a <__fixunssfsi+0x46>
    1606:	b1 30       	cpi	r27, 0x01	; 1
    1608:	81 f0       	breq	.+32     	; 0x162a <__fixunssfsi+0x46>
    160a:	c4 d0       	rcall	.+392    	; 0x1794 <__fp_zero>
    160c:	b1 e0       	ldi	r27, 0x01	; 1
    160e:	08 95       	ret
    1610:	c1 c0       	rjmp	.+386    	; 0x1794 <__fp_zero>
    1612:	67 2f       	mov	r22, r23
    1614:	78 2f       	mov	r23, r24
    1616:	88 27       	eor	r24, r24
    1618:	b8 5f       	subi	r27, 0xF8	; 248
    161a:	39 f0       	breq	.+14     	; 0x162a <__fixunssfsi+0x46>
    161c:	b9 3f       	cpi	r27, 0xF9	; 249
    161e:	cc f3       	brlt	.-14     	; 0x1612 <__fixunssfsi+0x2e>
    1620:	86 95       	lsr	r24
    1622:	77 95       	ror	r23
    1624:	67 95       	ror	r22
    1626:	b3 95       	inc	r27
    1628:	d9 f7       	brne	.-10     	; 0x1620 <__fixunssfsi+0x3c>
    162a:	3e f4       	brtc	.+14     	; 0x163a <__fixunssfsi+0x56>
    162c:	90 95       	com	r25
    162e:	80 95       	com	r24
    1630:	70 95       	com	r23
    1632:	61 95       	neg	r22
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	8f 4f       	sbci	r24, 0xFF	; 255
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	08 95       	ret

0000163c <__floatunsisf>:
    163c:	e8 94       	clt
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <__floatsisf+0x12>

00001640 <__floatsisf>:
    1640:	97 fb       	bst	r25, 7
    1642:	3e f4       	brtc	.+14     	; 0x1652 <__floatsisf+0x12>
    1644:	90 95       	com	r25
    1646:	80 95       	com	r24
    1648:	70 95       	com	r23
    164a:	61 95       	neg	r22
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	8f 4f       	sbci	r24, 0xFF	; 255
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	99 23       	and	r25, r25
    1654:	a9 f0       	breq	.+42     	; 0x1680 <__floatsisf+0x40>
    1656:	f9 2f       	mov	r31, r25
    1658:	96 e9       	ldi	r25, 0x96	; 150
    165a:	bb 27       	eor	r27, r27
    165c:	93 95       	inc	r25
    165e:	f6 95       	lsr	r31
    1660:	87 95       	ror	r24
    1662:	77 95       	ror	r23
    1664:	67 95       	ror	r22
    1666:	b7 95       	ror	r27
    1668:	f1 11       	cpse	r31, r1
    166a:	f8 cf       	rjmp	.-16     	; 0x165c <__floatsisf+0x1c>
    166c:	fa f4       	brpl	.+62     	; 0x16ac <__floatsisf+0x6c>
    166e:	bb 0f       	add	r27, r27
    1670:	11 f4       	brne	.+4      	; 0x1676 <__floatsisf+0x36>
    1672:	60 ff       	sbrs	r22, 0
    1674:	1b c0       	rjmp	.+54     	; 0x16ac <__floatsisf+0x6c>
    1676:	6f 5f       	subi	r22, 0xFF	; 255
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	8f 4f       	sbci	r24, 0xFF	; 255
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	16 c0       	rjmp	.+44     	; 0x16ac <__floatsisf+0x6c>
    1680:	88 23       	and	r24, r24
    1682:	11 f0       	breq	.+4      	; 0x1688 <__floatsisf+0x48>
    1684:	96 e9       	ldi	r25, 0x96	; 150
    1686:	11 c0       	rjmp	.+34     	; 0x16aa <__floatsisf+0x6a>
    1688:	77 23       	and	r23, r23
    168a:	21 f0       	breq	.+8      	; 0x1694 <__floatsisf+0x54>
    168c:	9e e8       	ldi	r25, 0x8E	; 142
    168e:	87 2f       	mov	r24, r23
    1690:	76 2f       	mov	r23, r22
    1692:	05 c0       	rjmp	.+10     	; 0x169e <__floatsisf+0x5e>
    1694:	66 23       	and	r22, r22
    1696:	71 f0       	breq	.+28     	; 0x16b4 <__floatsisf+0x74>
    1698:	96 e8       	ldi	r25, 0x86	; 134
    169a:	86 2f       	mov	r24, r22
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	2a f0       	brmi	.+10     	; 0x16ac <__floatsisf+0x6c>
    16a2:	9a 95       	dec	r25
    16a4:	66 0f       	add	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	da f7       	brpl	.-10     	; 0x16a2 <__floatsisf+0x62>
    16ac:	88 0f       	add	r24, r24
    16ae:	96 95       	lsr	r25
    16b0:	87 95       	ror	r24
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret

000016b6 <__fp_inf>:
    16b6:	97 f9       	bld	r25, 7
    16b8:	9f 67       	ori	r25, 0x7F	; 127
    16ba:	80 e8       	ldi	r24, 0x80	; 128
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	08 95       	ret

000016c2 <__fp_nan>:
    16c2:	9f ef       	ldi	r25, 0xFF	; 255
    16c4:	80 ec       	ldi	r24, 0xC0	; 192
    16c6:	08 95       	ret

000016c8 <__fp_powser>:
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	1f 93       	push	r17
    16ce:	0f 93       	push	r16
    16d0:	ff 92       	push	r15
    16d2:	ef 92       	push	r14
    16d4:	df 92       	push	r13
    16d6:	7b 01       	movw	r14, r22
    16d8:	8c 01       	movw	r16, r24
    16da:	68 94       	set
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <__fp_powser+0x20>
    16de:	da 2e       	mov	r13, r26
    16e0:	ef 01       	movw	r28, r30
    16e2:	72 d0       	rcall	.+228    	; 0x17c8 <__mulsf3x>
    16e4:	fe 01       	movw	r30, r28
    16e6:	e8 94       	clt
    16e8:	a5 91       	lpm	r26, Z+
    16ea:	25 91       	lpm	r18, Z+
    16ec:	35 91       	lpm	r19, Z+
    16ee:	45 91       	lpm	r20, Z+
    16f0:	55 91       	lpm	r21, Z+
    16f2:	ae f3       	brts	.-22     	; 0x16de <__fp_powser+0x16>
    16f4:	ef 01       	movw	r28, r30
    16f6:	cf d0       	rcall	.+414    	; 0x1896 <__addsf3x>
    16f8:	fe 01       	movw	r30, r28
    16fa:	97 01       	movw	r18, r14
    16fc:	a8 01       	movw	r20, r16
    16fe:	da 94       	dec	r13
    1700:	79 f7       	brne	.-34     	; 0x16e0 <__fp_powser+0x18>
    1702:	df 90       	pop	r13
    1704:	ef 90       	pop	r14
    1706:	ff 90       	pop	r15
    1708:	0f 91       	pop	r16
    170a:	1f 91       	pop	r17
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <__fp_pscA>:
    1712:	00 24       	eor	r0, r0
    1714:	0a 94       	dec	r0
    1716:	16 16       	cp	r1, r22
    1718:	17 06       	cpc	r1, r23
    171a:	18 06       	cpc	r1, r24
    171c:	09 06       	cpc	r0, r25
    171e:	08 95       	ret

00001720 <__fp_pscB>:
    1720:	00 24       	eor	r0, r0
    1722:	0a 94       	dec	r0
    1724:	12 16       	cp	r1, r18
    1726:	13 06       	cpc	r1, r19
    1728:	14 06       	cpc	r1, r20
    172a:	05 06       	cpc	r0, r21
    172c:	08 95       	ret

0000172e <__fp_round>:
    172e:	09 2e       	mov	r0, r25
    1730:	03 94       	inc	r0
    1732:	00 0c       	add	r0, r0
    1734:	11 f4       	brne	.+4      	; 0x173a <__fp_round+0xc>
    1736:	88 23       	and	r24, r24
    1738:	52 f0       	brmi	.+20     	; 0x174e <__fp_round+0x20>
    173a:	bb 0f       	add	r27, r27
    173c:	40 f4       	brcc	.+16     	; 0x174e <__fp_round+0x20>
    173e:	bf 2b       	or	r27, r31
    1740:	11 f4       	brne	.+4      	; 0x1746 <__fp_round+0x18>
    1742:	60 ff       	sbrs	r22, 0
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__fp_round+0x20>
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	8f 4f       	sbci	r24, 0xFF	; 255
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	08 95       	ret

00001750 <__fp_split3>:
    1750:	57 fd       	sbrc	r21, 7
    1752:	90 58       	subi	r25, 0x80	; 128
    1754:	44 0f       	add	r20, r20
    1756:	55 1f       	adc	r21, r21
    1758:	59 f0       	breq	.+22     	; 0x1770 <__fp_splitA+0x10>
    175a:	5f 3f       	cpi	r21, 0xFF	; 255
    175c:	71 f0       	breq	.+28     	; 0x177a <__fp_splitA+0x1a>
    175e:	47 95       	ror	r20

00001760 <__fp_splitA>:
    1760:	88 0f       	add	r24, r24
    1762:	97 fb       	bst	r25, 7
    1764:	99 1f       	adc	r25, r25
    1766:	61 f0       	breq	.+24     	; 0x1780 <__fp_splitA+0x20>
    1768:	9f 3f       	cpi	r25, 0xFF	; 255
    176a:	79 f0       	breq	.+30     	; 0x178a <__fp_splitA+0x2a>
    176c:	87 95       	ror	r24
    176e:	08 95       	ret
    1770:	12 16       	cp	r1, r18
    1772:	13 06       	cpc	r1, r19
    1774:	14 06       	cpc	r1, r20
    1776:	55 1f       	adc	r21, r21
    1778:	f2 cf       	rjmp	.-28     	; 0x175e <__fp_split3+0xe>
    177a:	46 95       	lsr	r20
    177c:	f1 df       	rcall	.-30     	; 0x1760 <__fp_splitA>
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <__fp_splitA+0x30>
    1780:	16 16       	cp	r1, r22
    1782:	17 06       	cpc	r1, r23
    1784:	18 06       	cpc	r1, r24
    1786:	99 1f       	adc	r25, r25
    1788:	f1 cf       	rjmp	.-30     	; 0x176c <__fp_splitA+0xc>
    178a:	86 95       	lsr	r24
    178c:	71 05       	cpc	r23, r1
    178e:	61 05       	cpc	r22, r1
    1790:	08 94       	sec
    1792:	08 95       	ret

00001794 <__fp_zero>:
    1794:	e8 94       	clt

00001796 <__fp_szero>:
    1796:	bb 27       	eor	r27, r27
    1798:	66 27       	eor	r22, r22
    179a:	77 27       	eor	r23, r23
    179c:	cb 01       	movw	r24, r22
    179e:	97 f9       	bld	r25, 7
    17a0:	08 95       	ret

000017a2 <inverse>:
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	80 e8       	ldi	r24, 0x80	; 128
    17ac:	9f e3       	ldi	r25, 0x3F	; 63
    17ae:	ad ce       	rjmp	.-678    	; 0x150a <__divsf3>

000017b0 <__mulsf3>:
    17b0:	0b d0       	rcall	.+22     	; 0x17c8 <__mulsf3x>
    17b2:	bd cf       	rjmp	.-134    	; 0x172e <__fp_round>
    17b4:	ae df       	rcall	.-164    	; 0x1712 <__fp_pscA>
    17b6:	28 f0       	brcs	.+10     	; 0x17c2 <__mulsf3+0x12>
    17b8:	b3 df       	rcall	.-154    	; 0x1720 <__fp_pscB>
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <__mulsf3+0x12>
    17bc:	95 23       	and	r25, r21
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__mulsf3+0x12>
    17c0:	7a cf       	rjmp	.-268    	; 0x16b6 <__fp_inf>
    17c2:	7f cf       	rjmp	.-258    	; 0x16c2 <__fp_nan>
    17c4:	11 24       	eor	r1, r1
    17c6:	e7 cf       	rjmp	.-50     	; 0x1796 <__fp_szero>

000017c8 <__mulsf3x>:
    17c8:	c3 df       	rcall	.-122    	; 0x1750 <__fp_split3>
    17ca:	a0 f3       	brcs	.-24     	; 0x17b4 <__mulsf3+0x4>

000017cc <__mulsf3_pse>:
    17cc:	95 9f       	mul	r25, r21
    17ce:	d1 f3       	breq	.-12     	; 0x17c4 <__mulsf3+0x14>
    17d0:	95 0f       	add	r25, r21
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	55 1f       	adc	r21, r21
    17d6:	62 9f       	mul	r22, r18
    17d8:	f0 01       	movw	r30, r0
    17da:	72 9f       	mul	r23, r18
    17dc:	bb 27       	eor	r27, r27
    17de:	f0 0d       	add	r31, r0
    17e0:	b1 1d       	adc	r27, r1
    17e2:	63 9f       	mul	r22, r19
    17e4:	aa 27       	eor	r26, r26
    17e6:	f0 0d       	add	r31, r0
    17e8:	b1 1d       	adc	r27, r1
    17ea:	aa 1f       	adc	r26, r26
    17ec:	64 9f       	mul	r22, r20
    17ee:	66 27       	eor	r22, r22
    17f0:	b0 0d       	add	r27, r0
    17f2:	a1 1d       	adc	r26, r1
    17f4:	66 1f       	adc	r22, r22
    17f6:	82 9f       	mul	r24, r18
    17f8:	22 27       	eor	r18, r18
    17fa:	b0 0d       	add	r27, r0
    17fc:	a1 1d       	adc	r26, r1
    17fe:	62 1f       	adc	r22, r18
    1800:	73 9f       	mul	r23, r19
    1802:	b0 0d       	add	r27, r0
    1804:	a1 1d       	adc	r26, r1
    1806:	62 1f       	adc	r22, r18
    1808:	83 9f       	mul	r24, r19
    180a:	a0 0d       	add	r26, r0
    180c:	61 1d       	adc	r22, r1
    180e:	22 1f       	adc	r18, r18
    1810:	74 9f       	mul	r23, r20
    1812:	33 27       	eor	r19, r19
    1814:	a0 0d       	add	r26, r0
    1816:	61 1d       	adc	r22, r1
    1818:	23 1f       	adc	r18, r19
    181a:	84 9f       	mul	r24, r20
    181c:	60 0d       	add	r22, r0
    181e:	21 1d       	adc	r18, r1
    1820:	82 2f       	mov	r24, r18
    1822:	76 2f       	mov	r23, r22
    1824:	6a 2f       	mov	r22, r26
    1826:	11 24       	eor	r1, r1
    1828:	9f 57       	subi	r25, 0x7F	; 127
    182a:	50 40       	sbci	r21, 0x00	; 0
    182c:	8a f0       	brmi	.+34     	; 0x1850 <__mulsf3_pse+0x84>
    182e:	e1 f0       	breq	.+56     	; 0x1868 <__mulsf3_pse+0x9c>
    1830:	88 23       	and	r24, r24
    1832:	4a f0       	brmi	.+18     	; 0x1846 <__mulsf3_pse+0x7a>
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	bb 1f       	adc	r27, r27
    183a:	66 1f       	adc	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	91 50       	subi	r25, 0x01	; 1
    1842:	50 40       	sbci	r21, 0x00	; 0
    1844:	a9 f7       	brne	.-22     	; 0x1830 <__mulsf3_pse+0x64>
    1846:	9e 3f       	cpi	r25, 0xFE	; 254
    1848:	51 05       	cpc	r21, r1
    184a:	70 f0       	brcs	.+28     	; 0x1868 <__mulsf3_pse+0x9c>
    184c:	34 cf       	rjmp	.-408    	; 0x16b6 <__fp_inf>
    184e:	a3 cf       	rjmp	.-186    	; 0x1796 <__fp_szero>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	ec f3       	brlt	.-6      	; 0x184e <__mulsf3_pse+0x82>
    1854:	98 3e       	cpi	r25, 0xE8	; 232
    1856:	dc f3       	brlt	.-10     	; 0x184e <__mulsf3_pse+0x82>
    1858:	86 95       	lsr	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	b7 95       	ror	r27
    1860:	f7 95       	ror	r31
    1862:	e7 95       	ror	r30
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	c1 f7       	brne	.-16     	; 0x1858 <__mulsf3_pse+0x8c>
    1868:	fe 2b       	or	r31, r30
    186a:	88 0f       	add	r24, r24
    186c:	91 1d       	adc	r25, r1
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret

00001876 <square>:
    1876:	9b 01       	movw	r18, r22
    1878:	ac 01       	movw	r20, r24
    187a:	9a cf       	rjmp	.-204    	; 0x17b0 <__mulsf3>
    187c:	4a df       	rcall	.-364    	; 0x1712 <__fp_pscA>
    187e:	30 f0       	brcs	.+12     	; 0x188c <square+0x16>
    1880:	4f df       	rcall	.-354    	; 0x1720 <__fp_pscB>
    1882:	20 f0       	brcs	.+8      	; 0x188c <square+0x16>
    1884:	31 f4       	brne	.+12     	; 0x1892 <square+0x1c>
    1886:	9f 3f       	cpi	r25, 0xFF	; 255
    1888:	11 f4       	brne	.+4      	; 0x188e <square+0x18>
    188a:	1e f4       	brtc	.+6      	; 0x1892 <square+0x1c>
    188c:	1a cf       	rjmp	.-460    	; 0x16c2 <__fp_nan>
    188e:	0e f4       	brtc	.+2      	; 0x1892 <square+0x1c>
    1890:	e0 95       	com	r30
    1892:	e7 fb       	bst	r30, 7
    1894:	10 cf       	rjmp	.-480    	; 0x16b6 <__fp_inf>

00001896 <__addsf3x>:
    1896:	e9 2f       	mov	r30, r25
    1898:	5b df       	rcall	.-330    	; 0x1750 <__fp_split3>
    189a:	80 f3       	brcs	.-32     	; 0x187c <square+0x6>
    189c:	ba 17       	cp	r27, r26
    189e:	62 07       	cpc	r22, r18
    18a0:	73 07       	cpc	r23, r19
    18a2:	84 07       	cpc	r24, r20
    18a4:	95 07       	cpc	r25, r21
    18a6:	18 f0       	brcs	.+6      	; 0x18ae <__addsf3x+0x18>
    18a8:	71 f4       	brne	.+28     	; 0x18c6 <__addsf3x+0x30>
    18aa:	9e f5       	brtc	.+102    	; 0x1912 <__addsf3x+0x7c>
    18ac:	73 cf       	rjmp	.-282    	; 0x1794 <__fp_zero>
    18ae:	0e f4       	brtc	.+2      	; 0x18b2 <__addsf3x+0x1c>
    18b0:	e0 95       	com	r30
    18b2:	0b 2e       	mov	r0, r27
    18b4:	ba 2f       	mov	r27, r26
    18b6:	a0 2d       	mov	r26, r0
    18b8:	0b 01       	movw	r0, r22
    18ba:	b9 01       	movw	r22, r18
    18bc:	90 01       	movw	r18, r0
    18be:	0c 01       	movw	r0, r24
    18c0:	ca 01       	movw	r24, r20
    18c2:	a0 01       	movw	r20, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	ff 27       	eor	r31, r31
    18c8:	59 1b       	sub	r21, r25
    18ca:	99 f0       	breq	.+38     	; 0x18f2 <__addsf3x+0x5c>
    18cc:	59 3f       	cpi	r21, 0xF9	; 249
    18ce:	50 f4       	brcc	.+20     	; 0x18e4 <__addsf3x+0x4e>
    18d0:	50 3e       	cpi	r21, 0xE0	; 224
    18d2:	68 f1       	brcs	.+90     	; 0x192e <__addsf3x+0x98>
    18d4:	1a 16       	cp	r1, r26
    18d6:	f0 40       	sbci	r31, 0x00	; 0
    18d8:	a2 2f       	mov	r26, r18
    18da:	23 2f       	mov	r18, r19
    18dc:	34 2f       	mov	r19, r20
    18de:	44 27       	eor	r20, r20
    18e0:	58 5f       	subi	r21, 0xF8	; 248
    18e2:	f3 cf       	rjmp	.-26     	; 0x18ca <__addsf3x+0x34>
    18e4:	46 95       	lsr	r20
    18e6:	37 95       	ror	r19
    18e8:	27 95       	ror	r18
    18ea:	a7 95       	ror	r26
    18ec:	f0 40       	sbci	r31, 0x00	; 0
    18ee:	53 95       	inc	r21
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__addsf3x+0x4e>
    18f2:	7e f4       	brtc	.+30     	; 0x1912 <__addsf3x+0x7c>
    18f4:	1f 16       	cp	r1, r31
    18f6:	ba 0b       	sbc	r27, r26
    18f8:	62 0b       	sbc	r22, r18
    18fa:	73 0b       	sbc	r23, r19
    18fc:	84 0b       	sbc	r24, r20
    18fe:	ba f0       	brmi	.+46     	; 0x192e <__addsf3x+0x98>
    1900:	91 50       	subi	r25, 0x01	; 1
    1902:	a1 f0       	breq	.+40     	; 0x192c <__addsf3x+0x96>
    1904:	ff 0f       	add	r31, r31
    1906:	bb 1f       	adc	r27, r27
    1908:	66 1f       	adc	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	c2 f7       	brpl	.-16     	; 0x1900 <__addsf3x+0x6a>
    1910:	0e c0       	rjmp	.+28     	; 0x192e <__addsf3x+0x98>
    1912:	ba 0f       	add	r27, r26
    1914:	62 1f       	adc	r22, r18
    1916:	73 1f       	adc	r23, r19
    1918:	84 1f       	adc	r24, r20
    191a:	48 f4       	brcc	.+18     	; 0x192e <__addsf3x+0x98>
    191c:	87 95       	ror	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b7 95       	ror	r27
    1924:	f7 95       	ror	r31
    1926:	9e 3f       	cpi	r25, 0xFE	; 254
    1928:	08 f0       	brcs	.+2      	; 0x192c <__addsf3x+0x96>
    192a:	b3 cf       	rjmp	.-154    	; 0x1892 <square+0x1c>
    192c:	93 95       	inc	r25
    192e:	88 0f       	add	r24, r24
    1930:	08 f0       	brcs	.+2      	; 0x1934 <__addsf3x+0x9e>
    1932:	99 27       	eor	r25, r25
    1934:	ee 0f       	add	r30, r30
    1936:	97 95       	ror	r25
    1938:	87 95       	ror	r24
    193a:	08 95       	ret

0000193c <__mulsi3>:
    193c:	62 9f       	mul	r22, r18
    193e:	d0 01       	movw	r26, r0
    1940:	73 9f       	mul	r23, r19
    1942:	f0 01       	movw	r30, r0
    1944:	82 9f       	mul	r24, r18
    1946:	e0 0d       	add	r30, r0
    1948:	f1 1d       	adc	r31, r1
    194a:	64 9f       	mul	r22, r20
    194c:	e0 0d       	add	r30, r0
    194e:	f1 1d       	adc	r31, r1
    1950:	92 9f       	mul	r25, r18
    1952:	f0 0d       	add	r31, r0
    1954:	83 9f       	mul	r24, r19
    1956:	f0 0d       	add	r31, r0
    1958:	74 9f       	mul	r23, r20
    195a:	f0 0d       	add	r31, r0
    195c:	65 9f       	mul	r22, r21
    195e:	f0 0d       	add	r31, r0
    1960:	99 27       	eor	r25, r25
    1962:	72 9f       	mul	r23, r18
    1964:	b0 0d       	add	r27, r0
    1966:	e1 1d       	adc	r30, r1
    1968:	f9 1f       	adc	r31, r25
    196a:	63 9f       	mul	r22, r19
    196c:	b0 0d       	add	r27, r0
    196e:	e1 1d       	adc	r30, r1
    1970:	f9 1f       	adc	r31, r25
    1972:	bd 01       	movw	r22, r26
    1974:	cf 01       	movw	r24, r30
    1976:	11 24       	eor	r1, r1
    1978:	08 95       	ret

0000197a <__divmodhi4>:
    197a:	97 fb       	bst	r25, 7
    197c:	09 2e       	mov	r0, r25
    197e:	07 26       	eor	r0, r23
    1980:	0a d0       	rcall	.+20     	; 0x1996 <__divmodhi4_neg1>
    1982:	77 fd       	sbrc	r23, 7
    1984:	04 d0       	rcall	.+8      	; 0x198e <__divmodhi4_neg2>
    1986:	49 d0       	rcall	.+146    	; 0x1a1a <__udivmodhi4>
    1988:	06 d0       	rcall	.+12     	; 0x1996 <__divmodhi4_neg1>
    198a:	00 20       	and	r0, r0
    198c:	1a f4       	brpl	.+6      	; 0x1994 <__divmodhi4_exit>

0000198e <__divmodhi4_neg2>:
    198e:	70 95       	com	r23
    1990:	61 95       	neg	r22
    1992:	7f 4f       	sbci	r23, 0xFF	; 255

00001994 <__divmodhi4_exit>:
    1994:	08 95       	ret

00001996 <__divmodhi4_neg1>:
    1996:	f6 f7       	brtc	.-4      	; 0x1994 <__divmodhi4_exit>
    1998:	90 95       	com	r25
    199a:	81 95       	neg	r24
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	08 95       	ret

000019a0 <__udivmodsi4>:
    19a0:	a1 e2       	ldi	r26, 0x21	; 33
    19a2:	1a 2e       	mov	r1, r26
    19a4:	aa 1b       	sub	r26, r26
    19a6:	bb 1b       	sub	r27, r27
    19a8:	fd 01       	movw	r30, r26
    19aa:	0d c0       	rjmp	.+26     	; 0x19c6 <__udivmodsi4_ep>

000019ac <__udivmodsi4_loop>:
    19ac:	aa 1f       	adc	r26, r26
    19ae:	bb 1f       	adc	r27, r27
    19b0:	ee 1f       	adc	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	a2 17       	cp	r26, r18
    19b6:	b3 07       	cpc	r27, r19
    19b8:	e4 07       	cpc	r30, r20
    19ba:	f5 07       	cpc	r31, r21
    19bc:	20 f0       	brcs	.+8      	; 0x19c6 <__udivmodsi4_ep>
    19be:	a2 1b       	sub	r26, r18
    19c0:	b3 0b       	sbc	r27, r19
    19c2:	e4 0b       	sbc	r30, r20
    19c4:	f5 0b       	sbc	r31, r21

000019c6 <__udivmodsi4_ep>:
    19c6:	66 1f       	adc	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	1a 94       	dec	r1
    19d0:	69 f7       	brne	.-38     	; 0x19ac <__udivmodsi4_loop>
    19d2:	60 95       	com	r22
    19d4:	70 95       	com	r23
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	bd 01       	movw	r22, r26
    19e0:	cf 01       	movw	r24, r30
    19e2:	08 95       	ret

000019e4 <__divmodsi4>:
    19e4:	97 fb       	bst	r25, 7
    19e6:	09 2e       	mov	r0, r25
    19e8:	05 26       	eor	r0, r21
    19ea:	0e d0       	rcall	.+28     	; 0x1a08 <__divmodsi4_neg1>
    19ec:	57 fd       	sbrc	r21, 7
    19ee:	04 d0       	rcall	.+8      	; 0x19f8 <__divmodsi4_neg2>
    19f0:	d7 df       	rcall	.-82     	; 0x19a0 <__udivmodsi4>
    19f2:	0a d0       	rcall	.+20     	; 0x1a08 <__divmodsi4_neg1>
    19f4:	00 1c       	adc	r0, r0
    19f6:	38 f4       	brcc	.+14     	; 0x1a06 <__divmodsi4_exit>

000019f8 <__divmodsi4_neg2>:
    19f8:	50 95       	com	r21
    19fa:	40 95       	com	r20
    19fc:	30 95       	com	r19
    19fe:	21 95       	neg	r18
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	4f 4f       	sbci	r20, 0xFF	; 255
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255

00001a06 <__divmodsi4_exit>:
    1a06:	08 95       	ret

00001a08 <__divmodsi4_neg1>:
    1a08:	f6 f7       	brtc	.-4      	; 0x1a06 <__divmodsi4_exit>
    1a0a:	90 95       	com	r25
    1a0c:	80 95       	com	r24
    1a0e:	70 95       	com	r23
    1a10:	61 95       	neg	r22
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	8f 4f       	sbci	r24, 0xFF	; 255
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	08 95       	ret

00001a1a <__udivmodhi4>:
    1a1a:	aa 1b       	sub	r26, r26
    1a1c:	bb 1b       	sub	r27, r27
    1a1e:	51 e1       	ldi	r21, 0x11	; 17
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <__udivmodhi4_ep>

00001a22 <__udivmodhi4_loop>:
    1a22:	aa 1f       	adc	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	a6 17       	cp	r26, r22
    1a28:	b7 07       	cpc	r27, r23
    1a2a:	10 f0       	brcs	.+4      	; 0x1a30 <__udivmodhi4_ep>
    1a2c:	a6 1b       	sub	r26, r22
    1a2e:	b7 0b       	sbc	r27, r23

00001a30 <__udivmodhi4_ep>:
    1a30:	88 1f       	adc	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	5a 95       	dec	r21
    1a36:	a9 f7       	brne	.-22     	; 0x1a22 <__udivmodhi4_loop>
    1a38:	80 95       	com	r24
    1a3a:	90 95       	com	r25
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	08 95       	ret

00001a42 <_exit>:
    1a42:	f8 94       	cli

00001a44 <__stop_program>:
    1a44:	ff cf       	rjmp	.-2      	; 0x1a44 <__stop_program>
