
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000ae0  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800122  00800122  00000b96  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006f2  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017dd  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000554  00000000  00000000  00002ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001176  00000000  00000000  00003019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  00004190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000705  00000000  00000000  00004690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b9  00000000  00000000  00004d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000564e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "debug.h"
#include "i2c.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29

  DDRD  |= (1<<4);
  aa:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  
  I2C_Init();
  ae:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Init>
  debug_init();
  b2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <debug_init>
  debug_tx_text_nl("Debug Started");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 b9 03 	call	0x772	; 0x772 <debug_tx_text_nl>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	cc e2       	ldi	r28, 0x2C	; 44
  c0:	d1 e0       	ldi	r29, 0x01	; 1
  
  
  while(1){
    I2C_Read_Register(0x6B);
  c2:	8b e6       	ldi	r24, 0x6B	; 107
  c4:	0e 94 9d 01 	call	0x33a	; 0x33a <I2C_Read_Register>
  c8:	88 e8       	ldi	r24, 0x88	; 136
  ca:	93 e1       	ldi	r25, 0x13	; 19
  cc:	fe 01       	movw	r30, r28
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x26>
  d6:	f5 cf       	rjmp	.-22     	; 0xc2 <main+0x1c>

000000d8 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
  d8:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
  dc:	10 92 23 01 	sts	0x0123, r1
}
  e0:	08 95       	ret

000000e2 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e2:	88 ec       	ldi	r24, 0xC8	; 200
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(50);
}
  e8:	08 95       	ret

000000ea <I2C_Bit_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <I2C_Bit_Delay+0x4>

void I2C_Bit_Delay(void){
  _delay_us(100);
}
  f2:	08 95       	ret

000000f4 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	11 f4       	brne	.+4      	; 0xfc <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  f8:	3c 9a       	sbi	0x07, 4	; 7
  fa:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
  fc:	3c 98       	cbi	0x07, 4	; 7
  fe:	08 95       	ret

00000100 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	11 f4       	brne	.+4      	; 0x108 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 104:	44 9a       	sbi	0x08, 4	; 8
 106:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 108:	44 98       	cbi	0x08, 4	; 8
 10a:	08 95       	ret

0000010c <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	19 f4       	brne	.+6      	; 0x116 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 110:	44 9a       	sbi	0x08, 4	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 112:	3c 98       	cbi	0x07, 4	; 7
 114:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 116:	44 98       	cbi	0x08, 4	; 8
  _delay_us(100);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 118:	3c 9a       	sbi	0x07, 4	; 7
 11a:	08 95       	ret

0000011c <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	24 e0       	ldi	r18, 0x04	; 4
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	2a 95       	dec	r18
 128:	e1 f7       	brne	.-8      	; 0x122 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	08 95       	ret

0000012e <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	11 f4       	brne	.+4      	; 0x136 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 132:	3d 9a       	sbi	0x07, 5	; 7
 134:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 136:	3d 98       	cbi	0x07, 5	; 7
 138:	08 95       	ret

0000013a <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	11 f4       	brne	.+4      	; 0x142 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 13e:	45 9a       	sbi	0x08, 5	; 8
 140:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 142:	45 98       	cbi	0x08, 5	; 8
 144:	08 95       	ret

00000146 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	19 f4       	brne	.+6      	; 0x150 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 14a:	45 9a       	sbi	0x08, 5	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 14c:	3d 98       	cbi	0x07, 5	; 7
 14e:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 150:	45 98       	cbi	0x08, 5	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 152:	3d 9a       	sbi	0x07, 5	; 7
 154:	08 95       	ret

00000156 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 156:	86 b1       	in	r24, 0x06	; 6
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	35 e0       	ldi	r19, 0x05	; 5
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	3a 95       	dec	r19
 162:	e1 f7       	brne	.-8      	; 0x15c <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 164:	81 70       	andi	r24, 0x01	; 1
 166:	08 95       	ret

00000168 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 168:	3c 98       	cbi	0x07, 4	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
}
 170:	08 95       	ret

00000172 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 172:	3d 98       	cbi	0x07, 5	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
}
 17a:	08 95       	ret

0000017c <I2C_GPIO_Init>:
  _delay_us(100);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 17c:	3c 9a       	sbi	0x07, 4	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 17e:	3d 98       	cbi	0x07, 5	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
}
 18c:	08 95       	ret

0000018e <I2C_Start>:

void I2C_Start(void){
 18e:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19c:	18 ec       	ldi	r17, 0xC8	; 200
 19e:	81 2f       	mov	r24, r17
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 1aa:	81 2f       	mov	r24, r17
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
 1b6:	1a 95       	dec	r17
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
 1ba:	1f 91       	pop	r17
 1bc:	08 95       	ret

000001be <I2C_Stop>:

void I2C_Stop(void){
 1be:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 1cc:	18 ec       	ldi	r17, 0xC8	; 200
 1ce:	81 2f       	mov	r24, r17
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
 1da:	81 2f       	mov	r24, r17
 1dc:	8a 95       	dec	r24
 1de:	f1 f7       	brne	.-4      	; 0x1dc <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 1e6:	1a 95       	dec	r17
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	08 2f       	mov	r16, r24
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	48 ec       	ldi	r20, 0xC8	; 200
 1fa:	f4 2e       	mov	r15, r20
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
 1fc:	07 ff       	sbrs	r16, 7
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <I2C_Data_Send+0x16>
	  I2C_SDA_Set_Output(1);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <I2C_Data_Send+0x18>
	}else{
	  I2C_SDA_Set_Output(0);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 20a:	8f 2d       	mov	r24, r15
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <I2C_Data_Send+0x1e>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
 216:	8f 2d       	mov	r24, r15
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <I2C_Data_Send+0x2a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
 222:	1f 5f       	subi	r17, 0xFF	; 255
 224:	18 30       	cpi	r17, 0x08	; 8
 226:	11 f0       	breq	.+4      	; 0x22c <I2C_Data_Send+0x3e>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	data<<=1;
 228:	00 0f       	add	r16, r16
 22a:	e8 cf       	rjmp	.-48     	; 0x1fc <I2C_Data_Send+0xe>
  }
}
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	08 95       	ret

00000234 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 240:	10 e0       	ldi	r17, 0x00	; 0
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	58 ec       	ldi	r21, 0xC8	; 200
 246:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    data>>=1;
 248:	16 95       	lsr	r17
 24a:	8f 2d       	mov	r24, r15
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 256:	35 99       	sbic	0x06, 5	; 6
  for(uint8_t i=0;i<8;i++){
    data>>=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x80;
 258:	10 68       	ori	r17, 0x80	; 128
 25a:	8f 2d       	mov	r24, r15
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
 266:	0f 5f       	subi	r16, 0xFF	; 255
 268:	08 30       	cpi	r16, 0x08	; 8
 26a:	71 f7       	brne	.-36     	; 0x248 <I2C_Data_Receive+0x14>
 26c:	88 ec       	ldi	r24, 0xC8	; 200
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
  return data;
}
 278:	81 2f       	mov	r24, r17
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	08 95       	ret

00000282 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
 282:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 28a:	18 ec       	ldi	r17, 0xC8	; 200
 28c:	81 2f       	mov	r24, r17
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
 298:	1a 95       	dec	r17
 29a:	f1 f7       	brne	.-4      	; 0x298 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
}
 2a2:	1f 91       	pop	r17
 2a4:	08 95       	ret

000002a6 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
 2a6:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 2ae:	18 ec       	ldi	r17, 0xC8	; 200
 2b0:	81 2f       	mov	r24, r17
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
 2bc:	1a 95       	dec	r17
 2be:	f1 f7       	brne	.-4      	; 0x2bc <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
}
 2c6:	1f 91       	pop	r17
 2c8:	08 95       	ret

000002ca <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SDA_Set_Output>
 2d4:	08 ec       	ldi	r16, 0xC8	; 200
 2d6:	80 2f       	mov	r24, r16
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 2e2:	16 b1       	in	r17, 0x06	; 6
 2e4:	0a 95       	dec	r16
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_SCL_Set_Output>
 2ee:	12 95       	swap	r17
 2f0:	16 95       	lsr	r17
 2f2:	17 70       	andi	r17, 0x07	; 7
 2f4:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
 2f6:	81 2f       	mov	r24, r17
 2f8:	81 70       	andi	r24, 0x01	; 1
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
 300:	1f 93       	push	r17
 302:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
 304:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Start>
  I2C_Data_Send(address);
 308:	81 2f       	mov	r24, r17
 30a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Data_Send>
  ack = I2C_Get_Ack();
 30e:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Get_Ack>
 312:	18 2f       	mov	r17, r24
  I2C_Stop();
 314:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Stop>
  return ack;
}
 318:	81 2f       	mov	r24, r17
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
 31e:	1f 93       	push	r17
 320:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
 322:	81 2f       	mov	r24, r17
 324:	0e 94 80 01 	call	0x300	; 0x300 <I2C_Send_Device_Address>
	if(sts==1){
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	11 f4       	brne	.+4      	; 0x330 <I2C_Get_Device_Address+0x12>
 32c:	81 2f       	mov	r24, r17
 32e:	03 c0       	rjmp	.+6      	; 0x336 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
 330:	1f 5f       	subi	r17, 0xFF	; 255
 332:	1f 3f       	cpi	r17, 0xFF	; 255
 334:	b1 f7       	brne	.-20     	; 0x322 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
 336:	1f 91       	pop	r17
 338:	08 95       	ret

0000033a <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
 340:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
 344:	80 91 22 01 	lds	r24, 0x0122
 348:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Data_Send>
  sts = I2C_Get_Ack();
 34c:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Get_Ack>
  I2C_Data_Send(reg);
 350:	81 2f       	mov	r24, r17
 352:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Data_Send>
  sts = I2C_Get_Ack();
 356:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Get_Ack>
 35a:	18 2f       	mov	r17, r24
  I2C_Stop();
 35c:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Stop>
  if(sts){
 360:	11 23       	and	r17, r17
 362:	11 f4       	brne	.+4      	; 0x368 <I2C_Read_Register+0x2e>
 364:	1f ef       	ldi	r17, 0xFF	; 255
 366:	17 c0       	rjmp	.+46     	; 0x396 <I2C_Read_Register+0x5c>
    I2C_Start();
 368:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Start>
    I2C_Data_Send(I2C.ReadAddr);
 36c:	80 91 23 01 	lds	r24, 0x0123
 370:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_Data_Send>
	sts = I2C_Get_Ack();
 374:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Get_Ack>
 378:	18 2f       	mov	r17, r24
	data = I2C_Data_Receive();
 37a:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_Data_Receive>
 37e:	08 2f       	mov	r16, r24
	if(sts){
 380:	11 23       	and	r17, r17
 382:	31 f0       	breq	.+12     	; 0x390 <I2C_Read_Register+0x56>
	  sts = I2C_Get_Ack();
 384:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Get_Ack>
	  if(sts == 0){
 388:	88 23       	and	r24, r24
 38a:	11 f4       	brne	.+4      	; 0x390 <I2C_Read_Register+0x56>
 38c:	10 2f       	mov	r17, r16
 38e:	01 c0       	rjmp	.+2      	; 0x392 <I2C_Read_Register+0x58>
 390:	1f ef       	ldi	r17, 0xFF	; 255
	    sts = 0xFF;
	  }
	}else{
	  sts = 0xFF;
	}
	I2C_Stop();
 392:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Stop>
  }else{
    sts = 0xFF;
  }
  return sts;
}
 396:	81 2f       	mov	r24, r17
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
 39e:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
 3a2:	10 92 23 01 	sts	0x0123, r1
  return sts;
}

void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
 3a6:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
 3aa:	0e 94 8f 01 	call	0x31e	; 0x31e <I2C_Get_Device_Address>
 3ae:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 23 01 	sts	0x0123, r24
 3b8:	08 95       	ret

000003ba <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
 3ba:	10 92 24 01 	sts	0x0124, r1
  debug.datareg=0;
 3be:	10 92 25 01 	sts	0x0125, r1
  debug.databsy=1;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 26 01 	sts	0x0126, r24
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 3cc:	fc 01       	movw	r30, r24
 3ce:	ec 5d       	subi	r30, 0xDC	; 220
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	13 82       	std	Z+3, r1	; 0x03
 3d4:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 3d6:	80 32       	cpi	r24, 0x20	; 32
 3d8:	91 05       	cpc	r25, r1
 3da:	c1 f7       	brne	.-16     	; 0x3cc <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 3dc:	10 92 47 01 	sts	0x0147, r1
 3e0:	e8 e4       	ldi	r30, 0x48	; 72
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
 3e4:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	e0 35       	cpi	r30, 0x50	; 80
 3ea:	f8 07       	cpc	r31, r24
 3ec:	d9 f7       	brne	.-10     	; 0x3e4 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 3ee:	10 82       	st	Z, r1
}
 3f0:	08 95       	ret

000003f2 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 3f2:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 3f4:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 3f6:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
 3fe:	e8 e6       	ldi	r30, 0x68	; 104
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	82 60       	ori	r24, 0x02	; 2
 406:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
 408:	ec e6       	ldi	r30, 0x6C	; 108
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	88 60       	ori	r24, 0x08	; 8
 410:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
 412:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
 414:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 416:	08 95       	ret

00000418 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 41c:	ee e6       	ldi	r30, 0x6E	; 110
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	10 82       	st	Z, r1
  TCNT0 =200;
 422:	88 ec       	ldi	r24, 0xC8	; 200
 424:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 42e:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
 430:	08 95       	ret

00000432 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 432:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 436:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 438:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 43a:	08 95       	ret

0000043c <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 43c:	50 9a       	sbi	0x0a, 0	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 43e:	58 9a       	sbi	0x0b, 0	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 440:	3b 98       	cbi	0x07, 3	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 442:	43 9a       	sbi	0x08, 3	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 444:	08 95       	ret

00000446 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 446:	58 9a       	sbi	0x0b, 0	; 11
}
 448:	08 95       	ret

0000044a <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 44a:	58 98       	cbi	0x0b, 0	; 11
}
 44c:	08 95       	ret

0000044e <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	11 f4       	brne	.+4      	; 0x456 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 452:	58 9a       	sbi	0x0b, 0	; 11
 454:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 456:	58 98       	cbi	0x0b, 0	; 11
 458:	08 95       	ret

0000045a <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 45a:	86 b1       	in	r24, 0x06	; 6
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	23 e0       	ldi	r18, 0x03	; 3
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	2a 95       	dec	r18
 466:	e1 f7       	brne	.-8      	; 0x460 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 468:	81 70       	andi	r24, 0x01	; 1
 46a:	08 95       	ret

0000046c <debug_delay>:

void debug_delay(uint16_t val){
 46c:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 46e:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
 474:	86 b5       	in	r24, 0x26	; 38
 476:	82 33       	cpi	r24, 0x32	; 50
 478:	e8 f3       	brcs	.-6      	; 0x474 <debug_delay+0x8>
    TCNT0=0;
 47a:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
 47c:	86 b5       	in	r24, 0x26	; 38
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	82 17       	cp	r24, r18
 482:	93 07       	cpc	r25, r19
 484:	d8 f3       	brcs	.-10     	; 0x47c <debug_delay+0x10>
  TCCR0B=0;
 486:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 488:	08 95       	ret

0000048a <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 48a:	80 91 1c 01 	lds	r24, 0x011C
 48e:	90 91 1d 01 	lds	r25, 0x011D
 492:	0e 94 36 02 	call	0x46c	; 0x46c <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 496:	08 95       	ret

00000498 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 498:	80 91 1e 01 	lds	r24, 0x011E
 49c:	90 91 1f 01 	lds	r25, 0x011F
 4a0:	0e 94 36 02 	call	0x46c	; 0x46c <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 4a4:	08 95       	ret

000004a6 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 4a6:	80 91 20 01 	lds	r24, 0x0120
 4aa:	90 91 21 01 	lds	r25, 0x0121
 4ae:	0e 94 36 02 	call	0x46c	; 0x46c <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 4b2:	08 95       	ret

000004b4 <debug_tx_byte>:


void debug_tx_byte(uint8_t val){
 4b4:	df 92       	push	r13
 4b6:	ef 92       	push	r14
 4b8:	ff 92       	push	r15
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	2a 97       	sbiw	r28, 0x0a	; 10
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 4d2:	fe 01       	movw	r30, r28
 4d4:	31 96       	adiw	r30, 0x01	; 1
 4d6:	9a e0       	ldi	r25, 0x0A	; 10
 4d8:	df 01       	movw	r26, r30
 4da:	1d 92       	st	X+, r1
 4dc:	9a 95       	dec	r25
 4de:	e9 f7       	brne	.-6      	; 0x4da <debug_tx_byte+0x26>
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	9a 87       	std	Y+10, r25	; 0x0a
 4e4:	fe 01       	movw	r30, r28
 4e6:	32 96       	adiw	r30, 0x02	; 2
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 4ec:	48 2f       	mov	r20, r24
 4ee:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 4f0:	61 e0       	ldi	r22, 0x01	; 1


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 4f2:	ca 01       	movw	r24, r20
 4f4:	02 2e       	mov	r0, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <debug_tx_byte+0x48>
 4f8:	95 95       	asr	r25
 4fa:	87 95       	ror	r24
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <debug_tx_byte+0x44>
 500:	80 ff       	sbrs	r24, 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <debug_tx_byte+0x54>
	  buf[i+1]=1;
 504:	60 83       	st	Z, r22
 506:	01 c0       	rjmp	.+2      	; 0x50a <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
 508:	10 82       	st	Z, r1
 50a:	2f 5f       	subi	r18, 0xFF	; 255
 50c:	3f 4f       	sbci	r19, 0xFF	; 255
 50e:	31 96       	adiw	r30, 0x01	; 1
}


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 510:	28 30       	cpi	r18, 0x08	; 8
 512:	31 05       	cpc	r19, r1
 514:	71 f7       	brne	.-36     	; 0x4f2 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 516:	df b6       	in	r13, 0x3f	; 63
  cli();
 518:	f8 94       	cli
 51a:	8e 01       	movw	r16, r28
 51c:	0f 5f       	subi	r16, 0xFF	; 255
 51e:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
 520:	3b e0       	ldi	r19, 0x0B	; 11
 522:	e3 2e       	mov	r14, r19
 524:	f1 2c       	mov	r15, r1
 526:	ec 0e       	add	r14, r28
 528:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 52a:	f8 01       	movw	r30, r16
 52c:	80 81       	ld	r24, Z
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	11 f4       	brne	.+4      	; 0x536 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 532:	58 9a       	sbi	0x0b, 0	; 11
 534:	01 c0       	rjmp	.+2      	; 0x538 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 536:	58 98       	cbi	0x0b, 0	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
 538:	0e 94 45 02 	call	0x48a	; 0x48a <debug_delay_index_0>
 53c:	0f 5f       	subi	r16, 0xFF	; 255
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 540:	0e 15       	cp	r16, r14
 542:	1f 05       	cpc	r17, r15
 544:	91 f7       	brne	.-28     	; 0x52a <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
 546:	df be       	out	0x3f, r13	; 63
}
 548:	2a 96       	adiw	r28, 0x0a	; 10
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	cf 91       	pop	r28
 556:	df 91       	pop	r29
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	08 95       	ret

00000564 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 56a:	33 9b       	sbis	0x06, 3	; 6
 56c:	21 c0       	rjmp	.+66     	; 0x5b0 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	17 c0       	rjmp	.+46     	; 0x5a0 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
 572:	0e 94 4c 02 	call	0x498	; 0x498 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 576:	33 99       	sbic	0x06, 3	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
 578:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
 57a:	17 30       	cpi	r17, 0x07	; 7
 57c:	09 f0       	breq	.+2      	; 0x580 <debug_rx_byte+0x1c>
	    val>>=1;
 57e:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
 580:	1f 5f       	subi	r17, 0xFF	; 255
 582:	18 30       	cpi	r17, 0x08	; 8
 584:	b1 f7       	brne	.-20     	; 0x572 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
 586:	0e 94 4c 02 	call	0x498	; 0x498 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 58a:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
 58c:	f3 fc       	sbrc	r15, 3
 58e:	07 c0       	rjmp	.+14     	; 0x59e <debug_rx_byte+0x3a>
 590:	83 ff       	sbrs	r24, 3
 592:	05 c0       	rjmp	.+10     	; 0x59e <debug_rx_byte+0x3a>
	  debug.datareg=val;
 594:	00 93 25 01 	sts	0x0125, r16
	  debug.error=0x00;
 598:	10 92 24 01 	sts	0x0124, r1
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 24 01 	sts	0x0124, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
 5a4:	80 91 25 01 	lds	r24, 0x0125
}
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
 5b0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 5b4:	f6 b0       	in	r15, 0x06	; 6
 5b6:	00 e0       	ldi	r16, 0x00	; 0
 5b8:	10 e0       	ldi	r17, 0x00	; 0
 5ba:	db cf       	rjmp	.-74     	; 0x572 <debug_rx_byte+0xe>

000005bc <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
 5bc:	80 91 25 01 	lds	r24, 0x0125
}
 5c0:	08 95       	ret

000005c2 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
 5c2:	10 92 25 01 	sts	0x0125, r1
}
 5c6:	08 95       	ret

000005c8 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
 5c8:	80 93 25 01 	sts	0x0125, r24
}
 5cc:	08 95       	ret

000005ce <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 5ce:	bf 92       	push	r11
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	7b 01       	movw	r14, r22
 5e2:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	e8 16       	cp	r14, r24
 5e8:	f1 04       	cpc	r15, r1
 5ea:	01 05       	cpc	r16, r1
 5ec:	11 05       	cpc	r17, r1
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <debug_tx_hex+0x24>
 5f0:	30 f4       	brcc	.+12     	; 0x5fe <debug_tx_hex+0x30>
 5f2:	c8 e0       	ldi	r28, 0x08	; 8
 5f4:	d0 e0       	ldi	r29, 0x00	; 0
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	c6 2e       	mov	r12, r22
 5fa:	d1 2c       	mov	r13, r1
 5fc:	14 c0       	rjmp	.+40     	; 0x626 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	e8 16       	cp	r14, r24
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	f8 06       	cpc	r15, r24
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	08 07       	cpc	r16, r24
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	18 07       	cpc	r17, r24
 60e:	30 f0       	brcs	.+12     	; 0x61c <debug_tx_hex+0x4e>
 610:	c0 e2       	ldi	r28, 0x20	; 32
 612:	d0 e0       	ldi	r29, 0x00	; 0
 614:	58 e0       	ldi	r21, 0x08	; 8
 616:	c5 2e       	mov	r12, r21
 618:	d1 2c       	mov	r13, r1
 61a:	05 c0       	rjmp	.+10     	; 0x626 <debug_tx_hex+0x58>
 61c:	c0 e1       	ldi	r28, 0x10	; 16
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	44 e0       	ldi	r20, 0x04	; 4
 622:	c4 2e       	mov	r12, r20
 624:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 626:	80 e3       	ldi	r24, 0x30	; 48
 628:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
  debug_tx_byte('x');
 62c:	88 e7       	ldi	r24, 0x78	; 120
 62e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
 632:	bb 24       	eor	r11, r11
 634:	17 c0       	rjmp	.+46     	; 0x664 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 636:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 638:	d8 01       	movw	r26, r16
 63a:	c7 01       	movw	r24, r14
 63c:	0c 2e       	mov	r0, r28
 63e:	04 c0       	rjmp	.+8      	; 0x648 <debug_tx_hex+0x7a>
 640:	b6 95       	lsr	r27
 642:	a7 95       	ror	r26
 644:	97 95       	ror	r25
 646:	87 95       	ror	r24
 648:	0a 94       	dec	r0
 64a:	d2 f7       	brpl	.-12     	; 0x640 <debug_tx_hex+0x72>
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	8f 70       	andi	r24, 0x0F	; 15
 650:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 652:	8a 30       	cpi	r24, 0x0A	; 10
 654:	91 05       	cpc	r25, r1
 656:	10 f0       	brcs	.+4      	; 0x65c <debug_tx_hex+0x8e>
	    hex_digit+=55;
 658:	c7 96       	adiw	r24, 0x37	; 55
 65a:	01 c0       	rjmp	.+2      	; 0x65e <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 65c:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 65e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 662:	b3 94       	inc	r11
 664:	8b 2d       	mov	r24, r11
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	8c 15       	cp	r24, r12
 66a:	9d 05       	cpc	r25, r13
 66c:	20 f3       	brcs	.-56     	; 0x636 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	bf 90       	pop	r11
 680:	08 95       	ret

00000682 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 682:	af 92       	push	r10
 684:	bf 92       	push	r11
 686:	cf 92       	push	r12
 688:	df 92       	push	r13
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	7b 01       	movw	r14, r22
 698:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 69a:	6f 3f       	cpi	r22, 0xFF	; 255
 69c:	71 05       	cpc	r23, r1
 69e:	81 05       	cpc	r24, r1
 6a0:	91 05       	cpc	r25, r1
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <debug_tx_bin+0x24>
 6a4:	18 f4       	brcc	.+6      	; 0x6ac <debug_tx_bin+0x2a>
 6a6:	f7 e0       	ldi	r31, 0x07	; 7
 6a8:	df 2e       	mov	r13, r31
 6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 6ac:	60 30       	cpi	r22, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	73 07       	cpc	r23, r19
 6b2:	31 e0       	ldi	r19, 0x01	; 1
 6b4:	83 07       	cpc	r24, r19
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	93 07       	cpc	r25, r19
 6ba:	18 f0       	brcs	.+6      	; 0x6c2 <debug_tx_bin+0x40>
 6bc:	ef e1       	ldi	r30, 0x1F	; 31
 6be:	de 2e       	mov	r13, r30
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <debug_tx_bin+0x44>
 6c2:	7f e0       	ldi	r23, 0x0F	; 15
 6c4:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
  debug_tx_byte('b');
 6cc:	82 e6       	ldi	r24, 0x62	; 98
 6ce:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
 6d2:	c0 e0       	ldi	r28, 0x00	; 0
 6d4:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 6d6:	cd 2c       	mov	r12, r13
 6d8:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 6da:	56 01       	movw	r10, r12
 6dc:	08 94       	sec
 6de:	a1 1c       	adc	r10, r1
 6e0:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 6e2:	c6 01       	movw	r24, r12
 6e4:	8c 1b       	sub	r24, r28
 6e6:	9d 0b       	sbc	r25, r29
 6e8:	a8 01       	movw	r20, r16
 6ea:	97 01       	movw	r18, r14
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <debug_tx_bin+0x74>
 6ee:	56 95       	lsr	r21
 6f0:	47 95       	ror	r20
 6f2:	37 95       	ror	r19
 6f4:	27 95       	ror	r18
 6f6:	8a 95       	dec	r24
 6f8:	d2 f7       	brpl	.-12     	; 0x6ee <debug_tx_bin+0x6c>
 6fa:	da 01       	movw	r26, r20
 6fc:	c9 01       	movw	r24, r18
 6fe:	81 70       	andi	r24, 0x01	; 1
 700:	90 70       	andi	r25, 0x00	; 0
 702:	89 2b       	or	r24, r25
 704:	11 f0       	breq	.+4      	; 0x70a <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 706:	81 e3       	ldi	r24, 0x31	; 49
 708:	01 c0       	rjmp	.+2      	; 0x70c <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
 710:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 712:	ca 15       	cp	r28, r10
 714:	db 05       	cpc	r29, r11
 716:	29 f7       	brne	.-54     	; 0x6e2 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	ff 90       	pop	r15
 722:	ef 90       	pop	r14
 724:	df 90       	pop	r13
 726:	cf 90       	pop	r12
 728:	bf 90       	pop	r11
 72a:	af 90       	pop	r10
 72c:	08 95       	ret

0000072e <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 72e:	8d e0       	ldi	r24, 0x0D	; 13
 730:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
  debug_tx_byte('\n');
 734:	8a e0       	ldi	r24, 0x0A	; 10
 736:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
}
 73a:	08 95       	ret

0000073c <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
}
 742:	08 95       	ret

00000744 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 744:	8c e2       	ldi	r24, 0x2C	; 44
 746:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
}
 74a:	08 95       	ret

0000074c <debug_tx_text>:

void debug_tx_text(char *str){
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	ec 01       	movw	r28, r24
 754:	10 e0       	ldi	r17, 0x00	; 0
 756:	03 c0       	rjmp	.+6      	; 0x75e <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 758:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
        i++;
 75c:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 75e:	fe 01       	movw	r30, r28
 760:	e1 0f       	add	r30, r17
 762:	f1 1d       	adc	r31, r1
 764:	80 81       	ld	r24, Z
 766:	88 23       	and	r24, r24
 768:	b9 f7       	brne	.-18     	; 0x758 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	08 95       	ret

00000772 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 772:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_nl();
 776:	0e 94 97 03 	call	0x72e	; 0x72e <debug_tx_nl>
}
 77a:	08 95       	ret

0000077c <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 77c:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 780:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
}
 784:	08 95       	ret

00000786 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 786:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_cm();
 78a:	0e 94 a2 03 	call	0x744	; 0x744 <debug_tx_cm>
}
 78e:	08 95       	ret

00000790 <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 790:	bf 92       	push	r11
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	6b 01       	movw	r12, r22
 7a0:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 7a2:	61 15       	cp	r22, r1
 7a4:	71 05       	cpc	r23, r1
 7a6:	81 05       	cpc	r24, r1
 7a8:	91 05       	cpc	r25, r1
 7aa:	31 f4       	brne	.+12     	; 0x7b8 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 7ac:	10 92 48 01 	sts	0x0148, r1
    debug.input_num_digits=1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 50 01 	sts	0x0150, r24
 7b6:	23 c0       	rjmp	.+70     	; 0x7fe <debug_determine_digit_numbers+0x6e>
 7b8:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 7ba:	0b 2d       	mov	r16, r11
 7bc:	10 e0       	ldi	r17, 0x00	; 0
 7be:	0c 5d       	subi	r16, 0xDC	; 220
 7c0:	1e 4f       	sbci	r17, 0xFE	; 254
 7c2:	c7 01       	movw	r24, r14
 7c4:	b6 01       	movw	r22, r12
 7c6:	2a e0       	ldi	r18, 0x0A	; 10
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	50 e0       	ldi	r21, 0x00	; 0
 7ce:	0e 94 4c 05 	call	0xa98	; 0xa98 <__udivmodsi4>
 7d2:	f8 01       	movw	r30, r16
 7d4:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 7d6:	c7 01       	movw	r24, r14
 7d8:	b6 01       	movw	r22, r12
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	40 e0       	ldi	r20, 0x00	; 0
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	0e 94 4c 05 	call	0xa98	; 0xa98 <__udivmodsi4>
 7e6:	c9 01       	movw	r24, r18
 7e8:	da 01       	movw	r26, r20
 7ea:	6c 01       	movw	r12, r24
 7ec:	7d 01       	movw	r14, r26
      i++;
 7ee:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 7f0:	c1 14       	cp	r12, r1
 7f2:	d1 04       	cpc	r13, r1
 7f4:	e1 04       	cpc	r14, r1
 7f6:	f1 04       	cpc	r15, r1
 7f8:	01 f7       	brne	.-64     	; 0x7ba <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 7fa:	b0 92 50 01 	sts	0x0150, r11
  }
}
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	df 90       	pop	r13
 808:	cf 90       	pop	r12
 80a:	bf 90       	pop	r11
 80c:	08 95       	ret

0000080e <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 80e:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 810:	10 91 50 01 	lds	r17, 0x0150
 814:	09 c0       	rjmp	.+18     	; 0x828 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 816:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 818:	e1 2f       	mov	r30, r17
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	ec 5d       	subi	r30, 0xDC	; 220
 81e:	fe 4f       	sbci	r31, 0xFE	; 254
 820:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
 822:	80 5d       	subi	r24, 0xD0	; 208
 824:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 828:	11 23       	and	r17, r17
 82a:	a9 f7       	brne	.-22     	; 0x816 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 82c:	1f 91       	pop	r17
 82e:	08 95       	ret

00000830 <debug_tx_number>:

void debug_tx_number(int32_t num){
 830:	ef 92       	push	r14
 832:	ff 92       	push	r15
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	7b 01       	movw	r14, r22
 83a:	8c 01       	movw	r16, r24
  if(num<0){
 83c:	97 ff       	sbrs	r25, 7
 83e:	0b c0       	rjmp	.+22     	; 0x856 <debug_tx_number+0x26>
    debug_tx_byte('-');
 840:	8d e2       	ldi	r24, 0x2D	; 45
 842:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <debug_tx_byte>
	num=-num;
 846:	10 95       	com	r17
 848:	00 95       	com	r16
 84a:	f0 94       	com	r15
 84c:	e0 94       	com	r14
 84e:	e1 1c       	adc	r14, r1
 850:	f1 1c       	adc	r15, r1
 852:	01 1d       	adc	r16, r1
 854:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 856:	c8 01       	movw	r24, r16
 858:	b7 01       	movw	r22, r14
 85a:	0e 94 c8 03 	call	0x790	; 0x790 <debug_determine_digit_numbers>
  debug_tx_number_digits();
 85e:	0e 94 07 04 	call	0x80e	; 0x80e <debug_tx_number_digits>
}
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	ef 90       	pop	r14
 86a:	08 95       	ret

0000086c <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 86c:	0e 94 18 04 	call	0x830	; 0x830 <debug_tx_number>
  debug_tx_nl();
 870:	0e 94 97 03 	call	0x72e	; 0x72e <debug_tx_nl>
}
 874:	08 95       	ret

00000876 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 876:	0e 94 18 04 	call	0x830	; 0x830 <debug_tx_number>
  debug_tx_sp();
 87a:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
}
 87e:	08 95       	ret

00000880 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 880:	0e 94 18 04 	call	0x830	; 0x830 <debug_tx_number>
  debug_tx_text(",");
 884:	8e e0       	ldi	r24, 0x0E	; 14
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
}
 88c:	08 95       	ret

0000088e <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 88e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <debug_tx_hex>
  debug_tx_nl();
 892:	0e 94 97 03 	call	0x72e	; 0x72e <debug_tx_nl>
}
 896:	08 95       	ret

00000898 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 898:	0e 94 e7 02 	call	0x5ce	; 0x5ce <debug_tx_hex>
  debug_tx_sp();
 89c:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
}
 8a0:	08 95       	ret

000008a2 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 8a2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <debug_tx_hex>
  debug_tx_text(",");
 8a6:	8e e0       	ldi	r24, 0x0E	; 14
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
}
 8ae:	08 95       	ret

000008b0 <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 8b0:	ef 92       	push	r14
 8b2:	ff 92       	push	r15
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	7a 01       	movw	r14, r20
 8ba:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 8bc:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 8c0:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
  debug_tx_number_nl(num);
 8c4:	c8 01       	movw	r24, r16
 8c6:	b7 01       	movw	r22, r14
 8c8:	0e 94 36 04 	call	0x86c	; 0x86c <debug_tx_number_nl>
}
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	ff 90       	pop	r15
 8d2:	ef 90       	pop	r14
 8d4:	08 95       	ret

000008d6 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 8d6:	ef 92       	push	r14
 8d8:	ff 92       	push	r15
 8da:	0f 93       	push	r16
 8dc:	1f 93       	push	r17
 8de:	7a 01       	movw	r14, r20
 8e0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 8e2:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 8e6:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
  debug_tx_number_sp(num);
 8ea:	c8 01       	movw	r24, r16
 8ec:	b7 01       	movw	r22, r14
 8ee:	0e 94 3b 04 	call	0x876	; 0x876 <debug_tx_number_sp>
}
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	ff 90       	pop	r15
 8f8:	ef 90       	pop	r14
 8fa:	08 95       	ret

000008fc <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 8fc:	ef 92       	push	r14
 8fe:	ff 92       	push	r15
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	7a 01       	movw	r14, r20
 906:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 908:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 90c:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
  debug_tx_number_cm(num);
 910:	c8 01       	movw	r24, r16
 912:	b7 01       	movw	r22, r14
 914:	0e 94 40 04 	call	0x880	; 0x880 <debug_tx_number_cm>
}
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	ff 90       	pop	r15
 91e:	ef 90       	pop	r14
 920:	08 95       	ret

00000922 <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 922:	ef 92       	push	r14
 924:	ff 92       	push	r15
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	7a 01       	movw	r14, r20
 92c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 92e:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 932:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 936:	c8 01       	movw	r24, r16
 938:	b7 01       	movw	r22, r14
 93a:	0e 94 47 04 	call	0x88e	; 0x88e <debug_tx_number_hex_nl>
}
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	ff 90       	pop	r15
 944:	ef 90       	pop	r14
 946:	08 95       	ret

00000948 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 948:	ef 92       	push	r14
 94a:	ff 92       	push	r15
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	7a 01       	movw	r14, r20
 952:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 954:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 958:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 95c:	c8 01       	movw	r24, r16
 95e:	b7 01       	movw	r22, r14
 960:	0e 94 4c 04 	call	0x898	; 0x898 <debug_tx_number_hex_sp>
}
 964:	1f 91       	pop	r17
 966:	0f 91       	pop	r16
 968:	ff 90       	pop	r15
 96a:	ef 90       	pop	r14
 96c:	08 95       	ret

0000096e <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	7a 01       	movw	r14, r20
 978:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 97a:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_tx_text>
  debug_tx_sp();
 97e:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 982:	c8 01       	movw	r24, r16
 984:	b7 01       	movw	r22, r14
 986:	0e 94 51 04 	call	0x8a2	; 0x8a2 <debug_tx_number_hex_cm>
}
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	ff 90       	pop	r15
 990:	ef 90       	pop	r14
 992:	08 95       	ret

00000994 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
 994:	e4 e2       	ldi	r30, 0x24	; 36
 996:	f1 e0       	ldi	r31, 0x01	; 1
 998:	e8 0f       	add	r30, r24
 99a:	f1 1d       	adc	r31, r1
 99c:	83 81       	ldd	r24, Z+3	; 0x03
}
 99e:	08 95       	ret

000009a0 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 9a0:	80 91 47 01 	lds	r24, 0x0147
}
 9a4:	08 95       	ret

000009a6 <debug_flush_buf>:

void debug_flush_buf(void){
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 9aa:	fc 01       	movw	r30, r24
 9ac:	ec 5d       	subi	r30, 0xDC	; 220
 9ae:	fe 4f       	sbci	r31, 0xFE	; 254
 9b0:	13 82       	std	Z+3, r1	; 0x03
 9b2:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 9b4:	80 32       	cpi	r24, 0x20	; 32
 9b6:	91 05       	cpc	r25, r1
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 9ba:	10 92 47 01 	sts	0x0147, r1
}
 9be:	08 95       	ret

000009c0 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
 9c0:	80 91 26 01 	lds	r24, 0x0126
}
 9c4:	08 95       	ret

000009c6 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
 9c6:	80 91 26 01 	lds	r24, 0x0126
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
 9ca:	88 23       	and	r24, r24
 9cc:	11 f0       	breq	.+4      	; 0x9d2 <debug_data_available_rx_buf+0xc>
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 9d2:	80 91 47 01 	lds	r24, 0x0147
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	88 23       	and	r24, r24
 9da:	09 f4       	brne	.+2      	; 0x9de <debug_data_available_rx_buf+0x18>
 9dc:	91 e0       	ldi	r25, 0x01	; 1
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
 9e2:	89 2f       	mov	r24, r25
 9e4:	08 95       	ret

000009e6 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 9e6:	80 91 47 01 	lds	r24, 0x0147
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
 9ea:	08 95       	ret

000009ec <debug_init>:

void debug_init(void){
  debug_struct_init();
 9ec:	0e 94 dd 01 	call	0x3ba	; 0x3ba <debug_struct_init>
  debug_timings_init();
 9f0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <debug_timings_init>
  debug_gpio_init();
 9f4:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_gpio_init>
}
 9f8:	08 95       	ret

000009fa <__vector_4>:


ISR(ISR_PCINT_VECT){
 9fa:	1f 92       	push	r1
 9fc:	0f 92       	push	r0
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	0f 92       	push	r0
 a02:	11 24       	eor	r1, r1
 a04:	2f 93       	push	r18
 a06:	3f 93       	push	r19
 a08:	4f 93       	push	r20
 a0a:	5f 93       	push	r21
 a0c:	6f 93       	push	r22
 a0e:	7f 93       	push	r23
 a10:	8f 93       	push	r24
 a12:	9f 93       	push	r25
 a14:	af 93       	push	r26
 a16:	bf 93       	push	r27
 a18:	ef 93       	push	r30
 a1a:	ff 93       	push	r31
  debug.databsy=1;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	80 93 26 01 	sts	0x0126, r24
  uint8_t val=debug_rx_byte();
 a22:	0e 94 b2 02 	call	0x564	; 0x564 <debug_rx_byte>
 a26:	98 2f       	mov	r25, r24
  if(debug.error==0){
 a28:	80 91 24 01 	lds	r24, 0x0124
 a2c:	88 23       	and	r24, r24
 a2e:	99 f4       	brne	.+38     	; 0xa56 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
 a30:	e0 91 47 01 	lds	r30, 0x0147
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	ec 5d       	subi	r30, 0xDC	; 220
 a38:	fe 4f       	sbci	r31, 0xFE	; 254
 a3a:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
 a3c:	80 91 47 01 	lds	r24, 0x0147
 a40:	8f 5f       	subi	r24, 0xFF	; 255
 a42:	80 93 47 01 	sts	0x0147, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
 a46:	80 91 47 01 	lds	r24, 0x0147
 a4a:	81 32       	cpi	r24, 0x21	; 33
 a4c:	10 f0       	brcs	.+4      	; 0xa52 <__vector_4+0x58>
	  debug.bufindex=0;
 a4e:	10 92 47 01 	sts	0x0147, r1
	}
    debug_timer_start();
 a52:	0e 94 0c 02 	call	0x418	; 0x418 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
 a56:	ff 91       	pop	r31
 a58:	ef 91       	pop	r30
 a5a:	bf 91       	pop	r27
 a5c:	af 91       	pop	r26
 a5e:	9f 91       	pop	r25
 a60:	8f 91       	pop	r24
 a62:	7f 91       	pop	r23
 a64:	6f 91       	pop	r22
 a66:	5f 91       	pop	r21
 a68:	4f 91       	pop	r20
 a6a:	3f 91       	pop	r19
 a6c:	2f 91       	pop	r18
 a6e:	0f 90       	pop	r0
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	0f 90       	pop	r0
 a74:	1f 90       	pop	r1
 a76:	18 95       	reti

00000a78 <__vector_16>:

ISR(TIMER_OVF_VECT){
 a78:	1f 92       	push	r1
 a7a:	0f 92       	push	r0
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	0f 92       	push	r0
 a80:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 a82:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 a86:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 a88:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
 a8a:	10 92 26 01 	sts	0x0126, r1
}
 a8e:	0f 90       	pop	r0
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	0f 90       	pop	r0
 a94:	1f 90       	pop	r1
 a96:	18 95       	reti

00000a98 <__udivmodsi4>:
 a98:	a1 e2       	ldi	r26, 0x21	; 33
 a9a:	1a 2e       	mov	r1, r26
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	fd 01       	movw	r30, r26
 aa2:	0d c0       	rjmp	.+26     	; 0xabe <__udivmodsi4_ep>

00000aa4 <__udivmodsi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	ee 1f       	adc	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	a2 17       	cp	r26, r18
 aae:	b3 07       	cpc	r27, r19
 ab0:	e4 07       	cpc	r30, r20
 ab2:	f5 07       	cpc	r31, r21
 ab4:	20 f0       	brcs	.+8      	; 0xabe <__udivmodsi4_ep>
 ab6:	a2 1b       	sub	r26, r18
 ab8:	b3 0b       	sbc	r27, r19
 aba:	e4 0b       	sbc	r30, r20
 abc:	f5 0b       	sbc	r31, r21

00000abe <__udivmodsi4_ep>:
 abe:	66 1f       	adc	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	1a 94       	dec	r1
 ac8:	69 f7       	brne	.-38     	; 0xaa4 <__udivmodsi4_loop>
 aca:	60 95       	com	r22
 acc:	70 95       	com	r23
 ace:	80 95       	com	r24
 ad0:	90 95       	com	r25
 ad2:	9b 01       	movw	r18, r22
 ad4:	ac 01       	movw	r20, r24
 ad6:	bd 01       	movw	r22, r26
 ad8:	cf 01       	movw	r24, r30
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
