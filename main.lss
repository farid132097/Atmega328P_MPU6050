
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001482  00001516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800122  00800122  00001538  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000084d  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cdf  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00003ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001528  00000000  00000000  00004213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  0000573c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000856  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5d  00000000  00000000  000065a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00006fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e2 e8       	ldi	r30, 0x82	; 130
      aa:	f4 e1       	ldi	r31, 0x14	; 20
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a7 38       	cpi	r26, 0x87	; 135
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include <math.h>
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	2f 92       	push	r2
      d6:	3f 92       	push	r3
      d8:	4f 92       	push	r4
      da:	5f 92       	push	r5
      dc:	6f 92       	push	r6
      de:	7f 92       	push	r7
      e0:	8f 92       	push	r8
      e2:	9f 92       	push	r9
      e4:	af 92       	push	r10
      e6:	bf 92       	push	r11
      e8:	cf 92       	push	r12
      ea:	df 92       	push	r13
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29

  DDRD  |= (1<<4);
      f8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      fa:	5c 98       	cbi	0x0b, 4	; 11
  
  I2C_Init();
      fc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <I2C_Init>
  debug_init();
     100:	0e 94 92 06 	call	0xd24	; 0xd24 <debug_init>
  debug_tx_text_nl("Debug Started");
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 55 05 	call	0xaaa	; 0xaaa <debug_tx_text_nl>
  I2C_Set_Mode_Active();
     10c:	0e 94 80 02 	call	0x500	; 0x500 <I2C_Set_Mode_Active>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     110:	c0 e7       	ldi	r28, 0x70	; 112
     112:	d7 e1       	ldi	r29, 0x17	; 23
  
  while(1){
    float ax=I2C_Read_Acc_X();
     114:	0e 94 33 03 	call	0x666	; 0x666 <I2C_Read_Acc_X>
     118:	7c 01       	movw	r14, r24
	float ay=I2C_Read_Acc_Y();
     11a:	0e 94 15 03 	call	0x62a	; 0x62a <I2C_Read_Acc_Y>
     11e:	5c 01       	movw	r10, r24
	float az=I2C_Read_Acc_Z();
     120:	0e 94 f7 02 	call	0x5ee	; 0x5ee <I2C_Read_Acc_Z>
     124:	aa 27       	eor	r26, r26
     126:	97 fd       	sbrc	r25, 7
     128:	a0 95       	com	r26
     12a:	ba 2f       	mov	r27, r26
     12c:	bc 01       	movw	r22, r24
     12e:	cd 01       	movw	r24, r26
     130:	0e 94 3e 08 	call	0x107c	; 0x107c <__floatsisf>
     134:	3b 01       	movw	r6, r22
     136:	4c 01       	movw	r8, r24
	float divx=ax/az;
	float divy=ay/az;
	float divz=ay/ax;
	
    float ThetaX = atan(divx);
     138:	00 27       	eor	r16, r16
     13a:	f7 fc       	sbrc	r15, 7
     13c:	00 95       	com	r16
     13e:	10 2f       	mov	r17, r16
     140:	c8 01       	movw	r24, r16
     142:	b7 01       	movw	r22, r14
     144:	0e 94 3e 08 	call	0x107c	; 0x107c <__floatsisf>
     148:	a4 01       	movw	r20, r8
     14a:	93 01       	movw	r18, r6
     14c:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divsf3>
     150:	0e 94 7b 07 	call	0xef6	; 0xef6 <atan>
    ThetaX*=100.0;
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	48 ec       	ldi	r20, 0xC8	; 200
     15a:	52 e4       	ldi	r21, 0x42	; 66
     15c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     160:	1b 01       	movw	r2, r22
     162:	2c 01       	movw	r4, r24
    ThetaX*=57.3;
	float ThetaY = atan(divy);
     164:	cc 24       	eor	r12, r12
     166:	b7 fc       	sbrc	r11, 7
     168:	c0 94       	com	r12
     16a:	dc 2c       	mov	r13, r12
     16c:	c6 01       	movw	r24, r12
     16e:	b5 01       	movw	r22, r10
     170:	0e 94 3e 08 	call	0x107c	; 0x107c <__floatsisf>
     174:	a4 01       	movw	r20, r8
     176:	93 01       	movw	r18, r6
     178:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divsf3>
     17c:	0e 94 7b 07 	call	0xef6	; 0xef6 <atan>
    ThetaY*=100.0;
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	48 ec       	ldi	r20, 0xC8	; 200
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     18c:	7b 01       	movw	r14, r22
     18e:	8c 01       	movw	r16, r24
    ThetaY*=57.3;
	float ThetaZ = atan2(ay,ax);
	ThetaZ*=100.0;
    ThetaZ*=57.3;
	
    debug_tx_number_cm(ThetaX);
     190:	c2 01       	movw	r24, r4
     192:	b1 01       	movw	r22, r2
     194:	23 e3       	ldi	r18, 0x33	; 51
     196:	33 e3       	ldi	r19, 0x33	; 51
     198:	45 e6       	ldi	r20, 0x65	; 101
     19a:	52 e4       	ldi	r21, 0x42	; 66
     19c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     1a0:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fixsfsi>
     1a4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <debug_tx_number_cm>
	debug_tx_number_cm(ThetaY);
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	23 e3       	ldi	r18, 0x33	; 51
     1ae:	33 e3       	ldi	r19, 0x33	; 51
     1b0:	45 e6       	ldi	r20, 0x65	; 101
     1b2:	52 e4       	ldi	r21, 0x42	; 66
     1b4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     1b8:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fixsfsi>
     1bc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <debug_tx_number_cm>
	//debug_tx_number_cm(I2C_Read_Gyro_X());
	//debug_tx_number_cm(I2C_Read_Gyro_Y());
	//debug_tx_number_cm(I2C_Read_Gyro_Z());
	//debug_tx_number_cm(I2C_Read_Temp());
	
	debug_tx_nl();
     1c0:	0e 94 33 05 	call	0xa66	; 0xa66 <debug_tx_nl>
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf2>
     1ca:	a4 cf       	rjmp	.-184    	; 0x114 <main+0x40>

000001cc <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     1cc:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     1d0:	10 92 23 01 	sts	0x0123, r1
}
     1d4:	08 95       	ret

000001d6 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1d6:	80 e5       	ldi	r24, 0x50	; 80
     1d8:	8a 95       	dec	r24
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     1dc:	08 95       	ret

000001de <I2C_Bit_Delay>:
     1de:	80 ea       	ldi	r24, 0xA0	; 160
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     1e4:	08 95       	ret

000001e6 <I2C_Guard_Delay>:
     1e6:	88 e0       	ldi	r24, 0x08	; 8
     1e8:	8a 95       	dec	r24
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     1ec:	08 95       	ret

000001ee <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1f2:	3c 9a       	sbi	0x07, 4	; 7
     1f4:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1f6:	3c 98       	cbi	0x07, 4	; 7
     1f8:	08 95       	ret

000001fa <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	11 f4       	brne	.+4      	; 0x202 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     1fe:	44 9a       	sbi	0x08, 4	; 8
     200:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     202:	44 98       	cbi	0x08, 4	; 8
     204:	08 95       	ret

00000206 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	19 f4       	brne	.+6      	; 0x210 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     20a:	44 9a       	sbi	0x08, 4	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     20c:	3c 98       	cbi	0x07, 4	; 7
     20e:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     210:	44 98       	cbi	0x08, 4	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     212:	3c 9a       	sbi	0x07, 4	; 7
     214:	08 95       	ret

00000216 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     216:	86 b1       	in	r24, 0x06	; 6
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	24 e0       	ldi	r18, 0x04	; 4
     21c:	96 95       	lsr	r25
     21e:	87 95       	ror	r24
     220:	2a 95       	dec	r18
     222:	e1 f7       	brne	.-8      	; 0x21c <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     224:	81 70       	andi	r24, 0x01	; 1
     226:	08 95       	ret

00000228 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	11 f4       	brne	.+4      	; 0x230 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     22c:	3d 9a       	sbi	0x07, 5	; 7
     22e:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     230:	3d 98       	cbi	0x07, 5	; 7
     232:	08 95       	ret

00000234 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	11 f4       	brne	.+4      	; 0x23c <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     238:	45 9a       	sbi	0x08, 5	; 8
     23a:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     23c:	45 98       	cbi	0x08, 5	; 8
     23e:	08 95       	ret

00000240 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	19 f4       	brne	.+6      	; 0x24a <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     244:	45 9a       	sbi	0x08, 5	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     246:	3d 98       	cbi	0x07, 5	; 7
     248:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     24a:	45 98       	cbi	0x08, 5	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     24c:	3d 9a       	sbi	0x07, 5	; 7
     24e:	08 95       	ret

00000250 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     250:	86 b1       	in	r24, 0x06	; 6
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	35 e0       	ldi	r19, 0x05	; 5
     256:	96 95       	lsr	r25
     258:	87 95       	ror	r24
     25a:	3a 95       	dec	r19
     25c:	e1 f7       	brne	.-8      	; 0x256 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     25e:	81 70       	andi	r24, 0x01	; 1
     260:	08 95       	ret

00000262 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     262:	3c 98       	cbi	0x07, 4	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
}
     26a:	08 95       	ret

0000026c <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     26c:	3d 98       	cbi	0x07, 5	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
}
     274:	08 95       	ret

00000276 <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     276:	3c 9a       	sbi	0x07, 4	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     278:	3d 98       	cbi	0x07, 5	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
}
     286:	08 95       	ret

00000288 <I2C_Start>:

void I2C_Start(void){
     288:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     296:	10 e5       	ldi	r17, 0x50	; 80
     298:	81 2f       	mov	r24, r17
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     2a4:	81 2f       	mov	r24, r17
     2a6:	8a 95       	dec	r24
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     2b0:	1a 95       	dec	r17
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     2b4:	1f 91       	pop	r17
     2b6:	08 95       	ret

000002b8 <I2C_Stop>:

void I2C_Stop(void){
     2b8:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     2c6:	10 e5       	ldi	r17, 0x50	; 80
     2c8:	81 2f       	mov	r24, r17
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     2d4:	81 2f       	mov	r24, r17
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     2e0:	1a 95       	dec	r17
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	08 2f       	mov	r16, r24
     2f2:	10 e0       	ldi	r17, 0x00	; 0
     2f4:	50 e5       	ldi	r21, 0x50	; 80
     2f6:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     2f8:	48 e0       	ldi	r20, 0x08	; 8
     2fa:	e4 2e       	mov	r14, r20
     2fc:	07 ff       	sbrs	r16, 7
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     30a:	8f 2d       	mov	r24, r15
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     316:	8f 2d       	mov	r24, r15
     318:	8a 95       	dec	r24
     31a:	f1 f7       	brne	.-4      	; 0x318 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     322:	8e 2d       	mov	r24, r14
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     328:	1f 5f       	subi	r17, 0xFF	; 255
     32a:	18 30       	cpi	r17, 0x08	; 8
     32c:	11 f0       	breq	.+4      	; 0x332 <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     32e:	00 0f       	add	r16, r16
     330:	e5 cf       	rjmp	.-54     	; 0x2fc <I2C_Data_Send+0x14>
  }
}
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	08 95       	ret

0000033c <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     348:	10 e0       	ldi	r17, 0x00	; 0
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	60 e5       	ldi	r22, 0x50	; 80
     34e:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     350:	11 0f       	add	r17, r17
     352:	8f 2d       	mov	r24, r15
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     35e:	35 99       	sbic	0x06, 5	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     360:	11 60       	ori	r17, 0x01	; 1
     362:	8f 2d       	mov	r24, r15
     364:	8a 95       	dec	r24
     366:	f1 f7       	brne	.-4      	; 0x364 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     36e:	0f 5f       	subi	r16, 0xFF	; 255
     370:	08 30       	cpi	r16, 0x08	; 8
     372:	71 f7       	brne	.-36     	; 0x350 <I2C_Data_Receive+0x14>
     374:	80 e5       	ldi	r24, 0x50	; 80
     376:	8a 95       	dec	r24
     378:	f1 f7       	brne	.-4      	; 0x376 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
  return data;
}
     380:	81 2f       	mov	r24, r17
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	08 95       	ret

0000038a <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     38a:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     392:	10 e5       	ldi	r17, 0x50	; 80
     394:	81 2f       	mov	r24, r17
     396:	8a 95       	dec	r24
     398:	f1 f7       	brne	.-4      	; 0x396 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     3a0:	1a 95       	dec	r17
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
}
     3aa:	1f 91       	pop	r17
     3ac:	08 95       	ret

000003ae <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     3ae:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     3b6:	10 e5       	ldi	r17, 0x50	; 80
     3b8:	81 2f       	mov	r24, r17
     3ba:	8a 95       	dec	r24
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     3c4:	1a 95       	dec	r17
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
}
     3ce:	1f 91       	pop	r17
     3d0:	08 95       	ret

000003d2 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 20 01 	call	0x240	; 0x240 <I2C_SDA_Set_Output>
     3dc:	00 e5       	ldi	r16, 0x50	; 80
     3de:	80 2f       	mov	r24, r16
     3e0:	8a 95       	dec	r24
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     3ea:	16 b1       	in	r17, 0x06	; 6
     3ec:	0a 95       	dec	r16
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 03 01 	call	0x206	; 0x206 <I2C_SCL_Set_Output>
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	8a 95       	dec	r24
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <I2C_Get_Ack+0x26>
     3fc:	12 95       	swap	r17
     3fe:	16 95       	lsr	r17
     400:	17 70       	andi	r17, 0x07	; 7
     402:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     404:	81 2f       	mov	r24, r17
     406:	81 70       	andi	r24, 0x01	; 1
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     40e:	1f 93       	push	r17
     410:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     412:	0e 94 44 01 	call	0x288	; 0x288 <I2C_Start>
  I2C_Data_Send(address);
     416:	81 2f       	mov	r24, r17
     418:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     41c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
     420:	18 2f       	mov	r17, r24
  I2C_Stop();
     422:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <I2C_Stop>
  return ack;
}
     426:	81 2f       	mov	r24, r17
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     42c:	1f 93       	push	r17
     42e:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     430:	81 2f       	mov	r24, r17
     432:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_Send_Device_Address>
	if(sts==1){
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	11 f4       	brne	.+4      	; 0x43e <I2C_Get_Device_Address+0x12>
     43a:	81 2f       	mov	r24, r17
     43c:	03 c0       	rjmp	.+6      	; 0x444 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     43e:	1f 5f       	subi	r17, 0xFF	; 255
     440:	1f 3f       	cpi	r17, 0xFF	; 255
     442:	b1 f7       	brne	.-20     	; 0x430 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     454:	0e 94 44 01 	call	0x288	; 0x288 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     458:	80 91 22 01 	lds	r24, 0x0122
     45c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     460:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
     464:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     466:	81 2f       	mov	r24, r17
     468:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     46c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
     470:	f8 2e       	mov	r15, r24
  I2C_Stop();
     472:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <I2C_Stop>
  I2C_Start();
     476:	0e 94 44 01 	call	0x288	; 0x288 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     47a:	80 91 23 01 	lds	r24, 0x0123
     47e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     482:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
     486:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     488:	0e 94 9e 01 	call	0x33c	; 0x33c <I2C_Data_Receive>
     48c:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     48e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
     492:	08 2f       	mov	r16, r24
  I2C_Stop();
     494:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <I2C_Stop>
  if(sts == 0x07){
     498:	ff 0c       	add	r15, r15
     49a:	11 0f       	add	r17, r17
     49c:	11 0f       	add	r17, r17
     49e:	1f 29       	or	r17, r15
     4a0:	1e 29       	or	r17, r14
     4a2:	00 0f       	add	r16, r16
     4a4:	00 0f       	add	r16, r16
     4a6:	00 0f       	add	r16, r16
     4a8:	01 2b       	or	r16, r17
     4aa:	07 30       	cpi	r16, 0x07	; 7
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <I2C_Read_Register+0x6a>
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <I2C_Read_Register+0x6c>
     4b2:	8d 2d       	mov	r24, r13
    sts = data;
  }else{
    sts = 0xFF;
  }
  return sts;
}
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	08 95       	ret

000004c0 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	18 2f       	mov	r17, r24
     4c6:	06 2f       	mov	r16, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     4c8:	0e 94 44 01 	call	0x288	; 0x288 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     4cc:	80 91 22 01 	lds	r24, 0x0122
     4d0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     4d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
  I2C_Data_Send(reg);
     4d8:	81 2f       	mov	r24, r17
     4da:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     4de:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>

  I2C_Data_Send(val);
     4e2:	80 2f       	mov	r24, r16
     4e4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     4e8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_Get_Ack>
  I2C_Stop();
     4ec:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <I2C_Stop>
  if(sts == 0x07){
    sts = data;
  }else{
    sts = 0xFF;
  }
}
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <I2C_Set_Mode_Sleep>:
	LPF_Set_Alpha(5,LPF_EN);
  #endif
}

void I2C_Set_Mode_Sleep(void){
  I2C_Write_Register(0x6B, 0x40);
     4f6:	8b e6       	ldi	r24, 0x6B	; 107
     4f8:	60 e4       	ldi	r22, 0x40	; 64
     4fa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <I2C_Write_Register>
}
     4fe:	08 95       	ret

00000500 <I2C_Set_Mode_Active>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
     500:	8b e6       	ldi	r24, 0x6B	; 107
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	0e 94 60 02 	call	0x4c0	; 0x4c0 <I2C_Write_Register>
}
     508:	08 95       	ret

0000050a <I2C_Read_Temp>:
    data = LPF_Get_Filtered_Value(5, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Temp(void){
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
     50e:	81 e4       	ldi	r24, 0x41	; 65
     510:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     514:	18 2f       	mov	r17, r24
     516:	00 e0       	ldi	r16, 0x00	; 0
  data |= I2C_Read_Register(0x42);
     518:	82 e4       	ldi	r24, 0x42	; 66
     51a:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
     51e:	90 e0       	ldi	r25, 0x00	; 0
  data /=340;
     520:	80 2b       	or	r24, r16
     522:	91 2b       	or	r25, r17
     524:	64 e5       	ldi	r22, 0x54	; 84
     526:	71 e0       	ldi	r23, 0x01	; 1
     528:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divmodhi4>
     52c:	9b 01       	movw	r18, r22
     52e:	2c 5d       	subi	r18, 0xDC	; 220
     530:	3f 4f       	sbci	r19, 0xFF	; 255
  data +=36;
  return data;
}
     532:	c9 01       	movw	r24, r18
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <I2C_Read_Gyro_Z>:
    data = LPF_Get_Filtered_Value(4, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Z(void){
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
     542:	87 e4       	ldi	r24, 0x47	; 71
     544:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     548:	f8 2e       	mov	r15, r24
     54a:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
     54c:	88 e4       	ldi	r24, 0x48	; 72
     54e:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	e8 2a       	or	r14, r24
     556:	f9 2a       	or	r15, r25
     558:	00 27       	eor	r16, r16
     55a:	f7 fc       	sbrc	r15, 7
     55c:	00 95       	com	r16
     55e:	10 2f       	mov	r17, r16
     560:	85 e0       	ldi	r24, 0x05	; 5
     562:	b8 01       	movw	r22, r16
     564:	a7 01       	movw	r20, r14
     566:	0e 94 13 07 	call	0xe26	; 0xe26 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     56a:	cb 01       	movw	r24, r22
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	08 95       	ret

00000576 <I2C_Read_Gyro_Y>:
    data = LPF_Get_Filtered_Value(3, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Y(void){
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x45);
     57e:	85 e4       	ldi	r24, 0x45	; 69
     580:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     584:	f8 2e       	mov	r15, r24
     586:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
     588:	86 e4       	ldi	r24, 0x46	; 70
     58a:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	e8 2a       	or	r14, r24
     592:	f9 2a       	or	r15, r25
     594:	00 27       	eor	r16, r16
     596:	f7 fc       	sbrc	r15, 7
     598:	00 95       	com	r16
     59a:	10 2f       	mov	r17, r16
     59c:	84 e0       	ldi	r24, 0x04	; 4
     59e:	b8 01       	movw	r22, r16
     5a0:	a7 01       	movw	r20, r14
     5a2:	0e 94 13 07 	call	0xe26	; 0xe26 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5a6:	cb 01       	movw	r24, r22
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <I2C_Read_Gyro_X>:
    data = LPF_Get_Filtered_Value(2, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_X(void){
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
     5ba:	83 e4       	ldi	r24, 0x43	; 67
     5bc:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     5c0:	f8 2e       	mov	r15, r24
     5c2:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
     5c4:	84 e4       	ldi	r24, 0x44	; 68
     5c6:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	e8 2a       	or	r14, r24
     5ce:	f9 2a       	or	r15, r25
     5d0:	00 27       	eor	r16, r16
     5d2:	f7 fc       	sbrc	r15, 7
     5d4:	00 95       	com	r16
     5d6:	10 2f       	mov	r17, r16
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	b8 01       	movw	r22, r16
     5dc:	a7 01       	movw	r20, r14
     5de:	0e 94 13 07 	call	0xe26	; 0xe26 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5e2:	cb 01       	movw	r24, r22
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	08 95       	ret

000005ee <I2C_Read_Acc_Z>:
    data = LPF_Get_Filtered_Value(1, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Z(void){
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     5fc:	f8 2e       	mov	r15, r24
     5fe:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
     600:	80 e4       	ldi	r24, 0x40	; 64
     602:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	e8 2a       	or	r14, r24
     60a:	f9 2a       	or	r15, r25
     60c:	00 27       	eor	r16, r16
     60e:	f7 fc       	sbrc	r15, 7
     610:	00 95       	com	r16
     612:	10 2f       	mov	r17, r16
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	b8 01       	movw	r22, r16
     618:	a7 01       	movw	r20, r14
     61a:	0e 94 13 07 	call	0xe26	; 0xe26 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     61e:	cb 01       	movw	r24, r22
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <I2C_Read_Acc_Y>:
    data = LPF_Get_Filtered_Value(0, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Y(void){
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
     632:	8d e3       	ldi	r24, 0x3D	; 61
     634:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     638:	f8 2e       	mov	r15, r24
     63a:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
     63c:	8e e3       	ldi	r24, 0x3E	; 62
     63e:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	e8 2a       	or	r14, r24
     646:	f9 2a       	or	r15, r25
     648:	00 27       	eor	r16, r16
     64a:	f7 fc       	sbrc	r15, 7
     64c:	00 95       	com	r16
     64e:	10 2f       	mov	r17, r16
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	b8 01       	movw	r22, r16
     654:	a7 01       	movw	r20, r14
     656:	0e 94 13 07 	call	0xe26	; 0xe26 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     65a:	cb 01       	movw	r24, r22
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	08 95       	ret

00000666 <I2C_Read_Acc_X>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
}

int16_t I2C_Read_Acc_X(void){
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
     66e:	8b e3       	ldi	r24, 0x3B	; 59
     670:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  data <<= 8;
     674:	f8 2e       	mov	r15, r24
     676:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
     678:	8c e3       	ldi	r24, 0x3C	; 60
     67a:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	e8 2a       	or	r14, r24
     682:	f9 2a       	or	r15, r25
     684:	00 27       	eor	r16, r16
     686:	f7 fc       	sbrc	r15, 7
     688:	00 95       	com	r16
     68a:	10 2f       	mov	r17, r16
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	b8 01       	movw	r22, r16
     690:	a7 01       	movw	r20, r14
     692:	0e 94 13 07 	call	0xe26	; 0xe26 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     696:	cb 01       	movw	r24, r22
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	08 95       	ret

000006a2 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     6a2:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     6a6:	10 92 23 01 	sts	0x0123, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     6aa:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     6ae:	0e 94 16 02 	call	0x42c	; 0x42c <I2C_Get_Device_Address>
     6b2:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     6b6:	8f 5f       	subi	r24, 0xFF	; 255
     6b8:	80 93 23 01 	sts	0x0123, r24
  #ifdef LPF_EN
	LPF_Init();
     6bc:	0e 94 78 07 	call	0xef0	; 0xef0 <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	6a e0       	ldi	r22, 0x0A	; 10
     6c4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	6a e0       	ldi	r22, 0x0A	; 10
     6cc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	6a e0       	ldi	r22, 0x0A	; 10
     6d4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	6a e0       	ldi	r22, 0x0A	; 10
     6dc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	6a e0       	ldi	r22, 0x0A	; 10
     6e4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
     6e8:	85 e0       	ldi	r24, 0x05	; 5
     6ea:	6a e0       	ldi	r22, 0x0A	; 10
     6ec:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LPF_Set_Alpha>
  #endif
}
     6f0:	08 95       	ret

000006f2 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     6f2:	10 92 24 01 	sts	0x0124, r1
  debug.datareg=0;
     6f6:	10 92 25 01 	sts	0x0125, r1
  debug.databsy=1;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 26 01 	sts	0x0126, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     704:	fc 01       	movw	r30, r24
     706:	ec 5d       	subi	r30, 0xDC	; 220
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	13 82       	std	Z+3, r1	; 0x03
     70c:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     70e:	80 32       	cpi	r24, 0x20	; 32
     710:	91 05       	cpc	r25, r1
     712:	c1 f7       	brne	.-16     	; 0x704 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     714:	10 92 47 01 	sts	0x0147, r1
     718:	e8 e4       	ldi	r30, 0x48	; 72
     71a:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     71c:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	e0 35       	cpi	r30, 0x50	; 80
     722:	f8 07       	cpc	r31, r24
     724:	d9 f7       	brne	.-10     	; 0x71c <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     726:	10 82       	st	Z, r1
}
     728:	08 95       	ret

0000072a <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     72a:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     72c:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     72e:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     736:	e8 e6       	ldi	r30, 0x68	; 104
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     740:	ec e6       	ldi	r30, 0x6C	; 108
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	80 64       	ori	r24, 0x40	; 64
     748:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     74a:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     74c:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     74e:	08 95       	ret

00000750 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     754:	ee e6       	ldi	r30, 0x6E	; 110
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	10 82       	st	Z, r1
  TCNT0 =200;
     75a:	88 ec       	ldi	r24, 0xC8	; 200
     75c:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     766:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     768:	08 95       	ret

0000076a <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     76a:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     76e:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     770:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     772:	08 95       	ret

00000774 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     774:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     776:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     778:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     77a:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     77c:	08 95       	ret

0000077e <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     77e:	5d 9a       	sbi	0x0b, 5	; 11
}
     780:	08 95       	ret

00000782 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     782:	5d 98       	cbi	0x0b, 5	; 11
}
     784:	08 95       	ret

00000786 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	11 f4       	brne	.+4      	; 0x78e <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     78a:	5d 9a       	sbi	0x0b, 5	; 11
     78c:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     78e:	5d 98       	cbi	0x0b, 5	; 11
     790:	08 95       	ret

00000792 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     792:	86 b1       	in	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	26 e0       	ldi	r18, 0x06	; 6
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	2a 95       	dec	r18
     79e:	e1 f7       	brne	.-8      	; 0x798 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     7a0:	81 70       	andi	r24, 0x01	; 1
     7a2:	08 95       	ret

000007a4 <debug_delay>:

void debug_delay(uint16_t val){
     7a4:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     7a6:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     7ac:	86 b5       	in	r24, 0x26	; 38
     7ae:	82 33       	cpi	r24, 0x32	; 50
     7b0:	e8 f3       	brcs	.-6      	; 0x7ac <debug_delay+0x8>
    TCNT0=0;
     7b2:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     7b4:	86 b5       	in	r24, 0x26	; 38
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	82 17       	cp	r24, r18
     7ba:	93 07       	cpc	r25, r19
     7bc:	d8 f3       	brcs	.-10     	; 0x7b4 <debug_delay+0x10>
  TCCR0B=0;
     7be:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     7c0:	08 95       	ret

000007c2 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     7c2:	80 91 1c 01 	lds	r24, 0x011C
     7c6:	90 91 1d 01 	lds	r25, 0x011D
     7ca:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     7ce:	08 95       	ret

000007d0 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     7d0:	80 91 1e 01 	lds	r24, 0x011E
     7d4:	90 91 1f 01 	lds	r25, 0x011F
     7d8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     7dc:	08 95       	ret

000007de <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     7de:	80 91 20 01 	lds	r24, 0x0120
     7e2:	90 91 21 01 	lds	r25, 0x0121
     7e6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     7ea:	08 95       	ret

000007ec <debug_tx_byte>:


void debug_tx_byte(uint8_t val){
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	df 93       	push	r29
     7f8:	cf 93       	push	r28
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	2a 97       	sbiw	r28, 0x0a	; 10
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     80a:	fe 01       	movw	r30, r28
     80c:	31 96       	adiw	r30, 0x01	; 1
     80e:	9a e0       	ldi	r25, 0x0A	; 10
     810:	df 01       	movw	r26, r30
     812:	1d 92       	st	X+, r1
     814:	9a 95       	dec	r25
     816:	e9 f7       	brne	.-6      	; 0x812 <debug_tx_byte+0x26>
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9a 87       	std	Y+10, r25	; 0x0a
     81c:	fe 01       	movw	r30, r28
     81e:	32 96       	adiw	r30, 0x02	; 2
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     824:	48 2f       	mov	r20, r24
     826:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     828:	61 e0       	ldi	r22, 0x01	; 1


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     82a:	ca 01       	movw	r24, r20
     82c:	02 2e       	mov	r0, r18
     82e:	02 c0       	rjmp	.+4      	; 0x834 <debug_tx_byte+0x48>
     830:	95 95       	asr	r25
     832:	87 95       	ror	r24
     834:	0a 94       	dec	r0
     836:	e2 f7       	brpl	.-8      	; 0x830 <debug_tx_byte+0x44>
     838:	80 ff       	sbrs	r24, 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <debug_tx_byte+0x54>
	  buf[i+1]=1;
     83c:	60 83       	st	Z, r22
     83e:	01 c0       	rjmp	.+2      	; 0x842 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     840:	10 82       	st	Z, r1
     842:	2f 5f       	subi	r18, 0xFF	; 255
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	31 96       	adiw	r30, 0x01	; 1
}


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     848:	28 30       	cpi	r18, 0x08	; 8
     84a:	31 05       	cpc	r19, r1
     84c:	71 f7       	brne	.-36     	; 0x82a <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     84e:	df b6       	in	r13, 0x3f	; 63
  cli();
     850:	f8 94       	cli
     852:	8e 01       	movw	r16, r28
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     858:	3b e0       	ldi	r19, 0x0B	; 11
     85a:	e3 2e       	mov	r14, r19
     85c:	f1 2c       	mov	r15, r1
     85e:	ec 0e       	add	r14, r28
     860:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     862:	f8 01       	movw	r30, r16
     864:	80 81       	ld	r24, Z
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	11 f4       	brne	.+4      	; 0x86e <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     86a:	5d 9a       	sbi	0x0b, 5	; 11
     86c:	01 c0       	rjmp	.+2      	; 0x870 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     86e:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     870:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <debug_delay_index_0>
     874:	0f 5f       	subi	r16, 0xFF	; 255
     876:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     878:	0e 15       	cp	r16, r14
     87a:	1f 05       	cpc	r17, r15
     87c:	91 f7       	brne	.-28     	; 0x862 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     87e:	df be       	out	0x3f, r13	; 63
}
     880:	2a 96       	adiw	r28, 0x0a	; 10
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	08 95       	ret

0000089c <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     8a2:	36 9b       	sbis	0x06, 6	; 6
     8a4:	21 c0       	rjmp	.+66     	; 0x8e8 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	17 c0       	rjmp	.+46     	; 0x8d8 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     8aa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     8ae:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     8b0:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     8b2:	17 30       	cpi	r17, 0x07	; 7
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <debug_rx_byte+0x1c>
	    val>>=1;
     8b6:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     8b8:	1f 5f       	subi	r17, 0xFF	; 255
     8ba:	18 30       	cpi	r17, 0x08	; 8
     8bc:	b1 f7       	brne	.-20     	; 0x8aa <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     8be:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     8c2:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     8c4:	f6 fc       	sbrc	r15, 6
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <debug_rx_byte+0x3a>
     8c8:	86 ff       	sbrs	r24, 6
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     8cc:	00 93 25 01 	sts	0x0125, r16
	  debug.error=0x00;
     8d0:	10 92 24 01 	sts	0x0124, r1
     8d4:	03 c0       	rjmp	.+6      	; 0x8dc <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 24 01 	sts	0x0124, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     8dc:	80 91 25 01 	lds	r24, 0x0125
}
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     8e8:	0e 94 ef 03 	call	0x7de	; 0x7de <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     8ec:	f6 b0       	in	r15, 0x06	; 6
     8ee:	00 e0       	ldi	r16, 0x00	; 0
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	db cf       	rjmp	.-74     	; 0x8aa <debug_rx_byte+0xe>

000008f4 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     8f4:	80 91 25 01 	lds	r24, 0x0125
}
     8f8:	08 95       	ret

000008fa <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     8fa:	10 92 25 01 	sts	0x0125, r1
}
     8fe:	08 95       	ret

00000900 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     900:	80 93 25 01 	sts	0x0125, r24
}
     904:	08 95       	ret

00000906 <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	7b 01       	movw	r14, r22
     91a:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	e8 16       	cp	r14, r24
     920:	f1 04       	cpc	r15, r1
     922:	01 05       	cpc	r16, r1
     924:	11 05       	cpc	r17, r1
     926:	09 f0       	breq	.+2      	; 0x92a <debug_tx_hex+0x24>
     928:	30 f4       	brcc	.+12     	; 0x936 <debug_tx_hex+0x30>
     92a:	c8 e0       	ldi	r28, 0x08	; 8
     92c:	d0 e0       	ldi	r29, 0x00	; 0
     92e:	62 e0       	ldi	r22, 0x02	; 2
     930:	c6 2e       	mov	r12, r22
     932:	d1 2c       	mov	r13, r1
     934:	14 c0       	rjmp	.+40     	; 0x95e <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	e8 16       	cp	r14, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	f8 06       	cpc	r15, r24
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	08 07       	cpc	r16, r24
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	18 07       	cpc	r17, r24
     946:	30 f0       	brcs	.+12     	; 0x954 <debug_tx_hex+0x4e>
     948:	c0 e2       	ldi	r28, 0x20	; 32
     94a:	d0 e0       	ldi	r29, 0x00	; 0
     94c:	58 e0       	ldi	r21, 0x08	; 8
     94e:	c5 2e       	mov	r12, r21
     950:	d1 2c       	mov	r13, r1
     952:	05 c0       	rjmp	.+10     	; 0x95e <debug_tx_hex+0x58>
     954:	c0 e1       	ldi	r28, 0x10	; 16
     956:	d0 e0       	ldi	r29, 0x00	; 0
     958:	44 e0       	ldi	r20, 0x04	; 4
     95a:	c4 2e       	mov	r12, r20
     95c:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     95e:	80 e3       	ldi	r24, 0x30	; 48
     960:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
  debug_tx_byte('x');
     964:	88 e7       	ldi	r24, 0x78	; 120
     966:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
     96a:	bb 24       	eor	r11, r11
     96c:	17 c0       	rjmp	.+46     	; 0x99c <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     96e:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     970:	d8 01       	movw	r26, r16
     972:	c7 01       	movw	r24, r14
     974:	0c 2e       	mov	r0, r28
     976:	04 c0       	rjmp	.+8      	; 0x980 <debug_tx_hex+0x7a>
     978:	b6 95       	lsr	r27
     97a:	a7 95       	ror	r26
     97c:	97 95       	ror	r25
     97e:	87 95       	ror	r24
     980:	0a 94       	dec	r0
     982:	d2 f7       	brpl	.-12     	; 0x978 <debug_tx_hex+0x72>
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	8f 70       	andi	r24, 0x0F	; 15
     988:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     98a:	8a 30       	cpi	r24, 0x0A	; 10
     98c:	91 05       	cpc	r25, r1
     98e:	10 f0       	brcs	.+4      	; 0x994 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     990:	c7 96       	adiw	r24, 0x37	; 55
     992:	01 c0       	rjmp	.+2      	; 0x996 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     994:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     996:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     99a:	b3 94       	inc	r11
     99c:	8b 2d       	mov	r24, r11
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	8c 15       	cp	r24, r12
     9a2:	9d 05       	cpc	r25, r13
     9a4:	20 f3       	brcs	.-56     	; 0x96e <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	08 95       	ret

000009ba <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     9ba:	af 92       	push	r10
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	7b 01       	movw	r14, r22
     9d0:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     9d2:	6f 3f       	cpi	r22, 0xFF	; 255
     9d4:	71 05       	cpc	r23, r1
     9d6:	81 05       	cpc	r24, r1
     9d8:	91 05       	cpc	r25, r1
     9da:	09 f0       	breq	.+2      	; 0x9de <debug_tx_bin+0x24>
     9dc:	18 f4       	brcc	.+6      	; 0x9e4 <debug_tx_bin+0x2a>
     9de:	f7 e0       	ldi	r31, 0x07	; 7
     9e0:	df 2e       	mov	r13, r31
     9e2:	0d c0       	rjmp	.+26     	; 0x9fe <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     9e4:	60 30       	cpi	r22, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	73 07       	cpc	r23, r19
     9ea:	31 e0       	ldi	r19, 0x01	; 1
     9ec:	83 07       	cpc	r24, r19
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	93 07       	cpc	r25, r19
     9f2:	18 f0       	brcs	.+6      	; 0x9fa <debug_tx_bin+0x40>
     9f4:	ef e1       	ldi	r30, 0x1F	; 31
     9f6:	de 2e       	mov	r13, r30
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <debug_tx_bin+0x44>
     9fa:	7f e0       	ldi	r23, 0x0F	; 15
     9fc:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     9fe:	80 e3       	ldi	r24, 0x30	; 48
     a00:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
  debug_tx_byte('b');
     a04:	82 e6       	ldi	r24, 0x62	; 98
     a06:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
     a0a:	c0 e0       	ldi	r28, 0x00	; 0
     a0c:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     a0e:	cd 2c       	mov	r12, r13
     a10:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     a12:	56 01       	movw	r10, r12
     a14:	08 94       	sec
     a16:	a1 1c       	adc	r10, r1
     a18:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     a1a:	c6 01       	movw	r24, r12
     a1c:	8c 1b       	sub	r24, r28
     a1e:	9d 0b       	sbc	r25, r29
     a20:	a8 01       	movw	r20, r16
     a22:	97 01       	movw	r18, r14
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <debug_tx_bin+0x74>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <debug_tx_bin+0x6c>
     a32:	da 01       	movw	r26, r20
     a34:	c9 01       	movw	r24, r18
     a36:	81 70       	andi	r24, 0x01	; 1
     a38:	90 70       	andi	r25, 0x00	; 0
     a3a:	89 2b       	or	r24, r25
     a3c:	11 f0       	breq	.+4      	; 0xa42 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     a3e:	81 e3       	ldi	r24, 0x31	; 49
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     a42:	80 e3       	ldi	r24, 0x30	; 48
     a44:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
     a48:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     a4a:	ca 15       	cp	r28, r10
     a4c:	db 05       	cpc	r29, r11
     a4e:	29 f7       	brne	.-54     	; 0xa1a <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	08 95       	ret

00000a66 <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
  debug_tx_byte('\n');
     a6c:	8a e0       	ldi	r24, 0x0A	; 10
     a6e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
}
     a72:	08 95       	ret

00000a74 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     a74:	80 e2       	ldi	r24, 0x20	; 32
     a76:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
}
     a7a:	08 95       	ret

00000a7c <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     a7c:	8c e2       	ldi	r24, 0x2C	; 44
     a7e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
}
     a82:	08 95       	ret

00000a84 <debug_tx_text>:

void debug_tx_text(char *str){
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	ec 01       	movw	r28, r24
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     a90:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
        i++;
     a94:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     a96:	fe 01       	movw	r30, r28
     a98:	e1 0f       	add	r30, r17
     a9a:	f1 1d       	adc	r31, r1
     a9c:	80 81       	ld	r24, Z
     a9e:	88 23       	and	r24, r24
     aa0:	b9 f7       	brne	.-18     	; 0xa90 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	08 95       	ret

00000aaa <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     aaa:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_nl();
     aae:	0e 94 33 05 	call	0xa66	; 0xa66 <debug_tx_nl>
}
     ab2:	08 95       	ret

00000ab4 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     ab4:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     ab8:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
}
     abc:	08 95       	ret

00000abe <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     abe:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_cm();
     ac2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <debug_tx_cm>
}
     ac6:	08 95       	ret

00000ac8 <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	6b 01       	movw	r12, r22
     ad8:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     ada:	61 15       	cp	r22, r1
     adc:	71 05       	cpc	r23, r1
     ade:	81 05       	cpc	r24, r1
     ae0:	91 05       	cpc	r25, r1
     ae2:	31 f4       	brne	.+12     	; 0xaf0 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     ae4:	10 92 48 01 	sts	0x0148, r1
    debug.input_num_digits=1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 50 01 	sts	0x0150, r24
     aee:	23 c0       	rjmp	.+70     	; 0xb36 <debug_determine_digit_numbers+0x6e>
     af0:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     af2:	0b 2d       	mov	r16, r11
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	0c 5d       	subi	r16, 0xDC	; 220
     af8:	1e 4f       	sbci	r17, 0xFE	; 254
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	2a e0       	ldi	r18, 0x0A	; 10
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__udivmodsi4>
     b0a:	f8 01       	movw	r30, r16
     b0c:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     b0e:	c7 01       	movw	r24, r14
     b10:	b6 01       	movw	r22, r12
     b12:	2a e0       	ldi	r18, 0x0A	; 10
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__udivmodsi4>
     b1e:	c9 01       	movw	r24, r18
     b20:	da 01       	movw	r26, r20
     b22:	6c 01       	movw	r12, r24
     b24:	7d 01       	movw	r14, r26
      i++;
     b26:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     b28:	c1 14       	cp	r12, r1
     b2a:	d1 04       	cpc	r13, r1
     b2c:	e1 04       	cpc	r14, r1
     b2e:	f1 04       	cpc	r15, r1
     b30:	01 f7       	brne	.-64     	; 0xaf2 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     b32:	b0 92 50 01 	sts	0x0150, r11
  }
}
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	08 95       	ret

00000b46 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     b46:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     b48:	10 91 50 01 	lds	r17, 0x0150
     b4c:	09 c0       	rjmp	.+18     	; 0xb60 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     b4e:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     b50:	e1 2f       	mov	r30, r17
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	ec 5d       	subi	r30, 0xDC	; 220
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
     b58:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     b5a:	80 5d       	subi	r24, 0xD0	; 208
     b5c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     b60:	11 23       	and	r17, r17
     b62:	a9 f7       	brne	.-22     	; 0xb4e <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     b64:	1f 91       	pop	r17
     b66:	08 95       	ret

00000b68 <debug_tx_number>:

void debug_tx_number(int32_t num){
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
  if(num<0){
     b74:	97 ff       	sbrs	r25, 7
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <debug_tx_number+0x26>
    debug_tx_byte('-');
     b78:	8d e2       	ldi	r24, 0x2D	; 45
     b7a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <debug_tx_byte>
	num=-num;
     b7e:	10 95       	com	r17
     b80:	00 95       	com	r16
     b82:	f0 94       	com	r15
     b84:	e0 94       	com	r14
     b86:	e1 1c       	adc	r14, r1
     b88:	f1 1c       	adc	r15, r1
     b8a:	01 1d       	adc	r16, r1
     b8c:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     b8e:	c8 01       	movw	r24, r16
     b90:	b7 01       	movw	r22, r14
     b92:	0e 94 64 05 	call	0xac8	; 0xac8 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     b96:	0e 94 a3 05 	call	0xb46	; 0xb46 <debug_tx_number_digits>
}
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	08 95       	ret

00000ba4 <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     ba4:	0e 94 b4 05 	call	0xb68	; 0xb68 <debug_tx_number>
  debug_tx_nl();
     ba8:	0e 94 33 05 	call	0xa66	; 0xa66 <debug_tx_nl>
}
     bac:	08 95       	ret

00000bae <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     bae:	0e 94 b4 05 	call	0xb68	; 0xb68 <debug_tx_number>
  debug_tx_sp();
     bb2:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
}
     bb6:	08 95       	ret

00000bb8 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     bb8:	0e 94 b4 05 	call	0xb68	; 0xb68 <debug_tx_number>
  debug_tx_text(",");
     bbc:	8e e0       	ldi	r24, 0x0E	; 14
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
}
     bc4:	08 95       	ret

00000bc6 <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     bc6:	0e 94 83 04 	call	0x906	; 0x906 <debug_tx_hex>
  debug_tx_nl();
     bca:	0e 94 33 05 	call	0xa66	; 0xa66 <debug_tx_nl>
}
     bce:	08 95       	ret

00000bd0 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     bd0:	0e 94 83 04 	call	0x906	; 0x906 <debug_tx_hex>
  debug_tx_sp();
     bd4:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
}
     bd8:	08 95       	ret

00000bda <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     bda:	0e 94 83 04 	call	0x906	; 0x906 <debug_tx_hex>
  debug_tx_text(",");
     bde:	8e e0       	ldi	r24, 0x0E	; 14
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
}
     be6:	08 95       	ret

00000be8 <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	7a 01       	movw	r14, r20
     bf2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     bf4:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     bf8:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
  debug_tx_number_nl(num);
     bfc:	c8 01       	movw	r24, r16
     bfe:	b7 01       	movw	r22, r14
     c00:	0e 94 d2 05 	call	0xba4	; 0xba4 <debug_tx_number_nl>
}
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	7a 01       	movw	r14, r20
     c18:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c1a:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     c1e:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
  debug_tx_number_sp(num);
     c22:	c8 01       	movw	r24, r16
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 d7 05 	call	0xbae	; 0xbae <debug_tx_number_sp>
}
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	08 95       	ret

00000c34 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	7a 01       	movw	r14, r20
     c3e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c40:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     c44:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
  debug_tx_number_cm(num);
     c48:	c8 01       	movw	r24, r16
     c4a:	b7 01       	movw	r22, r14
     c4c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <debug_tx_number_cm>
}
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	08 95       	ret

00000c5a <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	7a 01       	movw	r14, r20
     c64:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c66:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     c6a:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     c6e:	c8 01       	movw	r24, r16
     c70:	b7 01       	movw	r22, r14
     c72:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <debug_tx_number_hex_nl>
}
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	08 95       	ret

00000c80 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	7a 01       	movw	r14, r20
     c8a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c8c:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     c90:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     c94:	c8 01       	movw	r24, r16
     c96:	b7 01       	movw	r22, r14
     c98:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <debug_tx_number_hex_sp>
}
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	7a 01       	movw	r14, r20
     cb0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     cb2:	0e 94 42 05 	call	0xa84	; 0xa84 <debug_tx_text>
  debug_tx_sp();
     cb6:	0e 94 3a 05 	call	0xa74	; 0xa74 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     cba:	c8 01       	movw	r24, r16
     cbc:	b7 01       	movw	r22, r14
     cbe:	0e 94 ed 05 	call	0xbda	; 0xbda <debug_tx_number_hex_cm>
}
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     ccc:	e4 e2       	ldi	r30, 0x24	; 36
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	e8 0f       	add	r30, r24
     cd2:	f1 1d       	adc	r31, r1
     cd4:	83 81       	ldd	r24, Z+3	; 0x03
}
     cd6:	08 95       	ret

00000cd8 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     cd8:	80 91 47 01 	lds	r24, 0x0147
}
     cdc:	08 95       	ret

00000cde <debug_flush_buf>:

void debug_flush_buf(void){
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     ce2:	fc 01       	movw	r30, r24
     ce4:	ec 5d       	subi	r30, 0xDC	; 220
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	13 82       	std	Z+3, r1	; 0x03
     cea:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     cec:	80 32       	cpi	r24, 0x20	; 32
     cee:	91 05       	cpc	r25, r1
     cf0:	c1 f7       	brne	.-16     	; 0xce2 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     cf2:	10 92 47 01 	sts	0x0147, r1
}
     cf6:	08 95       	ret

00000cf8 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     cf8:	80 91 26 01 	lds	r24, 0x0126
}
     cfc:	08 95       	ret

00000cfe <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     cfe:	80 91 26 01 	lds	r24, 0x0126
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     d02:	88 23       	and	r24, r24
     d04:	11 f0       	breq	.+4      	; 0xd0a <debug_data_available_rx_buf+0xc>
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	08 c0       	rjmp	.+16     	; 0xd1a <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d0a:	80 91 47 01 	lds	r24, 0x0147
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <debug_data_available_rx_buf+0x18>
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     d1a:	89 2f       	mov	r24, r25
     d1c:	08 95       	ret

00000d1e <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d1e:	80 91 47 01 	lds	r24, 0x0147
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     d22:	08 95       	ret

00000d24 <debug_init>:

void debug_init(void){
  debug_struct_init();
     d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <debug_struct_init>
  debug_timings_init();
     d28:	0e 94 95 03 	call	0x72a	; 0x72a <debug_timings_init>
  debug_gpio_init();
     d2c:	0e 94 ba 03 	call	0x774	; 0x774 <debug_gpio_init>
}
     d30:	08 95       	ret

00000d32 <__vector_4>:


ISR(ISR_PCINT_VECT){
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
  debug.databsy=1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 26 01 	sts	0x0126, r24
  uint8_t val=debug_rx_byte();
     d5a:	0e 94 4e 04 	call	0x89c	; 0x89c <debug_rx_byte>
     d5e:	98 2f       	mov	r25, r24
  if(debug.error==0){
     d60:	80 91 24 01 	lds	r24, 0x0124
     d64:	88 23       	and	r24, r24
     d66:	99 f4       	brne	.+38     	; 0xd8e <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     d68:	e0 91 47 01 	lds	r30, 0x0147
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	ec 5d       	subi	r30, 0xDC	; 220
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     d74:	80 91 47 01 	lds	r24, 0x0147
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	80 93 47 01 	sts	0x0147, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     d7e:	80 91 47 01 	lds	r24, 0x0147
     d82:	81 32       	cpi	r24, 0x21	; 33
     d84:	10 f0       	brcs	.+4      	; 0xd8a <__vector_4+0x58>
	  debug.bufindex=0;
     d86:	10 92 47 01 	sts	0x0147, r1
	}
    debug_timer_start();
     d8a:	0e 94 a8 03 	call	0x750	; 0x750 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <__vector_16>:

ISR(TIMER_OVF_VECT){
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     dba:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     dbe:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     dc0:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     dc2:	10 92 26 01 	sts	0x0126, r1
}
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     dd0:	e1 e5       	ldi	r30, 0x51	; 81
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     dd4:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     dd6:	11 82       	std	Z+1, r1	; 0x01
     dd8:	12 82       	std	Z+2, r1	; 0x02
     dda:	13 82       	std	Z+3, r1	; 0x03
     ddc:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     dde:	15 82       	std	Z+5, r1	; 0x05
     de0:	16 82       	std	Z+6, r1	; 0x06
     de2:	17 82       	std	Z+7, r1	; 0x07
     de4:	10 86       	std	Z+8, r1	; 0x08
     de6:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	e7 38       	cpi	r30, 0x87	; 135
     dec:	f8 07       	cpc	r31, r24
     dee:	91 f7       	brne	.-28     	; 0xdd4 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     df0:	08 95       	ret

00000df2 <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	23 e0       	ldi	r18, 0x03	; 3
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	2a 95       	dec	r18
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <LPF_Set_Alpha+0x6>
     e00:	e8 0f       	add	r30, r24
     e02:	f9 1f       	adc	r31, r25
     e04:	ef 5a       	subi	r30, 0xAF	; 175
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	60 83       	st	Z, r22
}
     e0a:	08 95       	ret

00000e0c <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fc 01       	movw	r30, r24
     e10:	33 e0       	ldi	r19, 0x03	; 3
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	3a 95       	dec	r19
     e18:	e1 f7       	brne	.-8      	; 0xe12 <LPF_Get_Alpha+0x6>
     e1a:	e8 0f       	add	r30, r24
     e1c:	f9 1f       	adc	r31, r25
     e1e:	ef 5a       	subi	r30, 0xAF	; 175
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     e22:	80 81       	ld	r24, Z
     e24:	08 95       	ret

00000e26 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	1a 01       	movw	r2, r20
     e48:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	6c 01       	movw	r12, r24
     e4e:	53 e0       	ldi	r21, 0x03	; 3
     e50:	cc 0c       	add	r12, r12
     e52:	dd 1c       	adc	r13, r13
     e54:	5a 95       	dec	r21
     e56:	e1 f7       	brne	.-8      	; 0xe50 <LPF_Get_Filtered_Value+0x2a>
     e58:	c8 0e       	add	r12, r24
     e5a:	d9 1e       	adc	r13, r25
     e5c:	81 e5       	ldi	r24, 0x51	; 81
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	c8 0e       	add	r12, r24
     e62:	d9 1e       	adc	r13, r25
     e64:	f6 01       	movw	r30, r12
     e66:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     e68:	62 2e       	mov	r6, r18
     e6a:	77 24       	eor	r7, r7
     e6c:	88 24       	eor	r8, r8
     e6e:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     e70:	64 e6       	ldi	r22, 0x64	; 100
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	62 1b       	sub	r22, r18
     e76:	71 09       	sbc	r23, r1
     e78:	88 27       	eor	r24, r24
     e7a:	77 fd       	sbrc	r23, 7
     e7c:	80 95       	com	r24
     e7e:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     e80:	45 e0       	ldi	r20, 0x05	; 5
     e82:	a4 2e       	mov	r10, r20
     e84:	b1 2c       	mov	r11, r1
     e86:	ac 0c       	add	r10, r12
     e88:	bd 1c       	adc	r11, r13
     e8a:	25 81       	ldd	r18, Z+5	; 0x05
     e8c:	36 81       	ldd	r19, Z+6	; 0x06
     e8e:	47 81       	ldd	r20, Z+7	; 0x07
     e90:	50 85       	ldd	r21, Z+8	; 0x08
     e92:	0e 94 bc 09 	call	0x1378	; 0x1378 <__mulsi3>
     e96:	7b 01       	movw	r14, r22
     e98:	8c 01       	movw	r16, r24
     e9a:	c2 01       	movw	r24, r4
     e9c:	b1 01       	movw	r22, r2
     e9e:	a4 01       	movw	r20, r8
     ea0:	93 01       	movw	r18, r6
     ea2:	0e 94 bc 09 	call	0x1378	; 0x1378 <__mulsi3>
     ea6:	e6 0e       	add	r14, r22
     ea8:	f7 1e       	adc	r15, r23
     eaa:	08 1f       	adc	r16, r24
     eac:	19 1f       	adc	r17, r25
     eae:	c8 01       	movw	r24, r16
     eb0:	b7 01       	movw	r22, r14
     eb2:	24 e6       	ldi	r18, 0x64	; 100
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	0e 94 10 0a 	call	0x1420	; 0x1420 <__divmodsi4>
     ebe:	ca 01       	movw	r24, r20
     ec0:	f6 01       	movw	r30, r12
     ec2:	25 83       	std	Z+5, r18	; 0x05
     ec4:	f5 01       	movw	r30, r10
     ec6:	31 83       	std	Z+1, r19	; 0x01
     ec8:	42 83       	std	Z+2, r20	; 0x02
     eca:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     ecc:	b9 01       	movw	r22, r18
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	9f 90       	pop	r9
     ee0:	8f 90       	pop	r8
     ee2:	7f 90       	pop	r7
     ee4:	6f 90       	pop	r6
     ee6:	5f 90       	pop	r5
     ee8:	4f 90       	pop	r4
     eea:	3f 90       	pop	r3
     eec:	2f 90       	pop	r2
     eee:	08 95       	ret

00000ef0 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     ef0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LPF_Struct_Init>
     ef4:	08 95       	ret

00000ef6 <atan>:
     ef6:	df 93       	push	r29
     ef8:	dd 27       	eor	r29, r29
     efa:	b9 2f       	mov	r27, r25
     efc:	bf 77       	andi	r27, 0x7F	; 127
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	48 07       	cpc	r20, r24
     f08:	5b 07       	cpc	r21, r27
     f0a:	10 f4       	brcc	.+4      	; 0xf10 <atan+0x1a>
     f0c:	d9 2f       	mov	r29, r25
     f0e:	67 d1       	rcall	.+718    	; 0x11de <inverse>
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	7f 93       	push	r23
     f16:	6f 93       	push	r22
     f18:	cc d1       	rcall	.+920    	; 0x12b2 <square>
     f1a:	e8 e6       	ldi	r30, 0x68	; 104
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	f2 d0       	rcall	.+484    	; 0x1104 <__fp_powser>
     f20:	24 d1       	rcall	.+584    	; 0x116a <__fp_round>
     f22:	2f 91       	pop	r18
     f24:	3f 91       	pop	r19
     f26:	4f 91       	pop	r20
     f28:	5f 91       	pop	r21
     f2a:	6c d1       	rcall	.+728    	; 0x1204 <__mulsf3x>
     f2c:	dd 23       	and	r29, r29
     f2e:	49 f0       	breq	.+18     	; 0xf42 <atan+0x4c>
     f30:	90 58       	subi	r25, 0x80	; 128
     f32:	a2 ea       	ldi	r26, 0xA2	; 162
     f34:	2a ed       	ldi	r18, 0xDA	; 218
     f36:	3f e0       	ldi	r19, 0x0F	; 15
     f38:	49 ec       	ldi	r20, 0xC9	; 201
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	d0 78       	andi	r29, 0x80	; 128
     f3e:	5d 27       	eor	r21, r29
     f40:	c8 d1       	rcall	.+912    	; 0x12d2 <__addsf3x>
     f42:	df 91       	pop	r29
     f44:	12 c1       	rjmp	.+548    	; 0x116a <__fp_round>

00000f46 <__divsf3>:
     f46:	0c d0       	rcall	.+24     	; 0xf60 <__divsf3x>
     f48:	10 c1       	rjmp	.+544    	; 0x116a <__fp_round>
     f4a:	08 d1       	rcall	.+528    	; 0x115c <__fp_pscB>
     f4c:	40 f0       	brcs	.+16     	; 0xf5e <__divsf3+0x18>
     f4e:	ff d0       	rcall	.+510    	; 0x114e <__fp_pscA>
     f50:	30 f0       	brcs	.+12     	; 0xf5e <__divsf3+0x18>
     f52:	21 f4       	brne	.+8      	; 0xf5c <__divsf3+0x16>
     f54:	5f 3f       	cpi	r21, 0xFF	; 255
     f56:	19 f0       	breq	.+6      	; 0xf5e <__divsf3+0x18>
     f58:	cc c0       	rjmp	.+408    	; 0x10f2 <__fp_inf>
     f5a:	51 11       	cpse	r21, r1
     f5c:	3a c1       	rjmp	.+628    	; 0x11d2 <__fp_szero>
     f5e:	cf c0       	rjmp	.+414    	; 0x10fe <__fp_nan>

00000f60 <__divsf3x>:
     f60:	15 d1       	rcall	.+554    	; 0x118c <__fp_split3>
     f62:	98 f3       	brcs	.-26     	; 0xf4a <__divsf3+0x4>

00000f64 <__divsf3_pse>:
     f64:	99 23       	and	r25, r25
     f66:	c9 f3       	breq	.-14     	; 0xf5a <__divsf3+0x14>
     f68:	55 23       	and	r21, r21
     f6a:	b1 f3       	breq	.-20     	; 0xf58 <__divsf3+0x12>
     f6c:	95 1b       	sub	r25, r21
     f6e:	55 0b       	sbc	r21, r21
     f70:	bb 27       	eor	r27, r27
     f72:	aa 27       	eor	r26, r26
     f74:	62 17       	cp	r22, r18
     f76:	73 07       	cpc	r23, r19
     f78:	84 07       	cpc	r24, r20
     f7a:	38 f0       	brcs	.+14     	; 0xf8a <__divsf3_pse+0x26>
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	22 0f       	add	r18, r18
     f82:	33 1f       	adc	r19, r19
     f84:	44 1f       	adc	r20, r20
     f86:	aa 1f       	adc	r26, r26
     f88:	a9 f3       	breq	.-22     	; 0xf74 <__divsf3_pse+0x10>
     f8a:	33 d0       	rcall	.+102    	; 0xff2 <__divsf3_pse+0x8e>
     f8c:	0e 2e       	mov	r0, r30
     f8e:	3a f0       	brmi	.+14     	; 0xf9e <__divsf3_pse+0x3a>
     f90:	e0 e8       	ldi	r30, 0x80	; 128
     f92:	30 d0       	rcall	.+96     	; 0xff4 <__divsf3_pse+0x90>
     f94:	91 50       	subi	r25, 0x01	; 1
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	e6 95       	lsr	r30
     f9a:	00 1c       	adc	r0, r0
     f9c:	ca f7       	brpl	.-14     	; 0xf90 <__divsf3_pse+0x2c>
     f9e:	29 d0       	rcall	.+82     	; 0xff2 <__divsf3_pse+0x8e>
     fa0:	fe 2f       	mov	r31, r30
     fa2:	27 d0       	rcall	.+78     	; 0xff2 <__divsf3_pse+0x8e>
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	bb 1f       	adc	r27, r27
     fac:	26 17       	cp	r18, r22
     fae:	37 07       	cpc	r19, r23
     fb0:	48 07       	cpc	r20, r24
     fb2:	ab 07       	cpc	r26, r27
     fb4:	b0 e8       	ldi	r27, 0x80	; 128
     fb6:	09 f0       	breq	.+2      	; 0xfba <__divsf3_pse+0x56>
     fb8:	bb 0b       	sbc	r27, r27
     fba:	80 2d       	mov	r24, r0
     fbc:	bf 01       	movw	r22, r30
     fbe:	ff 27       	eor	r31, r31
     fc0:	93 58       	subi	r25, 0x83	; 131
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255
     fc4:	2a f0       	brmi	.+10     	; 0xfd0 <__divsf3_pse+0x6c>
     fc6:	9e 3f       	cpi	r25, 0xFE	; 254
     fc8:	51 05       	cpc	r21, r1
     fca:	68 f0       	brcs	.+26     	; 0xfe6 <__divsf3_pse+0x82>
     fcc:	92 c0       	rjmp	.+292    	; 0x10f2 <__fp_inf>
     fce:	01 c1       	rjmp	.+514    	; 0x11d2 <__fp_szero>
     fd0:	5f 3f       	cpi	r21, 0xFF	; 255
     fd2:	ec f3       	brlt	.-6      	; 0xfce <__divsf3_pse+0x6a>
     fd4:	98 3e       	cpi	r25, 0xE8	; 232
     fd6:	dc f3       	brlt	.-10     	; 0xfce <__divsf3_pse+0x6a>
     fd8:	86 95       	lsr	r24
     fda:	77 95       	ror	r23
     fdc:	67 95       	ror	r22
     fde:	b7 95       	ror	r27
     fe0:	f7 95       	ror	r31
     fe2:	9f 5f       	subi	r25, 0xFF	; 255
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__divsf3_pse+0x74>
     fe6:	88 0f       	add	r24, r24
     fe8:	91 1d       	adc	r25, r1
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	97 f9       	bld	r25, 7
     ff0:	08 95       	ret
     ff2:	e1 e0       	ldi	r30, 0x01	; 1
     ff4:	66 0f       	add	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	bb 1f       	adc	r27, r27
     ffc:	62 17       	cp	r22, r18
     ffe:	73 07       	cpc	r23, r19
    1000:	84 07       	cpc	r24, r20
    1002:	ba 07       	cpc	r27, r26
    1004:	20 f0       	brcs	.+8      	; 0x100e <__divsf3_pse+0xaa>
    1006:	62 1b       	sub	r22, r18
    1008:	73 0b       	sbc	r23, r19
    100a:	84 0b       	sbc	r24, r20
    100c:	ba 0b       	sbc	r27, r26
    100e:	ee 1f       	adc	r30, r30
    1010:	88 f7       	brcc	.-30     	; 0xff4 <__divsf3_pse+0x90>
    1012:	e0 95       	com	r30
    1014:	08 95       	ret

00001016 <__fixsfsi>:
    1016:	04 d0       	rcall	.+8      	; 0x1020 <__fixunssfsi>
    1018:	68 94       	set
    101a:	b1 11       	cpse	r27, r1
    101c:	da c0       	rjmp	.+436    	; 0x11d2 <__fp_szero>
    101e:	08 95       	ret

00001020 <__fixunssfsi>:
    1020:	bd d0       	rcall	.+378    	; 0x119c <__fp_splitA>
    1022:	88 f0       	brcs	.+34     	; 0x1046 <__fixunssfsi+0x26>
    1024:	9f 57       	subi	r25, 0x7F	; 127
    1026:	90 f0       	brcs	.+36     	; 0x104c <__fixunssfsi+0x2c>
    1028:	b9 2f       	mov	r27, r25
    102a:	99 27       	eor	r25, r25
    102c:	b7 51       	subi	r27, 0x17	; 23
    102e:	a0 f0       	brcs	.+40     	; 0x1058 <__fixunssfsi+0x38>
    1030:	d1 f0       	breq	.+52     	; 0x1066 <__fixunssfsi+0x46>
    1032:	66 0f       	add	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	1a f0       	brmi	.+6      	; 0x1042 <__fixunssfsi+0x22>
    103c:	ba 95       	dec	r27
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__fixunssfsi+0x12>
    1040:	12 c0       	rjmp	.+36     	; 0x1066 <__fixunssfsi+0x46>
    1042:	b1 30       	cpi	r27, 0x01	; 1
    1044:	81 f0       	breq	.+32     	; 0x1066 <__fixunssfsi+0x46>
    1046:	c4 d0       	rcall	.+392    	; 0x11d0 <__fp_zero>
    1048:	b1 e0       	ldi	r27, 0x01	; 1
    104a:	08 95       	ret
    104c:	c1 c0       	rjmp	.+386    	; 0x11d0 <__fp_zero>
    104e:	67 2f       	mov	r22, r23
    1050:	78 2f       	mov	r23, r24
    1052:	88 27       	eor	r24, r24
    1054:	b8 5f       	subi	r27, 0xF8	; 248
    1056:	39 f0       	breq	.+14     	; 0x1066 <__fixunssfsi+0x46>
    1058:	b9 3f       	cpi	r27, 0xF9	; 249
    105a:	cc f3       	brlt	.-14     	; 0x104e <__fixunssfsi+0x2e>
    105c:	86 95       	lsr	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	b3 95       	inc	r27
    1064:	d9 f7       	brne	.-10     	; 0x105c <__fixunssfsi+0x3c>
    1066:	3e f4       	brtc	.+14     	; 0x1076 <__fixunssfsi+0x56>
    1068:	90 95       	com	r25
    106a:	80 95       	com	r24
    106c:	70 95       	com	r23
    106e:	61 95       	neg	r22
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	8f 4f       	sbci	r24, 0xFF	; 255
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	08 95       	ret

00001078 <__floatunsisf>:
    1078:	e8 94       	clt
    107a:	09 c0       	rjmp	.+18     	; 0x108e <__floatsisf+0x12>

0000107c <__floatsisf>:
    107c:	97 fb       	bst	r25, 7
    107e:	3e f4       	brtc	.+14     	; 0x108e <__floatsisf+0x12>
    1080:	90 95       	com	r25
    1082:	80 95       	com	r24
    1084:	70 95       	com	r23
    1086:	61 95       	neg	r22
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	99 23       	and	r25, r25
    1090:	a9 f0       	breq	.+42     	; 0x10bc <__floatsisf+0x40>
    1092:	f9 2f       	mov	r31, r25
    1094:	96 e9       	ldi	r25, 0x96	; 150
    1096:	bb 27       	eor	r27, r27
    1098:	93 95       	inc	r25
    109a:	f6 95       	lsr	r31
    109c:	87 95       	ror	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f1 11       	cpse	r31, r1
    10a6:	f8 cf       	rjmp	.-16     	; 0x1098 <__floatsisf+0x1c>
    10a8:	fa f4       	brpl	.+62     	; 0x10e8 <__floatsisf+0x6c>
    10aa:	bb 0f       	add	r27, r27
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <__floatsisf+0x36>
    10ae:	60 ff       	sbrs	r22, 0
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <__floatsisf+0x6c>
    10b2:	6f 5f       	subi	r22, 0xFF	; 255
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	8f 4f       	sbci	r24, 0xFF	; 255
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	16 c0       	rjmp	.+44     	; 0x10e8 <__floatsisf+0x6c>
    10bc:	88 23       	and	r24, r24
    10be:	11 f0       	breq	.+4      	; 0x10c4 <__floatsisf+0x48>
    10c0:	96 e9       	ldi	r25, 0x96	; 150
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <__floatsisf+0x6a>
    10c4:	77 23       	and	r23, r23
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <__floatsisf+0x54>
    10c8:	9e e8       	ldi	r25, 0x8E	; 142
    10ca:	87 2f       	mov	r24, r23
    10cc:	76 2f       	mov	r23, r22
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <__floatsisf+0x5e>
    10d0:	66 23       	and	r22, r22
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <__floatsisf+0x74>
    10d4:	96 e8       	ldi	r25, 0x86	; 134
    10d6:	86 2f       	mov	r24, r22
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	2a f0       	brmi	.+10     	; 0x10e8 <__floatsisf+0x6c>
    10de:	9a 95       	dec	r25
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	da f7       	brpl	.-10     	; 0x10de <__floatsisf+0x62>
    10e8:	88 0f       	add	r24, r24
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	97 f9       	bld	r25, 7
    10f0:	08 95       	ret

000010f2 <__fp_inf>:
    10f2:	97 f9       	bld	r25, 7
    10f4:	9f 67       	ori	r25, 0x7F	; 127
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	08 95       	ret

000010fe <__fp_nan>:
    10fe:	9f ef       	ldi	r25, 0xFF	; 255
    1100:	80 ec       	ldi	r24, 0xC0	; 192
    1102:	08 95       	ret

00001104 <__fp_powser>:
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	1f 93       	push	r17
    110a:	0f 93       	push	r16
    110c:	ff 92       	push	r15
    110e:	ef 92       	push	r14
    1110:	df 92       	push	r13
    1112:	7b 01       	movw	r14, r22
    1114:	8c 01       	movw	r16, r24
    1116:	68 94       	set
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <__fp_powser+0x20>
    111a:	da 2e       	mov	r13, r26
    111c:	ef 01       	movw	r28, r30
    111e:	72 d0       	rcall	.+228    	; 0x1204 <__mulsf3x>
    1120:	fe 01       	movw	r30, r28
    1122:	e8 94       	clt
    1124:	a5 91       	lpm	r26, Z+
    1126:	25 91       	lpm	r18, Z+
    1128:	35 91       	lpm	r19, Z+
    112a:	45 91       	lpm	r20, Z+
    112c:	55 91       	lpm	r21, Z+
    112e:	ae f3       	brts	.-22     	; 0x111a <__fp_powser+0x16>
    1130:	ef 01       	movw	r28, r30
    1132:	cf d0       	rcall	.+414    	; 0x12d2 <__addsf3x>
    1134:	fe 01       	movw	r30, r28
    1136:	97 01       	movw	r18, r14
    1138:	a8 01       	movw	r20, r16
    113a:	da 94       	dec	r13
    113c:	79 f7       	brne	.-34     	; 0x111c <__fp_powser+0x18>
    113e:	df 90       	pop	r13
    1140:	ef 90       	pop	r14
    1142:	ff 90       	pop	r15
    1144:	0f 91       	pop	r16
    1146:	1f 91       	pop	r17
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <__fp_pscA>:
    114e:	00 24       	eor	r0, r0
    1150:	0a 94       	dec	r0
    1152:	16 16       	cp	r1, r22
    1154:	17 06       	cpc	r1, r23
    1156:	18 06       	cpc	r1, r24
    1158:	09 06       	cpc	r0, r25
    115a:	08 95       	ret

0000115c <__fp_pscB>:
    115c:	00 24       	eor	r0, r0
    115e:	0a 94       	dec	r0
    1160:	12 16       	cp	r1, r18
    1162:	13 06       	cpc	r1, r19
    1164:	14 06       	cpc	r1, r20
    1166:	05 06       	cpc	r0, r21
    1168:	08 95       	ret

0000116a <__fp_round>:
    116a:	09 2e       	mov	r0, r25
    116c:	03 94       	inc	r0
    116e:	00 0c       	add	r0, r0
    1170:	11 f4       	brne	.+4      	; 0x1176 <__fp_round+0xc>
    1172:	88 23       	and	r24, r24
    1174:	52 f0       	brmi	.+20     	; 0x118a <__fp_round+0x20>
    1176:	bb 0f       	add	r27, r27
    1178:	40 f4       	brcc	.+16     	; 0x118a <__fp_round+0x20>
    117a:	bf 2b       	or	r27, r31
    117c:	11 f4       	brne	.+4      	; 0x1182 <__fp_round+0x18>
    117e:	60 ff       	sbrs	r22, 0
    1180:	04 c0       	rjmp	.+8      	; 0x118a <__fp_round+0x20>
    1182:	6f 5f       	subi	r22, 0xFF	; 255
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	8f 4f       	sbci	r24, 0xFF	; 255
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	08 95       	ret

0000118c <__fp_split3>:
    118c:	57 fd       	sbrc	r21, 7
    118e:	90 58       	subi	r25, 0x80	; 128
    1190:	44 0f       	add	r20, r20
    1192:	55 1f       	adc	r21, r21
    1194:	59 f0       	breq	.+22     	; 0x11ac <__fp_splitA+0x10>
    1196:	5f 3f       	cpi	r21, 0xFF	; 255
    1198:	71 f0       	breq	.+28     	; 0x11b6 <__fp_splitA+0x1a>
    119a:	47 95       	ror	r20

0000119c <__fp_splitA>:
    119c:	88 0f       	add	r24, r24
    119e:	97 fb       	bst	r25, 7
    11a0:	99 1f       	adc	r25, r25
    11a2:	61 f0       	breq	.+24     	; 0x11bc <__fp_splitA+0x20>
    11a4:	9f 3f       	cpi	r25, 0xFF	; 255
    11a6:	79 f0       	breq	.+30     	; 0x11c6 <__fp_splitA+0x2a>
    11a8:	87 95       	ror	r24
    11aa:	08 95       	ret
    11ac:	12 16       	cp	r1, r18
    11ae:	13 06       	cpc	r1, r19
    11b0:	14 06       	cpc	r1, r20
    11b2:	55 1f       	adc	r21, r21
    11b4:	f2 cf       	rjmp	.-28     	; 0x119a <__fp_split3+0xe>
    11b6:	46 95       	lsr	r20
    11b8:	f1 df       	rcall	.-30     	; 0x119c <__fp_splitA>
    11ba:	08 c0       	rjmp	.+16     	; 0x11cc <__fp_splitA+0x30>
    11bc:	16 16       	cp	r1, r22
    11be:	17 06       	cpc	r1, r23
    11c0:	18 06       	cpc	r1, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	f1 cf       	rjmp	.-30     	; 0x11a8 <__fp_splitA+0xc>
    11c6:	86 95       	lsr	r24
    11c8:	71 05       	cpc	r23, r1
    11ca:	61 05       	cpc	r22, r1
    11cc:	08 94       	sec
    11ce:	08 95       	ret

000011d0 <__fp_zero>:
    11d0:	e8 94       	clt

000011d2 <__fp_szero>:
    11d2:	bb 27       	eor	r27, r27
    11d4:	66 27       	eor	r22, r22
    11d6:	77 27       	eor	r23, r23
    11d8:	cb 01       	movw	r24, r22
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <inverse>:
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	9f e3       	ldi	r25, 0x3F	; 63
    11ea:	ad ce       	rjmp	.-678    	; 0xf46 <__divsf3>

000011ec <__mulsf3>:
    11ec:	0b d0       	rcall	.+22     	; 0x1204 <__mulsf3x>
    11ee:	bd cf       	rjmp	.-134    	; 0x116a <__fp_round>
    11f0:	ae df       	rcall	.-164    	; 0x114e <__fp_pscA>
    11f2:	28 f0       	brcs	.+10     	; 0x11fe <__mulsf3+0x12>
    11f4:	b3 df       	rcall	.-154    	; 0x115c <__fp_pscB>
    11f6:	18 f0       	brcs	.+6      	; 0x11fe <__mulsf3+0x12>
    11f8:	95 23       	and	r25, r21
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__mulsf3+0x12>
    11fc:	7a cf       	rjmp	.-268    	; 0x10f2 <__fp_inf>
    11fe:	7f cf       	rjmp	.-258    	; 0x10fe <__fp_nan>
    1200:	11 24       	eor	r1, r1
    1202:	e7 cf       	rjmp	.-50     	; 0x11d2 <__fp_szero>

00001204 <__mulsf3x>:
    1204:	c3 df       	rcall	.-122    	; 0x118c <__fp_split3>
    1206:	a0 f3       	brcs	.-24     	; 0x11f0 <__mulsf3+0x4>

00001208 <__mulsf3_pse>:
    1208:	95 9f       	mul	r25, r21
    120a:	d1 f3       	breq	.-12     	; 0x1200 <__mulsf3+0x14>
    120c:	95 0f       	add	r25, r21
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	55 1f       	adc	r21, r21
    1212:	62 9f       	mul	r22, r18
    1214:	f0 01       	movw	r30, r0
    1216:	72 9f       	mul	r23, r18
    1218:	bb 27       	eor	r27, r27
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	63 9f       	mul	r22, r19
    1220:	aa 27       	eor	r26, r26
    1222:	f0 0d       	add	r31, r0
    1224:	b1 1d       	adc	r27, r1
    1226:	aa 1f       	adc	r26, r26
    1228:	64 9f       	mul	r22, r20
    122a:	66 27       	eor	r22, r22
    122c:	b0 0d       	add	r27, r0
    122e:	a1 1d       	adc	r26, r1
    1230:	66 1f       	adc	r22, r22
    1232:	82 9f       	mul	r24, r18
    1234:	22 27       	eor	r18, r18
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	73 9f       	mul	r23, r19
    123e:	b0 0d       	add	r27, r0
    1240:	a1 1d       	adc	r26, r1
    1242:	62 1f       	adc	r22, r18
    1244:	83 9f       	mul	r24, r19
    1246:	a0 0d       	add	r26, r0
    1248:	61 1d       	adc	r22, r1
    124a:	22 1f       	adc	r18, r18
    124c:	74 9f       	mul	r23, r20
    124e:	33 27       	eor	r19, r19
    1250:	a0 0d       	add	r26, r0
    1252:	61 1d       	adc	r22, r1
    1254:	23 1f       	adc	r18, r19
    1256:	84 9f       	mul	r24, r20
    1258:	60 0d       	add	r22, r0
    125a:	21 1d       	adc	r18, r1
    125c:	82 2f       	mov	r24, r18
    125e:	76 2f       	mov	r23, r22
    1260:	6a 2f       	mov	r22, r26
    1262:	11 24       	eor	r1, r1
    1264:	9f 57       	subi	r25, 0x7F	; 127
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	8a f0       	brmi	.+34     	; 0x128c <__mulsf3_pse+0x84>
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <__mulsf3_pse+0x9c>
    126c:	88 23       	and	r24, r24
    126e:	4a f0       	brmi	.+18     	; 0x1282 <__mulsf3_pse+0x7a>
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	a9 f7       	brne	.-22     	; 0x126c <__mulsf3_pse+0x64>
    1282:	9e 3f       	cpi	r25, 0xFE	; 254
    1284:	51 05       	cpc	r21, r1
    1286:	70 f0       	brcs	.+28     	; 0x12a4 <__mulsf3_pse+0x9c>
    1288:	34 cf       	rjmp	.-408    	; 0x10f2 <__fp_inf>
    128a:	a3 cf       	rjmp	.-186    	; 0x11d2 <__fp_szero>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	ec f3       	brlt	.-6      	; 0x128a <__mulsf3_pse+0x82>
    1290:	98 3e       	cpi	r25, 0xE8	; 232
    1292:	dc f3       	brlt	.-10     	; 0x128a <__mulsf3_pse+0x82>
    1294:	86 95       	lsr	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b7 95       	ror	r27
    129c:	f7 95       	ror	r31
    129e:	e7 95       	ror	r30
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	c1 f7       	brne	.-16     	; 0x1294 <__mulsf3_pse+0x8c>
    12a4:	fe 2b       	or	r31, r30
    12a6:	88 0f       	add	r24, r24
    12a8:	91 1d       	adc	r25, r1
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret

000012b2 <square>:
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	9a cf       	rjmp	.-204    	; 0x11ec <__mulsf3>
    12b8:	4a df       	rcall	.-364    	; 0x114e <__fp_pscA>
    12ba:	30 f0       	brcs	.+12     	; 0x12c8 <square+0x16>
    12bc:	4f df       	rcall	.-354    	; 0x115c <__fp_pscB>
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <square+0x16>
    12c0:	31 f4       	brne	.+12     	; 0x12ce <square+0x1c>
    12c2:	9f 3f       	cpi	r25, 0xFF	; 255
    12c4:	11 f4       	brne	.+4      	; 0x12ca <square+0x18>
    12c6:	1e f4       	brtc	.+6      	; 0x12ce <square+0x1c>
    12c8:	1a cf       	rjmp	.-460    	; 0x10fe <__fp_nan>
    12ca:	0e f4       	brtc	.+2      	; 0x12ce <square+0x1c>
    12cc:	e0 95       	com	r30
    12ce:	e7 fb       	bst	r30, 7
    12d0:	10 cf       	rjmp	.-480    	; 0x10f2 <__fp_inf>

000012d2 <__addsf3x>:
    12d2:	e9 2f       	mov	r30, r25
    12d4:	5b df       	rcall	.-330    	; 0x118c <__fp_split3>
    12d6:	80 f3       	brcs	.-32     	; 0x12b8 <square+0x6>
    12d8:	ba 17       	cp	r27, r26
    12da:	62 07       	cpc	r22, r18
    12dc:	73 07       	cpc	r23, r19
    12de:	84 07       	cpc	r24, r20
    12e0:	95 07       	cpc	r25, r21
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <__addsf3x+0x18>
    12e4:	71 f4       	brne	.+28     	; 0x1302 <__addsf3x+0x30>
    12e6:	9e f5       	brtc	.+102    	; 0x134e <__addsf3x+0x7c>
    12e8:	73 cf       	rjmp	.-282    	; 0x11d0 <__fp_zero>
    12ea:	0e f4       	brtc	.+2      	; 0x12ee <__addsf3x+0x1c>
    12ec:	e0 95       	com	r30
    12ee:	0b 2e       	mov	r0, r27
    12f0:	ba 2f       	mov	r27, r26
    12f2:	a0 2d       	mov	r26, r0
    12f4:	0b 01       	movw	r0, r22
    12f6:	b9 01       	movw	r22, r18
    12f8:	90 01       	movw	r18, r0
    12fa:	0c 01       	movw	r0, r24
    12fc:	ca 01       	movw	r24, r20
    12fe:	a0 01       	movw	r20, r0
    1300:	11 24       	eor	r1, r1
    1302:	ff 27       	eor	r31, r31
    1304:	59 1b       	sub	r21, r25
    1306:	99 f0       	breq	.+38     	; 0x132e <__addsf3x+0x5c>
    1308:	59 3f       	cpi	r21, 0xF9	; 249
    130a:	50 f4       	brcc	.+20     	; 0x1320 <__addsf3x+0x4e>
    130c:	50 3e       	cpi	r21, 0xE0	; 224
    130e:	68 f1       	brcs	.+90     	; 0x136a <__addsf3x+0x98>
    1310:	1a 16       	cp	r1, r26
    1312:	f0 40       	sbci	r31, 0x00	; 0
    1314:	a2 2f       	mov	r26, r18
    1316:	23 2f       	mov	r18, r19
    1318:	34 2f       	mov	r19, r20
    131a:	44 27       	eor	r20, r20
    131c:	58 5f       	subi	r21, 0xF8	; 248
    131e:	f3 cf       	rjmp	.-26     	; 0x1306 <__addsf3x+0x34>
    1320:	46 95       	lsr	r20
    1322:	37 95       	ror	r19
    1324:	27 95       	ror	r18
    1326:	a7 95       	ror	r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	53 95       	inc	r21
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__addsf3x+0x4e>
    132e:	7e f4       	brtc	.+30     	; 0x134e <__addsf3x+0x7c>
    1330:	1f 16       	cp	r1, r31
    1332:	ba 0b       	sbc	r27, r26
    1334:	62 0b       	sbc	r22, r18
    1336:	73 0b       	sbc	r23, r19
    1338:	84 0b       	sbc	r24, r20
    133a:	ba f0       	brmi	.+46     	; 0x136a <__addsf3x+0x98>
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	a1 f0       	breq	.+40     	; 0x1368 <__addsf3x+0x96>
    1340:	ff 0f       	add	r31, r31
    1342:	bb 1f       	adc	r27, r27
    1344:	66 1f       	adc	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	c2 f7       	brpl	.-16     	; 0x133c <__addsf3x+0x6a>
    134c:	0e c0       	rjmp	.+28     	; 0x136a <__addsf3x+0x98>
    134e:	ba 0f       	add	r27, r26
    1350:	62 1f       	adc	r22, r18
    1352:	73 1f       	adc	r23, r19
    1354:	84 1f       	adc	r24, r20
    1356:	48 f4       	brcc	.+18     	; 0x136a <__addsf3x+0x98>
    1358:	87 95       	ror	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	b7 95       	ror	r27
    1360:	f7 95       	ror	r31
    1362:	9e 3f       	cpi	r25, 0xFE	; 254
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__addsf3x+0x96>
    1366:	b3 cf       	rjmp	.-154    	; 0x12ce <square+0x1c>
    1368:	93 95       	inc	r25
    136a:	88 0f       	add	r24, r24
    136c:	08 f0       	brcs	.+2      	; 0x1370 <__addsf3x+0x9e>
    136e:	99 27       	eor	r25, r25
    1370:	ee 0f       	add	r30, r30
    1372:	97 95       	ror	r25
    1374:	87 95       	ror	r24
    1376:	08 95       	ret

00001378 <__mulsi3>:
    1378:	62 9f       	mul	r22, r18
    137a:	d0 01       	movw	r26, r0
    137c:	73 9f       	mul	r23, r19
    137e:	f0 01       	movw	r30, r0
    1380:	82 9f       	mul	r24, r18
    1382:	e0 0d       	add	r30, r0
    1384:	f1 1d       	adc	r31, r1
    1386:	64 9f       	mul	r22, r20
    1388:	e0 0d       	add	r30, r0
    138a:	f1 1d       	adc	r31, r1
    138c:	92 9f       	mul	r25, r18
    138e:	f0 0d       	add	r31, r0
    1390:	83 9f       	mul	r24, r19
    1392:	f0 0d       	add	r31, r0
    1394:	74 9f       	mul	r23, r20
    1396:	f0 0d       	add	r31, r0
    1398:	65 9f       	mul	r22, r21
    139a:	f0 0d       	add	r31, r0
    139c:	99 27       	eor	r25, r25
    139e:	72 9f       	mul	r23, r18
    13a0:	b0 0d       	add	r27, r0
    13a2:	e1 1d       	adc	r30, r1
    13a4:	f9 1f       	adc	r31, r25
    13a6:	63 9f       	mul	r22, r19
    13a8:	b0 0d       	add	r27, r0
    13aa:	e1 1d       	adc	r30, r1
    13ac:	f9 1f       	adc	r31, r25
    13ae:	bd 01       	movw	r22, r26
    13b0:	cf 01       	movw	r24, r30
    13b2:	11 24       	eor	r1, r1
    13b4:	08 95       	ret

000013b6 <__divmodhi4>:
    13b6:	97 fb       	bst	r25, 7
    13b8:	09 2e       	mov	r0, r25
    13ba:	07 26       	eor	r0, r23
    13bc:	0a d0       	rcall	.+20     	; 0x13d2 <__divmodhi4_neg1>
    13be:	77 fd       	sbrc	r23, 7
    13c0:	04 d0       	rcall	.+8      	; 0x13ca <__divmodhi4_neg2>
    13c2:	49 d0       	rcall	.+146    	; 0x1456 <__udivmodhi4>
    13c4:	06 d0       	rcall	.+12     	; 0x13d2 <__divmodhi4_neg1>
    13c6:	00 20       	and	r0, r0
    13c8:	1a f4       	brpl	.+6      	; 0x13d0 <__divmodhi4_exit>

000013ca <__divmodhi4_neg2>:
    13ca:	70 95       	com	r23
    13cc:	61 95       	neg	r22
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255

000013d0 <__divmodhi4_exit>:
    13d0:	08 95       	ret

000013d2 <__divmodhi4_neg1>:
    13d2:	f6 f7       	brtc	.-4      	; 0x13d0 <__divmodhi4_exit>
    13d4:	90 95       	com	r25
    13d6:	81 95       	neg	r24
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__udivmodsi4>:
    13dc:	a1 e2       	ldi	r26, 0x21	; 33
    13de:	1a 2e       	mov	r1, r26
    13e0:	aa 1b       	sub	r26, r26
    13e2:	bb 1b       	sub	r27, r27
    13e4:	fd 01       	movw	r30, r26
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <__udivmodsi4_ep>

000013e8 <__udivmodsi4_loop>:
    13e8:	aa 1f       	adc	r26, r26
    13ea:	bb 1f       	adc	r27, r27
    13ec:	ee 1f       	adc	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	a2 17       	cp	r26, r18
    13f2:	b3 07       	cpc	r27, r19
    13f4:	e4 07       	cpc	r30, r20
    13f6:	f5 07       	cpc	r31, r21
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <__udivmodsi4_ep>
    13fa:	a2 1b       	sub	r26, r18
    13fc:	b3 0b       	sbc	r27, r19
    13fe:	e4 0b       	sbc	r30, r20
    1400:	f5 0b       	sbc	r31, r21

00001402 <__udivmodsi4_ep>:
    1402:	66 1f       	adc	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	1a 94       	dec	r1
    140c:	69 f7       	brne	.-38     	; 0x13e8 <__udivmodsi4_loop>
    140e:	60 95       	com	r22
    1410:	70 95       	com	r23
    1412:	80 95       	com	r24
    1414:	90 95       	com	r25
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	bd 01       	movw	r22, r26
    141c:	cf 01       	movw	r24, r30
    141e:	08 95       	ret

00001420 <__divmodsi4>:
    1420:	97 fb       	bst	r25, 7
    1422:	09 2e       	mov	r0, r25
    1424:	05 26       	eor	r0, r21
    1426:	0e d0       	rcall	.+28     	; 0x1444 <__divmodsi4_neg1>
    1428:	57 fd       	sbrc	r21, 7
    142a:	04 d0       	rcall	.+8      	; 0x1434 <__divmodsi4_neg2>
    142c:	d7 df       	rcall	.-82     	; 0x13dc <__udivmodsi4>
    142e:	0a d0       	rcall	.+20     	; 0x1444 <__divmodsi4_neg1>
    1430:	00 1c       	adc	r0, r0
    1432:	38 f4       	brcc	.+14     	; 0x1442 <__divmodsi4_exit>

00001434 <__divmodsi4_neg2>:
    1434:	50 95       	com	r21
    1436:	40 95       	com	r20
    1438:	30 95       	com	r19
    143a:	21 95       	neg	r18
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	4f 4f       	sbci	r20, 0xFF	; 255
    1440:	5f 4f       	sbci	r21, 0xFF	; 255

00001442 <__divmodsi4_exit>:
    1442:	08 95       	ret

00001444 <__divmodsi4_neg1>:
    1444:	f6 f7       	brtc	.-4      	; 0x1442 <__divmodsi4_exit>
    1446:	90 95       	com	r25
    1448:	80 95       	com	r24
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	08 95       	ret

00001456 <__udivmodhi4>:
    1456:	aa 1b       	sub	r26, r26
    1458:	bb 1b       	sub	r27, r27
    145a:	51 e1       	ldi	r21, 0x11	; 17
    145c:	07 c0       	rjmp	.+14     	; 0x146c <__udivmodhi4_ep>

0000145e <__udivmodhi4_loop>:
    145e:	aa 1f       	adc	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	a6 17       	cp	r26, r22
    1464:	b7 07       	cpc	r27, r23
    1466:	10 f0       	brcs	.+4      	; 0x146c <__udivmodhi4_ep>
    1468:	a6 1b       	sub	r26, r22
    146a:	b7 0b       	sbc	r27, r23

0000146c <__udivmodhi4_ep>:
    146c:	88 1f       	adc	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	5a 95       	dec	r21
    1472:	a9 f7       	brne	.-22     	; 0x145e <__udivmodhi4_loop>
    1474:	80 95       	com	r24
    1476:	90 95       	com	r25
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	08 95       	ret

0000147e <_exit>:
    147e:	f8 94       	cli

00001480 <__stop_program>:
    1480:	ff cf       	rjmp	.-2      	; 0x1480 <__stop_program>
