
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000b1a  00000bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  0080012a  0080012a  00000bd8  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000706  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000189c  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  00002bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000119c  00000000  00000000  00003146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  000042e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000715  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000926  00000000  00000000  00004f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000582f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 35       	cpi	r26, 0x59	; 89
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "debug.h"
#include "i2c.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29

  DDRD  |= (1<<4);
  aa:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  
  I2C_Init();
  ae:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <I2C_Init>
  debug_init();
  b2:	0e 94 13 05 	call	0xa26	; 0xa26 <debug_init>
  debug_tx_text_nl("Debug Started");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 d6 03 	call	0x7ac	; 0x7ac <debug_tx_text_nl>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	cc e2       	ldi	r28, 0x2C	; 44
  c0:	d1 e0       	ldi	r29, 0x01	; 1
  
  
  while(1){
    uint8_t val = I2C_Read_Register(0x6B);
  c2:	8b e6       	ldi	r24, 0x6B	; 107
  c4:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Read_Register>
	debug_tx_parameter_hex_nl("RegVal:", val);
  c8:	48 2f       	mov	r20, r24
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	8e e0       	ldi	r24, 0x0E	; 14
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 ae 04 	call	0x95c	; 0x95c <debug_tx_parameter_hex_nl>
  d8:	88 e8       	ldi	r24, 0x88	; 136
  da:	93 e1       	ldi	r25, 0x13	; 19
  dc:	fe 01       	movw	r30, r28
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d9 f7       	brne	.-10     	; 0xdc <main+0x36>
  e6:	ed cf       	rjmp	.-38     	; 0xc2 <main+0x1c>

000000e8 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
  e8:	10 92 2a 01 	sts	0x012A, r1
  I2C.ReadAddr=0x00;
  ec:	10 92 2b 01 	sts	0x012B, r1
}
  f0:	08 95       	ret

000000f2 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(50);
}
  f8:	08 95       	ret

000000fa <I2C_Bit_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fa:	8c e2       	ldi	r24, 0x2C	; 44
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <I2C_Bit_Delay+0x4>

void I2C_Bit_Delay(void){
  _delay_us(100);
}
 102:	08 95       	ret

00000104 <I2C_Guard_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(1);
}
 10a:	08 95       	ret

0000010c <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	11 f4       	brne	.+4      	; 0x114 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 110:	3c 9a       	sbi	0x07, 4	; 7
 112:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 114:	3c 98       	cbi	0x07, 4	; 7
 116:	08 95       	ret

00000118 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	11 f4       	brne	.+4      	; 0x120 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 120:	44 98       	cbi	0x08, 4	; 8
 122:	08 95       	ret

00000124 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	19 f4       	brne	.+6      	; 0x12e <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 128:	44 9a       	sbi	0x08, 4	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 12a:	3c 98       	cbi	0x07, 4	; 7
 12c:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 12e:	44 98       	cbi	0x08, 4	; 8
  _delay_us(1);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 130:	3c 9a       	sbi	0x07, 4	; 7
 132:	08 95       	ret

00000134 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
 134:	86 b1       	in	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	24 e0       	ldi	r18, 0x04	; 4
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	2a 95       	dec	r18
 140:	e1 f7       	brne	.-8      	; 0x13a <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 142:	81 70       	andi	r24, 0x01	; 1
 144:	08 95       	ret

00000146 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	11 f4       	brne	.+4      	; 0x14e <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 14a:	3d 9a       	sbi	0x07, 5	; 7
 14c:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 14e:	3d 98       	cbi	0x07, 5	; 7
 150:	08 95       	ret

00000152 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	11 f4       	brne	.+4      	; 0x15a <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 156:	45 9a       	sbi	0x08, 5	; 8
 158:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 15a:	45 98       	cbi	0x08, 5	; 8
 15c:	08 95       	ret

0000015e <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	19 f4       	brne	.+6      	; 0x168 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 162:	45 9a       	sbi	0x08, 5	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 164:	3d 98       	cbi	0x07, 5	; 7
 166:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 168:	45 98       	cbi	0x08, 5	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 16a:	3d 9a       	sbi	0x07, 5	; 7
 16c:	08 95       	ret

0000016e <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 16e:	86 b1       	in	r24, 0x06	; 6
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	35 e0       	ldi	r19, 0x05	; 5
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	3a 95       	dec	r19
 17a:	e1 f7       	brne	.-8      	; 0x174 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 17c:	81 70       	andi	r24, 0x01	; 1
 17e:	08 95       	ret

00000180 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 180:	3c 98       	cbi	0x07, 4	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
}
 188:	08 95       	ret

0000018a <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 18a:	3d 98       	cbi	0x07, 5	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
}
 192:	08 95       	ret

00000194 <I2C_GPIO_Init>:
  _delay_us(1);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 194:	3c 9a       	sbi	0x07, 4	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 196:	3d 98       	cbi	0x07, 5	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
}
 1a4:	08 95       	ret

000001a6 <I2C_Start>:

void I2C_Start(void){
 1a6:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 1b4:	18 ec       	ldi	r17, 0xC8	; 200
 1b6:	81 2f       	mov	r24, r17
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 1c2:	81 2f       	mov	r24, r17
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 1ce:	1a 95       	dec	r17
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
 1d2:	1f 91       	pop	r17
 1d4:	08 95       	ret

000001d6 <I2C_Stop>:

void I2C_Stop(void){
 1d6:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 1e4:	18 ec       	ldi	r17, 0xC8	; 200
 1e6:	81 2f       	mov	r24, r17
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 1f2:	81 2f       	mov	r24, r17
 1f4:	8a 95       	dec	r24
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 1fe:	1a 95       	dec	r17
 200:	f1 f7       	brne	.-4      	; 0x1fe <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	08 2f       	mov	r16, r24
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	58 ec       	ldi	r21, 0xC8	; 200
 214:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
 216:	44 e0       	ldi	r20, 0x04	; 4
 218:	e4 2e       	mov	r14, r20
 21a:	07 ff       	sbrs	r16, 7
 21c:	02 c0       	rjmp	.+4      	; 0x222 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	01 c0       	rjmp	.+2      	; 0x224 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 228:	8f 2d       	mov	r24, r15
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 234:	8f 2d       	mov	r24, r15
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 240:	8e 2d       	mov	r24, r14
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
 246:	1f 5f       	subi	r17, 0xFF	; 255
 248:	18 30       	cpi	r17, 0x08	; 8
 24a:	11 f0       	breq	.+4      	; 0x250 <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
 24c:	00 0f       	add	r16, r16
 24e:	e5 cf       	rjmp	.-54     	; 0x21a <I2C_Data_Send+0x14>
  }
}
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	08 95       	ret

0000025a <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	68 ec       	ldi	r22, 0xC8	; 200
 26c:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
 26e:	11 0f       	add	r17, r17
 270:	8f 2d       	mov	r24, r15
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 27c:	35 99       	sbic	0x06, 5	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
 27e:	11 60       	ori	r17, 0x01	; 1
 280:	8f 2d       	mov	r24, r15
 282:	8a 95       	dec	r24
 284:	f1 f7       	brne	.-4      	; 0x282 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
 28c:	0f 5f       	subi	r16, 0xFF	; 255
 28e:	08 30       	cpi	r16, 0x08	; 8
 290:	71 f7       	brne	.-36     	; 0x26e <I2C_Data_Receive+0x14>
 292:	88 ec       	ldi	r24, 0xC8	; 200
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
  return data;
}
 29e:	81 2f       	mov	r24, r17
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	08 95       	ret

000002a8 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
 2a8:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 2b0:	18 ec       	ldi	r17, 0xC8	; 200
 2b2:	81 2f       	mov	r24, r17
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 2be:	1a 95       	dec	r17
 2c0:	f1 f7       	brne	.-4      	; 0x2be <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
}
 2c8:	1f 91       	pop	r17
 2ca:	08 95       	ret

000002cc <I2C_Set_Nack>:

void I2C_Set_Nack(void){
 2cc:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 2d4:	18 ec       	ldi	r17, 0xC8	; 200
 2d6:	81 2f       	mov	r24, r17
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 2e2:	1a 95       	dec	r17
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
}
 2ec:	1f 91       	pop	r17
 2ee:	08 95       	ret

000002f0 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_SDA_Set_Output>
 2fa:	08 ec       	ldi	r16, 0xC8	; 200
 2fc:	80 2f       	mov	r24, r16
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 308:	16 b1       	in	r17, 0x06	; 6
 30a:	0a 95       	dec	r16
 30c:	f1 f7       	brne	.-4      	; 0x30a <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 92 00 	call	0x124	; 0x124 <I2C_SCL_Set_Output>
 314:	12 95       	swap	r17
 316:	16 95       	lsr	r17
 318:	17 70       	andi	r17, 0x07	; 7
 31a:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
 31c:	81 2f       	mov	r24, r17
 31e:	81 70       	andi	r24, 0x01	; 1
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
 326:	1f 93       	push	r17
 328:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
 32a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Start>
  I2C_Data_Send(address);
 32e:	81 2f       	mov	r24, r17
 330:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Data_Send>
  ack = I2C_Get_Ack();
 334:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_Get_Ack>
 338:	18 2f       	mov	r17, r24
  I2C_Stop();
 33a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
  return ack;
}
 33e:	81 2f       	mov	r24, r17
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
 344:	1f 93       	push	r17
 346:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
 348:	81 2f       	mov	r24, r17
 34a:	0e 94 93 01 	call	0x326	; 0x326 <I2C_Send_Device_Address>
	if(sts==1){
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	11 f4       	brne	.+4      	; 0x356 <I2C_Get_Device_Address+0x12>
 352:	81 2f       	mov	r24, r17
 354:	03 c0       	rjmp	.+6      	; 0x35c <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
 356:	1f 5f       	subi	r17, 0xFF	; 255
 358:	1f 3f       	cpi	r17, 0xFF	; 255
 35a:	b1 f7       	brne	.-20     	; 0x348 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
 36c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
 370:	80 91 2a 01 	lds	r24, 0x012A
 374:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
 378:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_Get_Ack>
 37c:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
 37e:	81 2f       	mov	r24, r17
 380:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
 384:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_Get_Ack>
 388:	f8 2e       	mov	r15, r24
  I2C_Stop();
 38a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
  I2C_Start();
 38e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
 392:	80 91 2b 01 	lds	r24, 0x012B
 396:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
 39a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_Get_Ack>
 39e:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
 3a0:	0e 94 2d 01 	call	0x25a	; 0x25a <I2C_Data_Receive>
 3a4:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
 3a6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_Get_Ack>
 3aa:	08 2f       	mov	r16, r24
  I2C_Stop();
 3ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
  if(sts == 0x07){
 3b0:	ff 0c       	add	r15, r15
 3b2:	11 0f       	add	r17, r17
 3b4:	11 0f       	add	r17, r17
 3b6:	1f 29       	or	r17, r15
 3b8:	1e 29       	or	r17, r14
 3ba:	00 0f       	add	r16, r16
 3bc:	00 0f       	add	r16, r16
 3be:	00 0f       	add	r16, r16
 3c0:	01 2b       	or	r16, r17
 3c2:	07 30       	cpi	r16, 0x07	; 7
 3c4:	11 f0       	breq	.+4      	; 0x3ca <I2C_Read_Register+0x6a>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <I2C_Read_Register+0x6c>
 3ca:	8d 2d       	mov	r24, r13
    sts = data;
  }else{
    sts = 0xFF;
  }
  return sts;
}
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	08 95       	ret

000003d8 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
 3d8:	10 92 2a 01 	sts	0x012A, r1
  I2C.ReadAddr=0x00;
 3dc:	10 92 2b 01 	sts	0x012B, r1
  return sts;
}

void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
 3e0:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
 3e4:	0e 94 a2 01 	call	0x344	; 0x344 <I2C_Get_Device_Address>
 3e8:	80 93 2a 01 	sts	0x012A, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 2b 01 	sts	0x012B, r24
 3f2:	08 95       	ret

000003f4 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
 3f4:	10 92 2c 01 	sts	0x012C, r1
  debug.datareg=0;
 3f8:	10 92 2d 01 	sts	0x012D, r1
  debug.databsy=1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 2e 01 	sts	0x012E, r24
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 406:	fc 01       	movw	r30, r24
 408:	e4 5d       	subi	r30, 0xD4	; 212
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	13 82       	std	Z+3, r1	; 0x03
 40e:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 410:	80 32       	cpi	r24, 0x20	; 32
 412:	91 05       	cpc	r25, r1
 414:	c1 f7       	brne	.-16     	; 0x406 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 416:	10 92 4f 01 	sts	0x014F, r1
 41a:	e0 e5       	ldi	r30, 0x50	; 80
 41c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
 41e:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	e8 35       	cpi	r30, 0x58	; 88
 424:	f8 07       	cpc	r31, r24
 426:	d9 f7       	brne	.-10     	; 0x41e <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 428:	10 82       	st	Z, r1
}
 42a:	08 95       	ret

0000042c <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 42c:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 42e:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 430:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
 438:	e8 e6       	ldi	r30, 0x68	; 104
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
 442:	ec e6       	ldi	r30, 0x6C	; 108
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	88 60       	ori	r24, 0x08	; 8
 44a:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
 44c:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
 44e:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 450:	08 95       	ret

00000452 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 456:	ee e6       	ldi	r30, 0x6E	; 110
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	10 82       	st	Z, r1
  TCNT0 =200;
 45c:	88 ec       	ldi	r24, 0xC8	; 200
 45e:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 468:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
 46a:	08 95       	ret

0000046c <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 46c:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 470:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 472:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 474:	08 95       	ret

00000476 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 476:	50 9a       	sbi	0x0a, 0	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 478:	58 9a       	sbi	0x0b, 0	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 47a:	3b 98       	cbi	0x07, 3	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 47c:	43 9a       	sbi	0x08, 3	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 47e:	08 95       	ret

00000480 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 480:	58 9a       	sbi	0x0b, 0	; 11
}
 482:	08 95       	ret

00000484 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 484:	58 98       	cbi	0x0b, 0	; 11
}
 486:	08 95       	ret

00000488 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	11 f4       	brne	.+4      	; 0x490 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 48c:	58 9a       	sbi	0x0b, 0	; 11
 48e:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 490:	58 98       	cbi	0x0b, 0	; 11
 492:	08 95       	ret

00000494 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 494:	86 b1       	in	r24, 0x06	; 6
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	23 e0       	ldi	r18, 0x03	; 3
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	2a 95       	dec	r18
 4a0:	e1 f7       	brne	.-8      	; 0x49a <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 4a2:	81 70       	andi	r24, 0x01	; 1
 4a4:	08 95       	ret

000004a6 <debug_delay>:

void debug_delay(uint16_t val){
 4a6:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 4a8:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
 4ae:	86 b5       	in	r24, 0x26	; 38
 4b0:	82 33       	cpi	r24, 0x32	; 50
 4b2:	e8 f3       	brcs	.-6      	; 0x4ae <debug_delay+0x8>
    TCNT0=0;
 4b4:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
 4b6:	86 b5       	in	r24, 0x26	; 38
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	82 17       	cp	r24, r18
 4bc:	93 07       	cpc	r25, r19
 4be:	d8 f3       	brcs	.-10     	; 0x4b6 <debug_delay+0x10>
  TCCR0B=0;
 4c0:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 4c2:	08 95       	ret

000004c4 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 4c4:	80 91 24 01 	lds	r24, 0x0124
 4c8:	90 91 25 01 	lds	r25, 0x0125
 4cc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 4d0:	08 95       	ret

000004d2 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 4d2:	80 91 26 01 	lds	r24, 0x0126
 4d6:	90 91 27 01 	lds	r25, 0x0127
 4da:	0e 94 53 02 	call	0x4a6	; 0x4a6 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 4de:	08 95       	ret

000004e0 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 4e0:	80 91 28 01 	lds	r24, 0x0128
 4e4:	90 91 29 01 	lds	r25, 0x0129
 4e8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 4ec:	08 95       	ret

000004ee <debug_tx_byte>:


void debug_tx_byte(uint8_t val){
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	df 93       	push	r29
 4fa:	cf 93       	push	r28
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	2a 97       	sbiw	r28, 0x0a	; 10
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 50c:	fe 01       	movw	r30, r28
 50e:	31 96       	adiw	r30, 0x01	; 1
 510:	9a e0       	ldi	r25, 0x0A	; 10
 512:	df 01       	movw	r26, r30
 514:	1d 92       	st	X+, r1
 516:	9a 95       	dec	r25
 518:	e9 f7       	brne	.-6      	; 0x514 <debug_tx_byte+0x26>
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	9a 87       	std	Y+10, r25	; 0x0a
 51e:	fe 01       	movw	r30, r28
 520:	32 96       	adiw	r30, 0x02	; 2
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 526:	48 2f       	mov	r20, r24
 528:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 52a:	61 e0       	ldi	r22, 0x01	; 1


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 52c:	ca 01       	movw	r24, r20
 52e:	02 2e       	mov	r0, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <debug_tx_byte+0x48>
 532:	95 95       	asr	r25
 534:	87 95       	ror	r24
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <debug_tx_byte+0x44>
 53a:	80 ff       	sbrs	r24, 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <debug_tx_byte+0x54>
	  buf[i+1]=1;
 53e:	60 83       	st	Z, r22
 540:	01 c0       	rjmp	.+2      	; 0x544 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
 542:	10 82       	st	Z, r1
 544:	2f 5f       	subi	r18, 0xFF	; 255
 546:	3f 4f       	sbci	r19, 0xFF	; 255
 548:	31 96       	adiw	r30, 0x01	; 1
}


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 54a:	28 30       	cpi	r18, 0x08	; 8
 54c:	31 05       	cpc	r19, r1
 54e:	71 f7       	brne	.-36     	; 0x52c <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 550:	df b6       	in	r13, 0x3f	; 63
  cli();
 552:	f8 94       	cli
 554:	8e 01       	movw	r16, r28
 556:	0f 5f       	subi	r16, 0xFF	; 255
 558:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
 55a:	3b e0       	ldi	r19, 0x0B	; 11
 55c:	e3 2e       	mov	r14, r19
 55e:	f1 2c       	mov	r15, r1
 560:	ec 0e       	add	r14, r28
 562:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 564:	f8 01       	movw	r30, r16
 566:	80 81       	ld	r24, Z
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	11 f4       	brne	.+4      	; 0x570 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 56c:	58 9a       	sbi	0x0b, 0	; 11
 56e:	01 c0       	rjmp	.+2      	; 0x572 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 570:	58 98       	cbi	0x0b, 0	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
 572:	0e 94 62 02 	call	0x4c4	; 0x4c4 <debug_delay_index_0>
 576:	0f 5f       	subi	r16, 0xFF	; 255
 578:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 57a:	0e 15       	cp	r16, r14
 57c:	1f 05       	cpc	r17, r15
 57e:	91 f7       	brne	.-28     	; 0x564 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
 580:	df be       	out	0x3f, r13	; 63
}
 582:	2a 96       	adiw	r28, 0x0a	; 10
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	cf 91       	pop	r28
 590:	df 91       	pop	r29
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	ff 90       	pop	r15
 598:	ef 90       	pop	r14
 59a:	df 90       	pop	r13
 59c:	08 95       	ret

0000059e <debug_rx_byte>:

uint8_t debug_rx_byte(void){
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 5a4:	33 9b       	sbis	0x06, 3	; 6
 5a6:	21 c0       	rjmp	.+66     	; 0x5ea <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	17 c0       	rjmp	.+46     	; 0x5da <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
 5ac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 5b0:	33 99       	sbic	0x06, 3	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
 5b2:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
 5b4:	17 30       	cpi	r17, 0x07	; 7
 5b6:	09 f0       	breq	.+2      	; 0x5ba <debug_rx_byte+0x1c>
	    val>>=1;
 5b8:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
 5ba:	1f 5f       	subi	r17, 0xFF	; 255
 5bc:	18 30       	cpi	r17, 0x08	; 8
 5be:	b1 f7       	brne	.-20     	; 0x5ac <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
 5c0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 5c4:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
 5c6:	f3 fc       	sbrc	r15, 3
 5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <debug_rx_byte+0x3a>
 5ca:	83 ff       	sbrs	r24, 3
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <debug_rx_byte+0x3a>
	  debug.datareg=val;
 5ce:	00 93 2d 01 	sts	0x012D, r16
	  debug.error=0x00;
 5d2:	10 92 2c 01 	sts	0x012C, r1
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 2c 01 	sts	0x012C, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
 5de:	80 91 2d 01 	lds	r24, 0x012D
}
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
 5ea:	0e 94 70 02 	call	0x4e0	; 0x4e0 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 5ee:	f6 b0       	in	r15, 0x06	; 6
 5f0:	00 e0       	ldi	r16, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	db cf       	rjmp	.-74     	; 0x5ac <debug_rx_byte+0xe>

000005f6 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
 5f6:	80 91 2d 01 	lds	r24, 0x012D
}
 5fa:	08 95       	ret

000005fc <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
 5fc:	10 92 2d 01 	sts	0x012D, r1
}
 600:	08 95       	ret

00000602 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
 602:	80 93 2d 01 	sts	0x012D, r24
}
 606:	08 95       	ret

00000608 <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 608:	bf 92       	push	r11
 60a:	cf 92       	push	r12
 60c:	df 92       	push	r13
 60e:	ef 92       	push	r14
 610:	ff 92       	push	r15
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	7b 01       	movw	r14, r22
 61c:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	e8 16       	cp	r14, r24
 622:	f1 04       	cpc	r15, r1
 624:	01 05       	cpc	r16, r1
 626:	11 05       	cpc	r17, r1
 628:	09 f0       	breq	.+2      	; 0x62c <debug_tx_hex+0x24>
 62a:	30 f4       	brcc	.+12     	; 0x638 <debug_tx_hex+0x30>
 62c:	c8 e0       	ldi	r28, 0x08	; 8
 62e:	d0 e0       	ldi	r29, 0x00	; 0
 630:	62 e0       	ldi	r22, 0x02	; 2
 632:	c6 2e       	mov	r12, r22
 634:	d1 2c       	mov	r13, r1
 636:	14 c0       	rjmp	.+40     	; 0x660 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	e8 16       	cp	r14, r24
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	f8 06       	cpc	r15, r24
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 07       	cpc	r16, r24
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	18 07       	cpc	r17, r24
 648:	30 f0       	brcs	.+12     	; 0x656 <debug_tx_hex+0x4e>
 64a:	c0 e2       	ldi	r28, 0x20	; 32
 64c:	d0 e0       	ldi	r29, 0x00	; 0
 64e:	58 e0       	ldi	r21, 0x08	; 8
 650:	c5 2e       	mov	r12, r21
 652:	d1 2c       	mov	r13, r1
 654:	05 c0       	rjmp	.+10     	; 0x660 <debug_tx_hex+0x58>
 656:	c0 e1       	ldi	r28, 0x10	; 16
 658:	d0 e0       	ldi	r29, 0x00	; 0
 65a:	44 e0       	ldi	r20, 0x04	; 4
 65c:	c4 2e       	mov	r12, r20
 65e:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 660:	80 e3       	ldi	r24, 0x30	; 48
 662:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
  debug_tx_byte('x');
 666:	88 e7       	ldi	r24, 0x78	; 120
 668:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
 66c:	bb 24       	eor	r11, r11
 66e:	17 c0       	rjmp	.+46     	; 0x69e <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 670:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 672:	d8 01       	movw	r26, r16
 674:	c7 01       	movw	r24, r14
 676:	0c 2e       	mov	r0, r28
 678:	04 c0       	rjmp	.+8      	; 0x682 <debug_tx_hex+0x7a>
 67a:	b6 95       	lsr	r27
 67c:	a7 95       	ror	r26
 67e:	97 95       	ror	r25
 680:	87 95       	ror	r24
 682:	0a 94       	dec	r0
 684:	d2 f7       	brpl	.-12     	; 0x67a <debug_tx_hex+0x72>
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	8f 70       	andi	r24, 0x0F	; 15
 68a:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 68c:	8a 30       	cpi	r24, 0x0A	; 10
 68e:	91 05       	cpc	r25, r1
 690:	10 f0       	brcs	.+4      	; 0x696 <debug_tx_hex+0x8e>
	    hex_digit+=55;
 692:	c7 96       	adiw	r24, 0x37	; 55
 694:	01 c0       	rjmp	.+2      	; 0x698 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 696:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 698:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 69c:	b3 94       	inc	r11
 69e:	8b 2d       	mov	r24, r11
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	8c 15       	cp	r24, r12
 6a4:	9d 05       	cpc	r25, r13
 6a6:	20 f3       	brcs	.-56     	; 0x670 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	bf 90       	pop	r11
 6ba:	08 95       	ret

000006bc <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 6bc:	af 92       	push	r10
 6be:	bf 92       	push	r11
 6c0:	cf 92       	push	r12
 6c2:	df 92       	push	r13
 6c4:	ef 92       	push	r14
 6c6:	ff 92       	push	r15
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	7b 01       	movw	r14, r22
 6d2:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 6d4:	6f 3f       	cpi	r22, 0xFF	; 255
 6d6:	71 05       	cpc	r23, r1
 6d8:	81 05       	cpc	r24, r1
 6da:	91 05       	cpc	r25, r1
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <debug_tx_bin+0x24>
 6de:	18 f4       	brcc	.+6      	; 0x6e6 <debug_tx_bin+0x2a>
 6e0:	f7 e0       	ldi	r31, 0x07	; 7
 6e2:	df 2e       	mov	r13, r31
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 6e6:	60 30       	cpi	r22, 0x00	; 0
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	73 07       	cpc	r23, r19
 6ec:	31 e0       	ldi	r19, 0x01	; 1
 6ee:	83 07       	cpc	r24, r19
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	93 07       	cpc	r25, r19
 6f4:	18 f0       	brcs	.+6      	; 0x6fc <debug_tx_bin+0x40>
 6f6:	ef e1       	ldi	r30, 0x1F	; 31
 6f8:	de 2e       	mov	r13, r30
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <debug_tx_bin+0x44>
 6fc:	7f e0       	ldi	r23, 0x0F	; 15
 6fe:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 700:	80 e3       	ldi	r24, 0x30	; 48
 702:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
  debug_tx_byte('b');
 706:	82 e6       	ldi	r24, 0x62	; 98
 708:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
 70c:	c0 e0       	ldi	r28, 0x00	; 0
 70e:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 710:	cd 2c       	mov	r12, r13
 712:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 714:	56 01       	movw	r10, r12
 716:	08 94       	sec
 718:	a1 1c       	adc	r10, r1
 71a:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 71c:	c6 01       	movw	r24, r12
 71e:	8c 1b       	sub	r24, r28
 720:	9d 0b       	sbc	r25, r29
 722:	a8 01       	movw	r20, r16
 724:	97 01       	movw	r18, r14
 726:	04 c0       	rjmp	.+8      	; 0x730 <debug_tx_bin+0x74>
 728:	56 95       	lsr	r21
 72a:	47 95       	ror	r20
 72c:	37 95       	ror	r19
 72e:	27 95       	ror	r18
 730:	8a 95       	dec	r24
 732:	d2 f7       	brpl	.-12     	; 0x728 <debug_tx_bin+0x6c>
 734:	da 01       	movw	r26, r20
 736:	c9 01       	movw	r24, r18
 738:	81 70       	andi	r24, 0x01	; 1
 73a:	90 70       	andi	r25, 0x00	; 0
 73c:	89 2b       	or	r24, r25
 73e:	11 f0       	breq	.+4      	; 0x744 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 740:	81 e3       	ldi	r24, 0x31	; 49
 742:	01 c0       	rjmp	.+2      	; 0x746 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 744:	80 e3       	ldi	r24, 0x30	; 48
 746:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
 74a:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 74c:	ca 15       	cp	r28, r10
 74e:	db 05       	cpc	r29, r11
 750:	29 f7       	brne	.-54     	; 0x71c <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	ff 90       	pop	r15
 75c:	ef 90       	pop	r14
 75e:	df 90       	pop	r13
 760:	cf 90       	pop	r12
 762:	bf 90       	pop	r11
 764:	af 90       	pop	r10
 766:	08 95       	ret

00000768 <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 768:	8d e0       	ldi	r24, 0x0D	; 13
 76a:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
  debug_tx_byte('\n');
 76e:	8a e0       	ldi	r24, 0x0A	; 10
 770:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
}
 774:	08 95       	ret

00000776 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
}
 77c:	08 95       	ret

0000077e <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 77e:	8c e2       	ldi	r24, 0x2C	; 44
 780:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
}
 784:	08 95       	ret

00000786 <debug_tx_text>:

void debug_tx_text(char *str){
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	ec 01       	movw	r28, r24
 78e:	10 e0       	ldi	r17, 0x00	; 0
 790:	03 c0       	rjmp	.+6      	; 0x798 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 792:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
        i++;
 796:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 798:	fe 01       	movw	r30, r28
 79a:	e1 0f       	add	r30, r17
 79c:	f1 1d       	adc	r31, r1
 79e:	80 81       	ld	r24, Z
 7a0:	88 23       	and	r24, r24
 7a2:	b9 f7       	brne	.-18     	; 0x792 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	08 95       	ret

000007ac <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 7ac:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_nl();
 7b0:	0e 94 b4 03 	call	0x768	; 0x768 <debug_tx_nl>
}
 7b4:	08 95       	ret

000007b6 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 7b6:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 7ba:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
}
 7be:	08 95       	ret

000007c0 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 7c0:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_cm();
 7c4:	0e 94 bf 03 	call	0x77e	; 0x77e <debug_tx_cm>
}
 7c8:	08 95       	ret

000007ca <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 7ca:	bf 92       	push	r11
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	6b 01       	movw	r12, r22
 7da:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 7dc:	61 15       	cp	r22, r1
 7de:	71 05       	cpc	r23, r1
 7e0:	81 05       	cpc	r24, r1
 7e2:	91 05       	cpc	r25, r1
 7e4:	31 f4       	brne	.+12     	; 0x7f2 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 7e6:	10 92 50 01 	sts	0x0150, r1
    debug.input_num_digits=1;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 93 58 01 	sts	0x0158, r24
 7f0:	23 c0       	rjmp	.+70     	; 0x838 <debug_determine_digit_numbers+0x6e>
 7f2:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 7f4:	0b 2d       	mov	r16, r11
 7f6:	10 e0       	ldi	r17, 0x00	; 0
 7f8:	04 5d       	subi	r16, 0xD4	; 212
 7fa:	1e 4f       	sbci	r17, 0xFE	; 254
 7fc:	c7 01       	movw	r24, r14
 7fe:	b6 01       	movw	r22, r12
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	0e 94 69 05 	call	0xad2	; 0xad2 <__udivmodsi4>
 80c:	f8 01       	movw	r30, r16
 80e:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 810:	c7 01       	movw	r24, r14
 812:	b6 01       	movw	r22, r12
 814:	2a e0       	ldi	r18, 0x0A	; 10
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	0e 94 69 05 	call	0xad2	; 0xad2 <__udivmodsi4>
 820:	c9 01       	movw	r24, r18
 822:	da 01       	movw	r26, r20
 824:	6c 01       	movw	r12, r24
 826:	7d 01       	movw	r14, r26
      i++;
 828:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 82a:	c1 14       	cp	r12, r1
 82c:	d1 04       	cpc	r13, r1
 82e:	e1 04       	cpc	r14, r1
 830:	f1 04       	cpc	r15, r1
 832:	01 f7       	brne	.-64     	; 0x7f4 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 834:	b0 92 58 01 	sts	0x0158, r11
  }
}
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	ff 90       	pop	r15
 83e:	ef 90       	pop	r14
 840:	df 90       	pop	r13
 842:	cf 90       	pop	r12
 844:	bf 90       	pop	r11
 846:	08 95       	ret

00000848 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 848:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 84a:	10 91 58 01 	lds	r17, 0x0158
 84e:	09 c0       	rjmp	.+18     	; 0x862 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 850:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 852:	e1 2f       	mov	r30, r17
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	e4 5d       	subi	r30, 0xD4	; 212
 858:	fe 4f       	sbci	r31, 0xFE	; 254
 85a:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
 85c:	80 5d       	subi	r24, 0xD0	; 208
 85e:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 862:	11 23       	and	r17, r17
 864:	a9 f7       	brne	.-22     	; 0x850 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 866:	1f 91       	pop	r17
 868:	08 95       	ret

0000086a <debug_tx_number>:

void debug_tx_number(int32_t num){
 86a:	ef 92       	push	r14
 86c:	ff 92       	push	r15
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	7b 01       	movw	r14, r22
 874:	8c 01       	movw	r16, r24
  if(num<0){
 876:	97 ff       	sbrs	r25, 7
 878:	0b c0       	rjmp	.+22     	; 0x890 <debug_tx_number+0x26>
    debug_tx_byte('-');
 87a:	8d e2       	ldi	r24, 0x2D	; 45
 87c:	0e 94 77 02 	call	0x4ee	; 0x4ee <debug_tx_byte>
	num=-num;
 880:	10 95       	com	r17
 882:	00 95       	com	r16
 884:	f0 94       	com	r15
 886:	e0 94       	com	r14
 888:	e1 1c       	adc	r14, r1
 88a:	f1 1c       	adc	r15, r1
 88c:	01 1d       	adc	r16, r1
 88e:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 890:	c8 01       	movw	r24, r16
 892:	b7 01       	movw	r22, r14
 894:	0e 94 e5 03 	call	0x7ca	; 0x7ca <debug_determine_digit_numbers>
  debug_tx_number_digits();
 898:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_number_digits>
}
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	08 95       	ret

000008a6 <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 8a6:	0e 94 35 04 	call	0x86a	; 0x86a <debug_tx_number>
  debug_tx_nl();
 8aa:	0e 94 b4 03 	call	0x768	; 0x768 <debug_tx_nl>
}
 8ae:	08 95       	ret

000008b0 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 8b0:	0e 94 35 04 	call	0x86a	; 0x86a <debug_tx_number>
  debug_tx_sp();
 8b4:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
}
 8b8:	08 95       	ret

000008ba <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 8ba:	0e 94 35 04 	call	0x86a	; 0x86a <debug_tx_number>
  debug_tx_text(",");
 8be:	86 e1       	ldi	r24, 0x16	; 22
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
}
 8c6:	08 95       	ret

000008c8 <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 8c8:	0e 94 04 03 	call	0x608	; 0x608 <debug_tx_hex>
  debug_tx_nl();
 8cc:	0e 94 b4 03 	call	0x768	; 0x768 <debug_tx_nl>
}
 8d0:	08 95       	ret

000008d2 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 8d2:	0e 94 04 03 	call	0x608	; 0x608 <debug_tx_hex>
  debug_tx_sp();
 8d6:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
}
 8da:	08 95       	ret

000008dc <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 8dc:	0e 94 04 03 	call	0x608	; 0x608 <debug_tx_hex>
  debug_tx_text(",");
 8e0:	86 e1       	ldi	r24, 0x16	; 22
 8e2:	91 e0       	ldi	r25, 0x01	; 1
 8e4:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
}
 8e8:	08 95       	ret

000008ea <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 8ea:	ef 92       	push	r14
 8ec:	ff 92       	push	r15
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	7a 01       	movw	r14, r20
 8f4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 8f6:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 8fa:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
  debug_tx_number_nl(num);
 8fe:	c8 01       	movw	r24, r16
 900:	b7 01       	movw	r22, r14
 902:	0e 94 53 04 	call	0x8a6	; 0x8a6 <debug_tx_number_nl>
}
 906:	1f 91       	pop	r17
 908:	0f 91       	pop	r16
 90a:	ff 90       	pop	r15
 90c:	ef 90       	pop	r14
 90e:	08 95       	ret

00000910 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 910:	ef 92       	push	r14
 912:	ff 92       	push	r15
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
 918:	7a 01       	movw	r14, r20
 91a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 91c:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 920:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
  debug_tx_number_sp(num);
 924:	c8 01       	movw	r24, r16
 926:	b7 01       	movw	r22, r14
 928:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug_tx_number_sp>
}
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	08 95       	ret

00000936 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 936:	ef 92       	push	r14
 938:	ff 92       	push	r15
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	7a 01       	movw	r14, r20
 940:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 942:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 946:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
  debug_tx_number_cm(num);
 94a:	c8 01       	movw	r24, r16
 94c:	b7 01       	movw	r22, r14
 94e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <debug_tx_number_cm>
}
 952:	1f 91       	pop	r17
 954:	0f 91       	pop	r16
 956:	ff 90       	pop	r15
 958:	ef 90       	pop	r14
 95a:	08 95       	ret

0000095c <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 95c:	ef 92       	push	r14
 95e:	ff 92       	push	r15
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	7a 01       	movw	r14, r20
 966:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 968:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 96c:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 970:	c8 01       	movw	r24, r16
 972:	b7 01       	movw	r22, r14
 974:	0e 94 64 04 	call	0x8c8	; 0x8c8 <debug_tx_number_hex_nl>
}
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	08 95       	ret

00000982 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 982:	ef 92       	push	r14
 984:	ff 92       	push	r15
 986:	0f 93       	push	r16
 988:	1f 93       	push	r17
 98a:	7a 01       	movw	r14, r20
 98c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 98e:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 992:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 996:	c8 01       	movw	r24, r16
 998:	b7 01       	movw	r22, r14
 99a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <debug_tx_number_hex_sp>
}
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	08 95       	ret

000009a8 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
 9a8:	ef 92       	push	r14
 9aa:	ff 92       	push	r15
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	7a 01       	movw	r14, r20
 9b2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 9b4:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_text>
  debug_tx_sp();
 9b8:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 9bc:	c8 01       	movw	r24, r16
 9be:	b7 01       	movw	r22, r14
 9c0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <debug_tx_number_hex_cm>
}
 9c4:	1f 91       	pop	r17
 9c6:	0f 91       	pop	r16
 9c8:	ff 90       	pop	r15
 9ca:	ef 90       	pop	r14
 9cc:	08 95       	ret

000009ce <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
 9ce:	ec e2       	ldi	r30, 0x2C	; 44
 9d0:	f1 e0       	ldi	r31, 0x01	; 1
 9d2:	e8 0f       	add	r30, r24
 9d4:	f1 1d       	adc	r31, r1
 9d6:	83 81       	ldd	r24, Z+3	; 0x03
}
 9d8:	08 95       	ret

000009da <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 9da:	80 91 4f 01 	lds	r24, 0x014F
}
 9de:	08 95       	ret

000009e0 <debug_flush_buf>:

void debug_flush_buf(void){
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 9e4:	fc 01       	movw	r30, r24
 9e6:	e4 5d       	subi	r30, 0xD4	; 212
 9e8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ea:	13 82       	std	Z+3, r1	; 0x03
 9ec:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 9ee:	80 32       	cpi	r24, 0x20	; 32
 9f0:	91 05       	cpc	r25, r1
 9f2:	c1 f7       	brne	.-16     	; 0x9e4 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 9f4:	10 92 4f 01 	sts	0x014F, r1
}
 9f8:	08 95       	ret

000009fa <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
 9fa:	80 91 2e 01 	lds	r24, 0x012E
}
 9fe:	08 95       	ret

00000a00 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
 a00:	80 91 2e 01 	lds	r24, 0x012E
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
 a04:	88 23       	and	r24, r24
 a06:	11 f0       	breq	.+4      	; 0xa0c <debug_data_available_rx_buf+0xc>
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 a0c:	80 91 4f 01 	lds	r24, 0x014F
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	88 23       	and	r24, r24
 a14:	09 f4       	brne	.+2      	; 0xa18 <debug_data_available_rx_buf+0x18>
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
 a1c:	89 2f       	mov	r24, r25
 a1e:	08 95       	ret

00000a20 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 a20:	80 91 4f 01 	lds	r24, 0x014F
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
 a24:	08 95       	ret

00000a26 <debug_init>:

void debug_init(void){
  debug_struct_init();
 a26:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <debug_struct_init>
  debug_timings_init();
 a2a:	0e 94 16 02 	call	0x42c	; 0x42c <debug_timings_init>
  debug_gpio_init();
 a2e:	0e 94 3b 02 	call	0x476	; 0x476 <debug_gpio_init>
}
 a32:	08 95       	ret

00000a34 <__vector_4>:


ISR(ISR_PCINT_VECT){
 a34:	1f 92       	push	r1
 a36:	0f 92       	push	r0
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	0f 92       	push	r0
 a3c:	11 24       	eor	r1, r1
 a3e:	2f 93       	push	r18
 a40:	3f 93       	push	r19
 a42:	4f 93       	push	r20
 a44:	5f 93       	push	r21
 a46:	6f 93       	push	r22
 a48:	7f 93       	push	r23
 a4a:	8f 93       	push	r24
 a4c:	9f 93       	push	r25
 a4e:	af 93       	push	r26
 a50:	bf 93       	push	r27
 a52:	ef 93       	push	r30
 a54:	ff 93       	push	r31
  debug.databsy=1;
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	80 93 2e 01 	sts	0x012E, r24
  uint8_t val=debug_rx_byte();
 a5c:	0e 94 cf 02 	call	0x59e	; 0x59e <debug_rx_byte>
 a60:	98 2f       	mov	r25, r24
  if(debug.error==0){
 a62:	80 91 2c 01 	lds	r24, 0x012C
 a66:	88 23       	and	r24, r24
 a68:	99 f4       	brne	.+38     	; 0xa90 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
 a6a:	e0 91 4f 01 	lds	r30, 0x014F
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	e4 5d       	subi	r30, 0xD4	; 212
 a72:	fe 4f       	sbci	r31, 0xFE	; 254
 a74:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
 a76:	80 91 4f 01 	lds	r24, 0x014F
 a7a:	8f 5f       	subi	r24, 0xFF	; 255
 a7c:	80 93 4f 01 	sts	0x014F, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
 a80:	80 91 4f 01 	lds	r24, 0x014F
 a84:	81 32       	cpi	r24, 0x21	; 33
 a86:	10 f0       	brcs	.+4      	; 0xa8c <__vector_4+0x58>
	  debug.bufindex=0;
 a88:	10 92 4f 01 	sts	0x014F, r1
	}
    debug_timer_start();
 a8c:	0e 94 29 02 	call	0x452	; 0x452 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
 a90:	ff 91       	pop	r31
 a92:	ef 91       	pop	r30
 a94:	bf 91       	pop	r27
 a96:	af 91       	pop	r26
 a98:	9f 91       	pop	r25
 a9a:	8f 91       	pop	r24
 a9c:	7f 91       	pop	r23
 a9e:	6f 91       	pop	r22
 aa0:	5f 91       	pop	r21
 aa2:	4f 91       	pop	r20
 aa4:	3f 91       	pop	r19
 aa6:	2f 91       	pop	r18
 aa8:	0f 90       	pop	r0
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	0f 90       	pop	r0
 aae:	1f 90       	pop	r1
 ab0:	18 95       	reti

00000ab2 <__vector_16>:

ISR(TIMER_OVF_VECT){
 ab2:	1f 92       	push	r1
 ab4:	0f 92       	push	r0
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	0f 92       	push	r0
 aba:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 abc:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 ac0:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 ac2:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
 ac4:	10 92 2e 01 	sts	0x012E, r1
}
 ac8:	0f 90       	pop	r0
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	0f 90       	pop	r0
 ace:	1f 90       	pop	r1
 ad0:	18 95       	reti

00000ad2 <__udivmodsi4>:
 ad2:	a1 e2       	ldi	r26, 0x21	; 33
 ad4:	1a 2e       	mov	r1, r26
 ad6:	aa 1b       	sub	r26, r26
 ad8:	bb 1b       	sub	r27, r27
 ada:	fd 01       	movw	r30, r26
 adc:	0d c0       	rjmp	.+26     	; 0xaf8 <__udivmodsi4_ep>

00000ade <__udivmodsi4_loop>:
 ade:	aa 1f       	adc	r26, r26
 ae0:	bb 1f       	adc	r27, r27
 ae2:	ee 1f       	adc	r30, r30
 ae4:	ff 1f       	adc	r31, r31
 ae6:	a2 17       	cp	r26, r18
 ae8:	b3 07       	cpc	r27, r19
 aea:	e4 07       	cpc	r30, r20
 aec:	f5 07       	cpc	r31, r21
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <__udivmodsi4_ep>
 af0:	a2 1b       	sub	r26, r18
 af2:	b3 0b       	sbc	r27, r19
 af4:	e4 0b       	sbc	r30, r20
 af6:	f5 0b       	sbc	r31, r21

00000af8 <__udivmodsi4_ep>:
 af8:	66 1f       	adc	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	1a 94       	dec	r1
 b02:	69 f7       	brne	.-38     	; 0xade <__udivmodsi4_loop>
 b04:	60 95       	com	r22
 b06:	70 95       	com	r23
 b08:	80 95       	com	r24
 b0a:	90 95       	com	r25
 b0c:	9b 01       	movw	r18, r22
 b0e:	ac 01       	movw	r20, r24
 b10:	bd 01       	movw	r22, r26
 b12:	cf 01       	movw	r24, r30
 b14:	08 95       	ret

00000b16 <_exit>:
 b16:	f8 94       	cli

00000b18 <__stop_program>:
 b18:	ff cf       	rjmp	.-2      	; 0xb18 <__stop_program>
