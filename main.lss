
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001790  00001824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800122  00800122  00001846  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009f2  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002120  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086a  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019b4  00000000  00000000  00004c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000720  00000000  00000000  00006618  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009be  00000000  00000000  00006d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d5d  00000000  00000000  000076f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00008453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e0 e9       	ldi	r30, 0x90	; 144
      aa:	f7 e1       	ldi	r31, 0x17	; 23
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	aa 38       	cpi	r26, 0x8A	; 138
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29

  DDRD  |= (1<<4);
      d8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      da:	5c 98       	cbi	0x0b, 4	; 11
  
  MPU6050_Init();
      dc:	0e 94 5f 04 	call	0x8be	; 0x8be <MPU6050_Init>
  debug_init();
      e0:	0e 94 d7 07 	call	0xfae	; 0xfae <debug_init>
  Servo_Init(50);
      e4:	62 e3       	ldi	r22, 0x32	; 50
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Servo_Init>
  debug_tx_text_nl("Debug Started");
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0e 94 50 06 	call	0xca0	; 0xca0 <debug_tx_text_nl>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f8:	cc e2       	ldi	r28, 0x2C	; 44
      fa:	d1 e0       	ldi	r29, 0x01	; 1
	
	debug_tx_number_cm(I2C_Get_Error());
	debug_tx_number_cm(I2C_Get_ErrorAccu());*/
	
	//debug_tx_number_cm(MPU6050_Read_Pitch_Angle_Safely());
	debug_tx_number_cm(MPU6050_Read_Roll_Angle_Safely());
      fc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MPU6050_Read_Roll_Angle_Safely>
     100:	aa 27       	eor	r26, r26
     102:	97 fd       	sbrc	r25, 7
     104:	a0 95       	com	r26
     106:	ba 2f       	mov	r27, r26
     108:	bc 01       	movw	r22, r24
     10a:	cd 01       	movw	r24, r26
     10c:	0e 94 d7 06 	call	0xdae	; 0xdae <debug_tx_number_cm>
	
	debug_tx_nl();
     110:	0e 94 2e 06 	call	0xc5c	; 0xc5c <debug_tx_nl>
     114:	88 ee       	ldi	r24, 0xE8	; 232
     116:	93 e0       	ldi	r25, 0x03	; 3
     118:	fe 01       	movw	r30, r28
     11a:	31 97       	sbiw	r30, 0x01	; 1
     11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     120:	d9 f7       	brne	.-10     	; 0x118 <main+0x44>
     122:	ec cf       	rjmp	.-40     	; 0xfc <main+0x28>

00000124 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     124:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     128:	10 92 23 01 	sts	0x0123, r1
  I2C.Error=0x00;
     12c:	10 92 24 01 	sts	0x0124, r1
  I2C.ErrorAccu=0x00;
     130:	10 92 26 01 	sts	0x0126, r1
     134:	10 92 25 01 	sts	0x0125, r1
}
     138:	08 95       	ret

0000013a <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     13a:	80 e5       	ldi	r24, 0x50	; 80
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     140:	08 95       	ret

00000142 <I2C_Bit_Delay>:
     142:	80 ea       	ldi	r24, 0xA0	; 160
     144:	8a 95       	dec	r24
     146:	f1 f7       	brne	.-4      	; 0x144 <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     148:	08 95       	ret

0000014a <I2C_Guard_Delay>:
     14a:	88 e0       	ldi	r24, 0x08	; 8
     14c:	8a 95       	dec	r24
     14e:	f1 f7       	brne	.-4      	; 0x14c <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     150:	08 95       	ret

00000152 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	11 f4       	brne	.+4      	; 0x15a <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     156:	3d 9a       	sbi	0x07, 5	; 7
     158:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     15a:	3d 98       	cbi	0x07, 5	; 7
     15c:	08 95       	ret

0000015e <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	11 f4       	brne	.+4      	; 0x166 <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     162:	45 9a       	sbi	0x08, 5	; 8
     164:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     166:	45 98       	cbi	0x08, 5	; 8
     168:	08 95       	ret

0000016a <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	19 f4       	brne	.+6      	; 0x174 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     16e:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     170:	3d 98       	cbi	0x07, 5	; 7
     172:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     174:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     176:	3d 9a       	sbi	0x07, 5	; 7
     178:	08 95       	ret

0000017a <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     17a:	86 b1       	in	r24, 0x06	; 6
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	25 e0       	ldi	r18, 0x05	; 5
     180:	96 95       	lsr	r25
     182:	87 95       	ror	r24
     184:	2a 95       	dec	r18
     186:	e1 f7       	brne	.-8      	; 0x180 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     188:	81 70       	andi	r24, 0x01	; 1
     18a:	08 95       	ret

0000018c <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	11 f4       	brne	.+4      	; 0x194 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     190:	3c 9a       	sbi	0x07, 4	; 7
     192:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     194:	3c 98       	cbi	0x07, 4	; 7
     196:	08 95       	ret

00000198 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	11 f4       	brne	.+4      	; 0x1a0 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     19c:	44 9a       	sbi	0x08, 4	; 8
     19e:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1a0:	44 98       	cbi	0x08, 4	; 8
     1a2:	08 95       	ret

000001a4 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	19 f4       	brne	.+6      	; 0x1ae <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1a8:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1aa:	3c 98       	cbi	0x07, 4	; 7
     1ac:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1ae:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1b0:	3c 9a       	sbi	0x07, 4	; 7
     1b2:	08 95       	ret

000001b4 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     1b4:	86 b1       	in	r24, 0x06	; 6
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	34 e0       	ldi	r19, 0x04	; 4
     1ba:	96 95       	lsr	r25
     1bc:	87 95       	ror	r24
     1be:	3a 95       	dec	r19
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1c2:	81 70       	andi	r24, 0x01	; 1
     1c4:	08 95       	ret

000001c6 <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1c6:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
}
     1ce:	08 95       	ret

000001d0 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1d0:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
}
     1d8:	08 95       	ret

000001da <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1da:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1dc:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
}
     1ea:	08 95       	ret

000001ec <I2C_Start>:

void I2C_Start(void){
     1ec:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     1fa:	10 e5       	ldi	r17, 0x50	; 80
     1fc:	81 2f       	mov	r24, r17
     1fe:	8a 95       	dec	r24
     200:	f1 f7       	brne	.-4      	; 0x1fe <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     208:	81 2f       	mov	r24, r17
     20a:	8a 95       	dec	r24
     20c:	f1 f7       	brne	.-4      	; 0x20a <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     214:	1a 95       	dec	r17
     216:	f1 f7       	brne	.-4      	; 0x214 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     218:	1f 91       	pop	r17
     21a:	08 95       	ret

0000021c <I2C_Stop>:

void I2C_Stop(void){
     21c:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     22a:	10 e5       	ldi	r17, 0x50	; 80
     22c:	81 2f       	mov	r24, r17
     22e:	8a 95       	dec	r24
     230:	f1 f7       	brne	.-4      	; 0x22e <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     238:	81 2f       	mov	r24, r17
     23a:	8a 95       	dec	r24
     23c:	f1 f7       	brne	.-4      	; 0x23a <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     244:	1a 95       	dec	r17
     246:	f1 f7       	brne	.-4      	; 0x244 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     248:	1f 91       	pop	r17
     24a:	08 95       	ret

0000024c <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	08 2f       	mov	r16, r24
     256:	10 e0       	ldi	r17, 0x00	; 0
     258:	50 e5       	ldi	r21, 0x50	; 80
     25a:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     25c:	48 e0       	ldi	r20, 0x08	; 8
     25e:	e4 2e       	mov	r14, r20
     260:	07 ff       	sbrs	r16, 7
     262:	02 c0       	rjmp	.+4      	; 0x268 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	01 c0       	rjmp	.+2      	; 0x26a <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     26e:	8f 2d       	mov	r24, r15
     270:	8a 95       	dec	r24
     272:	f1 f7       	brne	.-4      	; 0x270 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     27a:	8f 2d       	mov	r24, r15
     27c:	8a 95       	dec	r24
     27e:	f1 f7       	brne	.-4      	; 0x27c <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     286:	8e 2d       	mov	r24, r14
     288:	8a 95       	dec	r24
     28a:	f1 f7       	brne	.-4      	; 0x288 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     28c:	1f 5f       	subi	r17, 0xFF	; 255
     28e:	18 30       	cpi	r17, 0x08	; 8
     290:	11 f0       	breq	.+4      	; 0x296 <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     292:	00 0f       	add	r16, r16
     294:	e5 cf       	rjmp	.-54     	; 0x260 <I2C_Data_Send+0x14>
  }
}
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	60 e5       	ldi	r22, 0x50	; 80
     2b2:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     2b4:	11 0f       	add	r17, r17
     2b6:	8f 2d       	mov	r24, r15
     2b8:	8a 95       	dec	r24
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     2c2:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     2c4:	11 60       	ori	r17, 0x01	; 1
     2c6:	8f 2d       	mov	r24, r15
     2c8:	8a 95       	dec	r24
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     2d2:	0f 5f       	subi	r16, 0xFF	; 255
     2d4:	08 30       	cpi	r16, 0x08	; 8
     2d6:	71 f7       	brne	.-36     	; 0x2b4 <I2C_Data_Receive+0x14>
     2d8:	80 e5       	ldi	r24, 0x50	; 80
     2da:	8a 95       	dec	r24
     2dc:	f1 f7       	brne	.-4      	; 0x2da <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
  return data;
}
     2e4:	81 2f       	mov	r24, r17
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	08 95       	ret

000002ee <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     2ee:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     2f6:	10 e5       	ldi	r17, 0x50	; 80
     2f8:	81 2f       	mov	r24, r17
     2fa:	8a 95       	dec	r24
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     304:	1a 95       	dec	r17
     306:	f1 f7       	brne	.-4      	; 0x304 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
}
     30e:	1f 91       	pop	r17
     310:	08 95       	ret

00000312 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     312:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     31a:	10 e5       	ldi	r17, 0x50	; 80
     31c:	81 2f       	mov	r24, r17
     31e:	8a 95       	dec	r24
     320:	f1 f7       	brne	.-4      	; 0x31e <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     328:	1a 95       	dec	r17
     32a:	f1 f7       	brne	.-4      	; 0x328 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
}
     332:	1f 91       	pop	r17
     334:	08 95       	ret

00000336 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SDA_Set_Output>
     340:	00 e5       	ldi	r16, 0x50	; 80
     342:	80 2f       	mov	r24, r16
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     34e:	16 b1       	in	r17, 0x06	; 6
     350:	0a 95       	dec	r16
     352:	f1 f7       	brne	.-4      	; 0x350 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SCL_Set_Output>
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	8a 95       	dec	r24
     35e:	f1 f7       	brne	.-4      	; 0x35c <I2C_Get_Ack+0x26>
     360:	12 95       	swap	r17
     362:	1f 70       	andi	r17, 0x0F	; 15
     364:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     366:	81 2f       	mov	r24, r17
     368:	81 70       	andi	r24, 0x01	; 1
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     370:	1f 93       	push	r17
     372:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     374:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Start>
  I2C_Data_Send(address);
     378:	81 2f       	mov	r24, r17
     37a:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  ack = I2C_Get_Ack();
     37e:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     382:	18 2f       	mov	r17, r24
  I2C_Stop();
     384:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_Stop>
  return ack;
}
     388:	81 2f       	mov	r24, r17
     38a:	1f 91       	pop	r17
     38c:	08 95       	ret

0000038e <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     38e:	1f 93       	push	r17
     390:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     392:	81 2f       	mov	r24, r17
     394:	0e 94 b8 01 	call	0x370	; 0x370 <I2C_Send_Device_Address>
	if(sts==1){
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	11 f4       	brne	.+4      	; 0x3a0 <I2C_Get_Device_Address+0x12>
     39c:	81 2f       	mov	r24, r17
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     3a0:	1f 5f       	subi	r17, 0xFF	; 255
     3a2:	1f 3f       	cpi	r17, 0xFF	; 255
     3a4:	b1 f7       	brne	.-20     	; 0x392 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     3a6:	1f 91       	pop	r17
     3a8:	08 95       	ret

000003aa <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     3b6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     3ba:	80 91 22 01 	lds	r24, 0x0122
     3be:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     3c2:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     3c6:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     3c8:	81 2f       	mov	r24, r17
     3ca:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     3ce:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     3d2:	f8 2e       	mov	r15, r24
  I2C_Stop();
     3d4:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_Stop>
  I2C_Start();
     3d8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     3dc:	80 91 23 01 	lds	r24, 0x0123
     3e0:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     3e4:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     3e8:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     3ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Data_Receive>
     3ee:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     3f0:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     3f4:	08 2f       	mov	r16, r24
  I2C_Stop();
     3f6:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_Stop>
  if(sts == 0x07){
     3fa:	ff 0c       	add	r15, r15
     3fc:	11 0f       	add	r17, r17
     3fe:	11 0f       	add	r17, r17
     400:	1f 29       	or	r17, r15
     402:	1e 29       	or	r17, r14
     404:	00 0f       	add	r16, r16
     406:	00 0f       	add	r16, r16
     408:	00 0f       	add	r16, r16
     40a:	01 2b       	or	r16, r17
     40c:	07 30       	cpi	r16, 0x07	; 7
     40e:	21 f4       	brne	.+8      	; 0x418 <I2C_Read_Register+0x6e>
    sts = data;
	I2C.Error=0x00;
     410:	10 92 24 01 	sts	0x0124, r1
     414:	8d 2d       	mov	r24, r13
     416:	0d c0       	rjmp	.+26     	; 0x432 <I2C_Read_Register+0x88>
  }else{
    data=0;
	I2C.Error=0x01;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 24 01 	sts	0x0124, r24
	I2C.ErrorAccu++;
     41e:	80 91 25 01 	lds	r24, 0x0125
     422:	90 91 26 01 	lds	r25, 0x0126
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	90 93 26 01 	sts	0x0126, r25
     42c:	80 93 25 01 	sts	0x0125, r24
     430:	8f ef       	ldi	r24, 0xFF	; 255
    sts = 0xFF;
  }
  return sts;
}
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	08 95       	ret

0000043e <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	18 2f       	mov	r17, r24
     448:	f6 2e       	mov	r15, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     44a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     44e:	80 91 22 01 	lds	r24, 0x0122
     452:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     456:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     45a:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     45c:	81 2f       	mov	r24, r17
     45e:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     462:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     466:	08 2f       	mov	r16, r24
  I2C_Data_Send(val);
     468:	8f 2d       	mov	r24, r15
     46a:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     46e:	0e 94 9b 01 	call	0x336	; 0x336 <I2C_Get_Ack>
     472:	18 2f       	mov	r17, r24
  I2C_Stop();
     474:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_Stop>
  if(sts == 0x07){
     478:	00 0f       	add	r16, r16
     47a:	11 0f       	add	r17, r17
     47c:	11 0f       	add	r17, r17
     47e:	10 2b       	or	r17, r16
     480:	1e 29       	or	r17, r14
     482:	17 30       	cpi	r17, 0x07	; 7
     484:	19 f4       	brne	.+6      	; 0x48c <I2C_Write_Register+0x4e>
    sts = data;
	I2C.Error=0x00;
     486:	10 92 24 01 	sts	0x0124, r1
     48a:	0c c0       	rjmp	.+24     	; 0x4a4 <I2C_Write_Register+0x66>
  }else{
	I2C.Error=0x02;
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	80 93 24 01 	sts	0x0124, r24
	I2C.ErrorAccu++;
     492:	80 91 25 01 	lds	r24, 0x0125
     496:	90 91 26 01 	lds	r25, 0x0126
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	90 93 26 01 	sts	0x0126, r25
     4a0:	80 93 25 01 	sts	0x0125, r24
    sts = 0xFF;
  }
}
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	08 95       	ret

000004ae <I2C_Get_Error>:

uint8_t I2C_Get_Error(void){
  return I2C.Error;
}
     4ae:	80 91 24 01 	lds	r24, 0x0124
     4b2:	08 95       	ret

000004b4 <I2C_Get_ErrorAccu>:

uint16_t I2C_Get_ErrorAccu(void){
  return I2C.ErrorAccu;
}
     4b4:	80 91 25 01 	lds	r24, 0x0125
     4b8:	90 91 26 01 	lds	r25, 0x0126
     4bc:	08 95       	ret

000004be <I2C_Set_Mode_Sleep>:


//////////////////////////MPU-6050 Init///////////////////

void I2C_Set_Mode_Sleep(void){
  if( (I2C_Read_Register(0x6B) & 0x40) == 0){
     4be:	8b e6       	ldi	r24, 0x6B	; 107
     4c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
     4c4:	86 fd       	sbrc	r24, 6
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <I2C_Set_Mode_Sleep+0x12>
    I2C_Write_Register(0x6B, 0x40);
     4c8:	8b e6       	ldi	r24, 0x6B	; 107
     4ca:	60 e4       	ldi	r22, 0x40	; 64
     4cc:	0e 94 1f 02 	call	0x43e	; 0x43e <I2C_Write_Register>
     4d0:	08 95       	ret

000004d2 <I2C_Set_Mode_Active>:
  }
}

void I2C_Set_Mode_Active(void){
  if( (I2C_Read_Register(0x6B) & 0x40) != 0){
     4d2:	8b e6       	ldi	r24, 0x6B	; 107
     4d4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
     4d8:	86 ff       	sbrs	r24, 6
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <I2C_Set_Mode_Active+0x12>
    I2C_Write_Register(0x6B, 0x00);
     4dc:	8b e6       	ldi	r24, 0x6B	; 107
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	0e 94 1f 02 	call	0x43e	; 0x43e <I2C_Write_Register>
     4e4:	08 95       	ret

000004e6 <I2C_Read_Temp>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Temp(void){
     4e6:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
     4e8:	81 e4       	ldi	r24, 0x41	; 65
     4ea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
     4ee:	18 2f       	mov	r17, r24
  data <<= 8;
  data |= I2C_Read_Register(0x42);
     4f0:	82 e4       	ldi	r24, 0x42	; 66
     4f2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
     4f6:	28 2f       	mov	r18, r24
  data /=340;
  data +=36;
  if(I2C_Get_Error()!=0){
     4f8:	80 91 24 01 	lds	r24, 0x0124
     4fc:	88 23       	and	r24, r24
     4fe:	19 f0       	breq	.+6      	; 0x506 <I2C_Read_Temp+0x20>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	0c c0       	rjmp	.+24     	; 0x51e <I2C_Read_Temp+0x38>
}

int16_t I2C_Read_Temp(void){
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
  data <<= 8;
     506:	91 2f       	mov	r25, r17
     508:	80 e0       	ldi	r24, 0x00	; 0
  data |= I2C_Read_Register(0x42);
     50a:	30 e0       	ldi	r19, 0x00	; 0
  data /=340;
     50c:	82 2b       	or	r24, r18
     50e:	93 2b       	or	r25, r19
     510:	64 e5       	ldi	r22, 0x54	; 84
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodhi4>
  data +=36;
     518:	9b 01       	movw	r18, r22
     51a:	2c 5d       	subi	r18, 0xDC	; 220
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return data;
}
     51e:	c9 01       	movw	r24, r18
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <I2C_Read_Gyro_Z>:
    data = LPF_Get_Filtered_Value(4, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Z(void){
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
     52c:	87 e4       	ldi	r24, 0x47	; 71
     52e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  data <<= 8;
     532:	f8 2e       	mov	r15, r24
     534:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
     536:	88 e4       	ldi	r24, 0x48	; 72
     538:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	e8 2a       	or	r14, r24
     540:	f9 2a       	or	r15, r25
     542:	00 27       	eor	r16, r16
     544:	f7 fc       	sbrc	r15, 7
     546:	00 95       	com	r16
     548:	10 2f       	mov	r17, r16
     54a:	85 e0       	ldi	r24, 0x05	; 5
     54c:	b8 01       	movw	r22, r16
     54e:	a7 01       	movw	r20, r14
     550:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LPF_Get_Filtered_Value>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     558:	80 91 24 01 	lds	r24, 0x0124
     55c:	88 23       	and	r24, r24
     55e:	19 f0       	breq	.+6      	; 0x566 <I2C_Read_Gyro_Z+0x42>
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	01 c0       	rjmp	.+2      	; 0x568 <I2C_Read_Gyro_Z+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
  data <<= 8;
  data |= I2C_Read_Register(0x48);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     566:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     568:	cb 01       	movw	r24, r22
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <I2C_Read_Gyro_Y>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Y(void){
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x45);
     57c:	85 e4       	ldi	r24, 0x45	; 69
     57e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  data <<= 8;
     582:	f8 2e       	mov	r15, r24
     584:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
     586:	86 e4       	ldi	r24, 0x46	; 70
     588:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	e8 2a       	or	r14, r24
     590:	f9 2a       	or	r15, r25
     592:	00 27       	eor	r16, r16
     594:	f7 fc       	sbrc	r15, 7
     596:	00 95       	com	r16
     598:	10 2f       	mov	r17, r16
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	b8 01       	movw	r22, r16
     59e:	a7 01       	movw	r20, r14
     5a0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5a4:	cb 01       	movw	r24, r22
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	08 95       	ret

000005b0 <I2C_Read_Gyro_X>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_X(void){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
     5b8:	83 e4       	ldi	r24, 0x43	; 67
     5ba:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  data <<= 8;
     5be:	f8 2e       	mov	r15, r24
     5c0:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
     5c2:	84 e4       	ldi	r24, 0x44	; 68
     5c4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	e8 2a       	or	r14, r24
     5cc:	f9 2a       	or	r15, r25
     5ce:	00 27       	eor	r16, r16
     5d0:	f7 fc       	sbrc	r15, 7
     5d2:	00 95       	com	r16
     5d4:	10 2f       	mov	r17, r16
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	b8 01       	movw	r22, r16
     5da:	a7 01       	movw	r20, r14
     5dc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LPF_Get_Filtered_Value>
     5e0:	9b 01       	movw	r18, r22
     5e2:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     5e4:	80 91 24 01 	lds	r24, 0x0124
     5e8:	88 23       	and	r24, r24
     5ea:	19 f0       	breq	.+6      	; 0x5f2 <I2C_Read_Gyro_X+0x42>
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <I2C_Read_Gyro_X+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
  data <<= 8;
  data |= I2C_Read_Register(0x44);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     5f2:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     5f4:	cb 01       	movw	r24, r22
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <I2C_Read_Acc_Z>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Z(void){
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  data <<= 8;
     60e:	f8 2e       	mov	r15, r24
     610:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	e8 2a       	or	r14, r24
     61c:	f9 2a       	or	r15, r25
     61e:	00 27       	eor	r16, r16
     620:	f7 fc       	sbrc	r15, 7
     622:	00 95       	com	r16
     624:	10 2f       	mov	r17, r16
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	b8 01       	movw	r22, r16
     62a:	a7 01       	movw	r20, r14
     62c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LPF_Get_Filtered_Value>
     630:	9b 01       	movw	r18, r22
     632:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     634:	80 91 24 01 	lds	r24, 0x0124
     638:	88 23       	and	r24, r24
     63a:	19 f0       	breq	.+6      	; 0x642 <I2C_Read_Acc_Z+0x42>
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	01 c0       	rjmp	.+2      	; 0x644 <I2C_Read_Acc_Z+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
  data <<= 8;
  data |= I2C_Read_Register(0x40);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     642:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     644:	cb 01       	movw	r24, r22
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <I2C_Read_Acc_Y>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Y(void){
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
     658:	8d e3       	ldi	r24, 0x3D	; 61
     65a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  data <<= 8;
     65e:	f8 2e       	mov	r15, r24
     660:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
     662:	8e e3       	ldi	r24, 0x3E	; 62
     664:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	e8 2a       	or	r14, r24
     66c:	f9 2a       	or	r15, r25
     66e:	00 27       	eor	r16, r16
     670:	f7 fc       	sbrc	r15, 7
     672:	00 95       	com	r16
     674:	10 2f       	mov	r17, r16
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	b8 01       	movw	r22, r16
     67a:	a7 01       	movw	r20, r14
     67c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LPF_Get_Filtered_Value>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     684:	80 91 24 01 	lds	r24, 0x0124
     688:	88 23       	and	r24, r24
     68a:	19 f0       	breq	.+6      	; 0x692 <I2C_Read_Acc_Y+0x42>
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	01 c0       	rjmp	.+2      	; 0x694 <I2C_Read_Acc_Y+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
  data <<= 8;
  data |= I2C_Read_Register(0x3E);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     692:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     694:	cb 01       	movw	r24, r22
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	08 95       	ret

000006a0 <I2C_Read_Roll_Angle>:
  }else{
    return 0;
  }
}

int I2C_Read_Roll_Angle(void){
     6a0:	af 92       	push	r10
     6a2:	bf 92       	push	r11
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
  if(I2C_Get_Error()==0){
     6b0:	80 91 24 01 	lds	r24, 0x0124
     6b4:	88 23       	and	r24, r24
     6b6:	19 f0       	breq	.+6      	; 0x6be <I2C_Read_Roll_Angle+0x1e>
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	2e c0       	rjmp	.+92     	; 0x71a <I2C_Read_Roll_Angle+0x7a>
    float ay=I2C_Read_Acc_Y();
     6be:	0e 94 28 03 	call	0x650	; 0x650 <I2C_Read_Acc_Y>
     6c2:	7c 01       	movw	r14, r24
    float az=I2C_Read_Acc_Z();
     6c4:	0e 94 00 03 	call	0x600	; 0x600 <I2C_Read_Acc_Z>
     6c8:	5c 01       	movw	r10, r24
    float divy=ay/az;
    float roll = atan(divy);
     6ca:	00 27       	eor	r16, r16
     6cc:	f7 fc       	sbrc	r15, 7
     6ce:	00 95       	com	r16
     6d0:	10 2f       	mov	r17, r16
     6d2:	c8 01       	movw	r24, r16
     6d4:	b7 01       	movw	r22, r14
     6d6:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatsisf>
     6da:	7b 01       	movw	r14, r22
     6dc:	8c 01       	movw	r16, r24
     6de:	cc 24       	eor	r12, r12
     6e0:	b7 fc       	sbrc	r11, 7
     6e2:	c0 94       	com	r12
     6e4:	dc 2c       	mov	r13, r12
     6e6:	c6 01       	movw	r24, r12
     6e8:	b5 01       	movw	r22, r10
     6ea:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatsisf>
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
     6f2:	c8 01       	movw	r24, r16
     6f4:	b7 01       	movw	r22, r14
     6f6:	0e 94 2a 09 	call	0x1254	; 0x1254 <__divsf3>
     6fa:	0e 94 02 09 	call	0x1204	; 0x1204 <atan>
    roll*=10.0;
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
    roll*=57.3;
    return (int)roll;
     70a:	23 e3       	ldi	r18, 0x33	; 51
     70c:	33 e3       	ldi	r19, 0x33	; 51
     70e:	45 e6       	ldi	r20, 0x65	; 101
     710:	52 e4       	ldi	r21, 0x42	; 66
     712:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     716:	0e 94 92 09 	call	0x1324	; 0x1324 <__fixsfsi>
  }else{
    return 0;
  }
}
     71a:	cb 01       	movw	r24, r22
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	08 95       	ret

0000072e <I2C_Read_Acc_X>:
  if( (I2C_Read_Register(0x6B) & 0x40) != 0){
    I2C_Write_Register(0x6B, 0x00);
  }
}

int16_t I2C_Read_Acc_X(void){
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
     736:	8b e3       	ldi	r24, 0x3B	; 59
     738:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  data <<= 8;
     73c:	f8 2e       	mov	r15, r24
     73e:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
     740:	8c e3       	ldi	r24, 0x3C	; 60
     742:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	e8 2a       	or	r14, r24
     74a:	f9 2a       	or	r15, r25
     74c:	00 27       	eor	r16, r16
     74e:	f7 fc       	sbrc	r15, 7
     750:	00 95       	com	r16
     752:	10 2f       	mov	r17, r16
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	b8 01       	movw	r22, r16
     758:	a7 01       	movw	r20, r14
     75a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LPF_Get_Filtered_Value>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     762:	80 91 24 01 	lds	r24, 0x0124
     766:	88 23       	and	r24, r24
     768:	19 f0       	breq	.+6      	; 0x770 <I2C_Read_Acc_X+0x42>
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	01 c0       	rjmp	.+2      	; 0x772 <I2C_Read_Acc_X+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
  data <<= 8;
  data |= I2C_Read_Register(0x3C);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     770:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     772:	cb 01       	movw	r24, r22
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <MPU6050_Restart>:
  I2C_Read_Gyro_Y();
  I2C_Read_Gyro_Z();
}

void MPU6050_Restart(void){
  I2C_Set_Mode_Active();
     77e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <I2C_Set_Mode_Active>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     782:	80 e7       	ldi	r24, 0x70	; 112
     784:	97 e1       	ldi	r25, 0x17	; 23
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <MPU6050_Restart+0x8>
  _delay_ms(2);
  I2C_Read_Acc_X();
     78a:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_Read_Acc_X>
  I2C_Read_Acc_Y();
     78e:	0e 94 28 03 	call	0x650	; 0x650 <I2C_Read_Acc_Y>
  I2C_Read_Acc_Z();
     792:	0e 94 00 03 	call	0x600	; 0x600 <I2C_Read_Acc_Z>
  I2C_Read_Gyro_X();
     796:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <I2C_Read_Gyro_X>
  I2C_Read_Gyro_Y();
     79a:	0e 94 ba 02 	call	0x574	; 0x574 <I2C_Read_Gyro_Y>
  I2C_Read_Gyro_Z();
     79e:	0e 94 92 02 	call	0x524	; 0x524 <I2C_Read_Gyro_Z>
}
     7a2:	08 95       	ret

000007a4 <MPU6050_Read_Roll_Angle_Safely>:
  pitch=I2C_Read_Pitch_Angle();
  return pitch;
}

int MPU6050_Read_Roll_Angle_Safely(void){
  int roll=I2C_Read_Roll_Angle();
     7a4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2C_Read_Roll_Angle>
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <MPU6050_Read_Roll_Angle_Safely+0xa>
  while(I2C_Get_Error()!=0){
    MPU6050_Restart();
     7aa:	0e 94 bf 03 	call	0x77e	; 0x77e <MPU6050_Restart>
  return pitch;
}

int MPU6050_Read_Roll_Angle_Safely(void){
  int roll=I2C_Read_Roll_Angle();
  while(I2C_Get_Error()!=0){
     7ae:	80 91 24 01 	lds	r24, 0x0124
     7b2:	88 23       	and	r24, r24
     7b4:	d1 f7       	brne	.-12     	; 0x7aa <MPU6050_Read_Roll_Angle_Safely+0x6>
    MPU6050_Restart();
  }
  roll=I2C_Read_Roll_Angle();
     7b6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2C_Read_Roll_Angle>
  return roll;
}
     7ba:	08 95       	ret

000007bc <I2C_Read_Pitch_Angle>:
    data=0;
  }
  return data;
}

int I2C_Read_Pitch_Angle(void){
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
  if(I2C_Get_Error()==0){
     7cc:	80 91 24 01 	lds	r24, 0x0124
     7d0:	88 23       	and	r24, r24
     7d2:	19 f0       	breq	.+6      	; 0x7da <I2C_Read_Pitch_Angle+0x1e>
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	2e c0       	rjmp	.+92     	; 0x836 <I2C_Read_Pitch_Angle+0x7a>
    float ax=I2C_Read_Acc_X();
     7da:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_Read_Acc_X>
     7de:	7c 01       	movw	r14, r24
    float az=I2C_Read_Acc_Z();
     7e0:	0e 94 00 03 	call	0x600	; 0x600 <I2C_Read_Acc_Z>
     7e4:	5c 01       	movw	r10, r24
    float divx=ax/az;
    float pitch = atan(divx);
     7e6:	00 27       	eor	r16, r16
     7e8:	f7 fc       	sbrc	r15, 7
     7ea:	00 95       	com	r16
     7ec:	10 2f       	mov	r17, r16
     7ee:	c8 01       	movw	r24, r16
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatsisf>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	cc 24       	eor	r12, r12
     7fc:	b7 fc       	sbrc	r11, 7
     7fe:	c0 94       	com	r12
     800:	dc 2c       	mov	r13, r12
     802:	c6 01       	movw	r24, r12
     804:	b5 01       	movw	r22, r10
     806:	0e 94 c5 09 	call	0x138a	; 0x138a <__floatsisf>
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	c8 01       	movw	r24, r16
     810:	b7 01       	movw	r22, r14
     812:	0e 94 2a 09 	call	0x1254	; 0x1254 <__divsf3>
     816:	0e 94 02 09 	call	0x1204	; 0x1204 <atan>
    pitch*=10.0;
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e2       	ldi	r20, 0x20	; 32
     820:	51 e4       	ldi	r21, 0x41	; 65
     822:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
    pitch*=57.3;
	return (int)pitch;
     826:	23 e3       	ldi	r18, 0x33	; 51
     828:	33 e3       	ldi	r19, 0x33	; 51
     82a:	45 e6       	ldi	r20, 0x65	; 101
     82c:	52 e4       	ldi	r21, 0x42	; 66
     82e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     832:	0e 94 92 09 	call	0x1324	; 0x1324 <__fixsfsi>
  }else{
    return 0;
  }
}
     836:	cb 01       	movw	r24, r22
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	df 90       	pop	r13
     842:	cf 90       	pop	r12
     844:	bf 90       	pop	r11
     846:	af 90       	pop	r10
     848:	08 95       	ret

0000084a <MPU6050_Read_Pitch_Angle_Safely>:
  I2C_Read_Gyro_Y();
  I2C_Read_Gyro_Z();
}

int MPU6050_Read_Pitch_Angle_Safely(void){
  int pitch=I2C_Read_Pitch_Angle();
     84a:	0e 94 de 03 	call	0x7bc	; 0x7bc <I2C_Read_Pitch_Angle>
     84e:	02 c0       	rjmp	.+4      	; 0x854 <MPU6050_Read_Pitch_Angle_Safely+0xa>
  while(I2C_Get_Error()!=0){
    MPU6050_Restart();
     850:	0e 94 bf 03 	call	0x77e	; 0x77e <MPU6050_Restart>
  I2C_Read_Gyro_Z();
}

int MPU6050_Read_Pitch_Angle_Safely(void){
  int pitch=I2C_Read_Pitch_Angle();
  while(I2C_Get_Error()!=0){
     854:	80 91 24 01 	lds	r24, 0x0124
     858:	88 23       	and	r24, r24
     85a:	d1 f7       	brne	.-12     	; 0x850 <MPU6050_Read_Pitch_Angle_Safely+0x6>
    MPU6050_Restart();
  }
  pitch=I2C_Read_Pitch_Angle();
     85c:	0e 94 de 03 	call	0x7bc	; 0x7bc <I2C_Read_Pitch_Angle>
  return pitch;
}
     860:	08 95       	ret

00000862 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     862:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     866:	10 92 23 01 	sts	0x0123, r1
  I2C.Error=0x00;
     86a:	10 92 24 01 	sts	0x0124, r1
  I2C.ErrorAccu=0x00;
     86e:	10 92 26 01 	sts	0x0126, r1
     872:	10 92 25 01 	sts	0x0125, r1
  return I2C.ErrorAccu;
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     876:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     87a:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Get_Device_Address>
     87e:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	80 93 23 01 	sts	0x0123, r24
  #ifdef LPF_EN
	LPF_Init();
     888:	0e 94 bd 08 	call	0x117a	; 0x117a <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	6a e0       	ldi	r22, 0x0A	; 10
     890:	0e 94 3e 08 	call	0x107c	; 0x107c <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	6a e0       	ldi	r22, 0x0A	; 10
     898:	0e 94 3e 08 	call	0x107c	; 0x107c <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	6a e0       	ldi	r22, 0x0A	; 10
     8a0:	0e 94 3e 08 	call	0x107c	; 0x107c <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	6a e0       	ldi	r22, 0x0A	; 10
     8a8:	0e 94 3e 08 	call	0x107c	; 0x107c <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	6a e0       	ldi	r22, 0x0A	; 10
     8b0:	0e 94 3e 08 	call	0x107c	; 0x107c <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
     8b4:	85 e0       	ldi	r24, 0x05	; 5
     8b6:	6a e0       	ldi	r22, 0x0A	; 10
     8b8:	0e 94 3e 08 	call	0x107c	; 0x107c <LPF_Set_Alpha>
  #endif
}
     8bc:	08 95       	ret

000008be <MPU6050_Init>:
    return 0;
  }
}

void MPU6050_Init(void){
  I2C_Init();
     8be:	0e 94 31 04 	call	0x862	; 0x862 <I2C_Init>
  I2C_Set_Mode_Active();
     8c2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <I2C_Set_Mode_Active>
     8c6:	80 e7       	ldi	r24, 0x70	; 112
     8c8:	97 e1       	ldi	r25, 0x17	; 23
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <MPU6050_Init+0xc>
  _delay_ms(2);
  I2C_Read_Acc_X();
     8ce:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_Read_Acc_X>
  I2C_Read_Acc_Y();
     8d2:	0e 94 28 03 	call	0x650	; 0x650 <I2C_Read_Acc_Y>
  I2C_Read_Acc_Z();
     8d6:	0e 94 00 03 	call	0x600	; 0x600 <I2C_Read_Acc_Z>
  I2C_Read_Gyro_X();
     8da:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <I2C_Read_Gyro_X>
  I2C_Read_Gyro_Y();
     8de:	0e 94 ba 02 	call	0x574	; 0x574 <I2C_Read_Gyro_Y>
  I2C_Read_Gyro_Z();
     8e2:	0e 94 92 02 	call	0x524	; 0x524 <I2C_Read_Gyro_Z>
}
     8e6:	08 95       	ret

000008e8 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     8e8:	10 92 27 01 	sts	0x0127, r1
  debug.datareg=0;
     8ec:	10 92 28 01 	sts	0x0128, r1
  debug.databsy=1;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 29 01 	sts	0x0129, r24
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     8fa:	fc 01       	movw	r30, r24
     8fc:	e9 5d       	subi	r30, 0xD9	; 217
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254
     900:	13 82       	std	Z+3, r1	; 0x03
     902:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     904:	80 32       	cpi	r24, 0x20	; 32
     906:	91 05       	cpc	r25, r1
     908:	c1 f7       	brne	.-16     	; 0x8fa <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     90a:	10 92 4a 01 	sts	0x014A, r1
     90e:	eb e4       	ldi	r30, 0x4B	; 75
     910:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     912:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	e3 35       	cpi	r30, 0x53	; 83
     918:	f8 07       	cpc	r31, r24
     91a:	d9 f7       	brne	.-10     	; 0x912 <__stack+0x13>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     91c:	10 82       	st	Z, r1
}
     91e:	08 95       	ret

00000920 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     920:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     922:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     924:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     92c:	e8 e6       	ldi	r30, 0x68	; 104
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	82 60       	ori	r24, 0x02	; 2
     934:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     936:	ec e6       	ldi	r30, 0x6C	; 108
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	80 64       	ori	r24, 0x40	; 64
     93e:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     940:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     942:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     944:	08 95       	ret

00000946 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     94a:	ee e6       	ldi	r30, 0x6E	; 110
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	10 82       	st	Z, r1
  TCNT0 =200;
     950:	88 ec       	ldi	r24, 0xC8	; 200
     952:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     95c:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     95e:	08 95       	ret

00000960 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     960:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     964:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     966:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     968:	08 95       	ret

0000096a <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     96a:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     96c:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     96e:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     970:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     972:	08 95       	ret

00000974 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     974:	5d 9a       	sbi	0x0b, 5	; 11
}
     976:	08 95       	ret

00000978 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     978:	5d 98       	cbi	0x0b, 5	; 11
}
     97a:	08 95       	ret

0000097c <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	11 f4       	brne	.+4      	; 0x984 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     980:	5d 9a       	sbi	0x0b, 5	; 11
     982:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     984:	5d 98       	cbi	0x0b, 5	; 11
     986:	08 95       	ret

00000988 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     988:	86 b1       	in	r24, 0x06	; 6
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	26 e0       	ldi	r18, 0x06	; 6
     98e:	96 95       	lsr	r25
     990:	87 95       	ror	r24
     992:	2a 95       	dec	r18
     994:	e1 f7       	brne	.-8      	; 0x98e <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     996:	81 70       	andi	r24, 0x01	; 1
     998:	08 95       	ret

0000099a <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     99a:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     99c:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     9a2:	86 b5       	in	r24, 0x26	; 38
     9a4:	82 33       	cpi	r24, 0x32	; 50
     9a6:	e8 f3       	brcs	.-6      	; 0x9a2 <debug_delay+0x8>
    TCNT0=0;
     9a8:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     9aa:	86 b5       	in	r24, 0x26	; 38
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	d8 f3       	brcs	.-10     	; 0x9aa <debug_delay+0x10>
  TCCR0B=0;
     9b4:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     9b6:	08 95       	ret

000009b8 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     9b8:	80 91 1c 01 	lds	r24, 0x011C
     9bc:	90 91 1d 01 	lds	r25, 0x011D
     9c0:	0e 94 cd 04 	call	0x99a	; 0x99a <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     9c4:	08 95       	ret

000009c6 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     9c6:	80 91 1e 01 	lds	r24, 0x011E
     9ca:	90 91 1f 01 	lds	r25, 0x011F
     9ce:	0e 94 cd 04 	call	0x99a	; 0x99a <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     9d2:	08 95       	ret

000009d4 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     9d4:	80 91 20 01 	lds	r24, 0x0120
     9d8:	90 91 21 01 	lds	r25, 0x0121
     9dc:	0e 94 cd 04 	call	0x99a	; 0x99a <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     9e0:	08 95       	ret

000009e2 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	2a 97       	sbiw	r28, 0x0a	; 10
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     a00:	fe 01       	movw	r30, r28
     a02:	31 96       	adiw	r30, 0x01	; 1
     a04:	9a e0       	ldi	r25, 0x0A	; 10
     a06:	df 01       	movw	r26, r30
     a08:	1d 92       	st	X+, r1
     a0a:	9a 95       	dec	r25
     a0c:	e9 f7       	brne	.-6      	; 0xa08 <debug_tx_byte+0x26>
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	9a 87       	std	Y+10, r25	; 0x0a
     a12:	fe 01       	movw	r30, r28
     a14:	32 96       	adiw	r30, 0x02	; 2
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     a1a:	48 2f       	mov	r20, r24
     a1c:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     a1e:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     a20:	ca 01       	movw	r24, r20
     a22:	02 2e       	mov	r0, r18
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <debug_tx_byte+0x48>
     a26:	95 95       	asr	r25
     a28:	87 95       	ror	r24
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <debug_tx_byte+0x44>
     a2e:	80 ff       	sbrs	r24, 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <debug_tx_byte+0x54>
	  buf[i+1]=1;
     a32:	60 83       	st	Z, r22
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     a36:	10 82       	st	Z, r1
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     a3e:	28 30       	cpi	r18, 0x08	; 8
     a40:	31 05       	cpc	r19, r1
     a42:	71 f7       	brne	.-36     	; 0xa20 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     a44:	df b6       	in	r13, 0x3f	; 63
  cli();
     a46:	f8 94       	cli
     a48:	8e 01       	movw	r16, r28
     a4a:	0f 5f       	subi	r16, 0xFF	; 255
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     a4e:	3b e0       	ldi	r19, 0x0B	; 11
     a50:	e3 2e       	mov	r14, r19
     a52:	f1 2c       	mov	r15, r1
     a54:	ec 0e       	add	r14, r28
     a56:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     a58:	f8 01       	movw	r30, r16
     a5a:	80 81       	ld	r24, Z
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	11 f4       	brne	.+4      	; 0xa64 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     a60:	5d 9a       	sbi	0x0b, 5	; 11
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     a64:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     a66:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <debug_delay_index_0>
     a6a:	0f 5f       	subi	r16, 0xFF	; 255
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     a6e:	0e 15       	cp	r16, r14
     a70:	1f 05       	cpc	r17, r15
     a72:	91 f7       	brne	.-28     	; 0xa58 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     a74:	df be       	out	0x3f, r13	; 63
}
     a76:	2a 96       	adiw	r28, 0x0a	; 10
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	08 95       	ret

00000a92 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     a98:	36 9b       	sbis	0x06, 6	; 6
     a9a:	21 c0       	rjmp	.+66     	; 0xade <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	17 c0       	rjmp	.+46     	; 0xace <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     aa0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     aa4:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     aa6:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     aa8:	17 30       	cpi	r17, 0x07	; 7
     aaa:	09 f0       	breq	.+2      	; 0xaae <debug_rx_byte+0x1c>
	    val>>=1;
     aac:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     aae:	1f 5f       	subi	r17, 0xFF	; 255
     ab0:	18 30       	cpi	r17, 0x08	; 8
     ab2:	b1 f7       	brne	.-20     	; 0xaa0 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     ab4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     ab8:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     aba:	f6 fc       	sbrc	r15, 6
     abc:	07 c0       	rjmp	.+14     	; 0xacc <debug_rx_byte+0x3a>
     abe:	86 ff       	sbrs	r24, 6
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <debug_rx_byte+0x3a>
	  debug.datareg=val;
     ac2:	00 93 28 01 	sts	0x0128, r16
	  debug.error=0x00;
     ac6:	10 92 27 01 	sts	0x0127, r1
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 93 27 01 	sts	0x0127, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     ad2:	80 91 28 01 	lds	r24, 0x0128
}
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     ade:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     ae2:	f6 b0       	in	r15, 0x06	; 6
     ae4:	00 e0       	ldi	r16, 0x00	; 0
     ae6:	10 e0       	ldi	r17, 0x00	; 0
     ae8:	db cf       	rjmp	.-74     	; 0xaa0 <debug_rx_byte+0xe>

00000aea <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     aea:	80 91 28 01 	lds	r24, 0x0128
}
     aee:	08 95       	ret

00000af0 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     af0:	10 92 28 01 	sts	0x0128, r1
}
     af4:	08 95       	ret

00000af6 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     af6:	80 93 28 01 	sts	0x0128, r24
}
     afa:	08 95       	ret

00000afc <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	7b 01       	movw	r14, r22
     b10:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	e8 16       	cp	r14, r24
     b16:	f1 04       	cpc	r15, r1
     b18:	01 05       	cpc	r16, r1
     b1a:	11 05       	cpc	r17, r1
     b1c:	09 f0       	breq	.+2      	; 0xb20 <debug_tx_hex+0x24>
     b1e:	30 f4       	brcc	.+12     	; 0xb2c <debug_tx_hex+0x30>
     b20:	c8 e0       	ldi	r28, 0x08	; 8
     b22:	d0 e0       	ldi	r29, 0x00	; 0
     b24:	62 e0       	ldi	r22, 0x02	; 2
     b26:	c6 2e       	mov	r12, r22
     b28:	d1 2c       	mov	r13, r1
     b2a:	14 c0       	rjmp	.+40     	; 0xb54 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	e8 16       	cp	r14, r24
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	f8 06       	cpc	r15, r24
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	08 07       	cpc	r16, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	18 07       	cpc	r17, r24
     b3c:	30 f0       	brcs	.+12     	; 0xb4a <debug_tx_hex+0x4e>
     b3e:	c0 e2       	ldi	r28, 0x20	; 32
     b40:	d0 e0       	ldi	r29, 0x00	; 0
     b42:	58 e0       	ldi	r21, 0x08	; 8
     b44:	c5 2e       	mov	r12, r21
     b46:	d1 2c       	mov	r13, r1
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <debug_tx_hex+0x58>
     b4a:	c0 e1       	ldi	r28, 0x10	; 16
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	44 e0       	ldi	r20, 0x04	; 4
     b50:	c4 2e       	mov	r12, r20
     b52:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     b54:	80 e3       	ldi	r24, 0x30	; 48
     b56:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
  debug_tx_byte('x');
     b5a:	88 e7       	ldi	r24, 0x78	; 120
     b5c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
     b60:	bb 24       	eor	r11, r11
     b62:	17 c0       	rjmp	.+46     	; 0xb92 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     b64:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	0c 2e       	mov	r0, r28
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <debug_tx_hex+0x7a>
     b6e:	b6 95       	lsr	r27
     b70:	a7 95       	ror	r26
     b72:	97 95       	ror	r25
     b74:	87 95       	ror	r24
     b76:	0a 94       	dec	r0
     b78:	d2 f7       	brpl	.-12     	; 0xb6e <debug_tx_hex+0x72>
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	8f 70       	andi	r24, 0x0F	; 15
     b7e:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	91 05       	cpc	r25, r1
     b84:	10 f0       	brcs	.+4      	; 0xb8a <debug_tx_hex+0x8e>
	    hex_digit+=55;
     b86:	c7 96       	adiw	r24, 0x37	; 55
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     b8a:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     b8c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     b90:	b3 94       	inc	r11
     b92:	8b 2d       	mov	r24, r11
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	8c 15       	cp	r24, r12
     b98:	9d 05       	cpc	r25, r13
     b9a:	20 f3       	brcs	.-56     	; 0xb64 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	08 95       	ret

00000bb0 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	7b 01       	movw	r14, r22
     bc6:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     bc8:	6f 3f       	cpi	r22, 0xFF	; 255
     bca:	71 05       	cpc	r23, r1
     bcc:	81 05       	cpc	r24, r1
     bce:	91 05       	cpc	r25, r1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <debug_tx_bin+0x24>
     bd2:	18 f4       	brcc	.+6      	; 0xbda <debug_tx_bin+0x2a>
     bd4:	f7 e0       	ldi	r31, 0x07	; 7
     bd6:	df 2e       	mov	r13, r31
     bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     bda:	60 30       	cpi	r22, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	73 07       	cpc	r23, r19
     be0:	31 e0       	ldi	r19, 0x01	; 1
     be2:	83 07       	cpc	r24, r19
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	93 07       	cpc	r25, r19
     be8:	18 f0       	brcs	.+6      	; 0xbf0 <debug_tx_bin+0x40>
     bea:	ef e1       	ldi	r30, 0x1F	; 31
     bec:	de 2e       	mov	r13, r30
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <debug_tx_bin+0x44>
     bf0:	7f e0       	ldi	r23, 0x0F	; 15
     bf2:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     bf4:	80 e3       	ldi	r24, 0x30	; 48
     bf6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
  debug_tx_byte('b');
     bfa:	82 e6       	ldi	r24, 0x62	; 98
     bfc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
     c00:	c0 e0       	ldi	r28, 0x00	; 0
     c02:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     c04:	cd 2c       	mov	r12, r13
     c06:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     c08:	56 01       	movw	r10, r12
     c0a:	08 94       	sec
     c0c:	a1 1c       	adc	r10, r1
     c0e:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     c10:	c6 01       	movw	r24, r12
     c12:	8c 1b       	sub	r24, r28
     c14:	9d 0b       	sbc	r25, r29
     c16:	a8 01       	movw	r20, r16
     c18:	97 01       	movw	r18, r14
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <debug_tx_bin+0x74>
     c1c:	56 95       	lsr	r21
     c1e:	47 95       	ror	r20
     c20:	37 95       	ror	r19
     c22:	27 95       	ror	r18
     c24:	8a 95       	dec	r24
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <debug_tx_bin+0x6c>
     c28:	da 01       	movw	r26, r20
     c2a:	c9 01       	movw	r24, r18
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	89 2b       	or	r24, r25
     c32:	11 f0       	breq	.+4      	; 0xc38 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     c34:	81 e3       	ldi	r24, 0x31	; 49
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     c38:	80 e3       	ldi	r24, 0x30	; 48
     c3a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
     c3e:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     c40:	ca 15       	cp	r28, r10
     c42:	db 05       	cpc	r29, r11
     c44:	29 f7       	brne	.-54     	; 0xc10 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	08 95       	ret

00000c5c <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     c5c:	8d e0       	ldi	r24, 0x0D	; 13
     c5e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
  debug_tx_byte('\n');
     c62:	8a e0       	ldi	r24, 0x0A	; 10
     c64:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
}
     c68:	08 95       	ret

00000c6a <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
}
     c70:	08 95       	ret

00000c72 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     c72:	8c e2       	ldi	r24, 0x2C	; 44
     c74:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
}
     c78:	08 95       	ret

00000c7a <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     c86:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
        i++;
     c8a:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     c8c:	fe 01       	movw	r30, r28
     c8e:	e1 0f       	add	r30, r17
     c90:	f1 1d       	adc	r31, r1
     c92:	80 81       	ld	r24, Z
     c94:	88 23       	and	r24, r24
     c96:	b9 f7       	brne	.-18     	; 0xc86 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     ca0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_nl();
     ca4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <debug_tx_nl>
}
     ca8:	08 95       	ret

00000caa <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     caa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     cae:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
}
     cb2:	08 95       	ret

00000cb4 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     cb4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_cm();
     cb8:	0e 94 39 06 	call	0xc72	; 0xc72 <debug_tx_cm>
}
     cbc:	08 95       	ret

00000cbe <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     cbe:	bf 92       	push	r11
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	6b 01       	movw	r12, r22
     cce:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     cd0:	61 15       	cp	r22, r1
     cd2:	71 05       	cpc	r23, r1
     cd4:	81 05       	cpc	r24, r1
     cd6:	91 05       	cpc	r25, r1
     cd8:	31 f4       	brne	.+12     	; 0xce6 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     cda:	10 92 4b 01 	sts	0x014B, r1
    debug.input_num_digits=1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 53 01 	sts	0x0153, r24
     ce4:	23 c0       	rjmp	.+70     	; 0xd2c <debug_determine_digit_numbers+0x6e>
     ce6:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     ce8:	0b 2d       	mov	r16, r11
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	09 5d       	subi	r16, 0xD9	; 217
     cee:	1e 4f       	sbci	r17, 0xFE	; 254
     cf0:	c7 01       	movw	r24, r14
     cf2:	b6 01       	movw	r22, r12
     cf4:	2a e0       	ldi	r18, 0x0A	; 10
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__udivmodsi4>
     d00:	f8 01       	movw	r30, r16
     d02:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     d04:	c7 01       	movw	r24, r14
     d06:	b6 01       	movw	r22, r12
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__udivmodsi4>
     d14:	c9 01       	movw	r24, r18
     d16:	da 01       	movw	r26, r20
     d18:	6c 01       	movw	r12, r24
     d1a:	7d 01       	movw	r14, r26
      i++;
     d1c:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     d1e:	c1 14       	cp	r12, r1
     d20:	d1 04       	cpc	r13, r1
     d22:	e1 04       	cpc	r14, r1
     d24:	f1 04       	cpc	r15, r1
     d26:	01 f7       	brne	.-64     	; 0xce8 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     d28:	b0 92 53 01 	sts	0x0153, r11
  }
}
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	08 95       	ret

00000d3c <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     d3c:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     d3e:	10 91 53 01 	lds	r17, 0x0153
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     d44:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     d46:	e1 2f       	mov	r30, r17
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	e9 5d       	subi	r30, 0xD9	; 217
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     d50:	80 5d       	subi	r24, 0xD0	; 208
     d52:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     d56:	11 23       	and	r17, r17
     d58:	a9 f7       	brne	.-22     	; 0xd44 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     d5a:	1f 91       	pop	r17
     d5c:	08 95       	ret

00000d5e <debug_tx_number>:

void debug_tx_number(int32_t num){
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	7b 01       	movw	r14, r22
     d68:	8c 01       	movw	r16, r24
  if(num<0){
     d6a:	97 ff       	sbrs	r25, 7
     d6c:	0b c0       	rjmp	.+22     	; 0xd84 <debug_tx_number+0x26>
    debug_tx_byte('-');
     d6e:	8d e2       	ldi	r24, 0x2D	; 45
     d70:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_byte>
	num=-num;
     d74:	10 95       	com	r17
     d76:	00 95       	com	r16
     d78:	f0 94       	com	r15
     d7a:	e0 94       	com	r14
     d7c:	e1 1c       	adc	r14, r1
     d7e:	f1 1c       	adc	r15, r1
     d80:	01 1d       	adc	r16, r1
     d82:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     d84:	c8 01       	movw	r24, r16
     d86:	b7 01       	movw	r22, r14
     d88:	0e 94 5f 06 	call	0xcbe	; 0xcbe <debug_determine_digit_numbers>
  debug_tx_number_digits();
     d8c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <debug_tx_number_digits>
}
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     d9a:	0e 94 af 06 	call	0xd5e	; 0xd5e <debug_tx_number>
  debug_tx_nl();
     d9e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <debug_tx_nl>
}
     da2:	08 95       	ret

00000da4 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     da4:	0e 94 af 06 	call	0xd5e	; 0xd5e <debug_tx_number>
  debug_tx_sp();
     da8:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
}
     dac:	08 95       	ret

00000dae <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     dae:	0e 94 af 06 	call	0xd5e	; 0xd5e <debug_tx_number>
  debug_tx_text(",");
     db2:	8e e0       	ldi	r24, 0x0E	; 14
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
}
     dba:	08 95       	ret

00000dbc <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     dbc:	0e 94 7e 05 	call	0xafc	; 0xafc <debug_tx_hex>
  debug_tx_nl();
     dc0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <debug_tx_nl>
}
     dc4:	08 95       	ret

00000dc6 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     dc6:	0e 94 7e 05 	call	0xafc	; 0xafc <debug_tx_hex>
  debug_tx_sp();
     dca:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
}
     dce:	08 95       	ret

00000dd0 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     dd0:	0e 94 7e 05 	call	0xafc	; 0xafc <debug_tx_hex>
  debug_tx_text(",");
     dd4:	8e e0       	ldi	r24, 0x0E	; 14
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
}
     ddc:	08 95       	ret

00000dde <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     dde:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <debug_tx_bin>
  debug_tx_nl();
     de2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <debug_tx_nl>
}
     de6:	08 95       	ret

00000de8 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     de8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <debug_tx_bin>
  debug_tx_sp();
     dec:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
}
     df0:	08 95       	ret

00000df2 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     df2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <debug_tx_bin>
  debug_tx_text(",");
     df6:	8e e0       	ldi	r24, 0x0E	; 14
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
}
     dfe:	08 95       	ret

00000e00 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	7a 01       	movw	r14, r20
     e0a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e0c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     e10:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_nl(num);
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	0e 94 cd 06 	call	0xd9a	; 0xd9a <debug_tx_number_nl>
}
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	08 95       	ret

00000e26 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	7a 01       	movw	r14, r20
     e30:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e32:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     e36:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_sp(num);
     e3a:	c8 01       	movw	r24, r16
     e3c:	b7 01       	movw	r22, r14
     e3e:	0e 94 d2 06 	call	0xda4	; 0xda4 <debug_tx_number_sp>
}
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	7a 01       	movw	r14, r20
     e56:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e58:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     e5c:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_cm(num);
     e60:	c8 01       	movw	r24, r16
     e62:	b7 01       	movw	r22, r14
     e64:	0e 94 d7 06 	call	0xdae	; 0xdae <debug_tx_number_cm>
}
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	7a 01       	movw	r14, r20
     e7c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e7e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     e82:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     e86:	c8 01       	movw	r24, r16
     e88:	b7 01       	movw	r22, r14
     e8a:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_number_hex_nl>
}
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	08 95       	ret

00000e98 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	7a 01       	movw	r14, r20
     ea2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     ea4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     ea8:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     eac:	c8 01       	movw	r24, r16
     eae:	b7 01       	movw	r22, r14
     eb0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <debug_tx_number_hex_sp>
}
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	08 95       	ret

00000ebe <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	7a 01       	movw	r14, r20
     ec8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     eca:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     ece:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     ed2:	c8 01       	movw	r24, r16
     ed4:	b7 01       	movw	r22, r14
     ed6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <debug_tx_number_hex_cm>
}
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret

00000ee4 <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	7a 01       	movw	r14, r20
     eee:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     ef0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     ef4:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     ef8:	c8 01       	movw	r24, r16
     efa:	b7 01       	movw	r22, r14
     efc:	0e 94 ef 06 	call	0xdde	; 0xdde <debug_tx_number_bin_nl>
}
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	08 95       	ret

00000f0a <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	7a 01       	movw	r14, r20
     f14:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     f16:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     f1a:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     f1e:	c8 01       	movw	r24, r16
     f20:	b7 01       	movw	r22, r14
     f22:	0e 94 f4 06 	call	0xde8	; 0xde8 <debug_tx_number_bin_sp>
}
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret

00000f30 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	7a 01       	movw	r14, r20
     f3a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     f3c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <debug_tx_text>
  debug_tx_sp();
     f40:	0e 94 35 06 	call	0xc6a	; 0xc6a <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     f44:	c8 01       	movw	r24, r16
     f46:	b7 01       	movw	r22, r14
     f48:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <debug_tx_number_bin_cm>
}
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	08 95       	ret

00000f56 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     f56:	e7 e2       	ldi	r30, 0x27	; 39
     f58:	f1 e0       	ldi	r31, 0x01	; 1
     f5a:	e8 0f       	add	r30, r24
     f5c:	f1 1d       	adc	r31, r1
     f5e:	83 81       	ldd	r24, Z+3	; 0x03
}
     f60:	08 95       	ret

00000f62 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     f62:	80 91 4a 01 	lds	r24, 0x014A
}
     f66:	08 95       	ret

00000f68 <debug_flush_buf>:

void debug_flush_buf(void){
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     f6c:	fc 01       	movw	r30, r24
     f6e:	e9 5d       	subi	r30, 0xD9	; 217
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	13 82       	std	Z+3, r1	; 0x03
     f74:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     f76:	80 32       	cpi	r24, 0x20	; 32
     f78:	91 05       	cpc	r25, r1
     f7a:	c1 f7       	brne	.-16     	; 0xf6c <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     f7c:	10 92 4a 01 	sts	0x014A, r1
}
     f80:	08 95       	ret

00000f82 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     f82:	80 91 29 01 	lds	r24, 0x0129
}
     f86:	08 95       	ret

00000f88 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     f88:	80 91 29 01 	lds	r24, 0x0129
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     f8c:	88 23       	and	r24, r24
     f8e:	11 f0       	breq	.+4      	; 0xf94 <debug_data_available_rx_buf+0xc>
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     f94:	80 91 4a 01 	lds	r24, 0x014A
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <debug_data_available_rx_buf+0x18>
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     fa4:	89 2f       	mov	r24, r25
     fa6:	08 95       	ret

00000fa8 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     fa8:	80 91 4a 01 	lds	r24, 0x014A
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     fac:	08 95       	ret

00000fae <debug_init>:

void debug_init(void){
  debug_struct_init();
     fae:	0e 94 74 04 	call	0x8e8	; 0x8e8 <debug_struct_init>
  debug_timings_init();
     fb2:	0e 94 90 04 	call	0x920	; 0x920 <debug_timings_init>
  debug_gpio_init();
     fb6:	0e 94 b5 04 	call	0x96a	; 0x96a <debug_gpio_init>
}
     fba:	08 95       	ret

00000fbc <__vector_4>:


ISR(ISR_PCINT_VECT){
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
  debug.databsy=1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 29 01 	sts	0x0129, r24
  uint8_t val=debug_rx_byte();
     fe4:	0e 94 49 05 	call	0xa92	; 0xa92 <debug_rx_byte>
     fe8:	98 2f       	mov	r25, r24
  if(debug.error==0){
     fea:	80 91 27 01 	lds	r24, 0x0127
     fee:	88 23       	and	r24, r24
     ff0:	99 f4       	brne	.+38     	; 0x1018 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     ff2:	e0 91 4a 01 	lds	r30, 0x014A
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	e9 5d       	subi	r30, 0xD9	; 217
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     ffe:	80 91 4a 01 	lds	r24, 0x014A
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	80 93 4a 01 	sts	0x014A, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
    1008:	80 91 4a 01 	lds	r24, 0x014A
    100c:	81 32       	cpi	r24, 0x21	; 33
    100e:	10 f0       	brcs	.+4      	; 0x1014 <__vector_4+0x58>
	  debug.bufindex=0;
    1010:	10 92 4a 01 	sts	0x014A, r1
	}
    debug_timer_start();
    1014:	0e 94 a3 04 	call	0x946	; 0x946 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_16>:

ISR(TIMER_OVF_VECT){
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
    1044:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
    1048:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
    104a:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
    104c:	10 92 29 01 	sts	0x0129, r1
}
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
    105a:	e4 e5       	ldi	r30, 0x54	; 84
    105c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
    105e:	10 82       	st	Z, r1
    LPF[i].Input = 0;
    1060:	11 82       	std	Z+1, r1	; 0x01
    1062:	12 82       	std	Z+2, r1	; 0x02
    1064:	13 82       	std	Z+3, r1	; 0x03
    1066:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
    1068:	15 82       	std	Z+5, r1	; 0x05
    106a:	16 82       	std	Z+6, r1	; 0x06
    106c:	17 82       	std	Z+7, r1	; 0x07
    106e:	10 86       	std	Z+8, r1	; 0x08
    1070:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	ea 38       	cpi	r30, 0x8A	; 138
    1076:	f8 07       	cpc	r31, r24
    1078:	91 f7       	brne	.-28     	; 0x105e <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
    107a:	08 95       	ret

0000107c <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	fc 01       	movw	r30, r24
    1080:	23 e0       	ldi	r18, 0x03	; 3
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	2a 95       	dec	r18
    1088:	e1 f7       	brne	.-8      	; 0x1082 <LPF_Set_Alpha+0x6>
    108a:	e8 0f       	add	r30, r24
    108c:	f9 1f       	adc	r31, r25
    108e:	ec 5a       	subi	r30, 0xAC	; 172
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
    1092:	60 83       	st	Z, r22
}
    1094:	08 95       	ret

00001096 <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	fc 01       	movw	r30, r24
    109a:	33 e0       	ldi	r19, 0x03	; 3
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	3a 95       	dec	r19
    10a2:	e1 f7       	brne	.-8      	; 0x109c <LPF_Get_Alpha+0x6>
    10a4:	e8 0f       	add	r30, r24
    10a6:	f9 1f       	adc	r31, r25
    10a8:	ec 5a       	subi	r30, 0xAC	; 172
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
    10ac:	80 81       	ld	r24, Z
    10ae:	08 95       	ret

000010b0 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
    10b0:	2f 92       	push	r2
    10b2:	3f 92       	push	r3
    10b4:	4f 92       	push	r4
    10b6:	5f 92       	push	r5
    10b8:	6f 92       	push	r6
    10ba:	7f 92       	push	r7
    10bc:	8f 92       	push	r8
    10be:	9f 92       	push	r9
    10c0:	af 92       	push	r10
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	1a 01       	movw	r2, r20
    10d2:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	6c 01       	movw	r12, r24
    10d8:	53 e0       	ldi	r21, 0x03	; 3
    10da:	cc 0c       	add	r12, r12
    10dc:	dd 1c       	adc	r13, r13
    10de:	5a 95       	dec	r21
    10e0:	e1 f7       	brne	.-8      	; 0x10da <LPF_Get_Filtered_Value+0x2a>
    10e2:	c8 0e       	add	r12, r24
    10e4:	d9 1e       	adc	r13, r25
    10e6:	84 e5       	ldi	r24, 0x54	; 84
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	c8 0e       	add	r12, r24
    10ec:	d9 1e       	adc	r13, r25
    10ee:	f6 01       	movw	r30, r12
    10f0:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
    10f2:	62 2e       	mov	r6, r18
    10f4:	77 24       	eor	r7, r7
    10f6:	88 24       	eor	r8, r8
    10f8:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
    10fa:	64 e6       	ldi	r22, 0x64	; 100
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	62 1b       	sub	r22, r18
    1100:	71 09       	sbc	r23, r1
    1102:	88 27       	eor	r24, r24
    1104:	77 fd       	sbrc	r23, 7
    1106:	80 95       	com	r24
    1108:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
    110a:	45 e0       	ldi	r20, 0x05	; 5
    110c:	a4 2e       	mov	r10, r20
    110e:	b1 2c       	mov	r11, r1
    1110:	ac 0c       	add	r10, r12
    1112:	bd 1c       	adc	r11, r13
    1114:	25 81       	ldd	r18, Z+5	; 0x05
    1116:	36 81       	ldd	r19, Z+6	; 0x06
    1118:	47 81       	ldd	r20, Z+7	; 0x07
    111a:	50 85       	ldd	r21, Z+8	; 0x08
    111c:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsi3>
    1120:	7b 01       	movw	r14, r22
    1122:	8c 01       	movw	r16, r24
    1124:	c2 01       	movw	r24, r4
    1126:	b1 01       	movw	r22, r2
    1128:	a4 01       	movw	r20, r8
    112a:	93 01       	movw	r18, r6
    112c:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsi3>
    1130:	e6 0e       	add	r14, r22
    1132:	f7 1e       	adc	r15, r23
    1134:	08 1f       	adc	r16, r24
    1136:	19 1f       	adc	r17, r25
    1138:	c8 01       	movw	r24, r16
    113a:	b7 01       	movw	r22, r14
    113c:	24 e6       	ldi	r18, 0x64	; 100
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 97 0b 	call	0x172e	; 0x172e <__divmodsi4>
    1148:	ca 01       	movw	r24, r20
    114a:	f6 01       	movw	r30, r12
    114c:	25 83       	std	Z+5, r18	; 0x05
    114e:	f5 01       	movw	r30, r10
    1150:	31 83       	std	Z+1, r19	; 0x01
    1152:	42 83       	std	Z+2, r20	; 0x02
    1154:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
    1156:	b9 01       	movw	r22, r18
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	3f 90       	pop	r3
    1176:	2f 90       	pop	r2
    1178:	08 95       	ret

0000117a <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
    117a:	0e 94 2d 08 	call	0x105a	; 0x105a <LPF_Struct_Init>
    117e:	08 95       	ret

00001180 <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	bc 01       	movw	r22, r24
    1186:	cd 01       	movw	r24, r26
    1188:	21 e4       	ldi	r18, 0x41	; 65
    118a:	33 e0       	ldi	r19, 0x03	; 3
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsi3>
    1194:	60 51       	subi	r22, 0x10	; 16
    1196:	76 4b       	sbci	r23, 0xB6	; 182
    1198:	8d 4f       	sbci	r24, 0xFD	; 253
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
    119c:	24 e6       	ldi	r18, 0x64	; 100
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__udivmodsi4>
    11a8:	30 93 89 00 	sts	0x0089, r19
    11ac:	20 93 88 00 	sts	0x0088, r18
    11b0:	08 95       	ret

000011b2 <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
    11b6:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
    11b8:	60 e6       	ldi	r22, 0x60	; 96
    11ba:	73 ee       	ldi	r23, 0xE3	; 227
    11bc:	86 e1       	ldi	r24, 0x16	; 22
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__udivmodsi4>
    11c4:	21 50       	subi	r18, 0x01	; 1
    11c6:	30 40       	sbci	r19, 0x00	; 0
    11c8:	30 93 87 00 	sts	0x0087, r19
    11cc:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
    11d0:	8c ed       	ldi	r24, 0xDC	; 220
    11d2:	95 e0       	ldi	r25, 0x05	; 5
    11d4:	90 93 89 00 	sts	0x0089, r25
    11d8:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
    11dc:	82 e8       	ldi	r24, 0x82	; 130
    11de:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    11e2:	8a e1       	ldi	r24, 0x1A	; 26
    11e4:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 c0 08 	call	0x1180	; 0x1180 <Servo_Set_Angle>
    11f0:	88 ee       	ldi	r24, 0xE8	; 232
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	2c e2       	ldi	r18, 0x2C	; 44
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	f9 01       	movw	r30, r18
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <Servo_Init+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1200:	d9 f7       	brne	.-10     	; 0x11f8 <Servo_Init+0x46>
  _delay_ms(100);
}
    1202:	08 95       	ret

00001204 <atan>:
    1204:	df 93       	push	r29
    1206:	dd 27       	eor	r29, r29
    1208:	b9 2f       	mov	r27, r25
    120a:	bf 77       	andi	r27, 0x7F	; 127
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	16 16       	cp	r1, r22
    1212:	17 06       	cpc	r1, r23
    1214:	48 07       	cpc	r20, r24
    1216:	5b 07       	cpc	r21, r27
    1218:	10 f4       	brcc	.+4      	; 0x121e <atan+0x1a>
    121a:	d9 2f       	mov	r29, r25
    121c:	67 d1       	rcall	.+718    	; 0x14ec <inverse>
    121e:	9f 93       	push	r25
    1220:	8f 93       	push	r24
    1222:	7f 93       	push	r23
    1224:	6f 93       	push	r22
    1226:	cc d1       	rcall	.+920    	; 0x15c0 <square>
    1228:	e8 e6       	ldi	r30, 0x68	; 104
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	f2 d0       	rcall	.+484    	; 0x1412 <__fp_powser>
    122e:	24 d1       	rcall	.+584    	; 0x1478 <__fp_round>
    1230:	2f 91       	pop	r18
    1232:	3f 91       	pop	r19
    1234:	4f 91       	pop	r20
    1236:	5f 91       	pop	r21
    1238:	6c d1       	rcall	.+728    	; 0x1512 <__mulsf3x>
    123a:	dd 23       	and	r29, r29
    123c:	49 f0       	breq	.+18     	; 0x1250 <atan+0x4c>
    123e:	90 58       	subi	r25, 0x80	; 128
    1240:	a2 ea       	ldi	r26, 0xA2	; 162
    1242:	2a ed       	ldi	r18, 0xDA	; 218
    1244:	3f e0       	ldi	r19, 0x0F	; 15
    1246:	49 ec       	ldi	r20, 0xC9	; 201
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	d0 78       	andi	r29, 0x80	; 128
    124c:	5d 27       	eor	r21, r29
    124e:	c8 d1       	rcall	.+912    	; 0x15e0 <__addsf3x>
    1250:	df 91       	pop	r29
    1252:	12 c1       	rjmp	.+548    	; 0x1478 <__fp_round>

00001254 <__divsf3>:
    1254:	0c d0       	rcall	.+24     	; 0x126e <__divsf3x>
    1256:	10 c1       	rjmp	.+544    	; 0x1478 <__fp_round>
    1258:	08 d1       	rcall	.+528    	; 0x146a <__fp_pscB>
    125a:	40 f0       	brcs	.+16     	; 0x126c <__divsf3+0x18>
    125c:	ff d0       	rcall	.+510    	; 0x145c <__fp_pscA>
    125e:	30 f0       	brcs	.+12     	; 0x126c <__divsf3+0x18>
    1260:	21 f4       	brne	.+8      	; 0x126a <__divsf3+0x16>
    1262:	5f 3f       	cpi	r21, 0xFF	; 255
    1264:	19 f0       	breq	.+6      	; 0x126c <__divsf3+0x18>
    1266:	cc c0       	rjmp	.+408    	; 0x1400 <__fp_inf>
    1268:	51 11       	cpse	r21, r1
    126a:	3a c1       	rjmp	.+628    	; 0x14e0 <__fp_szero>
    126c:	cf c0       	rjmp	.+414    	; 0x140c <__fp_nan>

0000126e <__divsf3x>:
    126e:	15 d1       	rcall	.+554    	; 0x149a <__fp_split3>
    1270:	98 f3       	brcs	.-26     	; 0x1258 <__divsf3+0x4>

00001272 <__divsf3_pse>:
    1272:	99 23       	and	r25, r25
    1274:	c9 f3       	breq	.-14     	; 0x1268 <__divsf3+0x14>
    1276:	55 23       	and	r21, r21
    1278:	b1 f3       	breq	.-20     	; 0x1266 <__divsf3+0x12>
    127a:	95 1b       	sub	r25, r21
    127c:	55 0b       	sbc	r21, r21
    127e:	bb 27       	eor	r27, r27
    1280:	aa 27       	eor	r26, r26
    1282:	62 17       	cp	r22, r18
    1284:	73 07       	cpc	r23, r19
    1286:	84 07       	cpc	r24, r20
    1288:	38 f0       	brcs	.+14     	; 0x1298 <__divsf3_pse+0x26>
    128a:	9f 5f       	subi	r25, 0xFF	; 255
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	44 1f       	adc	r20, r20
    1294:	aa 1f       	adc	r26, r26
    1296:	a9 f3       	breq	.-22     	; 0x1282 <__divsf3_pse+0x10>
    1298:	33 d0       	rcall	.+102    	; 0x1300 <__divsf3_pse+0x8e>
    129a:	0e 2e       	mov	r0, r30
    129c:	3a f0       	brmi	.+14     	; 0x12ac <__divsf3_pse+0x3a>
    129e:	e0 e8       	ldi	r30, 0x80	; 128
    12a0:	30 d0       	rcall	.+96     	; 0x1302 <__divsf3_pse+0x90>
    12a2:	91 50       	subi	r25, 0x01	; 1
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	e6 95       	lsr	r30
    12a8:	00 1c       	adc	r0, r0
    12aa:	ca f7       	brpl	.-14     	; 0x129e <__divsf3_pse+0x2c>
    12ac:	29 d0       	rcall	.+82     	; 0x1300 <__divsf3_pse+0x8e>
    12ae:	fe 2f       	mov	r31, r30
    12b0:	27 d0       	rcall	.+78     	; 0x1300 <__divsf3_pse+0x8e>
    12b2:	66 0f       	add	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	bb 1f       	adc	r27, r27
    12ba:	26 17       	cp	r18, r22
    12bc:	37 07       	cpc	r19, r23
    12be:	48 07       	cpc	r20, r24
    12c0:	ab 07       	cpc	r26, r27
    12c2:	b0 e8       	ldi	r27, 0x80	; 128
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <__divsf3_pse+0x56>
    12c6:	bb 0b       	sbc	r27, r27
    12c8:	80 2d       	mov	r24, r0
    12ca:	bf 01       	movw	r22, r30
    12cc:	ff 27       	eor	r31, r31
    12ce:	93 58       	subi	r25, 0x83	; 131
    12d0:	5f 4f       	sbci	r21, 0xFF	; 255
    12d2:	2a f0       	brmi	.+10     	; 0x12de <__divsf3_pse+0x6c>
    12d4:	9e 3f       	cpi	r25, 0xFE	; 254
    12d6:	51 05       	cpc	r21, r1
    12d8:	68 f0       	brcs	.+26     	; 0x12f4 <__divsf3_pse+0x82>
    12da:	92 c0       	rjmp	.+292    	; 0x1400 <__fp_inf>
    12dc:	01 c1       	rjmp	.+514    	; 0x14e0 <__fp_szero>
    12de:	5f 3f       	cpi	r21, 0xFF	; 255
    12e0:	ec f3       	brlt	.-6      	; 0x12dc <__divsf3_pse+0x6a>
    12e2:	98 3e       	cpi	r25, 0xE8	; 232
    12e4:	dc f3       	brlt	.-10     	; 0x12dc <__divsf3_pse+0x6a>
    12e6:	86 95       	lsr	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	b7 95       	ror	r27
    12ee:	f7 95       	ror	r31
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
    12f2:	c9 f7       	brne	.-14     	; 0x12e6 <__divsf3_pse+0x74>
    12f4:	88 0f       	add	r24, r24
    12f6:	91 1d       	adc	r25, r1
    12f8:	96 95       	lsr	r25
    12fa:	87 95       	ror	r24
    12fc:	97 f9       	bld	r25, 7
    12fe:	08 95       	ret
    1300:	e1 e0       	ldi	r30, 0x01	; 1
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	bb 1f       	adc	r27, r27
    130a:	62 17       	cp	r22, r18
    130c:	73 07       	cpc	r23, r19
    130e:	84 07       	cpc	r24, r20
    1310:	ba 07       	cpc	r27, r26
    1312:	20 f0       	brcs	.+8      	; 0x131c <__divsf3_pse+0xaa>
    1314:	62 1b       	sub	r22, r18
    1316:	73 0b       	sbc	r23, r19
    1318:	84 0b       	sbc	r24, r20
    131a:	ba 0b       	sbc	r27, r26
    131c:	ee 1f       	adc	r30, r30
    131e:	88 f7       	brcc	.-30     	; 0x1302 <__divsf3_pse+0x90>
    1320:	e0 95       	com	r30
    1322:	08 95       	ret

00001324 <__fixsfsi>:
    1324:	04 d0       	rcall	.+8      	; 0x132e <__fixunssfsi>
    1326:	68 94       	set
    1328:	b1 11       	cpse	r27, r1
    132a:	da c0       	rjmp	.+436    	; 0x14e0 <__fp_szero>
    132c:	08 95       	ret

0000132e <__fixunssfsi>:
    132e:	bd d0       	rcall	.+378    	; 0x14aa <__fp_splitA>
    1330:	88 f0       	brcs	.+34     	; 0x1354 <__fixunssfsi+0x26>
    1332:	9f 57       	subi	r25, 0x7F	; 127
    1334:	90 f0       	brcs	.+36     	; 0x135a <__fixunssfsi+0x2c>
    1336:	b9 2f       	mov	r27, r25
    1338:	99 27       	eor	r25, r25
    133a:	b7 51       	subi	r27, 0x17	; 23
    133c:	a0 f0       	brcs	.+40     	; 0x1366 <__fixunssfsi+0x38>
    133e:	d1 f0       	breq	.+52     	; 0x1374 <__fixunssfsi+0x46>
    1340:	66 0f       	add	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	1a f0       	brmi	.+6      	; 0x1350 <__fixunssfsi+0x22>
    134a:	ba 95       	dec	r27
    134c:	c9 f7       	brne	.-14     	; 0x1340 <__fixunssfsi+0x12>
    134e:	12 c0       	rjmp	.+36     	; 0x1374 <__fixunssfsi+0x46>
    1350:	b1 30       	cpi	r27, 0x01	; 1
    1352:	81 f0       	breq	.+32     	; 0x1374 <__fixunssfsi+0x46>
    1354:	c4 d0       	rcall	.+392    	; 0x14de <__fp_zero>
    1356:	b1 e0       	ldi	r27, 0x01	; 1
    1358:	08 95       	ret
    135a:	c1 c0       	rjmp	.+386    	; 0x14de <__fp_zero>
    135c:	67 2f       	mov	r22, r23
    135e:	78 2f       	mov	r23, r24
    1360:	88 27       	eor	r24, r24
    1362:	b8 5f       	subi	r27, 0xF8	; 248
    1364:	39 f0       	breq	.+14     	; 0x1374 <__fixunssfsi+0x46>
    1366:	b9 3f       	cpi	r27, 0xF9	; 249
    1368:	cc f3       	brlt	.-14     	; 0x135c <__fixunssfsi+0x2e>
    136a:	86 95       	lsr	r24
    136c:	77 95       	ror	r23
    136e:	67 95       	ror	r22
    1370:	b3 95       	inc	r27
    1372:	d9 f7       	brne	.-10     	; 0x136a <__fixunssfsi+0x3c>
    1374:	3e f4       	brtc	.+14     	; 0x1384 <__fixunssfsi+0x56>
    1376:	90 95       	com	r25
    1378:	80 95       	com	r24
    137a:	70 95       	com	r23
    137c:	61 95       	neg	r22
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	8f 4f       	sbci	r24, 0xFF	; 255
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	08 95       	ret

00001386 <__floatunsisf>:
    1386:	e8 94       	clt
    1388:	09 c0       	rjmp	.+18     	; 0x139c <__floatsisf+0x12>

0000138a <__floatsisf>:
    138a:	97 fb       	bst	r25, 7
    138c:	3e f4       	brtc	.+14     	; 0x139c <__floatsisf+0x12>
    138e:	90 95       	com	r25
    1390:	80 95       	com	r24
    1392:	70 95       	com	r23
    1394:	61 95       	neg	r22
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	8f 4f       	sbci	r24, 0xFF	; 255
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	99 23       	and	r25, r25
    139e:	a9 f0       	breq	.+42     	; 0x13ca <__floatsisf+0x40>
    13a0:	f9 2f       	mov	r31, r25
    13a2:	96 e9       	ldi	r25, 0x96	; 150
    13a4:	bb 27       	eor	r27, r27
    13a6:	93 95       	inc	r25
    13a8:	f6 95       	lsr	r31
    13aa:	87 95       	ror	r24
    13ac:	77 95       	ror	r23
    13ae:	67 95       	ror	r22
    13b0:	b7 95       	ror	r27
    13b2:	f1 11       	cpse	r31, r1
    13b4:	f8 cf       	rjmp	.-16     	; 0x13a6 <__floatsisf+0x1c>
    13b6:	fa f4       	brpl	.+62     	; 0x13f6 <__floatsisf+0x6c>
    13b8:	bb 0f       	add	r27, r27
    13ba:	11 f4       	brne	.+4      	; 0x13c0 <__floatsisf+0x36>
    13bc:	60 ff       	sbrs	r22, 0
    13be:	1b c0       	rjmp	.+54     	; 0x13f6 <__floatsisf+0x6c>
    13c0:	6f 5f       	subi	r22, 0xFF	; 255
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	16 c0       	rjmp	.+44     	; 0x13f6 <__floatsisf+0x6c>
    13ca:	88 23       	and	r24, r24
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <__floatsisf+0x48>
    13ce:	96 e9       	ldi	r25, 0x96	; 150
    13d0:	11 c0       	rjmp	.+34     	; 0x13f4 <__floatsisf+0x6a>
    13d2:	77 23       	and	r23, r23
    13d4:	21 f0       	breq	.+8      	; 0x13de <__floatsisf+0x54>
    13d6:	9e e8       	ldi	r25, 0x8E	; 142
    13d8:	87 2f       	mov	r24, r23
    13da:	76 2f       	mov	r23, r22
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <__floatsisf+0x5e>
    13de:	66 23       	and	r22, r22
    13e0:	71 f0       	breq	.+28     	; 0x13fe <__floatsisf+0x74>
    13e2:	96 e8       	ldi	r25, 0x86	; 134
    13e4:	86 2f       	mov	r24, r22
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	2a f0       	brmi	.+10     	; 0x13f6 <__floatsisf+0x6c>
    13ec:	9a 95       	dec	r25
    13ee:	66 0f       	add	r22, r22
    13f0:	77 1f       	adc	r23, r23
    13f2:	88 1f       	adc	r24, r24
    13f4:	da f7       	brpl	.-10     	; 0x13ec <__floatsisf+0x62>
    13f6:	88 0f       	add	r24, r24
    13f8:	96 95       	lsr	r25
    13fa:	87 95       	ror	r24
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <__fp_inf>:
    1400:	97 f9       	bld	r25, 7
    1402:	9f 67       	ori	r25, 0x7F	; 127
    1404:	80 e8       	ldi	r24, 0x80	; 128
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	08 95       	ret

0000140c <__fp_nan>:
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	80 ec       	ldi	r24, 0xC0	; 192
    1410:	08 95       	ret

00001412 <__fp_powser>:
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	1f 93       	push	r17
    1418:	0f 93       	push	r16
    141a:	ff 92       	push	r15
    141c:	ef 92       	push	r14
    141e:	df 92       	push	r13
    1420:	7b 01       	movw	r14, r22
    1422:	8c 01       	movw	r16, r24
    1424:	68 94       	set
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <__fp_powser+0x20>
    1428:	da 2e       	mov	r13, r26
    142a:	ef 01       	movw	r28, r30
    142c:	72 d0       	rcall	.+228    	; 0x1512 <__mulsf3x>
    142e:	fe 01       	movw	r30, r28
    1430:	e8 94       	clt
    1432:	a5 91       	lpm	r26, Z+
    1434:	25 91       	lpm	r18, Z+
    1436:	35 91       	lpm	r19, Z+
    1438:	45 91       	lpm	r20, Z+
    143a:	55 91       	lpm	r21, Z+
    143c:	ae f3       	brts	.-22     	; 0x1428 <__fp_powser+0x16>
    143e:	ef 01       	movw	r28, r30
    1440:	cf d0       	rcall	.+414    	; 0x15e0 <__addsf3x>
    1442:	fe 01       	movw	r30, r28
    1444:	97 01       	movw	r18, r14
    1446:	a8 01       	movw	r20, r16
    1448:	da 94       	dec	r13
    144a:	79 f7       	brne	.-34     	; 0x142a <__fp_powser+0x18>
    144c:	df 90       	pop	r13
    144e:	ef 90       	pop	r14
    1450:	ff 90       	pop	r15
    1452:	0f 91       	pop	r16
    1454:	1f 91       	pop	r17
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <__fp_pscA>:
    145c:	00 24       	eor	r0, r0
    145e:	0a 94       	dec	r0
    1460:	16 16       	cp	r1, r22
    1462:	17 06       	cpc	r1, r23
    1464:	18 06       	cpc	r1, r24
    1466:	09 06       	cpc	r0, r25
    1468:	08 95       	ret

0000146a <__fp_pscB>:
    146a:	00 24       	eor	r0, r0
    146c:	0a 94       	dec	r0
    146e:	12 16       	cp	r1, r18
    1470:	13 06       	cpc	r1, r19
    1472:	14 06       	cpc	r1, r20
    1474:	05 06       	cpc	r0, r21
    1476:	08 95       	ret

00001478 <__fp_round>:
    1478:	09 2e       	mov	r0, r25
    147a:	03 94       	inc	r0
    147c:	00 0c       	add	r0, r0
    147e:	11 f4       	brne	.+4      	; 0x1484 <__fp_round+0xc>
    1480:	88 23       	and	r24, r24
    1482:	52 f0       	brmi	.+20     	; 0x1498 <__fp_round+0x20>
    1484:	bb 0f       	add	r27, r27
    1486:	40 f4       	brcc	.+16     	; 0x1498 <__fp_round+0x20>
    1488:	bf 2b       	or	r27, r31
    148a:	11 f4       	brne	.+4      	; 0x1490 <__fp_round+0x18>
    148c:	60 ff       	sbrs	r22, 0
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <__fp_round+0x20>
    1490:	6f 5f       	subi	r22, 0xFF	; 255
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	8f 4f       	sbci	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	08 95       	ret

0000149a <__fp_split3>:
    149a:	57 fd       	sbrc	r21, 7
    149c:	90 58       	subi	r25, 0x80	; 128
    149e:	44 0f       	add	r20, r20
    14a0:	55 1f       	adc	r21, r21
    14a2:	59 f0       	breq	.+22     	; 0x14ba <__fp_splitA+0x10>
    14a4:	5f 3f       	cpi	r21, 0xFF	; 255
    14a6:	71 f0       	breq	.+28     	; 0x14c4 <__fp_splitA+0x1a>
    14a8:	47 95       	ror	r20

000014aa <__fp_splitA>:
    14aa:	88 0f       	add	r24, r24
    14ac:	97 fb       	bst	r25, 7
    14ae:	99 1f       	adc	r25, r25
    14b0:	61 f0       	breq	.+24     	; 0x14ca <__fp_splitA+0x20>
    14b2:	9f 3f       	cpi	r25, 0xFF	; 255
    14b4:	79 f0       	breq	.+30     	; 0x14d4 <__fp_splitA+0x2a>
    14b6:	87 95       	ror	r24
    14b8:	08 95       	ret
    14ba:	12 16       	cp	r1, r18
    14bc:	13 06       	cpc	r1, r19
    14be:	14 06       	cpc	r1, r20
    14c0:	55 1f       	adc	r21, r21
    14c2:	f2 cf       	rjmp	.-28     	; 0x14a8 <__fp_split3+0xe>
    14c4:	46 95       	lsr	r20
    14c6:	f1 df       	rcall	.-30     	; 0x14aa <__fp_splitA>
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <__fp_splitA+0x30>
    14ca:	16 16       	cp	r1, r22
    14cc:	17 06       	cpc	r1, r23
    14ce:	18 06       	cpc	r1, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	f1 cf       	rjmp	.-30     	; 0x14b6 <__fp_splitA+0xc>
    14d4:	86 95       	lsr	r24
    14d6:	71 05       	cpc	r23, r1
    14d8:	61 05       	cpc	r22, r1
    14da:	08 94       	sec
    14dc:	08 95       	ret

000014de <__fp_zero>:
    14de:	e8 94       	clt

000014e0 <__fp_szero>:
    14e0:	bb 27       	eor	r27, r27
    14e2:	66 27       	eor	r22, r22
    14e4:	77 27       	eor	r23, r23
    14e6:	cb 01       	movw	r24, r22
    14e8:	97 f9       	bld	r25, 7
    14ea:	08 95       	ret

000014ec <inverse>:
    14ec:	9b 01       	movw	r18, r22
    14ee:	ac 01       	movw	r20, r24
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	80 e8       	ldi	r24, 0x80	; 128
    14f6:	9f e3       	ldi	r25, 0x3F	; 63
    14f8:	ad ce       	rjmp	.-678    	; 0x1254 <__divsf3>

000014fa <__mulsf3>:
    14fa:	0b d0       	rcall	.+22     	; 0x1512 <__mulsf3x>
    14fc:	bd cf       	rjmp	.-134    	; 0x1478 <__fp_round>
    14fe:	ae df       	rcall	.-164    	; 0x145c <__fp_pscA>
    1500:	28 f0       	brcs	.+10     	; 0x150c <__mulsf3+0x12>
    1502:	b3 df       	rcall	.-154    	; 0x146a <__fp_pscB>
    1504:	18 f0       	brcs	.+6      	; 0x150c <__mulsf3+0x12>
    1506:	95 23       	and	r25, r21
    1508:	09 f0       	breq	.+2      	; 0x150c <__mulsf3+0x12>
    150a:	7a cf       	rjmp	.-268    	; 0x1400 <__fp_inf>
    150c:	7f cf       	rjmp	.-258    	; 0x140c <__fp_nan>
    150e:	11 24       	eor	r1, r1
    1510:	e7 cf       	rjmp	.-50     	; 0x14e0 <__fp_szero>

00001512 <__mulsf3x>:
    1512:	c3 df       	rcall	.-122    	; 0x149a <__fp_split3>
    1514:	a0 f3       	brcs	.-24     	; 0x14fe <__mulsf3+0x4>

00001516 <__mulsf3_pse>:
    1516:	95 9f       	mul	r25, r21
    1518:	d1 f3       	breq	.-12     	; 0x150e <__mulsf3+0x14>
    151a:	95 0f       	add	r25, r21
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	55 1f       	adc	r21, r21
    1520:	62 9f       	mul	r22, r18
    1522:	f0 01       	movw	r30, r0
    1524:	72 9f       	mul	r23, r18
    1526:	bb 27       	eor	r27, r27
    1528:	f0 0d       	add	r31, r0
    152a:	b1 1d       	adc	r27, r1
    152c:	63 9f       	mul	r22, r19
    152e:	aa 27       	eor	r26, r26
    1530:	f0 0d       	add	r31, r0
    1532:	b1 1d       	adc	r27, r1
    1534:	aa 1f       	adc	r26, r26
    1536:	64 9f       	mul	r22, r20
    1538:	66 27       	eor	r22, r22
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	66 1f       	adc	r22, r22
    1540:	82 9f       	mul	r24, r18
    1542:	22 27       	eor	r18, r18
    1544:	b0 0d       	add	r27, r0
    1546:	a1 1d       	adc	r26, r1
    1548:	62 1f       	adc	r22, r18
    154a:	73 9f       	mul	r23, r19
    154c:	b0 0d       	add	r27, r0
    154e:	a1 1d       	adc	r26, r1
    1550:	62 1f       	adc	r22, r18
    1552:	83 9f       	mul	r24, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	22 1f       	adc	r18, r18
    155a:	74 9f       	mul	r23, r20
    155c:	33 27       	eor	r19, r19
    155e:	a0 0d       	add	r26, r0
    1560:	61 1d       	adc	r22, r1
    1562:	23 1f       	adc	r18, r19
    1564:	84 9f       	mul	r24, r20
    1566:	60 0d       	add	r22, r0
    1568:	21 1d       	adc	r18, r1
    156a:	82 2f       	mov	r24, r18
    156c:	76 2f       	mov	r23, r22
    156e:	6a 2f       	mov	r22, r26
    1570:	11 24       	eor	r1, r1
    1572:	9f 57       	subi	r25, 0x7F	; 127
    1574:	50 40       	sbci	r21, 0x00	; 0
    1576:	8a f0       	brmi	.+34     	; 0x159a <__mulsf3_pse+0x84>
    1578:	e1 f0       	breq	.+56     	; 0x15b2 <__mulsf3_pse+0x9c>
    157a:	88 23       	and	r24, r24
    157c:	4a f0       	brmi	.+18     	; 0x1590 <__mulsf3_pse+0x7a>
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	bb 1f       	adc	r27, r27
    1584:	66 1f       	adc	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	91 50       	subi	r25, 0x01	; 1
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	a9 f7       	brne	.-22     	; 0x157a <__mulsf3_pse+0x64>
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	51 05       	cpc	r21, r1
    1594:	70 f0       	brcs	.+28     	; 0x15b2 <__mulsf3_pse+0x9c>
    1596:	34 cf       	rjmp	.-408    	; 0x1400 <__fp_inf>
    1598:	a3 cf       	rjmp	.-186    	; 0x14e0 <__fp_szero>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	ec f3       	brlt	.-6      	; 0x1598 <__mulsf3_pse+0x82>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	dc f3       	brlt	.-10     	; 0x1598 <__mulsf3_pse+0x82>
    15a2:	86 95       	lsr	r24
    15a4:	77 95       	ror	r23
    15a6:	67 95       	ror	r22
    15a8:	b7 95       	ror	r27
    15aa:	f7 95       	ror	r31
    15ac:	e7 95       	ror	r30
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	c1 f7       	brne	.-16     	; 0x15a2 <__mulsf3_pse+0x8c>
    15b2:	fe 2b       	or	r31, r30
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <square>:
    15c0:	9b 01       	movw	r18, r22
    15c2:	ac 01       	movw	r20, r24
    15c4:	9a cf       	rjmp	.-204    	; 0x14fa <__mulsf3>
    15c6:	4a df       	rcall	.-364    	; 0x145c <__fp_pscA>
    15c8:	30 f0       	brcs	.+12     	; 0x15d6 <square+0x16>
    15ca:	4f df       	rcall	.-354    	; 0x146a <__fp_pscB>
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <square+0x16>
    15ce:	31 f4       	brne	.+12     	; 0x15dc <square+0x1c>
    15d0:	9f 3f       	cpi	r25, 0xFF	; 255
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <square+0x18>
    15d4:	1e f4       	brtc	.+6      	; 0x15dc <square+0x1c>
    15d6:	1a cf       	rjmp	.-460    	; 0x140c <__fp_nan>
    15d8:	0e f4       	brtc	.+2      	; 0x15dc <square+0x1c>
    15da:	e0 95       	com	r30
    15dc:	e7 fb       	bst	r30, 7
    15de:	10 cf       	rjmp	.-480    	; 0x1400 <__fp_inf>

000015e0 <__addsf3x>:
    15e0:	e9 2f       	mov	r30, r25
    15e2:	5b df       	rcall	.-330    	; 0x149a <__fp_split3>
    15e4:	80 f3       	brcs	.-32     	; 0x15c6 <square+0x6>
    15e6:	ba 17       	cp	r27, r26
    15e8:	62 07       	cpc	r22, r18
    15ea:	73 07       	cpc	r23, r19
    15ec:	84 07       	cpc	r24, r20
    15ee:	95 07       	cpc	r25, r21
    15f0:	18 f0       	brcs	.+6      	; 0x15f8 <__addsf3x+0x18>
    15f2:	71 f4       	brne	.+28     	; 0x1610 <__addsf3x+0x30>
    15f4:	9e f5       	brtc	.+102    	; 0x165c <__addsf3x+0x7c>
    15f6:	73 cf       	rjmp	.-282    	; 0x14de <__fp_zero>
    15f8:	0e f4       	brtc	.+2      	; 0x15fc <__addsf3x+0x1c>
    15fa:	e0 95       	com	r30
    15fc:	0b 2e       	mov	r0, r27
    15fe:	ba 2f       	mov	r27, r26
    1600:	a0 2d       	mov	r26, r0
    1602:	0b 01       	movw	r0, r22
    1604:	b9 01       	movw	r22, r18
    1606:	90 01       	movw	r18, r0
    1608:	0c 01       	movw	r0, r24
    160a:	ca 01       	movw	r24, r20
    160c:	a0 01       	movw	r20, r0
    160e:	11 24       	eor	r1, r1
    1610:	ff 27       	eor	r31, r31
    1612:	59 1b       	sub	r21, r25
    1614:	99 f0       	breq	.+38     	; 0x163c <__addsf3x+0x5c>
    1616:	59 3f       	cpi	r21, 0xF9	; 249
    1618:	50 f4       	brcc	.+20     	; 0x162e <__addsf3x+0x4e>
    161a:	50 3e       	cpi	r21, 0xE0	; 224
    161c:	68 f1       	brcs	.+90     	; 0x1678 <__addsf3x+0x98>
    161e:	1a 16       	cp	r1, r26
    1620:	f0 40       	sbci	r31, 0x00	; 0
    1622:	a2 2f       	mov	r26, r18
    1624:	23 2f       	mov	r18, r19
    1626:	34 2f       	mov	r19, r20
    1628:	44 27       	eor	r20, r20
    162a:	58 5f       	subi	r21, 0xF8	; 248
    162c:	f3 cf       	rjmp	.-26     	; 0x1614 <__addsf3x+0x34>
    162e:	46 95       	lsr	r20
    1630:	37 95       	ror	r19
    1632:	27 95       	ror	r18
    1634:	a7 95       	ror	r26
    1636:	f0 40       	sbci	r31, 0x00	; 0
    1638:	53 95       	inc	r21
    163a:	c9 f7       	brne	.-14     	; 0x162e <__addsf3x+0x4e>
    163c:	7e f4       	brtc	.+30     	; 0x165c <__addsf3x+0x7c>
    163e:	1f 16       	cp	r1, r31
    1640:	ba 0b       	sbc	r27, r26
    1642:	62 0b       	sbc	r22, r18
    1644:	73 0b       	sbc	r23, r19
    1646:	84 0b       	sbc	r24, r20
    1648:	ba f0       	brmi	.+46     	; 0x1678 <__addsf3x+0x98>
    164a:	91 50       	subi	r25, 0x01	; 1
    164c:	a1 f0       	breq	.+40     	; 0x1676 <__addsf3x+0x96>
    164e:	ff 0f       	add	r31, r31
    1650:	bb 1f       	adc	r27, r27
    1652:	66 1f       	adc	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	c2 f7       	brpl	.-16     	; 0x164a <__addsf3x+0x6a>
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <__addsf3x+0x98>
    165c:	ba 0f       	add	r27, r26
    165e:	62 1f       	adc	r22, r18
    1660:	73 1f       	adc	r23, r19
    1662:	84 1f       	adc	r24, r20
    1664:	48 f4       	brcc	.+18     	; 0x1678 <__addsf3x+0x98>
    1666:	87 95       	ror	r24
    1668:	77 95       	ror	r23
    166a:	67 95       	ror	r22
    166c:	b7 95       	ror	r27
    166e:	f7 95       	ror	r31
    1670:	9e 3f       	cpi	r25, 0xFE	; 254
    1672:	08 f0       	brcs	.+2      	; 0x1676 <__addsf3x+0x96>
    1674:	b3 cf       	rjmp	.-154    	; 0x15dc <square+0x1c>
    1676:	93 95       	inc	r25
    1678:	88 0f       	add	r24, r24
    167a:	08 f0       	brcs	.+2      	; 0x167e <__addsf3x+0x9e>
    167c:	99 27       	eor	r25, r25
    167e:	ee 0f       	add	r30, r30
    1680:	97 95       	ror	r25
    1682:	87 95       	ror	r24
    1684:	08 95       	ret

00001686 <__mulsi3>:
    1686:	62 9f       	mul	r22, r18
    1688:	d0 01       	movw	r26, r0
    168a:	73 9f       	mul	r23, r19
    168c:	f0 01       	movw	r30, r0
    168e:	82 9f       	mul	r24, r18
    1690:	e0 0d       	add	r30, r0
    1692:	f1 1d       	adc	r31, r1
    1694:	64 9f       	mul	r22, r20
    1696:	e0 0d       	add	r30, r0
    1698:	f1 1d       	adc	r31, r1
    169a:	92 9f       	mul	r25, r18
    169c:	f0 0d       	add	r31, r0
    169e:	83 9f       	mul	r24, r19
    16a0:	f0 0d       	add	r31, r0
    16a2:	74 9f       	mul	r23, r20
    16a4:	f0 0d       	add	r31, r0
    16a6:	65 9f       	mul	r22, r21
    16a8:	f0 0d       	add	r31, r0
    16aa:	99 27       	eor	r25, r25
    16ac:	72 9f       	mul	r23, r18
    16ae:	b0 0d       	add	r27, r0
    16b0:	e1 1d       	adc	r30, r1
    16b2:	f9 1f       	adc	r31, r25
    16b4:	63 9f       	mul	r22, r19
    16b6:	b0 0d       	add	r27, r0
    16b8:	e1 1d       	adc	r30, r1
    16ba:	f9 1f       	adc	r31, r25
    16bc:	bd 01       	movw	r22, r26
    16be:	cf 01       	movw	r24, r30
    16c0:	11 24       	eor	r1, r1
    16c2:	08 95       	ret

000016c4 <__divmodhi4>:
    16c4:	97 fb       	bst	r25, 7
    16c6:	09 2e       	mov	r0, r25
    16c8:	07 26       	eor	r0, r23
    16ca:	0a d0       	rcall	.+20     	; 0x16e0 <__divmodhi4_neg1>
    16cc:	77 fd       	sbrc	r23, 7
    16ce:	04 d0       	rcall	.+8      	; 0x16d8 <__divmodhi4_neg2>
    16d0:	49 d0       	rcall	.+146    	; 0x1764 <__udivmodhi4>
    16d2:	06 d0       	rcall	.+12     	; 0x16e0 <__divmodhi4_neg1>
    16d4:	00 20       	and	r0, r0
    16d6:	1a f4       	brpl	.+6      	; 0x16de <__divmodhi4_exit>

000016d8 <__divmodhi4_neg2>:
    16d8:	70 95       	com	r23
    16da:	61 95       	neg	r22
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255

000016de <__divmodhi4_exit>:
    16de:	08 95       	ret

000016e0 <__divmodhi4_neg1>:
    16e0:	f6 f7       	brtc	.-4      	; 0x16de <__divmodhi4_exit>
    16e2:	90 95       	com	r25
    16e4:	81 95       	neg	r24
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	08 95       	ret

000016ea <__udivmodsi4>:
    16ea:	a1 e2       	ldi	r26, 0x21	; 33
    16ec:	1a 2e       	mov	r1, r26
    16ee:	aa 1b       	sub	r26, r26
    16f0:	bb 1b       	sub	r27, r27
    16f2:	fd 01       	movw	r30, r26
    16f4:	0d c0       	rjmp	.+26     	; 0x1710 <__udivmodsi4_ep>

000016f6 <__udivmodsi4_loop>:
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	ee 1f       	adc	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	a2 17       	cp	r26, r18
    1700:	b3 07       	cpc	r27, r19
    1702:	e4 07       	cpc	r30, r20
    1704:	f5 07       	cpc	r31, r21
    1706:	20 f0       	brcs	.+8      	; 0x1710 <__udivmodsi4_ep>
    1708:	a2 1b       	sub	r26, r18
    170a:	b3 0b       	sbc	r27, r19
    170c:	e4 0b       	sbc	r30, r20
    170e:	f5 0b       	sbc	r31, r21

00001710 <__udivmodsi4_ep>:
    1710:	66 1f       	adc	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	1a 94       	dec	r1
    171a:	69 f7       	brne	.-38     	; 0x16f6 <__udivmodsi4_loop>
    171c:	60 95       	com	r22
    171e:	70 95       	com	r23
    1720:	80 95       	com	r24
    1722:	90 95       	com	r25
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	bd 01       	movw	r22, r26
    172a:	cf 01       	movw	r24, r30
    172c:	08 95       	ret

0000172e <__divmodsi4>:
    172e:	97 fb       	bst	r25, 7
    1730:	09 2e       	mov	r0, r25
    1732:	05 26       	eor	r0, r21
    1734:	0e d0       	rcall	.+28     	; 0x1752 <__divmodsi4_neg1>
    1736:	57 fd       	sbrc	r21, 7
    1738:	04 d0       	rcall	.+8      	; 0x1742 <__divmodsi4_neg2>
    173a:	d7 df       	rcall	.-82     	; 0x16ea <__udivmodsi4>
    173c:	0a d0       	rcall	.+20     	; 0x1752 <__divmodsi4_neg1>
    173e:	00 1c       	adc	r0, r0
    1740:	38 f4       	brcc	.+14     	; 0x1750 <__divmodsi4_exit>

00001742 <__divmodsi4_neg2>:
    1742:	50 95       	com	r21
    1744:	40 95       	com	r20
    1746:	30 95       	com	r19
    1748:	21 95       	neg	r18
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	4f 4f       	sbci	r20, 0xFF	; 255
    174e:	5f 4f       	sbci	r21, 0xFF	; 255

00001750 <__divmodsi4_exit>:
    1750:	08 95       	ret

00001752 <__divmodsi4_neg1>:
    1752:	f6 f7       	brtc	.-4      	; 0x1750 <__divmodsi4_exit>
    1754:	90 95       	com	r25
    1756:	80 95       	com	r24
    1758:	70 95       	com	r23
    175a:	61 95       	neg	r22
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	08 95       	ret

00001764 <__udivmodhi4>:
    1764:	aa 1b       	sub	r26, r26
    1766:	bb 1b       	sub	r27, r27
    1768:	51 e1       	ldi	r21, 0x11	; 17
    176a:	07 c0       	rjmp	.+14     	; 0x177a <__udivmodhi4_ep>

0000176c <__udivmodhi4_loop>:
    176c:	aa 1f       	adc	r26, r26
    176e:	bb 1f       	adc	r27, r27
    1770:	a6 17       	cp	r26, r22
    1772:	b7 07       	cpc	r27, r23
    1774:	10 f0       	brcs	.+4      	; 0x177a <__udivmodhi4_ep>
    1776:	a6 1b       	sub	r26, r22
    1778:	b7 0b       	sbc	r27, r23

0000177a <__udivmodhi4_ep>:
    177a:	88 1f       	adc	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	5a 95       	dec	r21
    1780:	a9 f7       	brne	.-22     	; 0x176c <__udivmodhi4_loop>
    1782:	80 95       	com	r24
    1784:	90 95       	com	r25
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	08 95       	ret

0000178c <_exit>:
    178c:	f8 94       	cli

0000178e <__stop_program>:
    178e:	ff cf       	rjmp	.-2      	; 0x178e <__stop_program>
