
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000f7a  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800122  00800122  00001030  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000084d  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c50  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  0000354d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001508  00000000  00000000  00003c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  00005160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082c  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5d  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000069f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29

  DDRD  |= (1<<4);
  aa:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  
  I2C_Init();
  ae:	0e 94 0e 03 	call	0x61c	; 0x61c <I2C_Init>
  debug_init();
  b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <debug_init>
  debug_tx_text_nl("Debug Started");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 12 05 	call	0xa24	; 0xa24 <debug_tx_text_nl>
  I2C_Set_Mode_Active();
  be:	0e 94 3d 02 	call	0x47a	; 0x47a <I2C_Set_Mode_Active>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	c0 e7       	ldi	r28, 0x70	; 112
  c4:	d7 e1       	ldi	r29, 0x17	; 23

  
  while(1){
	debug_tx_number_cm(I2C_Read_Acc_X());
  c6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <I2C_Read_Acc_X>
  ca:	aa 27       	eor	r26, r26
  cc:	97 fd       	sbrc	r25, 7
  ce:	a0 95       	com	r26
  d0:	ba 2f       	mov	r27, r26
  d2:	bc 01       	movw	r22, r24
  d4:	cd 01       	movw	r24, r26
  d6:	0e 94 99 05 	call	0xb32	; 0xb32 <debug_tx_number_cm>
	debug_tx_number_cm(I2C_Read_Acc_Y());
  da:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <I2C_Read_Acc_Y>
  de:	aa 27       	eor	r26, r26
  e0:	97 fd       	sbrc	r25, 7
  e2:	a0 95       	com	r26
  e4:	ba 2f       	mov	r27, r26
  e6:	bc 01       	movw	r22, r24
  e8:	cd 01       	movw	r24, r26
  ea:	0e 94 99 05 	call	0xb32	; 0xb32 <debug_tx_number_cm>
	debug_tx_number_cm(I2C_Read_Acc_Z());
  ee:	0e 94 b4 02 	call	0x568	; 0x568 <I2C_Read_Acc_Z>
  f2:	aa 27       	eor	r26, r26
  f4:	97 fd       	sbrc	r25, 7
  f6:	a0 95       	com	r26
  f8:	ba 2f       	mov	r27, r26
  fa:	bc 01       	movw	r22, r24
  fc:	cd 01       	movw	r24, r26
  fe:	0e 94 99 05 	call	0xb32	; 0xb32 <debug_tx_number_cm>
	debug_tx_number_cm(I2C_Read_Gyro_X());
 102:	0e 94 96 02 	call	0x52c	; 0x52c <I2C_Read_Gyro_X>
 106:	aa 27       	eor	r26, r26
 108:	97 fd       	sbrc	r25, 7
 10a:	a0 95       	com	r26
 10c:	ba 2f       	mov	r27, r26
 10e:	bc 01       	movw	r22, r24
 110:	cd 01       	movw	r24, r26
 112:	0e 94 99 05 	call	0xb32	; 0xb32 <debug_tx_number_cm>
	debug_tx_number_cm(I2C_Read_Gyro_Y());
 116:	0e 94 78 02 	call	0x4f0	; 0x4f0 <I2C_Read_Gyro_Y>
 11a:	aa 27       	eor	r26, r26
 11c:	97 fd       	sbrc	r25, 7
 11e:	a0 95       	com	r26
 120:	ba 2f       	mov	r27, r26
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	0e 94 99 05 	call	0xb32	; 0xb32 <debug_tx_number_cm>
	debug_tx_number_nl(I2C_Read_Gyro_Z());
 12a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <I2C_Read_Gyro_Z>
 12e:	aa 27       	eor	r26, r26
 130:	97 fd       	sbrc	r25, 7
 132:	a0 95       	com	r26
 134:	ba 2f       	mov	r27, r26
 136:	bc 01       	movw	r22, r24
 138:	cd 01       	movw	r24, r26
 13a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <debug_tx_number_nl>
 13e:	ce 01       	movw	r24, r28
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x9a>
 144:	c0 cf       	rjmp	.-128    	; 0xc6 <main+0x20>

00000146 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
 146:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
 14a:	10 92 23 01 	sts	0x0123, r1
}
 14e:	08 95       	ret

00000150 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 150:	80 e5       	ldi	r24, 0x50	; 80
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
 156:	08 95       	ret

00000158 <I2C_Bit_Delay>:
 158:	80 ea       	ldi	r24, 0xA0	; 160
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
 15e:	08 95       	ret

00000160 <I2C_Guard_Delay>:
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
 166:	08 95       	ret

00000168 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	11 f4       	brne	.+4      	; 0x170 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 16c:	3c 9a       	sbi	0x07, 4	; 7
 16e:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 170:	3c 98       	cbi	0x07, 4	; 7
 172:	08 95       	ret

00000174 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	11 f4       	brne	.+4      	; 0x17c <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 178:	44 9a       	sbi	0x08, 4	; 8
 17a:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 17c:	44 98       	cbi	0x08, 4	; 8
 17e:	08 95       	ret

00000180 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	19 f4       	brne	.+6      	; 0x18a <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 184:	44 9a       	sbi	0x08, 4	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 186:	3c 98       	cbi	0x07, 4	; 7
 188:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 18a:	44 98       	cbi	0x08, 4	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 18c:	3c 9a       	sbi	0x07, 4	; 7
 18e:	08 95       	ret

00000190 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
 190:	86 b1       	in	r24, 0x06	; 6
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	24 e0       	ldi	r18, 0x04	; 4
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	2a 95       	dec	r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 19e:	81 70       	andi	r24, 0x01	; 1
 1a0:	08 95       	ret

000001a2 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	11 f4       	brne	.+4      	; 0x1aa <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 1a6:	3d 9a       	sbi	0x07, 5	; 7
 1a8:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 1aa:	3d 98       	cbi	0x07, 5	; 7
 1ac:	08 95       	ret

000001ae <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 1b2:	45 9a       	sbi	0x08, 5	; 8
 1b4:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 1b6:	45 98       	cbi	0x08, 5	; 8
 1b8:	08 95       	ret

000001ba <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 1be:	45 9a       	sbi	0x08, 5	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 1c0:	3d 98       	cbi	0x07, 5	; 7
 1c2:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 1c4:	45 98       	cbi	0x08, 5	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 1c6:	3d 9a       	sbi	0x07, 5	; 7
 1c8:	08 95       	ret

000001ca <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 1ca:	86 b1       	in	r24, 0x06	; 6
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	35 e0       	ldi	r19, 0x05	; 5
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	3a 95       	dec	r19
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 1d8:	81 70       	andi	r24, 0x01	; 1
 1da:	08 95       	ret

000001dc <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 1dc:	3c 98       	cbi	0x07, 4	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
}
 1e4:	08 95       	ret

000001e6 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 1e6:	3d 98       	cbi	0x07, 5	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
}
 1ee:	08 95       	ret

000001f0 <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 1f0:	3c 9a       	sbi	0x07, 4	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 1f2:	3d 98       	cbi	0x07, 5	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
}
 200:	08 95       	ret

00000202 <I2C_Start>:

void I2C_Start(void){
 202:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 210:	10 e5       	ldi	r17, 0x50	; 80
 212:	81 2f       	mov	r24, r17
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 21e:	81 2f       	mov	r24, r17
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 22a:	1a 95       	dec	r17
 22c:	f1 f7       	brne	.-4      	; 0x22a <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
 22e:	1f 91       	pop	r17
 230:	08 95       	ret

00000232 <I2C_Stop>:

void I2C_Stop(void){
 232:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 240:	10 e5       	ldi	r17, 0x50	; 80
 242:	81 2f       	mov	r24, r17
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 24e:	81 2f       	mov	r24, r17
 250:	8a 95       	dec	r24
 252:	f1 f7       	brne	.-4      	; 0x250 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 25a:	1a 95       	dec	r17
 25c:	f1 f7       	brne	.-4      	; 0x25a <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
 25e:	1f 91       	pop	r17
 260:	08 95       	ret

00000262 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	08 2f       	mov	r16, r24
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	50 e5       	ldi	r21, 0x50	; 80
 270:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
 272:	48 e0       	ldi	r20, 0x08	; 8
 274:	e4 2e       	mov	r14, r20
 276:	07 ff       	sbrs	r16, 7
 278:	02 c0       	rjmp	.+4      	; 0x27e <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	01 c0       	rjmp	.+2      	; 0x280 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 284:	8f 2d       	mov	r24, r15
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 290:	8f 2d       	mov	r24, r15
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 29c:	8e 2d       	mov	r24, r14
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
 2a2:	1f 5f       	subi	r17, 0xFF	; 255
 2a4:	18 30       	cpi	r17, 0x08	; 8
 2a6:	11 f0       	breq	.+4      	; 0x2ac <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
 2a8:	00 0f       	add	r16, r16
 2aa:	e5 cf       	rjmp	.-54     	; 0x276 <I2C_Data_Send+0x14>
  }
}
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	08 95       	ret

000002b6 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	60 e5       	ldi	r22, 0x50	; 80
 2c8:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
 2ca:	11 0f       	add	r17, r17
 2cc:	8f 2d       	mov	r24, r15
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 2d8:	35 99       	sbic	0x06, 5	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
 2da:	11 60       	ori	r17, 0x01	; 1
 2dc:	8f 2d       	mov	r24, r15
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
 2e8:	0f 5f       	subi	r16, 0xFF	; 255
 2ea:	08 30       	cpi	r16, 0x08	; 8
 2ec:	71 f7       	brne	.-36     	; 0x2ca <I2C_Data_Receive+0x14>
 2ee:	80 e5       	ldi	r24, 0x50	; 80
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
  return data;
}
 2fa:	81 2f       	mov	r24, r17
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	08 95       	ret

00000304 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
 304:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 30c:	10 e5       	ldi	r17, 0x50	; 80
 30e:	81 2f       	mov	r24, r17
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 31a:	1a 95       	dec	r17
 31c:	f1 f7       	brne	.-4      	; 0x31a <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
}
 324:	1f 91       	pop	r17
 326:	08 95       	ret

00000328 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
 328:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 330:	10 e5       	ldi	r17, 0x50	; 80
 332:	81 2f       	mov	r24, r17
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 33e:	1a 95       	dec	r17
 340:	f1 f7       	brne	.-4      	; 0x33e <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
}
 348:	1f 91       	pop	r17
 34a:	08 95       	ret

0000034c <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_SDA_Set_Output>
 356:	00 e5       	ldi	r16, 0x50	; 80
 358:	80 2f       	mov	r24, r16
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 364:	16 b1       	in	r17, 0x06	; 6
 366:	0a 95       	dec	r16
 368:	f1 f7       	brne	.-4      	; 0x366 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_SCL_Set_Output>
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <I2C_Get_Ack+0x26>
 376:	12 95       	swap	r17
 378:	16 95       	lsr	r17
 37a:	17 70       	andi	r17, 0x07	; 7
 37c:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
 37e:	81 2f       	mov	r24, r17
 380:	81 70       	andi	r24, 0x01	; 1
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
 388:	1f 93       	push	r17
 38a:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
 38c:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Start>
  I2C_Data_Send(address);
 390:	81 2f       	mov	r24, r17
 392:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  ack = I2C_Get_Ack();
 396:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
 39a:	18 2f       	mov	r17, r24
  I2C_Stop();
 39c:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Stop>
  return ack;
}
 3a0:	81 2f       	mov	r24, r17
 3a2:	1f 91       	pop	r17
 3a4:	08 95       	ret

000003a6 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
 3a6:	1f 93       	push	r17
 3a8:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
 3aa:	81 2f       	mov	r24, r17
 3ac:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Send_Device_Address>
	if(sts==1){
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <I2C_Get_Device_Address+0x12>
 3b4:	81 2f       	mov	r24, r17
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
 3b8:	1f 5f       	subi	r17, 0xFF	; 255
 3ba:	1f 3f       	cpi	r17, 0xFF	; 255
 3bc:	b1 f7       	brne	.-20     	; 0x3aa <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
 3c2:	df 92       	push	r13
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
 3ce:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
 3d2:	80 91 22 01 	lds	r24, 0x0122
 3d6:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
 3da:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
 3de:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
 3e0:	81 2f       	mov	r24, r17
 3e2:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
 3e6:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
 3ea:	f8 2e       	mov	r15, r24
  I2C_Stop();
 3ec:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Stop>
  I2C_Start();
 3f0:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
 3f4:	80 91 23 01 	lds	r24, 0x0123
 3f8:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
 3fc:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
 400:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
 402:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <I2C_Data_Receive>
 406:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
 408:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
 40c:	08 2f       	mov	r16, r24
  I2C_Stop();
 40e:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Stop>
  if(sts == 0x07){
 412:	ff 0c       	add	r15, r15
 414:	11 0f       	add	r17, r17
 416:	11 0f       	add	r17, r17
 418:	1f 29       	or	r17, r15
 41a:	1e 29       	or	r17, r14
 41c:	00 0f       	add	r16, r16
 41e:	00 0f       	add	r16, r16
 420:	00 0f       	add	r16, r16
 422:	01 2b       	or	r16, r17
 424:	07 30       	cpi	r16, 0x07	; 7
 426:	11 f0       	breq	.+4      	; 0x42c <I2C_Read_Register+0x6a>
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	01 c0       	rjmp	.+2      	; 0x42e <I2C_Read_Register+0x6c>
 42c:	8d 2d       	mov	r24, r13
    sts = data;
  }else{
    sts = 0xFF;
  }
  return sts;
}
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	08 95       	ret

0000043a <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	18 2f       	mov	r17, r24
 440:	06 2f       	mov	r16, r22
  uint8_t sts=0,data=0;
  I2C_Start();
 442:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
 446:	80 91 22 01 	lds	r24, 0x0122
 44a:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
 44e:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
  I2C_Data_Send(reg);
 452:	81 2f       	mov	r24, r17
 454:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
 458:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>

  I2C_Data_Send(val);
 45c:	80 2f       	mov	r24, r16
 45e:	0e 94 31 01 	call	0x262	; 0x262 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
 462:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Get_Ack>
  I2C_Stop();
 466:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Stop>
  if(sts == 0x07){
    sts = data;
  }else{
    sts = 0xFF;
  }
}
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <I2C_Set_Mode_Sleep>:
	LPF_Set_Alpha(5,LPF_EN);
  #endif
}

void I2C_Set_Mode_Sleep(void){
  I2C_Write_Register(0x6B, 0x40);
 470:	8b e6       	ldi	r24, 0x6B	; 107
 472:	60 e4       	ldi	r22, 0x40	; 64
 474:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_Write_Register>
}
 478:	08 95       	ret

0000047a <I2C_Set_Mode_Active>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
 47a:	8b e6       	ldi	r24, 0x6B	; 107
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_Write_Register>
}
 482:	08 95       	ret

00000484 <I2C_Read_Temp>:
    data = LPF_Get_Filtered_Value(5, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Temp(void){
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
 488:	81 e4       	ldi	r24, 0x41	; 65
 48a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 48e:	18 2f       	mov	r17, r24
 490:	00 e0       	ldi	r16, 0x00	; 0
  data |= I2C_Read_Register(0x42);
 492:	82 e4       	ldi	r24, 0x42	; 66
 494:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
 498:	90 e0       	ldi	r25, 0x00	; 0
  data /=340;
 49a:	80 2b       	or	r24, r16
 49c:	91 2b       	or	r25, r17
 49e:	64 e5       	ldi	r22, 0x54	; 84
 4a0:	71 e0       	ldi	r23, 0x01	; 1
 4a2:	0e 94 57 07 	call	0xeae	; 0xeae <__divmodhi4>
 4a6:	9b 01       	movw	r18, r22
 4a8:	2c 5d       	subi	r18, 0xDC	; 220
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
  data +=36;
  return data;
}
 4ac:	c9 01       	movw	r24, r18
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	08 95       	ret

000004b4 <I2C_Read_Gyro_Z>:
    data = LPF_Get_Filtered_Value(4, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Z(void){
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
 4bc:	87 e4       	ldi	r24, 0x47	; 71
 4be:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 4c2:	f8 2e       	mov	r15, r24
 4c4:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
 4c6:	88 e4       	ldi	r24, 0x48	; 72
 4c8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	e8 2a       	or	r14, r24
 4d0:	f9 2a       	or	r15, r25
 4d2:	00 27       	eor	r16, r16
 4d4:	f7 fc       	sbrc	r15, 7
 4d6:	00 95       	com	r16
 4d8:	10 2f       	mov	r17, r16
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	b8 01       	movw	r22, r16
 4de:	a7 01       	movw	r20, r14
 4e0:	0e 94 d0 06 	call	0xda0	; 0xda0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
 4e4:	cb 01       	movw	r24, r22
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	08 95       	ret

000004f0 <I2C_Read_Gyro_Y>:
    data = LPF_Get_Filtered_Value(3, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Y(void){
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x45);
 4f8:	85 e4       	ldi	r24, 0x45	; 69
 4fa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 4fe:	f8 2e       	mov	r15, r24
 500:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
 502:	86 e4       	ldi	r24, 0x46	; 70
 504:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	e8 2a       	or	r14, r24
 50c:	f9 2a       	or	r15, r25
 50e:	00 27       	eor	r16, r16
 510:	f7 fc       	sbrc	r15, 7
 512:	00 95       	com	r16
 514:	10 2f       	mov	r17, r16
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	b8 01       	movw	r22, r16
 51a:	a7 01       	movw	r20, r14
 51c:	0e 94 d0 06 	call	0xda0	; 0xda0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
 520:	cb 01       	movw	r24, r22
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	08 95       	ret

0000052c <I2C_Read_Gyro_X>:
    data = LPF_Get_Filtered_Value(2, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_X(void){
 52c:	ef 92       	push	r14
 52e:	ff 92       	push	r15
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
 534:	83 e4       	ldi	r24, 0x43	; 67
 536:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 53a:	f8 2e       	mov	r15, r24
 53c:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
 53e:	84 e4       	ldi	r24, 0x44	; 68
 540:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	e8 2a       	or	r14, r24
 548:	f9 2a       	or	r15, r25
 54a:	00 27       	eor	r16, r16
 54c:	f7 fc       	sbrc	r15, 7
 54e:	00 95       	com	r16
 550:	10 2f       	mov	r17, r16
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	b8 01       	movw	r22, r16
 556:	a7 01       	movw	r20, r14
 558:	0e 94 d0 06 	call	0xda0	; 0xda0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
 55c:	cb 01       	movw	r24, r22
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	08 95       	ret

00000568 <I2C_Read_Acc_Z>:
    data = LPF_Get_Filtered_Value(1, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Z(void){
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
 570:	8f e3       	ldi	r24, 0x3F	; 63
 572:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 576:	f8 2e       	mov	r15, r24
 578:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
 57a:	80 e4       	ldi	r24, 0x40	; 64
 57c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	e8 2a       	or	r14, r24
 584:	f9 2a       	or	r15, r25
 586:	00 27       	eor	r16, r16
 588:	f7 fc       	sbrc	r15, 7
 58a:	00 95       	com	r16
 58c:	10 2f       	mov	r17, r16
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	b8 01       	movw	r22, r16
 592:	a7 01       	movw	r20, r14
 594:	0e 94 d0 06 	call	0xda0	; 0xda0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
 598:	cb 01       	movw	r24, r22
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	ff 90       	pop	r15
 5a0:	ef 90       	pop	r14
 5a2:	08 95       	ret

000005a4 <I2C_Read_Acc_Y>:
    data = LPF_Get_Filtered_Value(0, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Y(void){
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
 5ac:	8d e3       	ldi	r24, 0x3D	; 61
 5ae:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 5b2:	f8 2e       	mov	r15, r24
 5b4:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
 5b6:	8e e3       	ldi	r24, 0x3E	; 62
 5b8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	e8 2a       	or	r14, r24
 5c0:	f9 2a       	or	r15, r25
 5c2:	00 27       	eor	r16, r16
 5c4:	f7 fc       	sbrc	r15, 7
 5c6:	00 95       	com	r16
 5c8:	10 2f       	mov	r17, r16
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	b8 01       	movw	r22, r16
 5ce:	a7 01       	movw	r20, r14
 5d0:	0e 94 d0 06 	call	0xda0	; 0xda0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
 5d4:	cb 01       	movw	r24, r22
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	08 95       	ret

000005e0 <I2C_Read_Acc_X>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
}

int16_t I2C_Read_Acc_X(void){
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
 5e8:	8b e3       	ldi	r24, 0x3B	; 59
 5ea:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  data <<= 8;
 5ee:	f8 2e       	mov	r15, r24
 5f0:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
 5f2:	8c e3       	ldi	r24, 0x3C	; 60
 5f4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	e8 2a       	or	r14, r24
 5fc:	f9 2a       	or	r15, r25
 5fe:	00 27       	eor	r16, r16
 600:	f7 fc       	sbrc	r15, 7
 602:	00 95       	com	r16
 604:	10 2f       	mov	r17, r16
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	b8 01       	movw	r22, r16
 60a:	a7 01       	movw	r20, r14
 60c:	0e 94 d0 06 	call	0xda0	; 0xda0 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
 610:	cb 01       	movw	r24, r22
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	08 95       	ret

0000061c <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
 61c:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
 620:	10 92 23 01 	sts	0x0123, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
 624:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
 628:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Get_Device_Address>
 62c:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	80 93 23 01 	sts	0x0123, r24
  #ifdef LPF_EN
	LPF_Init();
 636:	0e 94 35 07 	call	0xe6a	; 0xe6a <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	6a e0       	ldi	r22, 0x0A	; 10
 63e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	6a e0       	ldi	r22, 0x0A	; 10
 646:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	6a e0       	ldi	r22, 0x0A	; 10
 64e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	6a e0       	ldi	r22, 0x0A	; 10
 656:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
 65a:	84 e0       	ldi	r24, 0x04	; 4
 65c:	6a e0       	ldi	r22, 0x0A	; 10
 65e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	6a e0       	ldi	r22, 0x0A	; 10
 666:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LPF_Set_Alpha>
  #endif
}
 66a:	08 95       	ret

0000066c <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
 66c:	10 92 24 01 	sts	0x0124, r1
  debug.datareg=0;
 670:	10 92 25 01 	sts	0x0125, r1
  debug.databsy=1;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 26 01 	sts	0x0126, r24
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 67e:	fc 01       	movw	r30, r24
 680:	ec 5d       	subi	r30, 0xDC	; 220
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	13 82       	std	Z+3, r1	; 0x03
 686:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 688:	80 32       	cpi	r24, 0x20	; 32
 68a:	91 05       	cpc	r25, r1
 68c:	c1 f7       	brne	.-16     	; 0x67e <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 68e:	10 92 47 01 	sts	0x0147, r1
 692:	e8 e4       	ldi	r30, 0x48	; 72
 694:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
 696:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	e0 35       	cpi	r30, 0x50	; 80
 69c:	f8 07       	cpc	r31, r24
 69e:	d9 f7       	brne	.-10     	; 0x696 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 6a0:	10 82       	st	Z, r1
}
 6a2:	08 95       	ret

000006a4 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 6a4:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 6a6:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 6a8:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
 6b0:	e8 e6       	ldi	r30, 0x68	; 104
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	82 60       	ori	r24, 0x02	; 2
 6b8:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
 6ba:	ec e6       	ldi	r30, 0x6C	; 108
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
 6c4:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
 6c6:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 6c8:	08 95       	ret

000006ca <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 6ca:	8f ef       	ldi	r24, 0xFF	; 255
 6cc:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 6ce:	ee e6       	ldi	r30, 0x6E	; 110
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	10 82       	st	Z, r1
  TCNT0 =200;
 6d4:	88 ec       	ldi	r24, 0xC8	; 200
 6d6:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 6d8:	84 e0       	ldi	r24, 0x04	; 4
 6da:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 6e0:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
 6e2:	08 95       	ret

000006e4 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 6e4:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 6e8:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 6ea:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 6ec:	08 95       	ret

000006ee <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 6ee:	50 9a       	sbi	0x0a, 0	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 6f0:	58 9a       	sbi	0x0b, 0	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 6f2:	3b 98       	cbi	0x07, 3	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 6f4:	43 9a       	sbi	0x08, 3	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 6f6:	08 95       	ret

000006f8 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 6f8:	58 9a       	sbi	0x0b, 0	; 11
}
 6fa:	08 95       	ret

000006fc <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 6fc:	58 98       	cbi	0x0b, 0	; 11
}
 6fe:	08 95       	ret

00000700 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	11 f4       	brne	.+4      	; 0x708 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 704:	58 9a       	sbi	0x0b, 0	; 11
 706:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 708:	58 98       	cbi	0x0b, 0	; 11
 70a:	08 95       	ret

0000070c <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 70c:	86 b1       	in	r24, 0x06	; 6
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	23 e0       	ldi	r18, 0x03	; 3
 712:	96 95       	lsr	r25
 714:	87 95       	ror	r24
 716:	2a 95       	dec	r18
 718:	e1 f7       	brne	.-8      	; 0x712 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 71a:	81 70       	andi	r24, 0x01	; 1
 71c:	08 95       	ret

0000071e <debug_delay>:

void debug_delay(uint16_t val){
 71e:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 720:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
 726:	86 b5       	in	r24, 0x26	; 38
 728:	82 33       	cpi	r24, 0x32	; 50
 72a:	e8 f3       	brcs	.-6      	; 0x726 <debug_delay+0x8>
    TCNT0=0;
 72c:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
 72e:	86 b5       	in	r24, 0x26	; 38
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	82 17       	cp	r24, r18
 734:	93 07       	cpc	r25, r19
 736:	d8 f3       	brcs	.-10     	; 0x72e <debug_delay+0x10>
  TCCR0B=0;
 738:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 73a:	08 95       	ret

0000073c <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 73c:	80 91 1c 01 	lds	r24, 0x011C
 740:	90 91 1d 01 	lds	r25, 0x011D
 744:	0e 94 8f 03 	call	0x71e	; 0x71e <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 748:	08 95       	ret

0000074a <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 74a:	80 91 1e 01 	lds	r24, 0x011E
 74e:	90 91 1f 01 	lds	r25, 0x011F
 752:	0e 94 8f 03 	call	0x71e	; 0x71e <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 756:	08 95       	ret

00000758 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 758:	80 91 20 01 	lds	r24, 0x0120
 75c:	90 91 21 01 	lds	r25, 0x0121
 760:	0e 94 8f 03 	call	0x71e	; 0x71e <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 764:	08 95       	ret

00000766 <debug_tx_byte>:


void debug_tx_byte(uint8_t val){
 766:	df 92       	push	r13
 768:	ef 92       	push	r14
 76a:	ff 92       	push	r15
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	2a 97       	sbiw	r28, 0x0a	; 10
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	de bf       	out	0x3e, r29	; 62
 780:	0f be       	out	0x3f, r0	; 63
 782:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 784:	fe 01       	movw	r30, r28
 786:	31 96       	adiw	r30, 0x01	; 1
 788:	9a e0       	ldi	r25, 0x0A	; 10
 78a:	df 01       	movw	r26, r30
 78c:	1d 92       	st	X+, r1
 78e:	9a 95       	dec	r25
 790:	e9 f7       	brne	.-6      	; 0x78c <debug_tx_byte+0x26>
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	9a 87       	std	Y+10, r25	; 0x0a
 796:	fe 01       	movw	r30, r28
 798:	32 96       	adiw	r30, 0x02	; 2
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 79e:	48 2f       	mov	r20, r24
 7a0:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 7a2:	61 e0       	ldi	r22, 0x01	; 1


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 7a4:	ca 01       	movw	r24, r20
 7a6:	02 2e       	mov	r0, r18
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <debug_tx_byte+0x48>
 7aa:	95 95       	asr	r25
 7ac:	87 95       	ror	r24
 7ae:	0a 94       	dec	r0
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <debug_tx_byte+0x44>
 7b2:	80 ff       	sbrs	r24, 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <debug_tx_byte+0x54>
	  buf[i+1]=1;
 7b6:	60 83       	st	Z, r22
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
 7ba:	10 82       	st	Z, r1
 7bc:	2f 5f       	subi	r18, 0xFF	; 255
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	31 96       	adiw	r30, 0x01	; 1
}


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 7c2:	28 30       	cpi	r18, 0x08	; 8
 7c4:	31 05       	cpc	r19, r1
 7c6:	71 f7       	brne	.-36     	; 0x7a4 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 7c8:	df b6       	in	r13, 0x3f	; 63
  cli();
 7ca:	f8 94       	cli
 7cc:	8e 01       	movw	r16, r28
 7ce:	0f 5f       	subi	r16, 0xFF	; 255
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
 7d2:	3b e0       	ldi	r19, 0x0B	; 11
 7d4:	e3 2e       	mov	r14, r19
 7d6:	f1 2c       	mov	r15, r1
 7d8:	ec 0e       	add	r14, r28
 7da:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 7dc:	f8 01       	movw	r30, r16
 7de:	80 81       	ld	r24, Z
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 7e4:	58 9a       	sbi	0x0b, 0	; 11
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 7e8:	58 98       	cbi	0x0b, 0	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
 7ea:	0e 94 9e 03 	call	0x73c	; 0x73c <debug_delay_index_0>
 7ee:	0f 5f       	subi	r16, 0xFF	; 255
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 7f2:	0e 15       	cp	r16, r14
 7f4:	1f 05       	cpc	r17, r15
 7f6:	91 f7       	brne	.-28     	; 0x7dc <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
 7f8:	df be       	out	0x3f, r13	; 63
}
 7fa:	2a 96       	adiw	r28, 0x0a	; 10
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	cf 91       	pop	r28
 808:	df 91       	pop	r29
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	08 95       	ret

00000816 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 81c:	33 9b       	sbis	0x06, 3	; 6
 81e:	21 c0       	rjmp	.+66     	; 0x862 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	17 c0       	rjmp	.+46     	; 0x852 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
 824:	0e 94 a5 03 	call	0x74a	; 0x74a <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 828:	33 99       	sbic	0x06, 3	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
 82a:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
 82c:	17 30       	cpi	r17, 0x07	; 7
 82e:	09 f0       	breq	.+2      	; 0x832 <debug_rx_byte+0x1c>
	    val>>=1;
 830:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
 832:	1f 5f       	subi	r17, 0xFF	; 255
 834:	18 30       	cpi	r17, 0x08	; 8
 836:	b1 f7       	brne	.-20     	; 0x824 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
 838:	0e 94 a5 03 	call	0x74a	; 0x74a <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 83c:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
 83e:	f3 fc       	sbrc	r15, 3
 840:	07 c0       	rjmp	.+14     	; 0x850 <debug_rx_byte+0x3a>
 842:	83 ff       	sbrs	r24, 3
 844:	05 c0       	rjmp	.+10     	; 0x850 <debug_rx_byte+0x3a>
	  debug.datareg=val;
 846:	00 93 25 01 	sts	0x0125, r16
	  debug.error=0x00;
 84a:	10 92 24 01 	sts	0x0124, r1
 84e:	03 c0       	rjmp	.+6      	; 0x856 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	80 93 24 01 	sts	0x0124, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
 856:	80 91 25 01 	lds	r24, 0x0125
}
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	ff 90       	pop	r15
 860:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
 862:	0e 94 ac 03 	call	0x758	; 0x758 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 866:	f6 b0       	in	r15, 0x06	; 6
 868:	00 e0       	ldi	r16, 0x00	; 0
 86a:	10 e0       	ldi	r17, 0x00	; 0
 86c:	db cf       	rjmp	.-74     	; 0x824 <debug_rx_byte+0xe>

0000086e <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
 86e:	80 91 25 01 	lds	r24, 0x0125
}
 872:	08 95       	ret

00000874 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
 874:	10 92 25 01 	sts	0x0125, r1
}
 878:	08 95       	ret

0000087a <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
 87a:	80 93 25 01 	sts	0x0125, r24
}
 87e:	08 95       	ret

00000880 <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
 880:	bf 92       	push	r11
 882:	cf 92       	push	r12
 884:	df 92       	push	r13
 886:	ef 92       	push	r14
 888:	ff 92       	push	r15
 88a:	0f 93       	push	r16
 88c:	1f 93       	push	r17
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	7b 01       	movw	r14, r22
 894:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 896:	8f ef       	ldi	r24, 0xFF	; 255
 898:	e8 16       	cp	r14, r24
 89a:	f1 04       	cpc	r15, r1
 89c:	01 05       	cpc	r16, r1
 89e:	11 05       	cpc	r17, r1
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <debug_tx_hex+0x24>
 8a2:	30 f4       	brcc	.+12     	; 0x8b0 <debug_tx_hex+0x30>
 8a4:	c8 e0       	ldi	r28, 0x08	; 8
 8a6:	d0 e0       	ldi	r29, 0x00	; 0
 8a8:	62 e0       	ldi	r22, 0x02	; 2
 8aa:	c6 2e       	mov	r12, r22
 8ac:	d1 2c       	mov	r13, r1
 8ae:	14 c0       	rjmp	.+40     	; 0x8d8 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	e8 16       	cp	r14, r24
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	f8 06       	cpc	r15, r24
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	08 07       	cpc	r16, r24
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	18 07       	cpc	r17, r24
 8c0:	30 f0       	brcs	.+12     	; 0x8ce <debug_tx_hex+0x4e>
 8c2:	c0 e2       	ldi	r28, 0x20	; 32
 8c4:	d0 e0       	ldi	r29, 0x00	; 0
 8c6:	58 e0       	ldi	r21, 0x08	; 8
 8c8:	c5 2e       	mov	r12, r21
 8ca:	d1 2c       	mov	r13, r1
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <debug_tx_hex+0x58>
 8ce:	c0 e1       	ldi	r28, 0x10	; 16
 8d0:	d0 e0       	ldi	r29, 0x00	; 0
 8d2:	44 e0       	ldi	r20, 0x04	; 4
 8d4:	c4 2e       	mov	r12, r20
 8d6:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 8d8:	80 e3       	ldi	r24, 0x30	; 48
 8da:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
  debug_tx_byte('x');
 8de:	88 e7       	ldi	r24, 0x78	; 120
 8e0:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
 8e4:	bb 24       	eor	r11, r11
 8e6:	17 c0       	rjmp	.+46     	; 0x916 <__stack+0x17>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 8e8:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 8ea:	d8 01       	movw	r26, r16
 8ec:	c7 01       	movw	r24, r14
 8ee:	0c 2e       	mov	r0, r28
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <debug_tx_hex+0x7a>
 8f2:	b6 95       	lsr	r27
 8f4:	a7 95       	ror	r26
 8f6:	97 95       	ror	r25
 8f8:	87 95       	ror	r24
 8fa:	0a 94       	dec	r0
 8fc:	d2 f7       	brpl	.-12     	; 0x8f2 <debug_tx_hex+0x72>
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	8f 70       	andi	r24, 0x0F	; 15
 902:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 904:	8a 30       	cpi	r24, 0x0A	; 10
 906:	91 05       	cpc	r25, r1
 908:	10 f0       	brcs	.+4      	; 0x90e <__stack+0xf>
	    hex_digit+=55;
 90a:	c7 96       	adiw	r24, 0x37	; 55
 90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0x11>
	  }else {
	    hex_digit+=48;
 90e:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 910:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 914:	b3 94       	inc	r11
 916:	8b 2d       	mov	r24, r11
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	8c 15       	cp	r24, r12
 91c:	9d 05       	cpc	r25, r13
 91e:	20 f3       	brcs	.-56     	; 0x8e8 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	ff 90       	pop	r15
 92a:	ef 90       	pop	r14
 92c:	df 90       	pop	r13
 92e:	cf 90       	pop	r12
 930:	bf 90       	pop	r11
 932:	08 95       	ret

00000934 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 934:	af 92       	push	r10
 936:	bf 92       	push	r11
 938:	cf 92       	push	r12
 93a:	df 92       	push	r13
 93c:	ef 92       	push	r14
 93e:	ff 92       	push	r15
 940:	0f 93       	push	r16
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	7b 01       	movw	r14, r22
 94a:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 94c:	6f 3f       	cpi	r22, 0xFF	; 255
 94e:	71 05       	cpc	r23, r1
 950:	81 05       	cpc	r24, r1
 952:	91 05       	cpc	r25, r1
 954:	09 f0       	breq	.+2      	; 0x958 <debug_tx_bin+0x24>
 956:	18 f4       	brcc	.+6      	; 0x95e <debug_tx_bin+0x2a>
 958:	f7 e0       	ldi	r31, 0x07	; 7
 95a:	df 2e       	mov	r13, r31
 95c:	0d c0       	rjmp	.+26     	; 0x978 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 95e:	60 30       	cpi	r22, 0x00	; 0
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	73 07       	cpc	r23, r19
 964:	31 e0       	ldi	r19, 0x01	; 1
 966:	83 07       	cpc	r24, r19
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	93 07       	cpc	r25, r19
 96c:	18 f0       	brcs	.+6      	; 0x974 <debug_tx_bin+0x40>
 96e:	ef e1       	ldi	r30, 0x1F	; 31
 970:	de 2e       	mov	r13, r30
 972:	02 c0       	rjmp	.+4      	; 0x978 <debug_tx_bin+0x44>
 974:	7f e0       	ldi	r23, 0x0F	; 15
 976:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 978:	80 e3       	ldi	r24, 0x30	; 48
 97a:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
  debug_tx_byte('b');
 97e:	82 e6       	ldi	r24, 0x62	; 98
 980:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
 984:	c0 e0       	ldi	r28, 0x00	; 0
 986:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 988:	cd 2c       	mov	r12, r13
 98a:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 98c:	56 01       	movw	r10, r12
 98e:	08 94       	sec
 990:	a1 1c       	adc	r10, r1
 992:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 994:	c6 01       	movw	r24, r12
 996:	8c 1b       	sub	r24, r28
 998:	9d 0b       	sbc	r25, r29
 99a:	a8 01       	movw	r20, r16
 99c:	97 01       	movw	r18, r14
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <debug_tx_bin+0x74>
 9a0:	56 95       	lsr	r21
 9a2:	47 95       	ror	r20
 9a4:	37 95       	ror	r19
 9a6:	27 95       	ror	r18
 9a8:	8a 95       	dec	r24
 9aa:	d2 f7       	brpl	.-12     	; 0x9a0 <debug_tx_bin+0x6c>
 9ac:	da 01       	movw	r26, r20
 9ae:	c9 01       	movw	r24, r18
 9b0:	81 70       	andi	r24, 0x01	; 1
 9b2:	90 70       	andi	r25, 0x00	; 0
 9b4:	89 2b       	or	r24, r25
 9b6:	11 f0       	breq	.+4      	; 0x9bc <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 9b8:	81 e3       	ldi	r24, 0x31	; 49
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 9bc:	80 e3       	ldi	r24, 0x30	; 48
 9be:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
 9c2:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 9c4:	ca 15       	cp	r28, r10
 9c6:	db 05       	cpc	r29, r11
 9c8:	29 f7       	brne	.-54     	; 0x994 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	ff 90       	pop	r15
 9d4:	ef 90       	pop	r14
 9d6:	df 90       	pop	r13
 9d8:	cf 90       	pop	r12
 9da:	bf 90       	pop	r11
 9dc:	af 90       	pop	r10
 9de:	08 95       	ret

000009e0 <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
 9e0:	8d e0       	ldi	r24, 0x0D	; 13
 9e2:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
  debug_tx_byte('\n');
 9e6:	8a e0       	ldi	r24, 0x0A	; 10
 9e8:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
}
 9ec:	08 95       	ret

000009ee <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
}
 9f4:	08 95       	ret

000009f6 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 9f6:	8c e2       	ldi	r24, 0x2C	; 44
 9f8:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
}
 9fc:	08 95       	ret

000009fe <debug_tx_text>:

void debug_tx_text(char *str){
 9fe:	1f 93       	push	r17
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	ec 01       	movw	r28, r24
 a06:	10 e0       	ldi	r17, 0x00	; 0
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 a0a:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
        i++;
 a0e:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 a10:	fe 01       	movw	r30, r28
 a12:	e1 0f       	add	r30, r17
 a14:	f1 1d       	adc	r31, r1
 a16:	80 81       	ld	r24, Z
 a18:	88 23       	and	r24, r24
 a1a:	b9 f7       	brne	.-18     	; 0xa0a <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 a1c:	df 91       	pop	r29
 a1e:	cf 91       	pop	r28
 a20:	1f 91       	pop	r17
 a22:	08 95       	ret

00000a24 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 a24:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_nl();
 a28:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <debug_tx_nl>
}
 a2c:	08 95       	ret

00000a2e <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 a2e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 a32:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
}
 a36:	08 95       	ret

00000a38 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 a38:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_cm();
 a3c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <debug_tx_cm>
}
 a40:	08 95       	ret

00000a42 <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
 a42:	bf 92       	push	r11
 a44:	cf 92       	push	r12
 a46:	df 92       	push	r13
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	6b 01       	movw	r12, r22
 a52:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 a54:	61 15       	cp	r22, r1
 a56:	71 05       	cpc	r23, r1
 a58:	81 05       	cpc	r24, r1
 a5a:	91 05       	cpc	r25, r1
 a5c:	31 f4       	brne	.+12     	; 0xa6a <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 a5e:	10 92 48 01 	sts	0x0148, r1
    debug.input_num_digits=1;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	80 93 50 01 	sts	0x0150, r24
 a68:	23 c0       	rjmp	.+70     	; 0xab0 <debug_determine_digit_numbers+0x6e>
 a6a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 a6c:	0b 2d       	mov	r16, r11
 a6e:	10 e0       	ldi	r17, 0x00	; 0
 a70:	0c 5d       	subi	r16, 0xDC	; 220
 a72:	1e 4f       	sbci	r17, 0xFE	; 254
 a74:	c7 01       	movw	r24, r14
 a76:	b6 01       	movw	r22, r12
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	40 e0       	ldi	r20, 0x00	; 0
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodsi4>
 a84:	f8 01       	movw	r30, r16
 a86:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 a88:	c7 01       	movw	r24, r14
 a8a:	b6 01       	movw	r22, r12
 a8c:	2a e0       	ldi	r18, 0x0A	; 10
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	40 e0       	ldi	r20, 0x00	; 0
 a92:	50 e0       	ldi	r21, 0x00	; 0
 a94:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodsi4>
 a98:	c9 01       	movw	r24, r18
 a9a:	da 01       	movw	r26, r20
 a9c:	6c 01       	movw	r12, r24
 a9e:	7d 01       	movw	r14, r26
      i++;
 aa0:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 aa2:	c1 14       	cp	r12, r1
 aa4:	d1 04       	cpc	r13, r1
 aa6:	e1 04       	cpc	r14, r1
 aa8:	f1 04       	cpc	r15, r1
 aaa:	01 f7       	brne	.-64     	; 0xa6c <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 aac:	b0 92 50 01 	sts	0x0150, r11
  }
}
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	ff 90       	pop	r15
 ab6:	ef 90       	pop	r14
 ab8:	df 90       	pop	r13
 aba:	cf 90       	pop	r12
 abc:	bf 90       	pop	r11
 abe:	08 95       	ret

00000ac0 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 ac0:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 ac2:	10 91 50 01 	lds	r17, 0x0150
 ac6:	09 c0       	rjmp	.+18     	; 0xada <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 ac8:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 aca:	e1 2f       	mov	r30, r17
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	ec 5d       	subi	r30, 0xDC	; 220
 ad0:	fe 4f       	sbci	r31, 0xFE	; 254
 ad2:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
 ad4:	80 5d       	subi	r24, 0xD0	; 208
 ad6:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 ada:	11 23       	and	r17, r17
 adc:	a9 f7       	brne	.-22     	; 0xac8 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 ade:	1f 91       	pop	r17
 ae0:	08 95       	ret

00000ae2 <debug_tx_number>:

void debug_tx_number(int32_t num){
 ae2:	ef 92       	push	r14
 ae4:	ff 92       	push	r15
 ae6:	0f 93       	push	r16
 ae8:	1f 93       	push	r17
 aea:	7b 01       	movw	r14, r22
 aec:	8c 01       	movw	r16, r24
  if(num<0){
 aee:	97 ff       	sbrs	r25, 7
 af0:	0b c0       	rjmp	.+22     	; 0xb08 <debug_tx_number+0x26>
    debug_tx_byte('-');
 af2:	8d e2       	ldi	r24, 0x2D	; 45
 af4:	0e 94 b3 03 	call	0x766	; 0x766 <debug_tx_byte>
	num=-num;
 af8:	10 95       	com	r17
 afa:	00 95       	com	r16
 afc:	f0 94       	com	r15
 afe:	e0 94       	com	r14
 b00:	e1 1c       	adc	r14, r1
 b02:	f1 1c       	adc	r15, r1
 b04:	01 1d       	adc	r16, r1
 b06:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 b08:	c8 01       	movw	r24, r16
 b0a:	b7 01       	movw	r22, r14
 b0c:	0e 94 21 05 	call	0xa42	; 0xa42 <debug_determine_digit_numbers>
  debug_tx_number_digits();
 b10:	0e 94 60 05 	call	0xac0	; 0xac0 <debug_tx_number_digits>
}
 b14:	1f 91       	pop	r17
 b16:	0f 91       	pop	r16
 b18:	ff 90       	pop	r15
 b1a:	ef 90       	pop	r14
 b1c:	08 95       	ret

00000b1e <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 b1e:	0e 94 71 05 	call	0xae2	; 0xae2 <debug_tx_number>
  debug_tx_nl();
 b22:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <debug_tx_nl>
}
 b26:	08 95       	ret

00000b28 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 b28:	0e 94 71 05 	call	0xae2	; 0xae2 <debug_tx_number>
  debug_tx_sp();
 b2c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
}
 b30:	08 95       	ret

00000b32 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 b32:	0e 94 71 05 	call	0xae2	; 0xae2 <debug_tx_number>
  debug_tx_text(",");
 b36:	8e e0       	ldi	r24, 0x0E	; 14
 b38:	91 e0       	ldi	r25, 0x01	; 1
 b3a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
}
 b3e:	08 95       	ret

00000b40 <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 b40:	0e 94 40 04 	call	0x880	; 0x880 <debug_tx_hex>
  debug_tx_nl();
 b44:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <debug_tx_nl>
}
 b48:	08 95       	ret

00000b4a <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 b4a:	0e 94 40 04 	call	0x880	; 0x880 <debug_tx_hex>
  debug_tx_sp();
 b4e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
}
 b52:	08 95       	ret

00000b54 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 b54:	0e 94 40 04 	call	0x880	; 0x880 <debug_tx_hex>
  debug_tx_text(",");
 b58:	8e e0       	ldi	r24, 0x0E	; 14
 b5a:	91 e0       	ldi	r25, 0x01	; 1
 b5c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
}
 b60:	08 95       	ret

00000b62 <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
 b62:	ef 92       	push	r14
 b64:	ff 92       	push	r15
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	7a 01       	movw	r14, r20
 b6c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 b6e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 b72:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
  debug_tx_number_nl(num);
 b76:	c8 01       	movw	r24, r16
 b78:	b7 01       	movw	r22, r14
 b7a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <debug_tx_number_nl>
}
 b7e:	1f 91       	pop	r17
 b80:	0f 91       	pop	r16
 b82:	ff 90       	pop	r15
 b84:	ef 90       	pop	r14
 b86:	08 95       	ret

00000b88 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	7a 01       	movw	r14, r20
 b92:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 b94:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 b98:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
  debug_tx_number_sp(num);
 b9c:	c8 01       	movw	r24, r16
 b9e:	b7 01       	movw	r22, r14
 ba0:	0e 94 94 05 	call	0xb28	; 0xb28 <debug_tx_number_sp>
}
 ba4:	1f 91       	pop	r17
 ba6:	0f 91       	pop	r16
 ba8:	ff 90       	pop	r15
 baa:	ef 90       	pop	r14
 bac:	08 95       	ret

00000bae <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 bae:	ef 92       	push	r14
 bb0:	ff 92       	push	r15
 bb2:	0f 93       	push	r16
 bb4:	1f 93       	push	r17
 bb6:	7a 01       	movw	r14, r20
 bb8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 bba:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 bbe:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
  debug_tx_number_cm(num);
 bc2:	c8 01       	movw	r24, r16
 bc4:	b7 01       	movw	r22, r14
 bc6:	0e 94 99 05 	call	0xb32	; 0xb32 <debug_tx_number_cm>
}
 bca:	1f 91       	pop	r17
 bcc:	0f 91       	pop	r16
 bce:	ff 90       	pop	r15
 bd0:	ef 90       	pop	r14
 bd2:	08 95       	ret

00000bd4 <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 bd4:	ef 92       	push	r14
 bd6:	ff 92       	push	r15
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	7a 01       	movw	r14, r20
 bde:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 be0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 be4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 be8:	c8 01       	movw	r24, r16
 bea:	b7 01       	movw	r22, r14
 bec:	0e 94 a0 05 	call	0xb40	; 0xb40 <debug_tx_number_hex_nl>
}
 bf0:	1f 91       	pop	r17
 bf2:	0f 91       	pop	r16
 bf4:	ff 90       	pop	r15
 bf6:	ef 90       	pop	r14
 bf8:	08 95       	ret

00000bfa <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 bfa:	ef 92       	push	r14
 bfc:	ff 92       	push	r15
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	7a 01       	movw	r14, r20
 c04:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 c06:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 c0a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 c0e:	c8 01       	movw	r24, r16
 c10:	b7 01       	movw	r22, r14
 c12:	0e 94 a5 05 	call	0xb4a	; 0xb4a <debug_tx_number_hex_sp>
}
 c16:	1f 91       	pop	r17
 c18:	0f 91       	pop	r16
 c1a:	ff 90       	pop	r15
 c1c:	ef 90       	pop	r14
 c1e:	08 95       	ret

00000c20 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
 c20:	ef 92       	push	r14
 c22:	ff 92       	push	r15
 c24:	0f 93       	push	r16
 c26:	1f 93       	push	r17
 c28:	7a 01       	movw	r14, r20
 c2a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 c2c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <debug_tx_text>
  debug_tx_sp();
 c30:	0e 94 f7 04 	call	0x9ee	; 0x9ee <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 c34:	c8 01       	movw	r24, r16
 c36:	b7 01       	movw	r22, r14
 c38:	0e 94 aa 05 	call	0xb54	; 0xb54 <debug_tx_number_hex_cm>
}
 c3c:	1f 91       	pop	r17
 c3e:	0f 91       	pop	r16
 c40:	ff 90       	pop	r15
 c42:	ef 90       	pop	r14
 c44:	08 95       	ret

00000c46 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
 c46:	e4 e2       	ldi	r30, 0x24	; 36
 c48:	f1 e0       	ldi	r31, 0x01	; 1
 c4a:	e8 0f       	add	r30, r24
 c4c:	f1 1d       	adc	r31, r1
 c4e:	83 81       	ldd	r24, Z+3	; 0x03
}
 c50:	08 95       	ret

00000c52 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 c52:	80 91 47 01 	lds	r24, 0x0147
}
 c56:	08 95       	ret

00000c58 <debug_flush_buf>:

void debug_flush_buf(void){
 c58:	80 e0       	ldi	r24, 0x00	; 0
 c5a:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 c5c:	fc 01       	movw	r30, r24
 c5e:	ec 5d       	subi	r30, 0xDC	; 220
 c60:	fe 4f       	sbci	r31, 0xFE	; 254
 c62:	13 82       	std	Z+3, r1	; 0x03
 c64:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 c66:	80 32       	cpi	r24, 0x20	; 32
 c68:	91 05       	cpc	r25, r1
 c6a:	c1 f7       	brne	.-16     	; 0xc5c <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 c6c:	10 92 47 01 	sts	0x0147, r1
}
 c70:	08 95       	ret

00000c72 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
 c72:	80 91 26 01 	lds	r24, 0x0126
}
 c76:	08 95       	ret

00000c78 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
 c78:	80 91 26 01 	lds	r24, 0x0126
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
 c7c:	88 23       	and	r24, r24
 c7e:	11 f0       	breq	.+4      	; 0xc84 <debug_data_available_rx_buf+0xc>
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	08 c0       	rjmp	.+16     	; 0xc94 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 c84:	80 91 47 01 	lds	r24, 0x0147
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	88 23       	and	r24, r24
 c8c:	09 f4       	brne	.+2      	; 0xc90 <debug_data_available_rx_buf+0x18>
 c8e:	91 e0       	ldi	r25, 0x01	; 1
 c90:	81 e0       	ldi	r24, 0x01	; 1
 c92:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
 c94:	89 2f       	mov	r24, r25
 c96:	08 95       	ret

00000c98 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 c98:	80 91 47 01 	lds	r24, 0x0147
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
 c9c:	08 95       	ret

00000c9e <debug_init>:

void debug_init(void){
  debug_struct_init();
 c9e:	0e 94 36 03 	call	0x66c	; 0x66c <debug_struct_init>
  debug_timings_init();
 ca2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <debug_timings_init>
  debug_gpio_init();
 ca6:	0e 94 77 03 	call	0x6ee	; 0x6ee <debug_gpio_init>
}
 caa:	08 95       	ret

00000cac <__vector_4>:


ISR(ISR_PCINT_VECT){
 cac:	1f 92       	push	r1
 cae:	0f 92       	push	r0
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	0f 92       	push	r0
 cb4:	11 24       	eor	r1, r1
 cb6:	2f 93       	push	r18
 cb8:	3f 93       	push	r19
 cba:	4f 93       	push	r20
 cbc:	5f 93       	push	r21
 cbe:	6f 93       	push	r22
 cc0:	7f 93       	push	r23
 cc2:	8f 93       	push	r24
 cc4:	9f 93       	push	r25
 cc6:	af 93       	push	r26
 cc8:	bf 93       	push	r27
 cca:	ef 93       	push	r30
 ccc:	ff 93       	push	r31
  debug.databsy=1;
 cce:	81 e0       	ldi	r24, 0x01	; 1
 cd0:	80 93 26 01 	sts	0x0126, r24
  uint8_t val=debug_rx_byte();
 cd4:	0e 94 0b 04 	call	0x816	; 0x816 <debug_rx_byte>
 cd8:	98 2f       	mov	r25, r24
  if(debug.error==0){
 cda:	80 91 24 01 	lds	r24, 0x0124
 cde:	88 23       	and	r24, r24
 ce0:	99 f4       	brne	.+38     	; 0xd08 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
 ce2:	e0 91 47 01 	lds	r30, 0x0147
 ce6:	f0 e0       	ldi	r31, 0x00	; 0
 ce8:	ec 5d       	subi	r30, 0xDC	; 220
 cea:	fe 4f       	sbci	r31, 0xFE	; 254
 cec:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
 cee:	80 91 47 01 	lds	r24, 0x0147
 cf2:	8f 5f       	subi	r24, 0xFF	; 255
 cf4:	80 93 47 01 	sts	0x0147, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
 cf8:	80 91 47 01 	lds	r24, 0x0147
 cfc:	81 32       	cpi	r24, 0x21	; 33
 cfe:	10 f0       	brcs	.+4      	; 0xd04 <__vector_4+0x58>
	  debug.bufindex=0;
 d00:	10 92 47 01 	sts	0x0147, r1
	}
    debug_timer_start();
 d04:	0e 94 65 03 	call	0x6ca	; 0x6ca <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
 d08:	ff 91       	pop	r31
 d0a:	ef 91       	pop	r30
 d0c:	bf 91       	pop	r27
 d0e:	af 91       	pop	r26
 d10:	9f 91       	pop	r25
 d12:	8f 91       	pop	r24
 d14:	7f 91       	pop	r23
 d16:	6f 91       	pop	r22
 d18:	5f 91       	pop	r21
 d1a:	4f 91       	pop	r20
 d1c:	3f 91       	pop	r19
 d1e:	2f 91       	pop	r18
 d20:	0f 90       	pop	r0
 d22:	0f be       	out	0x3f, r0	; 63
 d24:	0f 90       	pop	r0
 d26:	1f 90       	pop	r1
 d28:	18 95       	reti

00000d2a <__vector_16>:

ISR(TIMER_OVF_VECT){
 d2a:	1f 92       	push	r1
 d2c:	0f 92       	push	r0
 d2e:	0f b6       	in	r0, 0x3f	; 63
 d30:	0f 92       	push	r0
 d32:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 d34:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 d38:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 d3a:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
 d3c:	10 92 26 01 	sts	0x0126, r1
}
 d40:	0f 90       	pop	r0
 d42:	0f be       	out	0x3f, r0	; 63
 d44:	0f 90       	pop	r0
 d46:	1f 90       	pop	r1
 d48:	18 95       	reti

00000d4a <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
 d4a:	e1 e5       	ldi	r30, 0x51	; 81
 d4c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
 d4e:	10 82       	st	Z, r1
    LPF[i].Input = 0;
 d50:	11 82       	std	Z+1, r1	; 0x01
 d52:	12 82       	std	Z+2, r1	; 0x02
 d54:	13 82       	std	Z+3, r1	; 0x03
 d56:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
 d58:	15 82       	std	Z+5, r1	; 0x05
 d5a:	16 82       	std	Z+6, r1	; 0x06
 d5c:	17 82       	std	Z+7, r1	; 0x07
 d5e:	10 86       	std	Z+8, r1	; 0x08
 d60:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
 d62:	81 e0       	ldi	r24, 0x01	; 1
 d64:	e7 38       	cpi	r30, 0x87	; 135
 d66:	f8 07       	cpc	r31, r24
 d68:	91 f7       	brne	.-28     	; 0xd4e <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
 d6a:	08 95       	ret

00000d6c <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	fc 01       	movw	r30, r24
 d70:	23 e0       	ldi	r18, 0x03	; 3
 d72:	ee 0f       	add	r30, r30
 d74:	ff 1f       	adc	r31, r31
 d76:	2a 95       	dec	r18
 d78:	e1 f7       	brne	.-8      	; 0xd72 <LPF_Set_Alpha+0x6>
 d7a:	e8 0f       	add	r30, r24
 d7c:	f9 1f       	adc	r31, r25
 d7e:	ef 5a       	subi	r30, 0xAF	; 175
 d80:	fe 4f       	sbci	r31, 0xFE	; 254
 d82:	60 83       	st	Z, r22
}
 d84:	08 95       	ret

00000d86 <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	fc 01       	movw	r30, r24
 d8a:	33 e0       	ldi	r19, 0x03	; 3
 d8c:	ee 0f       	add	r30, r30
 d8e:	ff 1f       	adc	r31, r31
 d90:	3a 95       	dec	r19
 d92:	e1 f7       	brne	.-8      	; 0xd8c <LPF_Get_Alpha+0x6>
 d94:	e8 0f       	add	r30, r24
 d96:	f9 1f       	adc	r31, r25
 d98:	ef 5a       	subi	r30, 0xAF	; 175
 d9a:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
 d9c:	80 81       	ld	r24, Z
 d9e:	08 95       	ret

00000da0 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
 da0:	2f 92       	push	r2
 da2:	3f 92       	push	r3
 da4:	4f 92       	push	r4
 da6:	5f 92       	push	r5
 da8:	6f 92       	push	r6
 daa:	7f 92       	push	r7
 dac:	8f 92       	push	r8
 dae:	9f 92       	push	r9
 db0:	af 92       	push	r10
 db2:	bf 92       	push	r11
 db4:	cf 92       	push	r12
 db6:	df 92       	push	r13
 db8:	ef 92       	push	r14
 dba:	ff 92       	push	r15
 dbc:	0f 93       	push	r16
 dbe:	1f 93       	push	r17
 dc0:	1a 01       	movw	r2, r20
 dc2:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
 dc4:	90 e0       	ldi	r25, 0x00	; 0
 dc6:	6c 01       	movw	r12, r24
 dc8:	53 e0       	ldi	r21, 0x03	; 3
 dca:	cc 0c       	add	r12, r12
 dcc:	dd 1c       	adc	r13, r13
 dce:	5a 95       	dec	r21
 dd0:	e1 f7       	brne	.-8      	; 0xdca <LPF_Get_Filtered_Value+0x2a>
 dd2:	c8 0e       	add	r12, r24
 dd4:	d9 1e       	adc	r13, r25
 dd6:	81 e5       	ldi	r24, 0x51	; 81
 dd8:	91 e0       	ldi	r25, 0x01	; 1
 dda:	c8 0e       	add	r12, r24
 ddc:	d9 1e       	adc	r13, r25
 dde:	f6 01       	movw	r30, r12
 de0:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
 de2:	62 2e       	mov	r6, r18
 de4:	77 24       	eor	r7, r7
 de6:	88 24       	eor	r8, r8
 de8:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
 dea:	64 e6       	ldi	r22, 0x64	; 100
 dec:	70 e0       	ldi	r23, 0x00	; 0
 dee:	62 1b       	sub	r22, r18
 df0:	71 09       	sbc	r23, r1
 df2:	88 27       	eor	r24, r24
 df4:	77 fd       	sbrc	r23, 7
 df6:	80 95       	com	r24
 df8:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
 dfa:	45 e0       	ldi	r20, 0x05	; 5
 dfc:	a4 2e       	mov	r10, r20
 dfe:	b1 2c       	mov	r11, r1
 e00:	ac 0c       	add	r10, r12
 e02:	bd 1c       	adc	r11, r13
 e04:	25 81       	ldd	r18, Z+5	; 0x05
 e06:	36 81       	ldd	r19, Z+6	; 0x06
 e08:	47 81       	ldd	r20, Z+7	; 0x07
 e0a:	50 85       	ldd	r21, Z+8	; 0x08
 e0c:	0e 94 38 07 	call	0xe70	; 0xe70 <__mulsi3>
 e10:	7b 01       	movw	r14, r22
 e12:	8c 01       	movw	r16, r24
 e14:	c2 01       	movw	r24, r4
 e16:	b1 01       	movw	r22, r2
 e18:	a4 01       	movw	r20, r8
 e1a:	93 01       	movw	r18, r6
 e1c:	0e 94 38 07 	call	0xe70	; 0xe70 <__mulsi3>
 e20:	e6 0e       	add	r14, r22
 e22:	f7 1e       	adc	r15, r23
 e24:	08 1f       	adc	r16, r24
 e26:	19 1f       	adc	r17, r25
 e28:	c8 01       	movw	r24, r16
 e2a:	b7 01       	movw	r22, r14
 e2c:	24 e6       	ldi	r18, 0x64	; 100
 e2e:	30 e0       	ldi	r19, 0x00	; 0
 e30:	40 e0       	ldi	r20, 0x00	; 0
 e32:	50 e0       	ldi	r21, 0x00	; 0
 e34:	0e 94 8c 07 	call	0xf18	; 0xf18 <__divmodsi4>
 e38:	ca 01       	movw	r24, r20
 e3a:	f6 01       	movw	r30, r12
 e3c:	25 83       	std	Z+5, r18	; 0x05
 e3e:	f5 01       	movw	r30, r10
 e40:	31 83       	std	Z+1, r19	; 0x01
 e42:	42 83       	std	Z+2, r20	; 0x02
 e44:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
 e46:	b9 01       	movw	r22, r18
 e48:	1f 91       	pop	r17
 e4a:	0f 91       	pop	r16
 e4c:	ff 90       	pop	r15
 e4e:	ef 90       	pop	r14
 e50:	df 90       	pop	r13
 e52:	cf 90       	pop	r12
 e54:	bf 90       	pop	r11
 e56:	af 90       	pop	r10
 e58:	9f 90       	pop	r9
 e5a:	8f 90       	pop	r8
 e5c:	7f 90       	pop	r7
 e5e:	6f 90       	pop	r6
 e60:	5f 90       	pop	r5
 e62:	4f 90       	pop	r4
 e64:	3f 90       	pop	r3
 e66:	2f 90       	pop	r2
 e68:	08 95       	ret

00000e6a <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
 e6a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <LPF_Struct_Init>
 e6e:	08 95       	ret

00000e70 <__mulsi3>:
 e70:	62 9f       	mul	r22, r18
 e72:	d0 01       	movw	r26, r0
 e74:	73 9f       	mul	r23, r19
 e76:	f0 01       	movw	r30, r0
 e78:	82 9f       	mul	r24, r18
 e7a:	e0 0d       	add	r30, r0
 e7c:	f1 1d       	adc	r31, r1
 e7e:	64 9f       	mul	r22, r20
 e80:	e0 0d       	add	r30, r0
 e82:	f1 1d       	adc	r31, r1
 e84:	92 9f       	mul	r25, r18
 e86:	f0 0d       	add	r31, r0
 e88:	83 9f       	mul	r24, r19
 e8a:	f0 0d       	add	r31, r0
 e8c:	74 9f       	mul	r23, r20
 e8e:	f0 0d       	add	r31, r0
 e90:	65 9f       	mul	r22, r21
 e92:	f0 0d       	add	r31, r0
 e94:	99 27       	eor	r25, r25
 e96:	72 9f       	mul	r23, r18
 e98:	b0 0d       	add	r27, r0
 e9a:	e1 1d       	adc	r30, r1
 e9c:	f9 1f       	adc	r31, r25
 e9e:	63 9f       	mul	r22, r19
 ea0:	b0 0d       	add	r27, r0
 ea2:	e1 1d       	adc	r30, r1
 ea4:	f9 1f       	adc	r31, r25
 ea6:	bd 01       	movw	r22, r26
 ea8:	cf 01       	movw	r24, r30
 eaa:	11 24       	eor	r1, r1
 eac:	08 95       	ret

00000eae <__divmodhi4>:
 eae:	97 fb       	bst	r25, 7
 eb0:	09 2e       	mov	r0, r25
 eb2:	07 26       	eor	r0, r23
 eb4:	0a d0       	rcall	.+20     	; 0xeca <__divmodhi4_neg1>
 eb6:	77 fd       	sbrc	r23, 7
 eb8:	04 d0       	rcall	.+8      	; 0xec2 <__divmodhi4_neg2>
 eba:	49 d0       	rcall	.+146    	; 0xf4e <__udivmodhi4>
 ebc:	06 d0       	rcall	.+12     	; 0xeca <__divmodhi4_neg1>
 ebe:	00 20       	and	r0, r0
 ec0:	1a f4       	brpl	.+6      	; 0xec8 <__divmodhi4_exit>

00000ec2 <__divmodhi4_neg2>:
 ec2:	70 95       	com	r23
 ec4:	61 95       	neg	r22
 ec6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ec8 <__divmodhi4_exit>:
 ec8:	08 95       	ret

00000eca <__divmodhi4_neg1>:
 eca:	f6 f7       	brtc	.-4      	; 0xec8 <__divmodhi4_exit>
 ecc:	90 95       	com	r25
 ece:	81 95       	neg	r24
 ed0:	9f 4f       	sbci	r25, 0xFF	; 255
 ed2:	08 95       	ret

00000ed4 <__udivmodsi4>:
 ed4:	a1 e2       	ldi	r26, 0x21	; 33
 ed6:	1a 2e       	mov	r1, r26
 ed8:	aa 1b       	sub	r26, r26
 eda:	bb 1b       	sub	r27, r27
 edc:	fd 01       	movw	r30, r26
 ede:	0d c0       	rjmp	.+26     	; 0xefa <__udivmodsi4_ep>

00000ee0 <__udivmodsi4_loop>:
 ee0:	aa 1f       	adc	r26, r26
 ee2:	bb 1f       	adc	r27, r27
 ee4:	ee 1f       	adc	r30, r30
 ee6:	ff 1f       	adc	r31, r31
 ee8:	a2 17       	cp	r26, r18
 eea:	b3 07       	cpc	r27, r19
 eec:	e4 07       	cpc	r30, r20
 eee:	f5 07       	cpc	r31, r21
 ef0:	20 f0       	brcs	.+8      	; 0xefa <__udivmodsi4_ep>
 ef2:	a2 1b       	sub	r26, r18
 ef4:	b3 0b       	sbc	r27, r19
 ef6:	e4 0b       	sbc	r30, r20
 ef8:	f5 0b       	sbc	r31, r21

00000efa <__udivmodsi4_ep>:
 efa:	66 1f       	adc	r22, r22
 efc:	77 1f       	adc	r23, r23
 efe:	88 1f       	adc	r24, r24
 f00:	99 1f       	adc	r25, r25
 f02:	1a 94       	dec	r1
 f04:	69 f7       	brne	.-38     	; 0xee0 <__udivmodsi4_loop>
 f06:	60 95       	com	r22
 f08:	70 95       	com	r23
 f0a:	80 95       	com	r24
 f0c:	90 95       	com	r25
 f0e:	9b 01       	movw	r18, r22
 f10:	ac 01       	movw	r20, r24
 f12:	bd 01       	movw	r22, r26
 f14:	cf 01       	movw	r24, r30
 f16:	08 95       	ret

00000f18 <__divmodsi4>:
 f18:	97 fb       	bst	r25, 7
 f1a:	09 2e       	mov	r0, r25
 f1c:	05 26       	eor	r0, r21
 f1e:	0e d0       	rcall	.+28     	; 0xf3c <__divmodsi4_neg1>
 f20:	57 fd       	sbrc	r21, 7
 f22:	04 d0       	rcall	.+8      	; 0xf2c <__divmodsi4_neg2>
 f24:	d7 df       	rcall	.-82     	; 0xed4 <__udivmodsi4>
 f26:	0a d0       	rcall	.+20     	; 0xf3c <__divmodsi4_neg1>
 f28:	00 1c       	adc	r0, r0
 f2a:	38 f4       	brcc	.+14     	; 0xf3a <__divmodsi4_exit>

00000f2c <__divmodsi4_neg2>:
 f2c:	50 95       	com	r21
 f2e:	40 95       	com	r20
 f30:	30 95       	com	r19
 f32:	21 95       	neg	r18
 f34:	3f 4f       	sbci	r19, 0xFF	; 255
 f36:	4f 4f       	sbci	r20, 0xFF	; 255
 f38:	5f 4f       	sbci	r21, 0xFF	; 255

00000f3a <__divmodsi4_exit>:
 f3a:	08 95       	ret

00000f3c <__divmodsi4_neg1>:
 f3c:	f6 f7       	brtc	.-4      	; 0xf3a <__divmodsi4_exit>
 f3e:	90 95       	com	r25
 f40:	80 95       	com	r24
 f42:	70 95       	com	r23
 f44:	61 95       	neg	r22
 f46:	7f 4f       	sbci	r23, 0xFF	; 255
 f48:	8f 4f       	sbci	r24, 0xFF	; 255
 f4a:	9f 4f       	sbci	r25, 0xFF	; 255
 f4c:	08 95       	ret

00000f4e <__udivmodhi4>:
 f4e:	aa 1b       	sub	r26, r26
 f50:	bb 1b       	sub	r27, r27
 f52:	51 e1       	ldi	r21, 0x11	; 17
 f54:	07 c0       	rjmp	.+14     	; 0xf64 <__udivmodhi4_ep>

00000f56 <__udivmodhi4_loop>:
 f56:	aa 1f       	adc	r26, r26
 f58:	bb 1f       	adc	r27, r27
 f5a:	a6 17       	cp	r26, r22
 f5c:	b7 07       	cpc	r27, r23
 f5e:	10 f0       	brcs	.+4      	; 0xf64 <__udivmodhi4_ep>
 f60:	a6 1b       	sub	r26, r22
 f62:	b7 0b       	sbc	r27, r23

00000f64 <__udivmodhi4_ep>:
 f64:	88 1f       	adc	r24, r24
 f66:	99 1f       	adc	r25, r25
 f68:	5a 95       	dec	r21
 f6a:	a9 f7       	brne	.-22     	; 0xf56 <__udivmodhi4_loop>
 f6c:	80 95       	com	r24
 f6e:	90 95       	com	r25
 f70:	bc 01       	movw	r22, r24
 f72:	cd 01       	movw	r24, r26
 f74:	08 95       	ret

00000f76 <_exit>:
 f76:	f8 94       	cli

00000f78 <__stop_program>:
 f78:	ff cf       	rjmp	.-2      	; 0xf78 <__stop_program>
