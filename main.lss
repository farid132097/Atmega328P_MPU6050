
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00002280  00002314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  0080011e  0080011e  00002332  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002332  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000132b  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003696  00000000  00000000  0000373d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b3c  00000000  00000000  00006dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002223  00000000  00000000  0000790f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ac0  00000000  00000000  00009b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001415  00000000  00000000  0000a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013b3  00000000  00000000  0000ba09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000cdbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 be 10 	jmp	0x217c	; 0x217c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e8       	ldi	r30, 0x80	; 128
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3c       	cpi	r26, 0xC8	; 200
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 3e 11 	jmp	0x227c	; 0x227c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "pwm.h"
#include "pid.h"



int main(void){
      a6:	4f 92       	push	r4
      a8:	5f 92       	push	r5
      aa:	6f 92       	push	r6
      ac:	7f 92       	push	r7
      ae:	8f 92       	push	r8
      b0:	9f 92       	push	r9
      b2:	af 92       	push	r10
      b4:	bf 92       	push	r11
      b6:	cf 92       	push	r12
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
  
  debug_init();
      c6:	0e 94 8a 04 	call	0x914	; 0x914 <debug_init>
  PWM_Init();
      ca:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <PWM_Init>
  PID_Init();
      ce:	0e 94 02 06 	call	0xc04	; 0xc04 <PID_Init>
  Temp_Init();
      d2:	0e 94 c0 07 	call	0xf80	; 0xf80 <Temp_Init>
  //Timebase_Init(50);
  
  PID_Update_Constants(800,0,0);
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	93 e0       	ldi	r25, 0x03	; 3
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <PID_Update_Constants>
  
  LPF_Init();
      e6:	0e 94 98 05 	call	0xb30	; 0xb30 <LPF_Init>
  LPF_Set_Alpha(0,30);
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	6e e1       	ldi	r22, 0x1E	; 30
      ee:	0e 94 19 05 	call	0xa32	; 0xa32 <LPF_Set_Alpha>
  LPF_Set_Alpha(1,30);
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	6e e1       	ldi	r22, 0x1E	; 30
      f6:	0e 94 19 05 	call	0xa32	; 0xa32 <LPF_Set_Alpha>
  LPF_Set_Alpha(2,50);
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	62 e3       	ldi	r22, 0x32	; 50
      fe:	0e 94 19 05 	call	0xa32	; 0xa32 <LPF_Set_Alpha>
  
  DDRD  |= (1<<4);
     102:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
     104:	5c 98       	cbi	0x0b, 4	; 11
  
  DDRD |= (1<<1);
     106:	51 9a       	sbi	0x0a, 1	; 10
  PORTD&=~(1<<1);
     108:	59 98       	cbi	0x0b, 1	; 11
  
  DDRD &=~(1<<0);
     10a:	50 98       	cbi	0x0a, 0	; 10
  PORTD|= (1<<0);
     10c:	58 9a       	sbi	0x0b, 0	; 11
  
  int Target= 750, Actual_Target=0;
  int Count = 20;
  
  DDRD &=~(1<<4);
     10e:	54 98       	cbi	0x0a, 4	; 10
  PORTD|= (1<<4);
     110:	5c 9a       	sbi	0x0b, 4	; 11
  
  
  DDRB &=~(1<<0);
     112:	20 98       	cbi	0x04, 0	; 4
  PORTB|= (1<<0);
     114:	28 9a       	sbi	0x05, 0	; 5
     116:	ce ee       	ldi	r28, 0xEE	; 238
     118:	d2 e0       	ldi	r29, 0x02	; 2
     11a:	aa 24       	eor	r10, r10
     11c:	bb 24       	eor	r11, r11
     11e:	64 e1       	ldi	r22, 0x14	; 20
     120:	c6 2e       	mov	r12, r22
     122:	d1 2c       	mov	r13, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     124:	58 e9       	ldi	r21, 0x98	; 152
     126:	45 2e       	mov	r4, r21
     128:	5a e3       	ldi	r21, 0x3A	; 58
     12a:	55 2e       	mov	r5, r21
  
  while(1){
	
	Temp_Read_Avg();
     12c:	4c e2       	ldi	r20, 0x2C	; 44
     12e:	64 2e       	mov	r6, r20
     130:	41 e0       	ldi	r20, 0x01	; 1
     132:	74 2e       	mov	r7, r20
     134:	30 e6       	ldi	r19, 0x60	; 96
     136:	83 2e       	mov	r8, r19
     138:	3a ee       	ldi	r19, 0xEA	; 234
     13a:	93 2e       	mov	r9, r19
     13c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Temp_Read_Avg>
	PID_Execute_Routine(Actual_Target,Temp_Get_Raw_Val());
     140:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Temp_Get_Raw_Val>
     144:	bc 01       	movw	r22, r24
     146:	c5 01       	movw	r24, r10
     148:	0e 94 c1 06 	call	0xd82	; 0xd82 <PID_Execute_Routine>
	Iron_Heater_On(PID_Get_Output());
     14c:	0e 94 5f 07 	call	0xebe	; 0xebe <PID_Get_Output>
     150:	0e 94 9b 05 	call	0xb36	; 0xb36 <Iron_Heater_On>
     154:	c2 01       	movw	r24, r4
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <main+0xb0>
	_delay_ms(5);
	uint32_t curr  = Temp_Read_ADC_Avg(1);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Temp_Read_ADC_Avg>
	uint32_t curr1 = curr;
	curr1*=1100;  //ref*1000
	curr1*=1000;  //Rs in mOhms
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	bc 01       	movw	r22, r24
     166:	cd 01       	movw	r24, r26
     168:	20 ee       	ldi	r18, 0xE0	; 224
     16a:	38 ec       	ldi	r19, 0xC8	; 200
     16c:	40 e1       	ldi	r20, 0x10	; 16
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__mulsi3>
	curr1/=1024;  //adc resolution
     174:	2a e0       	ldi	r18, 0x0A	; 10
     176:	96 95       	lsr	r25
     178:	87 95       	ror	r24
     17a:	77 95       	ror	r23
     17c:	67 95       	ror	r22
     17e:	2a 95       	dec	r18
     180:	d1 f7       	brne	.-12     	; 0x176 <main+0xd0>
	curr1/=50;    //Rs in mOhms
     182:	22 e3       	ldi	r18, 0x32	; 50
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
     18e:	ca 01       	movw	r24, r20
	curr1/=10;    //I=mA/10
	curr1 = LPF_Get_Filtered_Value(1,curr1);
     190:	b9 01       	movw	r22, r18
     192:	2a e0       	ldi	r18, 0x0A	; 10
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	ba 01       	movw	r22, r20
     1a2:	a9 01       	movw	r20, r18
     1a4:	0e 94 33 05 	call	0xa66	; 0xa66 <LPF_Get_Filtered_Value>
     1a8:	7b 01       	movw	r14, r22
     1aa:	8c 01       	movw	r16, r24
	
	debug_tx_number_cm(Target);
     1ac:	be 01       	movw	r22, r28
     1ae:	88 27       	eor	r24, r24
     1b0:	77 fd       	sbrc	r23, 7
     1b2:	80 95       	com	r24
     1b4:	98 2f       	mov	r25, r24
     1b6:	0e 94 8a 03 	call	0x714	; 0x714 <debug_tx_number_cm>
	debug_tx_number_cm(Actual_Target);
     1ba:	b5 01       	movw	r22, r10
     1bc:	88 27       	eor	r24, r24
     1be:	77 fd       	sbrc	r23, 7
     1c0:	80 95       	com	r24
     1c2:	98 2f       	mov	r25, r24
     1c4:	0e 94 8a 03 	call	0x714	; 0x714 <debug_tx_number_cm>
	debug_tx_number_cm(Temp_Get_Filtered_Val());
     1c8:	0e 94 bb 07 	call	0xf76	; 0xf76 <Temp_Get_Filtered_Val>
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	bc 01       	movw	r22, r24
     1d2:	cd 01       	movw	r24, r26
     1d4:	0e 94 8a 03 	call	0x714	; 0x714 <debug_tx_number_cm>
	//debug_tx_number_cm(curr);
	debug_tx_number_cm(curr1);
     1d8:	c8 01       	movw	r24, r16
     1da:	b7 01       	movw	r22, r14
     1dc:	0e 94 8a 03 	call	0x714	; 0x714 <debug_tx_number_cm>
	//debug_tx_number_cm(PID_Get_Output());
	debug_tx_number_nl(Iron_Get_PWM());
     1e0:	0e 94 d2 05 	call	0xba4	; 0xba4 <Iron_Get_PWM>
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	bc 01       	movw	r22, r24
     1ea:	cd 01       	movw	r24, r26
     1ec:	0e 94 80 03 	call	0x700	; 0x700 <debug_tx_number_nl>
     1f0:	84 ef       	ldi	r24, 0xF4	; 244
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	f3 01       	movw	r30, r6
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x150>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <main+0x14e>
	_delay_ms(50);
	
	
	if(Count>0){
     1fe:	1c 14       	cp	r1, r12
     200:	1d 04       	cpc	r1, r13
     202:	1c f4       	brge	.+6      	; 0x20a <main+0x164>
	  Count--;
     204:	08 94       	sec
     206:	c1 08       	sbc	r12, r1
     208:	d1 08       	sbc	r13, r1
	}
	
	if(Count==0){
     20a:	c1 14       	cp	r12, r1
     20c:	d1 04       	cpc	r13, r1
     20e:	09 f4       	brne	.+2      	; 0x212 <main+0x16c>
     210:	5e 01       	movw	r10, r28
	  Actual_Target=Target;
	}
	
	if((PIND & (1<<4))==0){
     212:	4c 99       	sbic	0x09, 4	; 9
     214:	08 c0       	rjmp	.+16     	; 0x226 <main+0x180>
	  Target++;
     216:	21 96       	adiw	r28, 0x01	; 1
     218:	83 e0       	ldi	r24, 0x03	; 3
     21a:	c1 32       	cpi	r28, 0x21	; 33
     21c:	d8 07       	cpc	r29, r24
     21e:	54 f0       	brlt	.+20     	; 0x234 <main+0x18e>
     220:	c0 e2       	ldi	r28, 0x20	; 32
     222:	d3 e0       	ldi	r29, 0x03	; 3
     224:	07 c0       	rjmp	.+14     	; 0x234 <main+0x18e>
	  if(Target>800){
	    Target=800;
	  }
	  Count = 20;
	  _delay_ms(20);
	}else if((PINB & (1<<0))==0){
     226:	18 99       	sbic	0x03, 0	; 3
     228:	89 cf       	rjmp	.-238    	; 0x13c <main+0x96>
	  Target--;
     22a:	21 97       	sbiw	r28, 0x01	; 1
     22c:	d7 ff       	sbrs	r29, 7
     22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x18e>
     230:	c0 e0       	ldi	r28, 0x00	; 0
     232:	d0 e0       	ldi	r29, 0x00	; 0
     234:	c4 01       	movw	r24, r8
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <main+0x190>
     23a:	84 e1       	ldi	r24, 0x14	; 20
     23c:	c8 2e       	mov	r12, r24
     23e:	d1 2c       	mov	r13, r1
     240:	7d cf       	rjmp	.-262    	; 0x13c <main+0x96>

00000242 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     242:	10 92 1e 01 	sts	0x011E, r1
  debug.datareg=0;
     246:	10 92 1f 01 	sts	0x011F, r1
  debug.databsy=1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	80 93 20 01 	sts	0x0120, r24
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     254:	fc 01       	movw	r30, r24
     256:	e2 5e       	subi	r30, 0xE2	; 226
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	13 82       	std	Z+3, r1	; 0x03
     25c:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     25e:	80 32       	cpi	r24, 0x20	; 32
     260:	91 05       	cpc	r25, r1
     262:	c1 f7       	brne	.-16     	; 0x254 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     264:	10 92 41 01 	sts	0x0141, r1
     268:	e2 e4       	ldi	r30, 0x42	; 66
     26a:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     26c:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	ea 34       	cpi	r30, 0x4A	; 74
     272:	f8 07       	cpc	r31, r24
     274:	d9 f7       	brne	.-10     	; 0x26c <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     276:	10 82       	st	Z, r1
}
     278:	08 95       	ret

0000027a <debug_timings_init>:
  TIMSK1=0x00;
  TIFR1 =0xff;
  #endif
  
  #ifdef DEBUG_USE_TIMER2
  TCCR2A=0x00;
     27a:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B=0x00;
     27e:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2=0x00;
     282:	10 92 70 00 	sts	0x0070, r1
  TIFR2 =0xff;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	87 bb       	out	0x17, r24	; 23
  sei();
  #define ISR_PCINT_VECT PCINT1_vect
  #endif
  
  #ifdef DEBUG_RX_DDRD
  PCICR |=(1<<PCIE2);
     28a:	e8 e6       	ldi	r30, 0x68	; 104
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	84 60       	ori	r24, 0x04	; 4
     292:	80 83       	st	Z, r24
  PCMSK2|=(1<<DEBUG_RX_bp);
     294:	ed e6       	ldi	r30, 0x6D	; 109
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	81 60       	ori	r24, 0x01	; 1
     29c:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF2);
     29e:	da 9a       	sbi	0x1b, 2	; 27
  sei();
     2a0:	78 94       	sei
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     2a2:	08 95       	ret

000002a4 <debug_timer_start>:
  TIMSK1=(1<<TOIE1);
  #define TIMER_OVF_VECT TIMER1_OVF_vect
  #endif
  
  #ifdef DEBUG_USE_TIMER2
  TIFR2 =0xff;
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	87 bb       	out	0x17, r24	; 23
  TIMSK2=0x00;
     2a8:	e0 e7       	ldi	r30, 0x70	; 112
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	10 82       	st	Z, r1
  TCNT2 =10;
     2ae:	8a e0       	ldi	r24, 0x0A	; 10
     2b0:	80 93 b2 00 	sts	0x00B2, r24
  TCCR2B=(1<<CS22);
     2b4:	84 e0       	ldi	r24, 0x04	; 4
     2b6:	80 93 b1 00 	sts	0x00B1, r24
  TIFR2 =(1<<TOV2);
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	87 bb       	out	0x17, r24	; 23
  TIMSK2=(1<<TOIE2);
     2be:	80 83       	st	Z, r24
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     2c0:	08 95       	ret

000002c2 <debug_timer_stop>:
  TCCR1B=0;
  TCNT1 =0;
  #endif
  
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
     2c2:	10 92 70 00 	sts	0x0070, r1
  TCCR2B=0;
     2c6:	10 92 b1 00 	sts	0x00B1, r1
  TCNT2 =0;
     2ca:	10 92 b2 00 	sts	0x00B2, r1
  #endif
}
     2ce:	08 95       	ret

000002d0 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     2d0:	51 9a       	sbi	0x0a, 1	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     2d2:	59 9a       	sbi	0x0b, 1	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     2d4:	50 98       	cbi	0x0a, 0	; 10
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     2d6:	58 9a       	sbi	0x0b, 0	; 11
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     2d8:	08 95       	ret

000002da <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     2da:	59 9a       	sbi	0x0b, 1	; 11
}
     2dc:	08 95       	ret

000002de <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     2de:	59 98       	cbi	0x0b, 1	; 11
}
     2e0:	08 95       	ret

000002e2 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	11 f4       	brne	.+4      	; 0x2ea <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     2e6:	59 9a       	sbi	0x0b, 1	; 11
     2e8:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     2ea:	59 98       	cbi	0x0b, 1	; 11
     2ec:	08 95       	ret

000002ee <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     2ee:	89 b1       	in	r24, 0x09	; 9
    return 1;
  }else{
    return 0;
  }
}
     2f0:	81 70       	andi	r24, 0x01	; 1
     2f2:	08 95       	ret

000002f4 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     2f4:	9c 01       	movw	r18, r24
  while(TCNT1<val){}
  TCCR1B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER2
  TCNT2=0;
     2f6:	10 92 b2 00 	sts	0x00B2, r1
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR2B=(1<<CS20);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 b1 00 	sts	0x00B1, r24
	while(TCNT2<50){}
     300:	80 91 b2 00 	lds	r24, 0x00B2
     304:	82 33       	cpi	r24, 0x32	; 50
     306:	e0 f3       	brcs	.-8      	; 0x300 <debug_delay+0xc>
    TCNT2=0;
     308:	10 92 b2 00 	sts	0x00B2, r1
	#endif
  while(TCNT2<val){}
     30c:	80 91 b2 00 	lds	r24, 0x00B2
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	82 17       	cp	r24, r18
     314:	93 07       	cpc	r25, r19
     316:	d0 f3       	brcs	.-12     	; 0x30c <debug_delay+0x18>
  TCCR2B=0;
     318:	10 92 b1 00 	sts	0x00B1, r1
  #endif
}
     31c:	08 95       	ret

0000031e <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM2_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
     31e:	80 91 0e 01 	lds	r24, 0x010E
     322:	90 91 0f 01 	lds	r25, 0x010F
     326:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <debug_delay>
    #endif
  #endif
}
     32a:	08 95       	ret

0000032c <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM2_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
     32c:	80 91 10 01 	lds	r24, 0x0110
     330:	90 91 11 01 	lds	r25, 0x0111
     334:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <debug_delay>
    #endif
  #endif
}
     338:	08 95       	ret

0000033a <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM2_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
     33a:	80 91 12 01 	lds	r24, 0x0112
     33e:	90 91 13 01 	lds	r25, 0x0113
     342:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <debug_delay>
    #endif
  #endif
}
     346:	08 95       	ret

00000348 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	2a 97       	sbiw	r28, 0x0a	; 10
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     366:	fe 01       	movw	r30, r28
     368:	31 96       	adiw	r30, 0x01	; 1
     36a:	9a e0       	ldi	r25, 0x0A	; 10
     36c:	df 01       	movw	r26, r30
     36e:	1d 92       	st	X+, r1
     370:	9a 95       	dec	r25
     372:	e9 f7       	brne	.-6      	; 0x36e <debug_tx_byte+0x26>
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	9a 87       	std	Y+10, r25	; 0x0a
     378:	fe 01       	movw	r30, r28
     37a:	32 96       	adiw	r30, 0x02	; 2
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     380:	48 2f       	mov	r20, r24
     382:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     384:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     386:	ca 01       	movw	r24, r20
     388:	02 2e       	mov	r0, r18
     38a:	02 c0       	rjmp	.+4      	; 0x390 <debug_tx_byte+0x48>
     38c:	95 95       	asr	r25
     38e:	87 95       	ror	r24
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <debug_tx_byte+0x44>
     394:	80 ff       	sbrs	r24, 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <debug_tx_byte+0x54>
	  buf[i+1]=1;
     398:	60 83       	st	Z, r22
     39a:	01 c0       	rjmp	.+2      	; 0x39e <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     39c:	10 82       	st	Z, r1
     39e:	2f 5f       	subi	r18, 0xFF	; 255
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     3a4:	28 30       	cpi	r18, 0x08	; 8
     3a6:	31 05       	cpc	r19, r1
     3a8:	71 f7       	brne	.-36     	; 0x386 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     3aa:	df b6       	in	r13, 0x3f	; 63
  cli();
     3ac:	f8 94       	cli
     3ae:	8e 01       	movw	r16, r28
     3b0:	0f 5f       	subi	r16, 0xFF	; 255
     3b2:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     3b4:	8b e0       	ldi	r24, 0x0B	; 11
     3b6:	e8 2e       	mov	r14, r24
     3b8:	f1 2c       	mov	r15, r1
     3ba:	ec 0e       	add	r14, r28
     3bc:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     3be:	f8 01       	movw	r30, r16
     3c0:	80 81       	ld	r24, Z
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	11 f4       	brne	.+4      	; 0x3ca <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     3c6:	59 9a       	sbi	0x0b, 1	; 11
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     3ca:	59 98       	cbi	0x0b, 1	; 11
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	debug_delay_index_0();    //tx one bit
     3cc:	0e 94 8f 01 	call	0x31e	; 0x31e <debug_delay_index_0>
     3d0:	0f 5f       	subi	r16, 0xFF	; 255
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     3d4:	0e 15       	cp	r16, r14
     3d6:	1f 05       	cpc	r17, r15
     3d8:	91 f7       	brne	.-28     	; 0x3be <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     3da:	df be       	out	0x3f, r13	; 63
}
     3dc:	2a 96       	adiw	r28, 0x0a	; 10
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	08 95       	ret

000003f8 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     3fe:	48 9b       	sbis	0x09, 0	; 9
     400:	21 c0       	rjmp	.+66     	; 0x444 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	17 c0       	rjmp	.+46     	; 0x434 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     406:	0e 94 96 01 	call	0x32c	; 0x32c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     40a:	48 99       	sbic	0x09, 0	; 9
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     40c:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     40e:	17 30       	cpi	r17, 0x07	; 7
     410:	09 f0       	breq	.+2      	; 0x414 <debug_rx_byte+0x1c>
	    val>>=1;
     412:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     414:	1f 5f       	subi	r17, 0xFF	; 255
     416:	18 30       	cpi	r17, 0x08	; 8
     418:	b1 f7       	brne	.-20     	; 0x406 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     41a:	0e 94 96 01 	call	0x32c	; 0x32c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     41e:	89 b1       	in	r24, 0x09	; 9
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     420:	f0 fc       	sbrc	r15, 0
     422:	07 c0       	rjmp	.+14     	; 0x432 <debug_rx_byte+0x3a>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     424:	80 ff       	sbrs	r24, 0
     426:	05 c0       	rjmp	.+10     	; 0x432 <debug_rx_byte+0x3a>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
	  debug.datareg=val;
     428:	00 93 1f 01 	sts	0x011F, r16
	  debug.error=0x00;
     42c:	10 92 1e 01 	sts	0x011E, r1
     430:	03 c0       	rjmp	.+6      	; 0x438 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 1e 01 	sts	0x011E, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     438:	80 91 1f 01 	lds	r24, 0x011F
}
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     444:	0e 94 9d 01 	call	0x33a	; 0x33a <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     448:	f9 b0       	in	r15, 0x09	; 9
     44a:	00 e0       	ldi	r16, 0x00	; 0
     44c:	10 e0       	ldi	r17, 0x00	; 0
     44e:	db cf       	rjmp	.-74     	; 0x406 <debug_rx_byte+0xe>

00000450 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     450:	80 91 1f 01 	lds	r24, 0x011F
}
     454:	08 95       	ret

00000456 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     456:	10 92 1f 01 	sts	0x011F, r1
}
     45a:	08 95       	ret

0000045c <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     45c:	80 93 1f 01 	sts	0x011F, r24
}
     460:	08 95       	ret

00000462 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	7b 01       	movw	r14, r22
     476:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	e8 16       	cp	r14, r24
     47c:	f1 04       	cpc	r15, r1
     47e:	01 05       	cpc	r16, r1
     480:	11 05       	cpc	r17, r1
     482:	09 f0       	breq	.+2      	; 0x486 <debug_tx_hex+0x24>
     484:	30 f4       	brcc	.+12     	; 0x492 <debug_tx_hex+0x30>
     486:	c8 e0       	ldi	r28, 0x08	; 8
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	32 e0       	ldi	r19, 0x02	; 2
     48c:	c3 2e       	mov	r12, r19
     48e:	d1 2c       	mov	r13, r1
     490:	14 c0       	rjmp	.+40     	; 0x4ba <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	e8 16       	cp	r14, r24
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	f8 06       	cpc	r15, r24
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	08 07       	cpc	r16, r24
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	18 07       	cpc	r17, r24
     4a2:	30 f0       	brcs	.+12     	; 0x4b0 <debug_tx_hex+0x4e>
     4a4:	c0 e2       	ldi	r28, 0x20	; 32
     4a6:	d0 e0       	ldi	r29, 0x00	; 0
     4a8:	28 e0       	ldi	r18, 0x08	; 8
     4aa:	c2 2e       	mov	r12, r18
     4ac:	d1 2c       	mov	r13, r1
     4ae:	05 c0       	rjmp	.+10     	; 0x4ba <debug_tx_hex+0x58>
     4b0:	c0 e1       	ldi	r28, 0x10	; 16
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
     4b4:	94 e0       	ldi	r25, 0x04	; 4
     4b6:	c9 2e       	mov	r12, r25
     4b8:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
  debug_tx_byte('x');
     4c0:	88 e7       	ldi	r24, 0x78	; 120
     4c2:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
     4c6:	bb 24       	eor	r11, r11
     4c8:	17 c0       	rjmp	.+46     	; 0x4f8 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     4ca:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     4cc:	d8 01       	movw	r26, r16
     4ce:	c7 01       	movw	r24, r14
     4d0:	0c 2e       	mov	r0, r28
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <debug_tx_hex+0x7a>
     4d4:	b6 95       	lsr	r27
     4d6:	a7 95       	ror	r26
     4d8:	97 95       	ror	r25
     4da:	87 95       	ror	r24
     4dc:	0a 94       	dec	r0
     4de:	d2 f7       	brpl	.-12     	; 0x4d4 <debug_tx_hex+0x72>
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	8f 70       	andi	r24, 0x0F	; 15
     4e4:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     4e6:	8a 30       	cpi	r24, 0x0A	; 10
     4e8:	91 05       	cpc	r25, r1
     4ea:	10 f0       	brcs	.+4      	; 0x4f0 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     4ec:	c7 96       	adiw	r24, 0x37	; 55
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     4f0:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     4f2:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     4f6:	b3 94       	inc	r11
     4f8:	8b 2d       	mov	r24, r11
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	8c 15       	cp	r24, r12
     4fe:	9d 05       	cpc	r25, r13
     500:	20 f3       	brcs	.-56     	; 0x4ca <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	08 95       	ret

00000516 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	7b 01       	movw	r14, r22
     52c:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     52e:	6f 3f       	cpi	r22, 0xFF	; 255
     530:	71 05       	cpc	r23, r1
     532:	81 05       	cpc	r24, r1
     534:	91 05       	cpc	r25, r1
     536:	09 f0       	breq	.+2      	; 0x53a <debug_tx_bin+0x24>
     538:	18 f4       	brcc	.+6      	; 0x540 <debug_tx_bin+0x2a>
     53a:	67 e0       	ldi	r22, 0x07	; 7
     53c:	d6 2e       	mov	r13, r22
     53e:	0d c0       	rjmp	.+26     	; 0x55a <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     540:	60 30       	cpi	r22, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	73 07       	cpc	r23, r19
     546:	31 e0       	ldi	r19, 0x01	; 1
     548:	83 07       	cpc	r24, r19
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	93 07       	cpc	r25, r19
     54e:	18 f0       	brcs	.+6      	; 0x556 <debug_tx_bin+0x40>
     550:	5f e1       	ldi	r21, 0x1F	; 31
     552:	d5 2e       	mov	r13, r21
     554:	02 c0       	rjmp	.+4      	; 0x55a <debug_tx_bin+0x44>
     556:	4f e0       	ldi	r20, 0x0F	; 15
     558:	d4 2e       	mov	r13, r20
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
  debug_tx_byte('b');
     560:	82 e6       	ldi	r24, 0x62	; 98
     562:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
     566:	c0 e0       	ldi	r28, 0x00	; 0
     568:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     56a:	cd 2c       	mov	r12, r13
     56c:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     56e:	56 01       	movw	r10, r12
     570:	08 94       	sec
     572:	a1 1c       	adc	r10, r1
     574:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     576:	c6 01       	movw	r24, r12
     578:	8c 1b       	sub	r24, r28
     57a:	9d 0b       	sbc	r25, r29
     57c:	a8 01       	movw	r20, r16
     57e:	97 01       	movw	r18, r14
     580:	04 c0       	rjmp	.+8      	; 0x58a <debug_tx_bin+0x74>
     582:	56 95       	lsr	r21
     584:	47 95       	ror	r20
     586:	37 95       	ror	r19
     588:	27 95       	ror	r18
     58a:	8a 95       	dec	r24
     58c:	d2 f7       	brpl	.-12     	; 0x582 <debug_tx_bin+0x6c>
     58e:	da 01       	movw	r26, r20
     590:	c9 01       	movw	r24, r18
     592:	81 70       	andi	r24, 0x01	; 1
     594:	90 70       	andi	r25, 0x00	; 0
     596:	89 2b       	or	r24, r25
     598:	11 f0       	breq	.+4      	; 0x59e <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     59a:	81 e3       	ldi	r24, 0x31	; 49
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     59e:	80 e3       	ldi	r24, 0x30	; 48
     5a0:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
     5a4:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     5a6:	ca 15       	cp	r28, r10
     5a8:	db 05       	cpc	r29, r11
     5aa:	29 f7       	brne	.-54     	; 0x576 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	08 95       	ret

000005c2 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     5c2:	8d e0       	ldi	r24, 0x0D	; 13
     5c4:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
  debug_tx_byte('\n');
     5c8:	8a e0       	ldi	r24, 0x0A	; 10
     5ca:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
}
     5ce:	08 95       	ret

000005d0 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     5d0:	80 e2       	ldi	r24, 0x20	; 32
     5d2:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
}
     5d6:	08 95       	ret

000005d8 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     5d8:	8c e2       	ldi	r24, 0x2C	; 44
     5da:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
}
     5de:	08 95       	ret

000005e0 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     5ec:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
        i++;
     5f0:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     5f2:	fe 01       	movw	r30, r28
     5f4:	e1 0f       	add	r30, r17
     5f6:	f1 1d       	adc	r31, r1
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	b9 f7       	brne	.-18     	; 0x5ec <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	08 95       	ret

00000606 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     606:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_nl();
     60a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <debug_tx_nl>
}
     60e:	08 95       	ret

00000610 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     610:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     614:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
}
     618:	08 95       	ret

0000061a <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     61a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_cm();
     61e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <debug_tx_cm>
}
     622:	08 95       	ret

00000624 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     624:	bf 92       	push	r11
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	6b 01       	movw	r12, r22
     634:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     636:	61 15       	cp	r22, r1
     638:	71 05       	cpc	r23, r1
     63a:	81 05       	cpc	r24, r1
     63c:	91 05       	cpc	r25, r1
     63e:	31 f4       	brne	.+12     	; 0x64c <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     640:	10 92 42 01 	sts	0x0142, r1
    debug.input_num_digits=1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 4a 01 	sts	0x014A, r24
     64a:	23 c0       	rjmp	.+70     	; 0x692 <debug_determine_digit_numbers+0x6e>
     64c:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     64e:	0b 2d       	mov	r16, r11
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	02 5e       	subi	r16, 0xE2	; 226
     654:	1e 4f       	sbci	r17, 0xFE	; 254
     656:	c7 01       	movw	r24, r14
     658:	b6 01       	movw	r22, r12
     65a:	2a e0       	ldi	r18, 0x0A	; 10
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
     666:	f8 01       	movw	r30, r16
     668:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	2a e0       	ldi	r18, 0x0A	; 10
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
     67a:	c9 01       	movw	r24, r18
     67c:	da 01       	movw	r26, r20
     67e:	6c 01       	movw	r12, r24
     680:	7d 01       	movw	r14, r26
      i++;
     682:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     684:	c1 14       	cp	r12, r1
     686:	d1 04       	cpc	r13, r1
     688:	e1 04       	cpc	r14, r1
     68a:	f1 04       	cpc	r15, r1
     68c:	01 f7       	brne	.-64     	; 0x64e <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     68e:	b0 92 4a 01 	sts	0x014A, r11
  }
}
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	08 95       	ret

000006a2 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     6a2:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     6a4:	10 91 4a 01 	lds	r17, 0x014A
     6a8:	09 c0       	rjmp	.+18     	; 0x6bc <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     6aa:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     6ac:	e1 2f       	mov	r30, r17
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	e2 5e       	subi	r30, 0xE2	; 226
     6b2:	fe 4f       	sbci	r31, 0xFE	; 254
     6b4:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     6b6:	80 5d       	subi	r24, 0xD0	; 208
     6b8:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     6bc:	11 23       	and	r17, r17
     6be:	a9 f7       	brne	.-22     	; 0x6aa <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     6c0:	1f 91       	pop	r17
     6c2:	08 95       	ret

000006c4 <debug_tx_number>:

void debug_tx_number(int32_t num){
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
  if(num<0){
     6d0:	97 ff       	sbrs	r25, 7
     6d2:	0b c0       	rjmp	.+22     	; 0x6ea <debug_tx_number+0x26>
    debug_tx_byte('-');
     6d4:	8d e2       	ldi	r24, 0x2D	; 45
     6d6:	0e 94 a4 01 	call	0x348	; 0x348 <debug_tx_byte>
	num=-num;
     6da:	10 95       	com	r17
     6dc:	00 95       	com	r16
     6de:	f0 94       	com	r15
     6e0:	e0 94       	com	r14
     6e2:	e1 1c       	adc	r14, r1
     6e4:	f1 1c       	adc	r15, r1
     6e6:	01 1d       	adc	r16, r1
     6e8:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     6ea:	c8 01       	movw	r24, r16
     6ec:	b7 01       	movw	r22, r14
     6ee:	0e 94 12 03 	call	0x624	; 0x624 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     6f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <debug_tx_number_digits>
}
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	08 95       	ret

00000700 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     700:	0e 94 62 03 	call	0x6c4	; 0x6c4 <debug_tx_number>
  debug_tx_nl();
     704:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <debug_tx_nl>
}
     708:	08 95       	ret

0000070a <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     70a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <debug_tx_number>
  debug_tx_sp();
     70e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
}
     712:	08 95       	ret

00000714 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     714:	0e 94 62 03 	call	0x6c4	; 0x6c4 <debug_tx_number>
  debug_tx_text(",");
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
}
     720:	08 95       	ret

00000722 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     722:	0e 94 31 02 	call	0x462	; 0x462 <debug_tx_hex>
  debug_tx_nl();
     726:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <debug_tx_nl>
}
     72a:	08 95       	ret

0000072c <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     72c:	0e 94 31 02 	call	0x462	; 0x462 <debug_tx_hex>
  debug_tx_sp();
     730:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
}
     734:	08 95       	ret

00000736 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     736:	0e 94 31 02 	call	0x462	; 0x462 <debug_tx_hex>
  debug_tx_text(",");
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
}
     742:	08 95       	ret

00000744 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     744:	0e 94 8b 02 	call	0x516	; 0x516 <debug_tx_bin>
  debug_tx_nl();
     748:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <debug_tx_nl>
}
     74c:	08 95       	ret

0000074e <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     74e:	0e 94 8b 02 	call	0x516	; 0x516 <debug_tx_bin>
  debug_tx_sp();
     752:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
}
     756:	08 95       	ret

00000758 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     758:	0e 94 8b 02 	call	0x516	; 0x516 <debug_tx_bin>
  debug_tx_text(",");
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
}
     764:	08 95       	ret

00000766 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	7a 01       	movw	r14, r20
     770:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     772:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     776:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_nl(num);
     77a:	c8 01       	movw	r24, r16
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 80 03 	call	0x700	; 0x700 <debug_tx_number_nl>
}
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	08 95       	ret

0000078c <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	7a 01       	movw	r14, r20
     796:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     798:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     79c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_sp(num);
     7a0:	c8 01       	movw	r24, r16
     7a2:	b7 01       	movw	r22, r14
     7a4:	0e 94 85 03 	call	0x70a	; 0x70a <debug_tx_number_sp>
}
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	08 95       	ret

000007b2 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	7a 01       	movw	r14, r20
     7bc:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     7be:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     7c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_cm(num);
     7c6:	c8 01       	movw	r24, r16
     7c8:	b7 01       	movw	r22, r14
     7ca:	0e 94 8a 03 	call	0x714	; 0x714 <debug_tx_number_cm>
}
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	08 95       	ret

000007d8 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	7a 01       	movw	r14, r20
     7e2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     7e4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     7e8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     7ec:	c8 01       	movw	r24, r16
     7ee:	b7 01       	movw	r22, r14
     7f0:	0e 94 91 03 	call	0x722	; 0x722 <debug_tx_number_hex_nl>
}
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	7a 01       	movw	r14, r20
     808:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     80a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     80e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     812:	c8 01       	movw	r24, r16
     814:	b7 01       	movw	r22, r14
     816:	0e 94 96 03 	call	0x72c	; 0x72c <debug_tx_number_hex_sp>
}
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	08 95       	ret

00000824 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	7a 01       	movw	r14, r20
     82e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     830:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     834:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     838:	c8 01       	movw	r24, r16
     83a:	b7 01       	movw	r22, r14
     83c:	0e 94 9b 03 	call	0x736	; 0x736 <debug_tx_number_hex_cm>
}
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	7a 01       	movw	r14, r20
     854:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     856:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     85a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     85e:	c8 01       	movw	r24, r16
     860:	b7 01       	movw	r22, r14
     862:	0e 94 a2 03 	call	0x744	; 0x744 <debug_tx_number_bin_nl>
}
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	08 95       	ret

00000870 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	7a 01       	movw	r14, r20
     87a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     87c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     880:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     884:	c8 01       	movw	r24, r16
     886:	b7 01       	movw	r22, r14
     888:	0e 94 a7 03 	call	0x74e	; 0x74e <debug_tx_number_bin_sp>
}
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	7a 01       	movw	r14, r20
     8a0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     8a2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <debug_tx_text>
  debug_tx_sp();
     8a6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     8aa:	c8 01       	movw	r24, r16
     8ac:	b7 01       	movw	r22, r14
     8ae:	0e 94 ac 03 	call	0x758	; 0x758 <debug_tx_number_bin_cm>
}
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	08 95       	ret

000008bc <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     8bc:	ee e1       	ldi	r30, 0x1E	; 30
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	e8 0f       	add	r30, r24
     8c2:	f1 1d       	adc	r31, r1
     8c4:	83 81       	ldd	r24, Z+3	; 0x03
}
     8c6:	08 95       	ret

000008c8 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     8c8:	80 91 41 01 	lds	r24, 0x0141
}
     8cc:	08 95       	ret

000008ce <debug_flush_buf>:

void debug_flush_buf(void){
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     8d2:	fc 01       	movw	r30, r24
     8d4:	e2 5e       	subi	r30, 0xE2	; 226
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     8dc:	80 32       	cpi	r24, 0x20	; 32
     8de:	91 05       	cpc	r25, r1
     8e0:	c1 f7       	brne	.-16     	; 0x8d2 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     8e2:	10 92 41 01 	sts	0x0141, r1
}
     8e6:	08 95       	ret

000008e8 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     8e8:	80 91 20 01 	lds	r24, 0x0120
}
     8ec:	08 95       	ret

000008ee <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     8ee:	80 91 20 01 	lds	r24, 0x0120
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     8f2:	88 23       	and	r24, r24
     8f4:	11 f0       	breq	.+4      	; 0x8fa <debug_data_available_rx_buf+0xc>
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xb>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     8fa:	80 91 41 01 	lds	r24, 0x0141
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	88 23       	and	r24, r24
     902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     90a:	89 2f       	mov	r24, r25
     90c:	08 95       	ret

0000090e <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     90e:	80 91 41 01 	lds	r24, 0x0141
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     912:	08 95       	ret

00000914 <debug_init>:

void debug_init(void){
  debug_struct_init();
     914:	0e 94 21 01 	call	0x242	; 0x242 <debug_struct_init>
  debug_timings_init();
     918:	0e 94 3d 01 	call	0x27a	; 0x27a <debug_timings_init>
  debug_gpio_init();
     91c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <debug_gpio_init>
}
     920:	08 95       	ret

00000922 <__vector_5>:


ISR(ISR_PCINT_VECT){
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
  debug.databsy=1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 20 01 	sts	0x0120, r24
  uint8_t val=debug_rx_byte();
     94a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <debug_rx_byte>
     94e:	98 2f       	mov	r25, r24
  if(debug.error==0){
     950:	80 91 1e 01 	lds	r24, 0x011E
     954:	88 23       	and	r24, r24
     956:	99 f4       	brne	.+38     	; 0x97e <__vector_5+0x5c>
    debug.buf[debug.bufindex]=val;
     958:	e0 91 41 01 	lds	r30, 0x0141
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	e2 5e       	subi	r30, 0xE2	; 226
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     964:	80 91 41 01 	lds	r24, 0x0141
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	80 93 41 01 	sts	0x0141, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     96e:	80 91 41 01 	lds	r24, 0x0141
     972:	81 32       	cpi	r24, 0x21	; 33
     974:	10 f0       	brcs	.+4      	; 0x97a <__vector_5+0x58>
	  debug.bufindex=0;
     976:	10 92 41 01 	sts	0x0141, r1
	}
    debug_timer_start();
     97a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <__vector_9>:

ISR(TIMER_OVF_VECT){
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
  TCCR1B=0;
  TCNT1 =0;
  #endif
  
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
     9aa:	10 92 70 00 	sts	0x0070, r1
  TCCR2B=0;
     9ae:	10 92 b1 00 	sts	0x00B1, r1
  TCNT2 =0;
     9b2:	10 92 b2 00 	sts	0x00B2, r1
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     9b6:	10 92 20 01 	sts	0x0120, r1
}
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <LPF_Struct_Init>:

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     9c4:	10 92 4b 01 	sts	0x014B, r1
    LPF[i].Input = 0;
     9c8:	10 92 4c 01 	sts	0x014C, r1
     9cc:	10 92 4d 01 	sts	0x014D, r1
     9d0:	10 92 4e 01 	sts	0x014E, r1
     9d4:	10 92 4f 01 	sts	0x014F, r1
	LPF[i].Output = 0;
     9d8:	10 92 50 01 	sts	0x0150, r1
     9dc:	10 92 51 01 	sts	0x0151, r1
     9e0:	10 92 52 01 	sts	0x0152, r1
     9e4:	10 92 53 01 	sts	0x0153, r1

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     9e8:	10 92 54 01 	sts	0x0154, r1
    LPF[i].Input = 0;
     9ec:	10 92 55 01 	sts	0x0155, r1
     9f0:	10 92 56 01 	sts	0x0156, r1
     9f4:	10 92 57 01 	sts	0x0157, r1
     9f8:	10 92 58 01 	sts	0x0158, r1
	LPF[i].Output = 0;
     9fc:	10 92 59 01 	sts	0x0159, r1
     a00:	10 92 5a 01 	sts	0x015A, r1
     a04:	10 92 5b 01 	sts	0x015B, r1
     a08:	10 92 5c 01 	sts	0x015C, r1

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     a0c:	10 92 5d 01 	sts	0x015D, r1
    LPF[i].Input = 0;
     a10:	10 92 5e 01 	sts	0x015E, r1
     a14:	10 92 5f 01 	sts	0x015F, r1
     a18:	10 92 60 01 	sts	0x0160, r1
     a1c:	10 92 61 01 	sts	0x0161, r1
	LPF[i].Output = 0;
     a20:	10 92 62 01 	sts	0x0162, r1
     a24:	10 92 63 01 	sts	0x0163, r1
     a28:	10 92 64 01 	sts	0x0164, r1
     a2c:	10 92 65 01 	sts	0x0165, r1
  }
}
     a30:	08 95       	ret

00000a32 <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	23 e0       	ldi	r18, 0x03	; 3
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	2a 95       	dec	r18
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <LPF_Set_Alpha+0x6>
     a40:	e8 0f       	add	r30, r24
     a42:	f9 1f       	adc	r31, r25
     a44:	e5 5b       	subi	r30, 0xB5	; 181
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	60 83       	st	Z, r22
}
     a4a:	08 95       	ret

00000a4c <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	fc 01       	movw	r30, r24
     a50:	33 e0       	ldi	r19, 0x03	; 3
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	3a 95       	dec	r19
     a58:	e1 f7       	brne	.-8      	; 0xa52 <LPF_Get_Alpha+0x6>
     a5a:	e8 0f       	add	r30, r24
     a5c:	f9 1f       	adc	r31, r25
     a5e:	e5 5b       	subi	r30, 0xB5	; 181
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     a62:	80 81       	ld	r24, Z
     a64:	08 95       	ret

00000a66 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     a66:	2f 92       	push	r2
     a68:	3f 92       	push	r3
     a6a:	4f 92       	push	r4
     a6c:	5f 92       	push	r5
     a6e:	6f 92       	push	r6
     a70:	7f 92       	push	r7
     a72:	8f 92       	push	r8
     a74:	9f 92       	push	r9
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	1a 01       	movw	r2, r20
     a88:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	6c 01       	movw	r12, r24
     a8e:	53 e0       	ldi	r21, 0x03	; 3
     a90:	cc 0c       	add	r12, r12
     a92:	dd 1c       	adc	r13, r13
     a94:	5a 95       	dec	r21
     a96:	e1 f7       	brne	.-8      	; 0xa90 <LPF_Get_Filtered_Value+0x2a>
     a98:	c8 0e       	add	r12, r24
     a9a:	d9 1e       	adc	r13, r25
     a9c:	8b e4       	ldi	r24, 0x4B	; 75
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	c8 0e       	add	r12, r24
     aa2:	d9 1e       	adc	r13, r25
     aa4:	f6 01       	movw	r30, r12
     aa6:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     aa8:	62 2e       	mov	r6, r18
     aaa:	77 24       	eor	r7, r7
     aac:	88 24       	eor	r8, r8
     aae:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     ab0:	64 e6       	ldi	r22, 0x64	; 100
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	62 1b       	sub	r22, r18
     ab6:	71 09       	sbc	r23, r1
     ab8:	88 27       	eor	r24, r24
     aba:	77 fd       	sbrc	r23, 7
     abc:	80 95       	com	r24
     abe:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     ac0:	45 e0       	ldi	r20, 0x05	; 5
     ac2:	a4 2e       	mov	r10, r20
     ac4:	b1 2c       	mov	r11, r1
     ac6:	ac 0c       	add	r10, r12
     ac8:	bd 1c       	adc	r11, r13
     aca:	25 81       	ldd	r18, Z+5	; 0x05
     acc:	36 81       	ldd	r19, Z+6	; 0x06
     ace:	47 81       	ldd	r20, Z+7	; 0x07
     ad0:	50 85       	ldd	r21, Z+8	; 0x08
     ad2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__mulsi3>
     ad6:	7b 01       	movw	r14, r22
     ad8:	8c 01       	movw	r16, r24
     ada:	c2 01       	movw	r24, r4
     adc:	b1 01       	movw	r22, r2
     ade:	a4 01       	movw	r20, r8
     ae0:	93 01       	movw	r18, r6
     ae2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__mulsi3>
     ae6:	e6 0e       	add	r14, r22
     ae8:	f7 1e       	adc	r15, r23
     aea:	08 1f       	adc	r16, r24
     aec:	19 1f       	adc	r17, r25
     aee:	c8 01       	movw	r24, r16
     af0:	b7 01       	movw	r22, r14
     af2:	24 e6       	ldi	r18, 0x64	; 100
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodsi4>
     afe:	ca 01       	movw	r24, r20
     b00:	f6 01       	movw	r30, r12
     b02:	25 83       	std	Z+5, r18	; 0x05
     b04:	f5 01       	movw	r30, r10
     b06:	31 83       	std	Z+1, r19	; 0x01
     b08:	42 83       	std	Z+2, r20	; 0x02
     b0a:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     b0c:	b9 01       	movw	r22, r18
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	5f 90       	pop	r5
     b28:	4f 90       	pop	r4
     b2a:	3f 90       	pop	r3
     b2c:	2f 90       	pop	r2
     b2e:	08 95       	ret

00000b30 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     b30:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LPF_Struct_Init>
     b34:	08 95       	ret

00000b36 <Iron_Heater_On>:

heater_t HEATER_type;
heater_t *HEATER;


void Iron_Heater_On(uint16_t val){
     b36:	9c 01       	movw	r18, r24
  if((HEATER->STATUS==0) && (val>0)){
     b38:	e0 91 66 01 	lds	r30, 0x0166
     b3c:	f0 91 67 01 	lds	r31, 0x0167
     b40:	80 81       	ld	r24, Z
     b42:	88 23       	and	r24, r24
     b44:	c1 f4       	brne	.+48     	; 0xb76 <Iron_Heater_On+0x40>
     b46:	21 15       	cp	r18, r1
     b48:	31 05       	cpc	r19, r1
     b4a:	a9 f0       	breq	.+42     	; 0xb76 <Iron_Heater_On+0x40>
    DDRB|=(1<<1);
     b4c:	21 9a       	sbi	0x04, 1	; 4
    PORTB&=~(1<<1);
     b4e:	29 98       	cbi	0x05, 1	; 5
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	28 35       	cpi	r18, 0x58	; 88
     b54:	38 07       	cpc	r19, r24
     b56:	10 f0       	brcs	.+4      	; 0xb5c <Iron_Heater_On+0x26>
     b58:	27 e5       	ldi	r18, 0x57	; 87
     b5a:	32 e0       	ldi	r19, 0x02	; 2
    if(val>PWM_MAX_VAL){val=PWM_MAX_VAL;}
    OCR1A=val;
     b5c:	30 93 89 00 	sts	0x0089, r19
     b60:	20 93 88 00 	sts	0x0088, r18
    TCCR1A|=(1<<COM1A1);
     b64:	80 91 80 00 	lds	r24, 0x0080
     b68:	80 68       	ori	r24, 0x80	; 128
     b6a:	80 93 80 00 	sts	0x0080, r24
	HEATER->PWM.CURRENTVALUE=val;
     b6e:	34 83       	std	Z+4, r19	; 0x04
     b70:	23 83       	std	Z+3, r18	; 0x03
	HEATER->STATUS=1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 83       	st	Z, r24
     b76:	08 95       	ret

00000b78 <Iron_Heater_Off>:
  }
}


void Iron_Heater_Off(void){
  if(HEATER->STATUS==1){
     b78:	e0 91 66 01 	lds	r30, 0x0166
     b7c:	f0 91 67 01 	lds	r31, 0x0167
     b80:	80 81       	ld	r24, Z
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	71 f4       	brne	.+28     	; 0xba2 <Iron_Heater_Off+0x2a>
    TCCR1A&=~(1<<COM1A1);
     b86:	80 91 80 00 	lds	r24, 0x0080
     b8a:	8f 77       	andi	r24, 0x7F	; 127
     b8c:	80 93 80 00 	sts	0x0080, r24
	OCR1A=0;
     b90:	10 92 89 00 	sts	0x0089, r1
     b94:	10 92 88 00 	sts	0x0088, r1
	DDRB &=~(1<<1);
     b98:	21 98       	cbi	0x04, 1	; 4
    PORTB&=~(1<<1);
     b9a:	29 98       	cbi	0x05, 1	; 5
	HEATER->PWM.CURRENTVALUE=0;
     b9c:	14 82       	std	Z+4, r1	; 0x04
     b9e:	13 82       	std	Z+3, r1	; 0x03
	HEATER->STATUS=0;
     ba0:	10 82       	st	Z, r1
     ba2:	08 95       	ret

00000ba4 <Iron_Get_PWM>:
  }
}

uint16_t Iron_Get_PWM(void){
     ba4:	e0 91 66 01 	lds	r30, 0x0166
     ba8:	f0 91 67 01 	lds	r31, 0x0167
  return HEATER->PWM.CURRENTVALUE;
}
     bac:	83 81       	ldd	r24, Z+3	; 0x03
     bae:	94 81       	ldd	r25, Z+4	; 0x04
     bb0:	08 95       	ret

00000bb2 <PWM_Init>:


void PWM_Init(void){
  HEATER=&HEATER_type;
     bb2:	88 e6       	ldi	r24, 0x68	; 104
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	90 93 67 01 	sts	0x0167, r25
     bba:	80 93 66 01 	sts	0x0166, r24
  DDRB|=(1<<1);
     bbe:	21 9a       	sbi	0x04, 1	; 4
  PORTB&=~(1<<1);
     bc0:	29 98       	cbi	0x05, 1	; 5
  TCCR1A=(1<<COM1A1)|(1<<WGM11);
     bc2:	e0 e8       	ldi	r30, 0x80	; 128
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	82 e8       	ldi	r24, 0x82	; 130
     bc8:	80 83       	st	Z, r24
  TCCR1B=(1<<CS10)|(1<<WGM12)|(1<<WGM13);
     bca:	89 e1       	ldi	r24, 0x19	; 25
     bcc:	80 93 81 00 	sts	0x0081, r24
  ICR1=ICR1_TOP_VAL;
     bd0:	28 e5       	ldi	r18, 0x58	; 88
     bd2:	32 e0       	ldi	r19, 0x02	; 2
     bd4:	30 93 87 00 	sts	0x0087, r19
     bd8:	20 93 86 00 	sts	0x0086, r18
  OCR1A=OCR1_INIT_VAL;
     bdc:	10 92 89 00 	sts	0x0089, r1
     be0:	10 92 88 00 	sts	0x0088, r1
  TCCR1A&=~(1<<COM1A1);
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	80 83       	st	Z, r24
  HEATER->PWM.TOPVALUE=ICR1_TOP_VAL;
     bea:	30 93 6a 01 	sts	0x016A, r19
     bee:	20 93 69 01 	sts	0x0169, r18
  HEATER->PWM.CURRENTVALUE=OCR1_INIT_VAL;
     bf2:	10 92 6c 01 	sts	0x016C, r1
     bf6:	10 92 6b 01 	sts	0x016B, r1
  HEATER->STATUS=0;
     bfa:	10 92 68 01 	sts	0x0168, r1
  Iron_Heater_Off();
     bfe:	0e 94 bc 05 	call	0xb78	; 0xb78 <Iron_Heater_Off>
     c02:	08 95       	ret

00000c04 <PID_Init>:

PID_t PID_type;
PID_t *PID;

void PID_Init(void){
  PID=&PID_type;
     c04:	8f e6       	ldi	r24, 0x6F	; 111
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	90 93 6e 01 	sts	0x016E, r25
     c0c:	80 93 6d 01 	sts	0x016D, r24
  PID->INPUT.KP=0;
     c10:	10 92 70 01 	sts	0x0170, r1
     c14:	10 92 6f 01 	sts	0x016F, r1
  PID->INPUT.KI=0;
     c18:	10 92 72 01 	sts	0x0172, r1
     c1c:	10 92 71 01 	sts	0x0171, r1
  PID->INPUT.KD=0;
     c20:	10 92 74 01 	sts	0x0174, r1
     c24:	10 92 73 01 	sts	0x0173, r1
  PID->INPUT.SETPOINT=0;
     c28:	10 92 76 01 	sts	0x0176, r1
     c2c:	10 92 75 01 	sts	0x0175, r1
  PID->INPUT.PROCESSVALUE=0;
     c30:	10 92 78 01 	sts	0x0178, r1
     c34:	10 92 77 01 	sts	0x0177, r1
  PID->ERROR.CURRENTERROR=0;
     c38:	10 92 79 01 	sts	0x0179, r1
     c3c:	10 92 7a 01 	sts	0x017A, r1
     c40:	10 92 7b 01 	sts	0x017B, r1
     c44:	10 92 7c 01 	sts	0x017C, r1
  PID->ERROR.DERROR=0;
     c48:	10 92 7d 01 	sts	0x017D, r1
     c4c:	10 92 7e 01 	sts	0x017E, r1
     c50:	10 92 7f 01 	sts	0x017F, r1
     c54:	10 92 80 01 	sts	0x0180, r1
  PID->ERROR.IERROR=0;
     c58:	10 92 81 01 	sts	0x0181, r1
     c5c:	10 92 82 01 	sts	0x0182, r1
     c60:	10 92 83 01 	sts	0x0183, r1
     c64:	10 92 84 01 	sts	0x0184, r1
  PID->ERROR.IERRORLIMIT=PID_MAX_IERROR;
     c68:	86 e9       	ldi	r24, 0x96	; 150
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	80 93 85 01 	sts	0x0185, r24
     c74:	90 93 86 01 	sts	0x0186, r25
     c78:	a0 93 87 01 	sts	0x0187, r26
     c7c:	b0 93 88 01 	sts	0x0188, r27
  PID->ERROR.LASTERROR=0;
     c80:	10 92 89 01 	sts	0x0189, r1
     c84:	10 92 8a 01 	sts	0x018A, r1
     c88:	10 92 8b 01 	sts	0x018B, r1
     c8c:	10 92 8c 01 	sts	0x018C, r1
  PID->OUTPUT=0;
     c90:	10 92 8e 01 	sts	0x018E, r1
     c94:	10 92 8d 01 	sts	0x018D, r1
}
     c98:	08 95       	ret

00000c9a <PID_Update_Constants>:

void PID_Update_Constants(uint16_t kp, uint16_t ki, uint16_t kd){
  PID->INPUT.KP=kp;
     c9a:	e0 91 6d 01 	lds	r30, 0x016D
     c9e:	f0 91 6e 01 	lds	r31, 0x016E
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
  PID->INPUT.KI=ki;
     ca6:	73 83       	std	Z+3, r23	; 0x03
     ca8:	62 83       	std	Z+2, r22	; 0x02
  PID->INPUT.KD=kd;
     caa:	55 83       	std	Z+5, r21	; 0x05
     cac:	44 83       	std	Z+4, r20	; 0x04
}
     cae:	08 95       	ret

00000cb0 <PID_Update_IError_Limit>:

void PID_Update_IError_Limit(long max_IError){
  PID->ERROR.IERRORLIMIT=max_IError;
     cb0:	e0 91 6d 01 	lds	r30, 0x016D
     cb4:	f0 91 6e 01 	lds	r31, 0x016E
     cb8:	66 8b       	std	Z+22, r22	; 0x16
     cba:	77 8b       	std	Z+23, r23	; 0x17
     cbc:	80 8f       	std	Z+24, r24	; 0x18
     cbe:	91 8f       	std	Z+25, r25	; 0x19
}
     cc0:	08 95       	ret

00000cc2 <PID_Reset_IError>:

void PID_Reset_IError(void){
  PID->ERROR.IERROR=0;
     cc2:	e0 91 6d 01 	lds	r30, 0x016D
     cc6:	f0 91 6e 01 	lds	r31, 0x016E
     cca:	12 8a       	std	Z+18, r1	; 0x12
     ccc:	13 8a       	std	Z+19, r1	; 0x13
     cce:	14 8a       	std	Z+20, r1	; 0x14
     cd0:	15 8a       	std	Z+21, r1	; 0x15
}
     cd2:	08 95       	ret

00000cd4 <PID_Calculate_Error>:

void PID_Calculate_Error(int set_point, int process_value){
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
  PID->INPUT.SETPOINT=set_point;
     cdc:	e0 91 6d 01 	lds	r30, 0x016D
     ce0:	f0 91 6e 01 	lds	r31, 0x016E
     ce4:	97 83       	std	Z+7, r25	; 0x07
     ce6:	86 83       	std	Z+6, r24	; 0x06
  PID->INPUT.PROCESSVALUE=process_value;
     ce8:	71 87       	std	Z+9, r23	; 0x09
     cea:	60 87       	std	Z+8, r22	; 0x08
  PID->ERROR.CURRENTERROR=PID->INPUT.SETPOINT-PID->INPUT.PROCESSVALUE;
     cec:	86 1b       	sub	r24, r22
     cee:	97 0b       	sbc	r25, r23
     cf0:	aa 27       	eor	r26, r26
     cf2:	97 fd       	sbrc	r25, 7
     cf4:	a0 95       	com	r26
     cf6:	ba 2f       	mov	r27, r26
     cf8:	82 87       	std	Z+10, r24	; 0x0a
     cfa:	93 87       	std	Z+11, r25	; 0x0b
     cfc:	a4 87       	std	Z+12, r26	; 0x0c
     cfe:	b5 87       	std	Z+13, r27	; 0x0d
  PID->ERROR.DERROR=PID->ERROR.CURRENTERROR-PID->ERROR.LASTERROR;
     d00:	22 8d       	ldd	r18, Z+26	; 0x1a
     d02:	33 8d       	ldd	r19, Z+27	; 0x1b
     d04:	44 8d       	ldd	r20, Z+28	; 0x1c
     d06:	55 8d       	ldd	r21, Z+29	; 0x1d
     d08:	7c 01       	movw	r14, r24
     d0a:	8d 01       	movw	r16, r26
     d0c:	e2 1a       	sub	r14, r18
     d0e:	f3 0a       	sbc	r15, r19
     d10:	04 0b       	sbc	r16, r20
     d12:	15 0b       	sbc	r17, r21
     d14:	e6 86       	std	Z+14, r14	; 0x0e
     d16:	f7 86       	std	Z+15, r15	; 0x0f
     d18:	00 8b       	std	Z+16, r16	; 0x10
     d1a:	11 8b       	std	Z+17, r17	; 0x11
  PID->ERROR.LASTERROR=PID->ERROR.CURRENTERROR;
     d1c:	82 8f       	std	Z+26, r24	; 0x1a
     d1e:	93 8f       	std	Z+27, r25	; 0x1b
     d20:	a4 8f       	std	Z+28, r26	; 0x1c
     d22:	b5 8f       	std	Z+29, r27	; 0x1d
  PID->ERROR.IERROR+=PID->ERROR.CURRENTERROR;
     d24:	22 89       	ldd	r18, Z+18	; 0x12
     d26:	33 89       	ldd	r19, Z+19	; 0x13
     d28:	44 89       	ldd	r20, Z+20	; 0x14
     d2a:	55 89       	ldd	r21, Z+21	; 0x15
     d2c:	28 0f       	add	r18, r24
     d2e:	39 1f       	adc	r19, r25
     d30:	4a 1f       	adc	r20, r26
     d32:	5b 1f       	adc	r21, r27
     d34:	22 8b       	std	Z+18, r18	; 0x12
     d36:	33 8b       	std	Z+19, r19	; 0x13
     d38:	44 8b       	std	Z+20, r20	; 0x14
     d3a:	55 8b       	std	Z+21, r21	; 0x15
  if     (PID->ERROR.IERROR > PID->ERROR.IERRORLIMIT){
     d3c:	86 89       	ldd	r24, Z+22	; 0x16
     d3e:	97 89       	ldd	r25, Z+23	; 0x17
     d40:	a0 8d       	ldd	r26, Z+24	; 0x18
     d42:	b1 8d       	ldd	r27, Z+25	; 0x19
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	a4 07       	cpc	r26, r20
     d4a:	b5 07       	cpc	r27, r21
     d4c:	2c f4       	brge	.+10     	; 0xd58 <PID_Calculate_Error+0x84>
    PID->ERROR.IERROR = PID->ERROR.IERRORLIMIT;
     d4e:	82 8b       	std	Z+18, r24	; 0x12
     d50:	93 8b       	std	Z+19, r25	; 0x13
     d52:	a4 8b       	std	Z+20, r26	; 0x14
     d54:	b5 8b       	std	Z+21, r27	; 0x15
     d56:	10 c0       	rjmp	.+32     	; 0xd78 <PID_Calculate_Error+0xa4>
  }
  else if(PID->ERROR.IERROR < -PID->ERROR.IERRORLIMIT){
     d58:	ee 24       	eor	r14, r14
     d5a:	ff 24       	eor	r15, r15
     d5c:	87 01       	movw	r16, r14
     d5e:	e8 1a       	sub	r14, r24
     d60:	f9 0a       	sbc	r15, r25
     d62:	0a 0b       	sbc	r16, r26
     d64:	1b 0b       	sbc	r17, r27
     d66:	2e 15       	cp	r18, r14
     d68:	3f 05       	cpc	r19, r15
     d6a:	40 07       	cpc	r20, r16
     d6c:	51 07       	cpc	r21, r17
     d6e:	24 f4       	brge	.+8      	; 0xd78 <PID_Calculate_Error+0xa4>
    PID->ERROR.IERROR = -PID->ERROR.IERRORLIMIT;
     d70:	e2 8a       	std	Z+18, r14	; 0x12
     d72:	f3 8a       	std	Z+19, r15	; 0x13
     d74:	04 8b       	std	Z+20, r16	; 0x14
     d76:	15 8b       	std	Z+21, r17	; 0x15
  }
}
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	08 95       	ret

00000d82 <PID_Execute_Routine>:


void PID_Execute_Routine(int set_point, int process_value){
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
  PID_Calculate_Error(set_point, process_value);
     d96:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <PID_Calculate_Error>
  long control_value=(PID->ERROR.CURRENTERROR*PID->INPUT.KP);
     d9a:	c0 91 6d 01 	lds	r28, 0x016D
     d9e:	d0 91 6e 01 	lds	r29, 0x016E
     da2:	68 81       	ld	r22, Y
     da4:	79 81       	ldd	r23, Y+1	; 0x01
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	2a 85       	ldd	r18, Y+10	; 0x0a
     dac:	3b 85       	ldd	r19, Y+11	; 0x0b
     dae:	4c 85       	ldd	r20, Y+12	; 0x0c
     db0:	5d 85       	ldd	r21, Y+13	; 0x0d
     db2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__mulsi3>
     db6:	5b 01       	movw	r10, r22
     db8:	6c 01       	movw	r12, r24
  control_value+=(PID->ERROR.IERROR*PID->INPUT.KI);
     dba:	6a 81       	ldd	r22, Y+2	; 0x02
     dbc:	7b 81       	ldd	r23, Y+3	; 0x03
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	2a 89       	ldd	r18, Y+18	; 0x12
     dc4:	3b 89       	ldd	r19, Y+19	; 0x13
     dc6:	4c 89       	ldd	r20, Y+20	; 0x14
     dc8:	5d 89       	ldd	r21, Y+21	; 0x15
     dca:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__mulsi3>
     dce:	7b 01       	movw	r14, r22
     dd0:	8c 01       	movw	r16, r24
     dd2:	ea 0c       	add	r14, r10
     dd4:	fb 1c       	adc	r15, r11
     dd6:	0c 1d       	adc	r16, r12
     dd8:	1d 1d       	adc	r17, r13
  control_value+=(PID->ERROR.DERROR*PID->INPUT.KD);
     dda:	6c 81       	ldd	r22, Y+4	; 0x04
     ddc:	7d 81       	ldd	r23, Y+5	; 0x05
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	2e 85       	ldd	r18, Y+14	; 0x0e
     de4:	3f 85       	ldd	r19, Y+15	; 0x0f
     de6:	48 89       	ldd	r20, Y+16	; 0x10
     de8:	59 89       	ldd	r21, Y+17	; 0x11
     dea:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__mulsi3>
     dee:	e6 0e       	add	r14, r22
     df0:	f7 1e       	adc	r15, r23
     df2:	08 1f       	adc	r16, r24
     df4:	19 1f       	adc	r17, r25
  control_value/=PID_OUTPUT_SCALING_FACT;
     df6:	c8 01       	movw	r24, r16
     df8:	b7 01       	movw	r22, r14
     dfa:	24 e6       	ldi	r18, 0x64	; 100
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodsi4>
  if(control_value<0){control_value=0;}
  PID->OUTPUT=(uint16_t)control_value;
     e06:	c9 01       	movw	r24, r18
     e08:	da 01       	movw	r26, r20
     e0a:	b7 ff       	sbrs	r27, 7
     e0c:	04 c0       	rjmp	.+8      	; 0xe16 <PID_Execute_Routine+0x94>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e0       	ldi	r26, 0x00	; 0
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	9f 8f       	std	Y+31, r25	; 0x1f
     e18:	8e 8f       	std	Y+30, r24	; 0x1e
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	bf 90       	pop	r11
     e2c:	af 90       	pop	r10
     e2e:	08 95       	ret

00000e30 <PID_Get_Kp>:

uint16_t PID_Get_Kp(void){
     e30:	e0 91 6d 01 	lds	r30, 0x016D
     e34:	f0 91 6e 01 	lds	r31, 0x016E
  return PID->INPUT.KP;
}
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	08 95       	ret

00000e3e <PID_Get_Ki>:

uint16_t PID_Get_Ki(void){
     e3e:	e0 91 6d 01 	lds	r30, 0x016D
     e42:	f0 91 6e 01 	lds	r31, 0x016E
  return PID->INPUT.KI;
}
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	08 95       	ret

00000e4c <PID_Get_Kd>:

uint16_t PID_Get_Kd(void){
     e4c:	e0 91 6d 01 	lds	r30, 0x016D
     e50:	f0 91 6e 01 	lds	r31, 0x016E
  return PID->INPUT.KD;
}
     e54:	84 81       	ldd	r24, Z+4	; 0x04
     e56:	95 81       	ldd	r25, Z+5	; 0x05
     e58:	08 95       	ret

00000e5a <PID_Get_Set_Point>:

int PID_Get_Set_Point(void){
     e5a:	e0 91 6d 01 	lds	r30, 0x016D
     e5e:	f0 91 6e 01 	lds	r31, 0x016E
  return PID->INPUT.SETPOINT;
}
     e62:	86 81       	ldd	r24, Z+6	; 0x06
     e64:	97 81       	ldd	r25, Z+7	; 0x07
     e66:	08 95       	ret

00000e68 <PID_Get_Process_Value>:

int PID_Get_Process_Value(void){
     e68:	e0 91 6d 01 	lds	r30, 0x016D
     e6c:	f0 91 6e 01 	lds	r31, 0x016E
  return PID->INPUT.PROCESSVALUE;
}
     e70:	80 85       	ldd	r24, Z+8	; 0x08
     e72:	91 85       	ldd	r25, Z+9	; 0x09
     e74:	08 95       	ret

00000e76 <PID_Get_Current_Error>:

long PID_Get_Current_Error(void){
     e76:	e0 91 6d 01 	lds	r30, 0x016D
     e7a:	f0 91 6e 01 	lds	r31, 0x016E
     e7e:	62 85       	ldd	r22, Z+10	; 0x0a
     e80:	73 85       	ldd	r23, Z+11	; 0x0b
  return PID->ERROR.CURRENTERROR;
}
     e82:	84 85       	ldd	r24, Z+12	; 0x0c
     e84:	95 85       	ldd	r25, Z+13	; 0x0d
     e86:	08 95       	ret

00000e88 <PID_Get_IError>:

long PID_Get_IError(void){
     e88:	e0 91 6d 01 	lds	r30, 0x016D
     e8c:	f0 91 6e 01 	lds	r31, 0x016E
     e90:	62 89       	ldd	r22, Z+18	; 0x12
     e92:	73 89       	ldd	r23, Z+19	; 0x13
  return PID->ERROR.IERROR;
}
     e94:	84 89       	ldd	r24, Z+20	; 0x14
     e96:	95 89       	ldd	r25, Z+21	; 0x15
     e98:	08 95       	ret

00000e9a <PID_Get_DError>:

long PID_Get_DError(void){
     e9a:	e0 91 6d 01 	lds	r30, 0x016D
     e9e:	f0 91 6e 01 	lds	r31, 0x016E
     ea2:	66 85       	ldd	r22, Z+14	; 0x0e
     ea4:	77 85       	ldd	r23, Z+15	; 0x0f
  return PID->ERROR.DERROR;
}
     ea6:	80 89       	ldd	r24, Z+16	; 0x10
     ea8:	91 89       	ldd	r25, Z+17	; 0x11
     eaa:	08 95       	ret

00000eac <PID_Get_IError_Limit>:

long PID_Get_IError_Limit(void){
     eac:	e0 91 6d 01 	lds	r30, 0x016D
     eb0:	f0 91 6e 01 	lds	r31, 0x016E
     eb4:	66 89       	ldd	r22, Z+22	; 0x16
     eb6:	77 89       	ldd	r23, Z+23	; 0x17
  return PID->ERROR.IERRORLIMIT;
}
     eb8:	80 8d       	ldd	r24, Z+24	; 0x18
     eba:	91 8d       	ldd	r25, Z+25	; 0x19
     ebc:	08 95       	ret

00000ebe <PID_Get_Output>:

uint16_t PID_Get_Output(void){
     ebe:	e0 91 6d 01 	lds	r30, 0x016D
     ec2:	f0 91 6e 01 	lds	r31, 0x016E
  return PID->OUTPUT;
}
     ec6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ec8:	97 8d       	ldd	r25, Z+31	; 0x1f
     eca:	08 95       	ret

00000ecc <Temp_Struct_Init>:
}temp_t;

temp_t Temperature;

void Temp_Struct_Init(void){
  Temperature.Raw=0;
     ecc:	10 92 90 01 	sts	0x0190, r1
     ed0:	10 92 8f 01 	sts	0x018F, r1
  Temperature.Filtered=0;
     ed4:	10 92 92 01 	sts	0x0192, r1
     ed8:	10 92 91 01 	sts	0x0191, r1
}
     edc:	08 95       	ret

00000ede <Temp_ADC_Init>:

void Temp_ADC_Init(void){
  ADMUX  = (1<<REFS0)|(1<<REFS1);
     ede:	80 ec       	ldi	r24, 0xC0	; 192
     ee0:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
     ee4:	ea e7       	ldi	r30, 0x7A	; 122
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	87 e0       	ldi	r24, 0x07	; 7
     eea:	80 83       	st	Z, r24
  ADCSRA|= (1<<ADEN) |(1<<ADSC);
     eec:	80 81       	ld	r24, Z
     eee:	80 6c       	ori	r24, 0xC0	; 192
     ef0:	80 83       	st	Z, r24
}
     ef2:	08 95       	ret

00000ef4 <Temp_Read_ADC>:



uint16_t Temp_Read_ADC(uint8_t channel){
  uint8_t temp=ADMUX;
     ef4:	90 91 7c 00 	lds	r25, 0x007C
  temp &= 0xF0;
     ef8:	90 7f       	andi	r25, 0xF0	; 240
  temp |= channel;
     efa:	98 2b       	or	r25, r24
  ADMUX = temp;
     efc:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
     f00:	80 91 7a 00 	lds	r24, 0x007A
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	80 93 7a 00 	sts	0x007A, r24
  while((ADCSRA & (1<<ADIF))==0);
     f0a:	80 91 7a 00 	lds	r24, 0x007A
     f0e:	84 ff       	sbrs	r24, 4
     f10:	fc cf       	rjmp	.-8      	; 0xf0a <Temp_Read_ADC+0x16>
  return ADCW;
     f12:	20 91 78 00 	lds	r18, 0x0078
     f16:	30 91 79 00 	lds	r19, 0x0079
}
     f1a:	c9 01       	movw	r24, r18
     f1c:	08 95       	ret

00000f1e <Temp_Read_ADC_Avg>:

uint16_t Temp_Read_ADC_Avg(uint8_t channel){
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	1f 93       	push	r17
     f28:	18 2f       	mov	r17, r24
  Temp_Read_ADC(channel);
     f2a:	0e 94 7a 07 	call	0xef4	; 0xef4 <Temp_Read_ADC>
  uint16_t sum=0;
  for(uint8_t i=0;i<TEMP_AVG_SMPL;i++){
    sum+=Temp_Read_ADC(channel);
     f2e:	81 2f       	mov	r24, r17
     f30:	0e 94 7a 07 	call	0xef4	; 0xef4 <Temp_Read_ADC>
     f34:	6c 01       	movw	r12, r24
     f36:	81 2f       	mov	r24, r17
     f38:	0e 94 7a 07 	call	0xef4	; 0xef4 <Temp_Read_ADC>
     f3c:	7c 01       	movw	r14, r24
     f3e:	81 2f       	mov	r24, r17
     f40:	0e 94 7a 07 	call	0xef4	; 0xef4 <Temp_Read_ADC>
     f44:	e8 0e       	add	r14, r24
     f46:	f9 1e       	adc	r15, r25
     f48:	ec 0c       	add	r14, r12
     f4a:	fd 1c       	adc	r15, r13
     f4c:	81 2f       	mov	r24, r17
     f4e:	0e 94 7a 07 	call	0xef4	; 0xef4 <Temp_Read_ADC>
     f52:	e8 0e       	add	r14, r24
     f54:	f9 1e       	adc	r15, r25
     f56:	f6 94       	lsr	r15
     f58:	e7 94       	ror	r14
     f5a:	f6 94       	lsr	r15
     f5c:	e7 94       	ror	r14
  }
  sum>>=TEMP_AVG_RSHIFT;
  return sum;
}
     f5e:	c7 01       	movw	r24, r14
     f60:	1f 91       	pop	r17
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	08 95       	ret

00000f6c <Temp_Get_Raw_Val>:
  return temp_mv;
}

uint16_t Temp_Get_Raw_Val(void){
  return Temperature.Raw;
}
     f6c:	80 91 8f 01 	lds	r24, 0x018F
     f70:	90 91 90 01 	lds	r25, 0x0190
     f74:	08 95       	ret

00000f76 <Temp_Get_Filtered_Val>:

uint16_t Temp_Get_Filtered_Val(void){
  return Temperature.Filtered;
}
     f76:	80 91 91 01 	lds	r24, 0x0191
     f7a:	90 91 92 01 	lds	r25, 0x0192
     f7e:	08 95       	ret

00000f80 <Temp_Init>:
}temp_t;

temp_t Temperature;

void Temp_Struct_Init(void){
  Temperature.Raw=0;
     f80:	10 92 90 01 	sts	0x0190, r1
     f84:	10 92 8f 01 	sts	0x018F, r1
  Temperature.Filtered=0;
     f88:	10 92 92 01 	sts	0x0192, r1
     f8c:	10 92 91 01 	sts	0x0191, r1
}

void Temp_ADC_Init(void){
  ADMUX  = (1<<REFS0)|(1<<REFS1);
     f90:	80 ec       	ldi	r24, 0xC0	; 192
     f92:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
     f96:	ea e7       	ldi	r30, 0x7A	; 122
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	87 e0       	ldi	r24, 0x07	; 7
     f9c:	80 83       	st	Z, r24
  ADCSRA|= (1<<ADEN) |(1<<ADSC);
     f9e:	80 81       	ld	r24, Z
     fa0:	80 6c       	ori	r24, 0xC0	; 192
     fa2:	80 83       	st	Z, r24


void Temp_Init(void){
  Temp_Struct_Init();
  Temp_ADC_Init();
     fa4:	08 95       	ret

00000fa6 <Temp_Read_Avg>:
  sum>>=TEMP_AVG_RSHIFT;
  return sum;
}

uint16_t Temp_Read_Avg(void){
  Iron_Heater_Off();
     fa6:	0e 94 bc 05 	call	0xb78	; 0xb78 <Iron_Heater_Off>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	8a 95       	dec	r24
     fae:	f1 f7       	brne	.-4      	; 0xfac <Temp_Read_Avg+0x6>
  _delay_us(50);
  uint16_t temp_mv=Temp_Read_ADC_Avg(0);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Temp_Read_ADC_Avg>
     fb6:	ac 01       	movw	r20, r24
  Temperature.Raw=temp_mv;
     fb8:	90 93 90 01 	sts	0x0190, r25
     fbc:	80 93 8f 01 	sts	0x018F, r24
  temp_mv=LPF_Get_Filtered_Value(0,temp_mv);
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	0e 94 33 05 	call	0xa66	; 0xa66 <LPF_Get_Filtered_Value>
  Temperature.Filtered=temp_mv;
     fca:	60 93 91 01 	sts	0x0191, r22
     fce:	70 93 92 01 	sts	0x0192, r23
  return temp_mv;
}
     fd2:	cb 01       	movw	r24, r22
     fd4:	08 95       	ret

00000fd6 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     fd6:	85 e9       	ldi	r24, 0x95	; 149
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	90 93 94 01 	sts	0x0194, r25
     fde:	80 93 93 01 	sts	0x0193, r24
  Timebase->Config.TimerType.Value = 0;
     fe2:	10 92 95 01 	sts	0x0195, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     fe6:	80 91 95 01 	lds	r24, 0x0195
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	80 93 95 01 	sts	0x0195, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     ff0:	80 91 95 01 	lds	r24, 0x0195
     ff4:	87 70       	andi	r24, 0x07	; 7
     ff6:	80 93 95 01 	sts	0x0195, r24
  Timebase->Config.UpdateRate = 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	90 93 97 01 	sts	0x0197, r25
    1002:	80 93 96 01 	sts	0x0196, r24
  Timebase->Time.OVFUpdateValue=0;
    1006:	10 92 98 01 	sts	0x0198, r1
  Timebase->Time.SubSeconds = 0;
    100a:	10 92 9d 01 	sts	0x019D, r1
    100e:	10 92 9e 01 	sts	0x019E, r1
    1012:	10 92 9f 01 	sts	0x019F, r1
    1016:	10 92 a0 01 	sts	0x01A0, r1
  Timebase->Time.Seconds = 0;
    101a:	10 92 a1 01 	sts	0x01A1, r1
    101e:	10 92 a2 01 	sts	0x01A2, r1
    1022:	10 92 a3 01 	sts	0x01A3, r1
    1026:	10 92 a4 01 	sts	0x01A4, r1
  Timebase->Time.LastSample = 0;
    102a:	10 92 99 01 	sts	0x0199, r1
    102e:	10 92 9a 01 	sts	0x019A, r1
    1032:	10 92 9b 01 	sts	0x019B, r1
    1036:	10 92 9c 01 	sts	0x019C, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
    103a:	10 92 a5 01 	sts	0x01A5, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
    103e:	10 92 a6 01 	sts	0x01A6, r1
    Timebase->UpCounter[i].EndValue = 0;
    1042:	10 92 a7 01 	sts	0x01A7, r1
    1046:	10 92 a8 01 	sts	0x01A8, r1
    104a:	10 92 a9 01 	sts	0x01A9, r1
    104e:	10 92 aa 01 	sts	0x01AA, r1
    Timebase->UpCounter[i].Target = 0;
    1052:	10 92 ab 01 	sts	0x01AB, r1
    1056:	10 92 ac 01 	sts	0x01AC, r1
    105a:	10 92 ad 01 	sts	0x01AD, r1
    105e:	10 92 ae 01 	sts	0x01AE, r1
    Timebase->UpCounter[i].Temporary = 0;    
    1062:	10 92 af 01 	sts	0x01AF, r1
    1066:	10 92 b0 01 	sts	0x01B0, r1
    106a:	10 92 b1 01 	sts	0x01B1, r1
    106e:	10 92 b2 01 	sts	0x01B2, r1
    Timebase->UpCounter[i].Value = 0;
    1072:	10 92 b3 01 	sts	0x01B3, r1
    1076:	10 92 b4 01 	sts	0x01B4, r1
    107a:	10 92 b5 01 	sts	0x01B5, r1
    107e:	10 92 b6 01 	sts	0x01B6, r1
    Timebase->UpCounter[i].PeriodValue = 0;
    1082:	10 92 b7 01 	sts	0x01B7, r1
    1086:	10 92 b8 01 	sts	0x01B8, r1
    108a:	10 92 b9 01 	sts	0x01B9, r1
    108e:	10 92 ba 01 	sts	0x01BA, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
    1092:	10 92 bb 01 	sts	0x01BB, r1
    Timebase->DownCounter[i].EndValue = 0;
    1096:	10 92 bc 01 	sts	0x01BC, r1
    109a:	10 92 bd 01 	sts	0x01BD, r1
    109e:	10 92 be 01 	sts	0x01BE, r1
    10a2:	10 92 bf 01 	sts	0x01BF, r1
    Timebase->DownCounter[i].Value = 0;
    10a6:	10 92 c0 01 	sts	0x01C0, r1
    10aa:	10 92 c1 01 	sts	0x01C1, r1
    10ae:	10 92 c2 01 	sts	0x01C2, r1
    10b2:	10 92 c3 01 	sts	0x01C3, r1
    Timebase->DownCounter[i].PeriodValue = 0;
    10b6:	10 92 c4 01 	sts	0x01C4, r1
    10ba:	10 92 c5 01 	sts	0x01C5, r1
    10be:	10 92 c6 01 	sts	0x01C6, r1
    10c2:	10 92 c7 01 	sts	0x01C7, r1
  }
  #endif
}
    10c6:	08 95       	ret

000010c8 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
    10c8:	7f 92       	push	r7
    10ca:	8f 92       	push	r8
    10cc:	9f 92       	push	r9
    10ce:	af 92       	push	r10
    10d0:	bf 92       	push	r11
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	2a 97       	sbiw	r28, 0x0a	; 10
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
    10f4:	c0 90 93 01 	lds	r12, 0x0193
    10f8:	d0 90 94 01 	lds	r13, 0x0194
    10fc:	f6 01       	movw	r30, r12
    10fe:	80 81       	ld	r24, Z
    1100:	80 ff       	sbrs	r24, 0
    1102:	31 c0       	rjmp	.+98     	; 0x1166 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val=0;
    if(UpdateRateHz==1){
    1104:	01 30       	cpi	r16, 0x01	; 1
    1106:	11 05       	cpc	r17, r1
    1108:	11 f4       	brne	.+4      	; 0x110e <Timebase_Timer_Config+0x46>
    110a:	96 e0       	ldi	r25, 0x06	; 6
    110c:	19 c0       	rjmp	.+50     	; 0x1140 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x06;
    }else if(UpdateRateHz==2){
    110e:	02 30       	cpi	r16, 0x02	; 2
    1110:	11 05       	cpc	r17, r1
    1112:	11 f4       	brne	.+4      	; 0x1118 <Timebase_Timer_Config+0x50>
    1114:	95 e0       	ldi	r25, 0x05	; 5
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x05;
    }else if(UpdateRateHz==4){
    1118:	04 30       	cpi	r16, 0x04	; 4
    111a:	11 05       	cpc	r17, r1
    111c:	11 f4       	brne	.+4      	; 0x1122 <Timebase_Timer_Config+0x5a>
    111e:	94 e0       	ldi	r25, 0x04	; 4
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x04;
    }else if(UpdateRateHz==8){
    1122:	08 30       	cpi	r16, 0x08	; 8
    1124:	11 05       	cpc	r17, r1
    1126:	11 f4       	brne	.+4      	; 0x112c <Timebase_Timer_Config+0x64>
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	0a c0       	rjmp	.+20     	; 0x1140 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x03;
    }else if(UpdateRateHz==16){
    112c:	00 31       	cpi	r16, 0x10	; 16
    112e:	11 05       	cpc	r17, r1
    1130:	11 f4       	brne	.+4      	; 0x1136 <Timebase_Timer_Config+0x6e>
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <Timebase_Timer_Config+0x78>
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	00 32       	cpi	r16, 0x20	; 32
    113a:	11 05       	cpc	r17, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <Timebase_Timer_Config+0x78>
    113e:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz==64){
      Prescaler_val=0x00;
    }else{
      Prescaler_val=0x00;
    }
    cli();
    1140:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
    1142:	84 b7       	in	r24, 0x34	; 52
    1144:	87 7f       	andi	r24, 0xF7	; 247
    1146:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
    1148:	80 91 60 00 	lds	r24, 0x0060
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
    1152:	80 91 60 00 	lds	r24, 0x0060
    1156:	88 61       	ori	r24, 0x18	; 24
    1158:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
    115c:	90 64       	ori	r25, 0x40	; 64
    115e:	90 93 60 00 	sts	0x0060, r25
    sei();
    1162:	78 94       	sei
    1164:	67 c0       	rjmp	.+206    	; 0x1234 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
    1166:	81 fd       	sbrc	r24, 1
    1168:	65 c0       	rjmp	.+202    	; 0x1234 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
    116a:	82 ff       	sbrs	r24, 2
    116c:	63 c0       	rjmp	.+198    	; 0x1234 <Timebase_Timer_Config+0x16c>
    
	uint32_t temp=F_CPU;
	uint16_t clock_div_factor[5]={1,8,64,256,1024};
    116e:	de 01       	movw	r26, r28
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	e4 e1       	ldi	r30, 0x14	; 20
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	8a e0       	ldi	r24, 0x0A	; 10
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	81 50       	subi	r24, 0x01	; 1
    117e:	e1 f7       	brne	.-8      	; 0x1178 <Timebase_Timer_Config+0xb0>
	
	temp/=UpdateRateHz;
    1180:	98 01       	movw	r18, r16
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	7b e1       	ldi	r23, 0x1B	; 27
    118a:	87 eb       	ldi	r24, 0xB7	; 183
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
    1192:	72 2e       	mov	r7, r18
    1194:	83 2e       	mov	r8, r19
    1196:	94 2e       	mov	r9, r20
    1198:	e5 2e       	mov	r14, r21
    119a:	5e 01       	movw	r10, r28
    119c:	08 94       	sec
    119e:	a1 1c       	adc	r10, r1
    11a0:	b1 1c       	adc	r11, r1
    11a2:	c9 01       	movw	r24, r18
    11a4:	da 01       	movw	r26, r20
    11a6:	9c 01       	movw	r18, r24
    11a8:	ad 01       	movw	r20, r26
    11aa:	ff 24       	eor	r15, r15
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq=temp;
	  curr_freq/=clock_div_factor[clock_div_index];
    11ae:	f5 01       	movw	r30, r10
    11b0:	21 91       	ld	r18, Z+
    11b2:	31 91       	ld	r19, Z+
    11b4:	5f 01       	movw	r10, r30
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	67 2d       	mov	r22, r7
    11bc:	78 2d       	mov	r23, r8
    11be:	89 2d       	mov	r24, r9
    11c0:	9e 2d       	mov	r25, r14
    11c2:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
    11c6:	c9 01       	movw	r24, r18
    11c8:	da 01       	movw	r26, r20
    11ca:	9c 01       	movw	r18, r24
    11cc:	ad 01       	movw	r20, r26
	  clock_div_index++;
    11ce:	f3 94       	inc	r15
	  if(clock_div_index == 5){
    11d0:	f5 e0       	ldi	r31, 0x05	; 5
    11d2:	ff 16       	cp	r15, r31
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <Timebase_Timer_Config+0x11a>
	temp/=UpdateRateHz;
	
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
    11d6:	2f 3f       	cpi	r18, 0xFF	; 255
    11d8:	31 05       	cpc	r19, r1
    11da:	41 05       	cpc	r20, r1
    11dc:	51 05       	cpc	r21, r1
    11de:	09 f0       	breq	.+2      	; 0x11e2 <Timebase_Timer_Config+0x11a>
    11e0:	30 f7       	brcc	.-52     	; 0x11ae <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index-=1;
    11e2:	8f 2d       	mov	r24, r15
    11e4:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
    11e6:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
    11e8:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
    11ea:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
    11ee:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
    11f0:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
    11f2:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
    11f4:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
    11f6:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
    11f8:	88 23       	and	r24, r24
    11fa:	11 f4       	brne	.+4      	; 0x1200 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	11 f4       	brne	.+4      	; 0x1208 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	0b c0       	rjmp	.+22     	; 0x121e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	11 f4       	brne	.+4      	; 0x1210 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	07 c0       	rjmp	.+14     	; 0x121e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	11 f4       	brne	.+4      	; 0x1218 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	03 c0       	rjmp	.+6      	; 0x121e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	11 f4       	brne	.+4      	; 0x1220 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
    121c:	85 e0       	ldi	r24, 0x05	; 5
    121e:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = 0xFF-curr_freq;
    1220:	82 2f       	mov	r24, r18
    1222:	80 95       	com	r24
    1224:	f6 01       	movw	r30, r12
    1226:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
    1228:	83 81       	ldd	r24, Z+3	; 0x03
    122a:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 6e 00 	sts	0x006E, r24
    sei();
    1232:	78 94       	sei
  }
  Timebase->Config.UpdateRate=UpdateRateHz;
    1234:	f6 01       	movw	r30, r12
    1236:	12 83       	std	Z+2, r17	; 0x02
    1238:	01 83       	std	Z+1, r16	; 0x01
}
    123a:	2a 96       	adiw	r28, 0x0a	; 10
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	08 95       	ret

00001262 <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    1262:	e0 91 93 01 	lds	r30, 0x0193
    1266:	f0 91 94 01 	lds	r31, 0x0194
    126a:	80 89       	ldd	r24, Z+16	; 0x10
}
    126c:	08 95       	ret

0000126e <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    126e:	e0 91 93 01 	lds	r30, 0x0193
    1272:	f0 91 94 01 	lds	r31, 0x0194
    1276:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
    1278:	8f 33       	cpi	r24, 0x3F	; 63
    127a:	18 f4       	brcc	.+6      	; 0x1282 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens+=1;
    127c:	80 89       	ldd	r24, Z+16	; 0x10
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 8b       	std	Z+16, r24	; 0x10
    1282:	08 95       	ret

00001284 <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    1284:	e0 91 93 01 	lds	r30, 0x0193
    1288:	f0 91 94 01 	lds	r31, 0x0194
    128c:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
    128e:	88 23       	and	r24, r24
    1290:	19 f0       	breq	.+6      	; 0x1298 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens-=1;
    1292:	80 89       	ldd	r24, Z+16	; 0x10
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	80 8b       	std	Z+16, r24	; 0x10
    1298:	08 95       	ret

0000129a <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens=0;
    129a:	e0 91 93 01 	lds	r30, 0x0193
    129e:	f0 91 94 01 	lds	r31, 0x0194
    12a2:	10 8a       	std	Z+16, r1	; 0x10
}
    12a4:	08 95       	ret

000012a6 <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    12a6:	e0 91 93 01 	lds	r30, 0x0193
    12aa:	f0 91 94 01 	lds	r31, 0x0194
    12ae:	20 85       	ldd	r18, Z+8	; 0x08
    12b0:	31 85       	ldd	r19, Z+9	; 0x09
    12b2:	42 85       	ldd	r20, Z+10	; 0x0a
    12b4:	53 85       	ldd	r21, Z+11	; 0x0b
}
    12b6:	b9 01       	movw	r22, r18
    12b8:	ca 01       	movw	r24, r20
    12ba:	08 95       	ret

000012bc <Timebase_Timer_Get_Seconds>:

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    12bc:	e0 91 93 01 	lds	r30, 0x0193
    12c0:	f0 91 94 01 	lds	r31, 0x0194
    12c4:	24 85       	ldd	r18, Z+12	; 0x0c
    12c6:	35 85       	ldd	r19, Z+13	; 0x0d
    12c8:	46 85       	ldd	r20, Z+14	; 0x0e
    12ca:	57 85       	ldd	r21, Z+15	; 0x0f
}
    12cc:	b9 01       	movw	r22, r18
    12ce:	ca 01       	movw	r24, r20
    12d0:	08 95       	ret

000012d2 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint32_t value){
  Timebase->Time.SubSeconds=value;
    12d2:	e0 91 93 01 	lds	r30, 0x0193
    12d6:	f0 91 94 01 	lds	r31, 0x0194
    12da:	60 87       	std	Z+8, r22	; 0x08
    12dc:	71 87       	std	Z+9, r23	; 0x09
    12de:	82 87       	std	Z+10, r24	; 0x0a
    12e0:	93 87       	std	Z+11, r25	; 0x0b
}
    12e2:	08 95       	ret

000012e4 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
    12e4:	e0 91 93 01 	lds	r30, 0x0193
    12e8:	f0 91 94 01 	lds	r31, 0x0194
    12ec:	64 87       	std	Z+12, r22	; 0x0c
    12ee:	75 87       	std	Z+13, r23	; 0x0d
    12f0:	86 87       	std	Z+14, r24	; 0x0e
    12f2:	97 87       	std	Z+15, r25	; 0x0f
}
    12f4:	08 95       	ret

000012f6 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    12fe:	e0 91 93 01 	lds	r30, 0x0193
    1302:	f0 91 94 01 	lds	r31, 0x0194
    1306:	20 85       	ldd	r18, Z+8	; 0x08
    1308:	31 85       	ldd	r19, Z+9	; 0x09
    130a:	42 85       	ldd	r20, Z+10	; 0x0a
    130c:	53 85       	ldd	r21, Z+11	; 0x0b
void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
    130e:	7c 01       	movw	r14, r24
    1310:	00 e0       	ldi	r16, 0x00	; 0
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	e2 0e       	add	r14, r18
    1316:	f3 1e       	adc	r15, r19
    1318:	04 1f       	adc	r16, r20
    131a:	15 1f       	adc	r17, r21
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    131c:	80 85       	ldd	r24, Z+8	; 0x08
    131e:	91 85       	ldd	r25, Z+9	; 0x09
    1320:	a2 85       	ldd	r26, Z+10	; 0x0a
    1322:	b3 85       	ldd	r27, Z+11	; 0x0b
  Timebase->Time.Seconds=value;
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
    1324:	8e 15       	cp	r24, r14
    1326:	9f 05       	cpc	r25, r15
    1328:	a0 07       	cpc	r26, r16
    132a:	b1 07       	cpc	r27, r17
    132c:	b8 f3       	brcs	.-18     	; 0x131c <Timebase_Timer_Delay_SubSeconds+0x26>
}
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <Timebase_Timer_Await_SubSeconds>:

//can be only used if token functions are active
void Timebase_Timer_Await_SubSeconds(uint16_t value){
    1338:	bc 01       	movw	r22, r24
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    133a:	e0 91 93 01 	lds	r30, 0x0193
    133e:	f0 91 94 01 	lds	r31, 0x0194
    1342:	20 85       	ldd	r18, Z+8	; 0x08
    1344:	31 85       	ldd	r19, Z+9	; 0x09
    1346:	42 85       	ldd	r20, Z+10	; 0x0a
    1348:	53 85       	ldd	r21, Z+11	; 0x0b
  while(temp > Timebase_Timer_Get_SubSeconds());
}

//can be only used if token functions are active
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds()<Timebase->Time.LastSample);
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	95 81       	ldd	r25, Z+5	; 0x05
    134e:	a6 81       	ldd	r26, Z+6	; 0x06
    1350:	b7 81       	ldd	r27, Z+7	; 0x07
    1352:	28 17       	cp	r18, r24
    1354:	39 07       	cpc	r19, r25
    1356:	4a 07       	cpc	r20, r26
    1358:	5b 07       	cpc	r21, r27
    135a:	98 f3       	brcs	.-26     	; 0x1342 <Timebase_Timer_Await_SubSeconds+0xa>
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    135c:	20 85       	ldd	r18, Z+8	; 0x08
    135e:	31 85       	ldd	r19, Z+9	; 0x09
    1360:	42 85       	ldd	r20, Z+10	; 0x0a
    1362:	53 85       	ldd	r21, Z+11	; 0x0b
}

//can be only used if token functions are active
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds()<Timebase->Time.LastSample);
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds()+value;
    1364:	cb 01       	movw	r24, r22
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	82 0f       	add	r24, r18
    136c:	93 1f       	adc	r25, r19
    136e:	a4 1f       	adc	r26, r20
    1370:	b5 1f       	adc	r27, r21
    1372:	84 83       	std	Z+4, r24	; 0x04
    1374:	95 83       	std	Z+5, r25	; 0x05
    1376:	a6 83       	std	Z+6, r26	; 0x06
    1378:	b7 83       	std	Z+7, r27	; 0x07
}
    137a:	08 95       	ret

0000137c <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1384:	e0 91 93 01 	lds	r30, 0x0193
    1388:	f0 91 94 01 	lds	r31, 0x0194
    138c:	24 85       	ldd	r18, Z+12	; 0x0c
    138e:	35 85       	ldd	r19, Z+13	; 0x0d
    1390:	46 85       	ldd	r20, Z+14	; 0x0e
    1392:	57 85       	ldd	r21, Z+15	; 0x0f
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds()+value;
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
    1394:	7c 01       	movw	r14, r24
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	e2 0e       	add	r14, r18
    139c:	f3 1e       	adc	r15, r19
    139e:	04 1f       	adc	r16, r20
    13a0:	15 1f       	adc	r17, r21
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    13a2:	80 85       	ldd	r24, Z+8	; 0x08
    13a4:	91 85       	ldd	r25, Z+9	; 0x09
    13a6:	a2 85       	ldd	r26, Z+10	; 0x0a
    13a8:	b3 85       	ldd	r27, Z+11	; 0x0b
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
    13aa:	8e 15       	cp	r24, r14
    13ac:	9f 05       	cpc	r25, r15
    13ae:	a0 07       	cpc	r26, r16
    13b0:	b1 07       	cpc	r27, r17
    13b2:	b8 f3       	brcs	.-18     	; 0x13a2 <Timebase_Timer_Delay_Seconds+0x26>
}
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	08 95       	ret

000013be <Timebase_UpCounter_Get_Status>:



//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    13be:	e0 91 93 01 	lds	r30, 0x0193
    13c2:	f0 91 94 01 	lds	r31, 0x0194
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	25 e1       	ldi	r18, 0x15	; 21
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	ac 01       	movw	r20, r24
    13ce:	42 9f       	mul	r20, r18
    13d0:	c0 01       	movw	r24, r0
    13d2:	43 9f       	mul	r20, r19
    13d4:	90 0d       	add	r25, r0
    13d6:	52 9f       	mul	r21, r18
    13d8:	90 0d       	add	r25, r0
    13da:	11 24       	eor	r1, r1
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	81 89       	ldd	r24, Z+17	; 0x11
    13e2:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	08 95       	ret

000013e8 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    13e8:	e0 91 93 01 	lds	r30, 0x0193
    13ec:	f0 91 94 01 	lds	r31, 0x0194
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	25 e1       	ldi	r18, 0x15	; 21
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	ac 01       	movw	r20, r24
    13f8:	42 9f       	mul	r20, r18
    13fa:	c0 01       	movw	r24, r0
    13fc:	43 9f       	mul	r20, r19
    13fe:	90 0d       	add	r25, r0
    1400:	52 9f       	mul	r21, r18
    1402:	90 0d       	add	r25, r0
    1404:	11 24       	eor	r1, r1
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	6f 70       	andi	r22, 0x0F	; 15
    140c:	66 0f       	add	r22, r22
    140e:	81 89       	ldd	r24, Z+17	; 0x11
    1410:	81 7e       	andi	r24, 0xE1	; 225
    1412:	86 2b       	or	r24, r22
    1414:	81 8b       	std	Z+17, r24	; 0x11
}
    1416:	08 95       	ret

00001418 <Timebase_UpCounter_Get_Value>:

uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1418:	e0 91 93 01 	lds	r30, 0x0193
    141c:	f0 91 94 01 	lds	r31, 0x0194
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	25 e1       	ldi	r18, 0x15	; 21
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	ac 01       	movw	r20, r24
    1428:	42 9f       	mul	r20, r18
    142a:	c0 01       	movw	r24, r0
    142c:	43 9f       	mul	r20, r19
    142e:	90 0d       	add	r25, r0
    1430:	52 9f       	mul	r21, r18
    1432:	90 0d       	add	r25, r0
    1434:	11 24       	eor	r1, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	df 01       	movw	r26, r30
    143c:	5e 96       	adiw	r26, 0x1e	; 30
    143e:	66 8d       	ldd	r22, Z+30	; 0x1e
    1440:	11 96       	adiw	r26, 0x01	; 1
    1442:	7c 91       	ld	r23, X
    1444:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].Value;
}
    1446:	12 96       	adiw	r26, 0x02	; 2
    1448:	8c 91       	ld	r24, X
    144a:	12 97       	sbiw	r26, 0x02	; 2
    144c:	13 96       	adiw	r26, 0x03	; 3
    144e:	9c 91       	ld	r25, X
    1450:	08 95       	ret

00001452 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    1452:	e0 91 93 01 	lds	r30, 0x0193
    1456:	f0 91 94 01 	lds	r31, 0x0194
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	25 e1       	ldi	r18, 0x15	; 21
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	dc 01       	movw	r26, r24
    1462:	a2 9f       	mul	r26, r18
    1464:	c0 01       	movw	r24, r0
    1466:	a3 9f       	mul	r26, r19
    1468:	90 0d       	add	r25, r0
    146a:	b2 9f       	mul	r27, r18
    146c:	90 0d       	add	r25, r0
    146e:	11 24       	eor	r1, r1
    1470:	e8 0f       	add	r30, r24
    1472:	f9 1f       	adc	r31, r25
    1474:	46 8f       	std	Z+30, r20	; 0x1e
    1476:	57 8f       	std	Z+31, r21	; 0x1f
    1478:	60 a3       	std	Z+32, r22	; 0x20
    147a:	71 a3       	std	Z+33, r23	; 0x21
}
    147c:	08 95       	ret

0000147e <Timebase_UpCounter_Get_EndValue>:

uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
    147e:	e0 91 93 01 	lds	r30, 0x0193
    1482:	f0 91 94 01 	lds	r31, 0x0194
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	25 e1       	ldi	r18, 0x15	; 21
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	ac 01       	movw	r20, r24
    148e:	42 9f       	mul	r20, r18
    1490:	c0 01       	movw	r24, r0
    1492:	43 9f       	mul	r20, r19
    1494:	90 0d       	add	r25, r0
    1496:	52 9f       	mul	r21, r18
    1498:	90 0d       	add	r25, r0
    149a:	11 24       	eor	r1, r1
    149c:	e8 0f       	add	r30, r24
    149e:	f9 1f       	adc	r31, r25
    14a0:	df 01       	movw	r26, r30
    14a2:	52 96       	adiw	r26, 0x12	; 18
    14a4:	62 89       	ldd	r22, Z+18	; 0x12
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	7c 91       	ld	r23, X
    14aa:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}
    14ac:	12 96       	adiw	r26, 0x02	; 2
    14ae:	8c 91       	ld	r24, X
    14b0:	12 97       	sbiw	r26, 0x02	; 2
    14b2:	13 96       	adiw	r26, 0x03	; 3
    14b4:	9c 91       	ld	r25, X
    14b6:	08 95       	ret

000014b8 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
    14b8:	e0 91 93 01 	lds	r30, 0x0193
    14bc:	f0 91 94 01 	lds	r31, 0x0194
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	25 e1       	ldi	r18, 0x15	; 21
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	dc 01       	movw	r26, r24
    14c8:	a2 9f       	mul	r26, r18
    14ca:	c0 01       	movw	r24, r0
    14cc:	a3 9f       	mul	r26, r19
    14ce:	90 0d       	add	r25, r0
    14d0:	b2 9f       	mul	r27, r18
    14d2:	90 0d       	add	r25, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	e8 0f       	add	r30, r24
    14d8:	f9 1f       	adc	r31, r25
    14da:	42 8b       	std	Z+18, r20	; 0x12
    14dc:	53 8b       	std	Z+19, r21	; 0x13
    14de:	64 8b       	std	Z+20, r22	; 0x14
    14e0:	75 8b       	std	Z+21, r23	; 0x15
}
    14e2:	08 95       	ret

000014e4 <Timebase_UpCounter_Get_TargetValue>:

uint32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    14e4:	e0 91 93 01 	lds	r30, 0x0193
    14e8:	f0 91 94 01 	lds	r31, 0x0194
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	25 e1       	ldi	r18, 0x15	; 21
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	ac 01       	movw	r20, r24
    14f4:	42 9f       	mul	r20, r18
    14f6:	c0 01       	movw	r24, r0
    14f8:	43 9f       	mul	r20, r19
    14fa:	90 0d       	add	r25, r0
    14fc:	52 9f       	mul	r21, r18
    14fe:	90 0d       	add	r25, r0
    1500:	11 24       	eor	r1, r1
    1502:	e8 0f       	add	r30, r24
    1504:	f9 1f       	adc	r31, r25
    1506:	df 01       	movw	r26, r30
    1508:	56 96       	adiw	r26, 0x16	; 22
    150a:	66 89       	ldd	r22, Z+22	; 0x16
    150c:	11 96       	adiw	r26, 0x01	; 1
    150e:	7c 91       	ld	r23, X
    1510:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].Target;
}
    1512:	12 96       	adiw	r26, 0x02	; 2
    1514:	8c 91       	ld	r24, X
    1516:	12 97       	sbiw	r26, 0x02	; 2
    1518:	13 96       	adiw	r26, 0x03	; 3
    151a:	9c 91       	ld	r25, X
    151c:	08 95       	ret

0000151e <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Target = value;
    151e:	e0 91 93 01 	lds	r30, 0x0193
    1522:	f0 91 94 01 	lds	r31, 0x0194
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	25 e1       	ldi	r18, 0x15	; 21
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	dc 01       	movw	r26, r24
    152e:	a2 9f       	mul	r26, r18
    1530:	c0 01       	movw	r24, r0
    1532:	a3 9f       	mul	r26, r19
    1534:	90 0d       	add	r25, r0
    1536:	b2 9f       	mul	r27, r18
    1538:	90 0d       	add	r25, r0
    153a:	11 24       	eor	r1, r1
    153c:	e8 0f       	add	r30, r24
    153e:	f9 1f       	adc	r31, r25
    1540:	46 8b       	std	Z+22, r20	; 0x16
    1542:	57 8b       	std	Z+23, r21	; 0x17
    1544:	60 8f       	std	Z+24, r22	; 0x18
    1546:	71 8f       	std	Z+25, r23	; 0x19
}
    1548:	08 95       	ret

0000154a <Timebase_UpCounter_Get_TemporaryValue>:

uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    154a:	e0 91 93 01 	lds	r30, 0x0193
    154e:	f0 91 94 01 	lds	r31, 0x0194
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	25 e1       	ldi	r18, 0x15	; 21
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	ac 01       	movw	r20, r24
    155a:	42 9f       	mul	r20, r18
    155c:	c0 01       	movw	r24, r0
    155e:	43 9f       	mul	r20, r19
    1560:	90 0d       	add	r25, r0
    1562:	52 9f       	mul	r21, r18
    1564:	90 0d       	add	r25, r0
    1566:	11 24       	eor	r1, r1
    1568:	e8 0f       	add	r30, r24
    156a:	f9 1f       	adc	r31, r25
    156c:	df 01       	movw	r26, r30
    156e:	5a 96       	adiw	r26, 0x1a	; 26
    1570:	62 8d       	ldd	r22, Z+26	; 0x1a
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	7c 91       	ld	r23, X
    1576:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}
    1578:	12 96       	adiw	r26, 0x02	; 2
    157a:	8c 91       	ld	r24, X
    157c:	12 97       	sbiw	r26, 0x02	; 2
    157e:	13 96       	adiw	r26, 0x03	; 3
    1580:	9c 91       	ld	r25, X
    1582:	08 95       	ret

00001584 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1584:	e0 91 93 01 	lds	r30, 0x0193
    1588:	f0 91 94 01 	lds	r31, 0x0194
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	25 e1       	ldi	r18, 0x15	; 21
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	dc 01       	movw	r26, r24
    1594:	a2 9f       	mul	r26, r18
    1596:	c0 01       	movw	r24, r0
    1598:	a3 9f       	mul	r26, r19
    159a:	90 0d       	add	r25, r0
    159c:	b2 9f       	mul	r27, r18
    159e:	90 0d       	add	r25, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	e8 0f       	add	r30, r24
    15a4:	f9 1f       	adc	r31, r25
    15a6:	42 8f       	std	Z+26, r20	; 0x1a
    15a8:	53 8f       	std	Z+27, r21	; 0x1b
    15aa:	64 8f       	std	Z+28, r22	; 0x1c
    15ac:	75 8f       	std	Z+29, r23	; 0x1d
}
    15ae:	08 95       	ret

000015b0 <Timebase_UpCounter_Get_PeriodValue>:

uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    15b0:	e0 91 93 01 	lds	r30, 0x0193
    15b4:	f0 91 94 01 	lds	r31, 0x0194
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	25 e1       	ldi	r18, 0x15	; 21
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	ac 01       	movw	r20, r24
    15c0:	42 9f       	mul	r20, r18
    15c2:	c0 01       	movw	r24, r0
    15c4:	43 9f       	mul	r20, r19
    15c6:	90 0d       	add	r25, r0
    15c8:	52 9f       	mul	r21, r18
    15ca:	90 0d       	add	r25, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	e8 0f       	add	r30, r24
    15d0:	f9 1f       	adc	r31, r25
    15d2:	df 01       	movw	r26, r30
    15d4:	92 96       	adiw	r26, 0x22	; 34
    15d6:	62 a1       	ldd	r22, Z+34	; 0x22
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	7c 91       	ld	r23, X
    15dc:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
}
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	8c 91       	ld	r24, X
    15e2:	12 97       	sbiw	r26, 0x02	; 2
    15e4:	13 96       	adiw	r26, 0x03	; 3
    15e6:	9c 91       	ld	r25, X
    15e8:	08 95       	ret

000015ea <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    15ea:	e0 91 93 01 	lds	r30, 0x0193
    15ee:	f0 91 94 01 	lds	r31, 0x0194
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	25 e1       	ldi	r18, 0x15	; 21
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	dc 01       	movw	r26, r24
    15fa:	a2 9f       	mul	r26, r18
    15fc:	c0 01       	movw	r24, r0
    15fe:	a3 9f       	mul	r26, r19
    1600:	90 0d       	add	r25, r0
    1602:	b2 9f       	mul	r27, r18
    1604:	90 0d       	add	r25, r0
    1606:	11 24       	eor	r1, r1
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
    160c:	42 a3       	std	Z+34, r20	; 0x22
    160e:	53 a3       	std	Z+35, r21	; 0x23
    1610:	64 a3       	std	Z+36, r22	; 0x24
    1612:	75 a3       	std	Z+37, r23	; 0x25
}
    1614:	08 95       	ret

00001616 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    1616:	e0 91 93 01 	lds	r30, 0x0193
    161a:	f0 91 94 01 	lds	r31, 0x0194
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	25 e1       	ldi	r18, 0x15	; 21
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	ac 01       	movw	r20, r24
    1626:	42 9f       	mul	r20, r18
    1628:	c0 01       	movw	r24, r0
    162a:	43 9f       	mul	r20, r19
    162c:	90 0d       	add	r25, r0
    162e:	52 9f       	mul	r21, r18
    1630:	90 0d       	add	r25, r0
    1632:	11 24       	eor	r1, r1
    1634:	e8 0f       	add	r30, r24
    1636:	f9 1f       	adc	r31, r25
    1638:	81 89       	ldd	r24, Z+17	; 0x11
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	08 95       	ret

0000163e <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    163e:	e0 91 93 01 	lds	r30, 0x0193
    1642:	f0 91 94 01 	lds	r31, 0x0194
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	25 e1       	ldi	r18, 0x15	; 21
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	ac 01       	movw	r20, r24
    164e:	42 9f       	mul	r20, r18
    1650:	c0 01       	movw	r24, r0
    1652:	43 9f       	mul	r20, r19
    1654:	90 0d       	add	r25, r0
    1656:	52 9f       	mul	r21, r18
    1658:	90 0d       	add	r25, r0
    165a:	11 24       	eor	r1, r1
    165c:	e8 0f       	add	r30, r24
    165e:	f9 1f       	adc	r31, r25
    1660:	81 89       	ldd	r24, Z+17	; 0x11
    1662:	81 60       	ori	r24, 0x01	; 1
    1664:	81 8b       	std	Z+17, r24	; 0x11
}
    1666:	08 95       	ret

00001668 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    1668:	e0 91 93 01 	lds	r30, 0x0193
    166c:	f0 91 94 01 	lds	r31, 0x0194
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	25 e1       	ldi	r18, 0x15	; 21
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	ac 01       	movw	r20, r24
    1678:	42 9f       	mul	r20, r18
    167a:	c0 01       	movw	r24, r0
    167c:	43 9f       	mul	r20, r19
    167e:	90 0d       	add	r25, r0
    1680:	52 9f       	mul	r21, r18
    1682:	90 0d       	add	r25, r0
    1684:	11 24       	eor	r1, r1
    1686:	e8 0f       	add	r30, r24
    1688:	f9 1f       	adc	r31, r25
    168a:	81 89       	ldd	r24, Z+17	; 0x11
    168c:	8e 7f       	andi	r24, 0xFE	; 254
    168e:	81 8b       	std	Z+17, r24	; 0x11
}
    1690:	08 95       	ret

00001692 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1692:	e0 91 93 01 	lds	r30, 0x0193
    1696:	f0 91 94 01 	lds	r31, 0x0194
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	25 e1       	ldi	r18, 0x15	; 21
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	ac 01       	movw	r20, r24
    16a2:	42 9f       	mul	r20, r18
    16a4:	c0 01       	movw	r24, r0
    16a6:	43 9f       	mul	r20, r19
    16a8:	90 0d       	add	r25, r0
    16aa:	52 9f       	mul	r21, r18
    16ac:	90 0d       	add	r25, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	e8 0f       	add	r30, r24
    16b2:	f9 1f       	adc	r31, r25
    16b4:	81 89       	ldd	r24, Z+17	; 0x11
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    16b6:	16 8e       	std	Z+30, r1	; 0x1e
    16b8:	17 8e       	std	Z+31, r1	; 0x1f
    16ba:	10 a2       	std	Z+32, r1	; 0x20
    16bc:	11 a2       	std	Z+33, r1	; 0x21
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
    16be:	12 8a       	std	Z+18, r1	; 0x12
    16c0:	13 8a       	std	Z+19, r1	; 0x13
    16c2:	14 8a       	std	Z+20, r1	; 0x14
    16c4:	15 8a       	std	Z+21, r1	; 0x15
uint32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Target = value;
    16c6:	16 8a       	std	Z+22, r1	; 0x16
    16c8:	17 8a       	std	Z+23, r1	; 0x17
    16ca:	10 8e       	std	Z+24, r1	; 0x18
    16cc:	11 8e       	std	Z+25, r1	; 0x19
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
    16ce:	12 8e       	std	Z+26, r1	; 0x1a
    16d0:	13 8e       	std	Z+27, r1	; 0x1b
    16d2:	14 8e       	std	Z+28, r1	; 0x1c
    16d4:	15 8e       	std	Z+29, r1	; 0x1d
uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    16d6:	12 a2       	std	Z+34, r1	; 0x22
    16d8:	13 a2       	std	Z+35, r1	; 0x23
    16da:	14 a2       	std	Z+36, r1	; 0x24
    16dc:	15 a2       	std	Z+37, r1	; 0x25
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    16de:	80 7e       	andi	r24, 0xE0	; 224
    16e0:	81 8b       	std	Z+17, r24	; 0x11
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    16e2:	08 95       	ret

000016e4 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    16e4:	0e 94 49 0b 	call	0x1692	; 0x1692 <Timebase_UpCounter_Reset>
}
    16e8:	08 95       	ret

000016ea <Timebase_UpCounter_Start>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    16ea:	e0 91 93 01 	lds	r30, 0x0193
    16ee:	f0 91 94 01 	lds	r31, 0x0194
    16f2:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 1){
    16f4:	25 e1       	ldi	r18, 0x15	; 21
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	ac 01       	movw	r20, r24
    16fa:	42 9f       	mul	r20, r18
    16fc:	c0 01       	movw	r24, r0
    16fe:	43 9f       	mul	r20, r19
    1700:	90 0d       	add	r25, r0
    1702:	52 9f       	mul	r21, r18
    1704:	90 0d       	add	r25, r0
    1706:	11 24       	eor	r1, r1
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
    170c:	91 89       	ldd	r25, Z+17	; 0x11
    170e:	89 2f       	mov	r24, r25
    1710:	86 95       	lsr	r24
    1712:	8f 70       	andi	r24, 0x0F	; 15
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	19 f0       	breq	.+6      	; 0x171e <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1718:	91 7e       	andi	r25, 0xE1	; 225
    171a:	92 60       	ori	r25, 0x02	; 2
    171c:	91 8b       	std	Z+17, r25	; 0x11
    171e:	08 95       	ret

00001720 <Timebase_UpCounter_Stop>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1720:	e0 91 93 01 	lds	r30, 0x0193
    1724:	f0 91 94 01 	lds	r31, 0x0194
    1728:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , 1);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 2){
    172a:	25 e1       	ldi	r18, 0x15	; 21
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	ac 01       	movw	r20, r24
    1730:	42 9f       	mul	r20, r18
    1732:	c0 01       	movw	r24, r0
    1734:	43 9f       	mul	r20, r19
    1736:	90 0d       	add	r25, r0
    1738:	52 9f       	mul	r21, r18
    173a:	90 0d       	add	r25, r0
    173c:	11 24       	eor	r1, r1
    173e:	e8 0f       	add	r30, r24
    1740:	f9 1f       	adc	r31, r25
    1742:	91 89       	ldd	r25, Z+17	; 0x11
    1744:	89 2f       	mov	r24, r25
    1746:	86 95       	lsr	r24
    1748:	8f 70       	andi	r24, 0x0F	; 15
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	19 f0       	breq	.+6      	; 0x1754 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    174e:	91 7e       	andi	r25, 0xE1	; 225
    1750:	94 60       	ori	r25, 0x04	; 4
    1752:	91 8b       	std	Z+17, r25	; 0x11
    1754:	08 95       	ret

00001756 <Timebase_UpCounter_Set_Securely>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1756:	a0 91 93 01 	lds	r26, 0x0193
    175a:	b0 91 94 01 	lds	r27, 0x0194
    175e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, uint32_t value){
  if( Timebase_UpCounter_Get_Status( window ) == 0 ){
    1760:	25 e1       	ldi	r18, 0x15	; 21
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	82 9f       	mul	r24, r18
    1766:	f0 01       	movw	r30, r0
    1768:	83 9f       	mul	r24, r19
    176a:	f0 0d       	add	r31, r0
    176c:	92 9f       	mul	r25, r18
    176e:	f0 0d       	add	r31, r0
    1770:	11 24       	eor	r1, r1
    1772:	ea 0f       	add	r30, r26
    1774:	fb 1f       	adc	r31, r27
    1776:	81 89       	ldd	r24, Z+17	; 0x11
    1778:	86 95       	lsr	r24
    177a:	8f 70       	andi	r24, 0x0F	; 15
    177c:	19 f5       	brne	.+70     	; 0x17c4 <Timebase_UpCounter_Set_Securely+0x6e>
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    177e:	16 8e       	std	Z+30, r1	; 0x1e
    1780:	17 8e       	std	Z+31, r1	; 0x1f
    1782:	10 a2       	std	Z+32, r1	; 0x20
    1784:	11 a2       	std	Z+33, r1	; 0x21
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1786:	12 8e       	std	Z+26, r1	; 0x1a
    1788:	13 8e       	std	Z+27, r1	; 0x1b
    178a:	14 8e       	std	Z+28, r1	; 0x1c
    178c:	15 8e       	std	Z+29, r1	; 0x1d
uint32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Target = value;
    178e:	46 8b       	std	Z+22, r20	; 0x16
    1790:	57 8b       	std	Z+23, r21	; 0x17
    1792:	60 8f       	std	Z+24, r22	; 0x18
    1794:	71 8f       	std	Z+25, r23	; 0x19
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1796:	1c 96       	adiw	r26, 0x0c	; 12
    1798:	8d 91       	ld	r24, X+
    179a:	9d 91       	ld	r25, X+
    179c:	0d 90       	ld	r0, X+
    179e:	bc 91       	ld	r27, X
    17a0:	a0 2d       	mov	r26, r0
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
    17a2:	84 0f       	add	r24, r20
    17a4:	95 1f       	adc	r25, r21
    17a6:	a6 1f       	adc	r26, r22
    17a8:	b7 1f       	adc	r27, r23
    17aa:	82 8b       	std	Z+18, r24	; 0x12
    17ac:	93 8b       	std	Z+19, r25	; 0x13
    17ae:	a4 8b       	std	Z+20, r26	; 0x14
    17b0:	b5 8b       	std	Z+21, r27	; 0x15
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 1){
    17b2:	91 89       	ldd	r25, Z+17	; 0x11
    17b4:	89 2f       	mov	r24, r25
    17b6:	86 95       	lsr	r24
    17b8:	8f 70       	andi	r24, 0x0F	; 15
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    17be:	91 7e       	andi	r25, 0xE1	; 225
    17c0:	92 60       	ori	r25, 0x02	; 2
    17c2:	91 8b       	std	Z+17, r25	; 0x11
    17c4:	08 95       	ret

000017c6 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, uint32_t value){
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	d8 2e       	mov	r13, r24
    17d2:	7a 01       	movw	r14, r20
    17d4:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    17d6:	0e 94 49 0b 	call	0x1692	; 0x1692 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    17da:	8d 2d       	mov	r24, r13
    17dc:	b8 01       	movw	r22, r16
    17de:	a7 01       	movw	r20, r14
    17e0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <Timebase_UpCounter_Set_Securely>
} 
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	df 90       	pop	r13
    17ee:	08 95       	ret

000017f0 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    17f8:	a0 91 93 01 	lds	r26, 0x0193
    17fc:	b0 91 94 01 	lds	r27, 0x0194
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	25 e1       	ldi	r18, 0x15	; 21
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	82 9f       	mul	r24, r18
    1808:	f0 01       	movw	r30, r0
    180a:	83 9f       	mul	r24, r19
    180c:	f0 0d       	add	r31, r0
    180e:	92 9f       	mul	r25, r18
    1810:	f0 0d       	add	r31, r0
    1812:	11 24       	eor	r1, r1
    1814:	ea 0f       	add	r30, r26
    1816:	fb 1f       	adc	r31, r27
    1818:	81 89       	ldd	r24, Z+17	; 0x11
    181a:	86 95       	lsr	r24
    181c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Reset( window );
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	b1 f5       	brne	.+108    	; 0x188e <Timebase_UpCounter_Update+0x9e>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1822:	1c 96       	adiw	r26, 0x0c	; 12
    1824:	8d 91       	ld	r24, X+
    1826:	9d 91       	ld	r25, X+
    1828:	0d 90       	ld	r0, X+
    182a:	bc 91       	ld	r27, X
    182c:	a0 2d       	mov	r26, r0
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
    182e:	22 89       	ldd	r18, Z+18	; 0x12
    1830:	33 89       	ldd	r19, Z+19	; 0x13
    1832:	44 89       	ldd	r20, Z+20	; 0x14
    1834:	55 89       	ldd	r21, Z+21	; 0x15
    1836:	28 1b       	sub	r18, r24
    1838:	39 0b       	sbc	r19, r25
    183a:	4a 0b       	sbc	r20, r26
    183c:	5b 0b       	sbc	r21, r27
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
    183e:	22 8f       	std	Z+26, r18	; 0x1a
    1840:	33 8f       	std	Z+27, r19	; 0x1b
    1842:	44 8f       	std	Z+28, r20	; 0x1c
    1844:	55 8f       	std	Z+29, r21	; 0x1d
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    1846:	e6 88       	ldd	r14, Z+22	; 0x16
    1848:	f7 88       	ldd	r15, Z+23	; 0x17
    184a:	00 8d       	ldd	r16, Z+24	; 0x18
    184c:	11 8d       	ldd	r17, Z+25	; 0x19
    184e:	d8 01       	movw	r26, r16
    1850:	c7 01       	movw	r24, r14
    1852:	82 1b       	sub	r24, r18
    1854:	93 0b       	sbc	r25, r19
    1856:	a4 0b       	sbc	r26, r20
    1858:	b5 0b       	sbc	r27, r21
    185a:	86 8f       	std	Z+30, r24	; 0x1e
    185c:	97 8f       	std	Z+31, r25	; 0x1f
    185e:	a0 a3       	std	Z+32, r26	; 0x20
    1860:	b1 a3       	std	Z+33, r27	; 0x21

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1862:	21 15       	cp	r18, r1
    1864:	31 05       	cpc	r19, r1
    1866:	41 05       	cpc	r20, r1
    1868:	51 05       	cpc	r21, r1
    186a:	89 f5       	brne	.+98     	; 0x18ce <Timebase_UpCounter_Update+0xde>
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
    186c:	12 8a       	std	Z+18, r1	; 0x12
    186e:	13 8a       	std	Z+19, r1	; 0x13
    1870:	14 8a       	std	Z+20, r1	; 0x14
    1872:	15 8a       	std	Z+21, r1	; 0x15
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1874:	12 8e       	std	Z+26, r1	; 0x1a
    1876:	13 8e       	std	Z+27, r1	; 0x1b
    1878:	14 8e       	std	Z+28, r1	; 0x1c
    187a:	15 8e       	std	Z+29, r1	; 0x1d
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    187c:	e6 8e       	std	Z+30, r14	; 0x1e
    187e:	f7 8e       	std	Z+31, r15	; 0x1f
    1880:	00 a3       	std	Z+32, r16	; 0x20
    1882:	11 a3       	std	Z+33, r17	; 0x21
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1884:	81 89       	ldd	r24, Z+17	; 0x11
    1886:	81 7e       	andi	r24, 0xE1	; 225
    1888:	88 60       	ori	r24, 0x08	; 8
    188a:	81 8b       	std	Z+17, r24	; 0x11
    188c:	20 c0       	rjmp	.+64     	; 0x18ce <Timebase_UpCounter_Update+0xde>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, 4);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == 2){
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	f1 f4       	brne	.+60     	; 0x18ce <Timebase_UpCounter_Update+0xde>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1892:	1c 96       	adiw	r26, 0x0c	; 12
    1894:	8d 91       	ld	r24, X+
    1896:	9d 91       	ld	r25, X+
    1898:	0d 90       	ld	r0, X+
    189a:	bc 91       	ld	r27, X
    189c:	a0 2d       	mov	r26, r0
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
    189e:	22 8d       	ldd	r18, Z+26	; 0x1a
    18a0:	33 8d       	ldd	r19, Z+27	; 0x1b
    18a2:	44 8d       	ldd	r20, Z+28	; 0x1c
    18a4:	55 8d       	ldd	r21, Z+29	; 0x1d
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	a4 1f       	adc	r26, r20
    18ac:	b5 1f       	adc	r27, r21
    18ae:	82 8b       	std	Z+18, r24	; 0x12
    18b0:	93 8b       	std	Z+19, r25	; 0x13
    18b2:	a4 8b       	std	Z+20, r26	; 0x14
    18b4:	b5 8b       	std	Z+21, r27	; 0x15
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    18b6:	86 89       	ldd	r24, Z+22	; 0x16
    18b8:	97 89       	ldd	r25, Z+23	; 0x17
    18ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    18bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    18be:	82 1b       	sub	r24, r18
    18c0:	93 0b       	sbc	r25, r19
    18c2:	a4 0b       	sbc	r26, r20
    18c4:	b5 0b       	sbc	r27, r21
    18c6:	86 8f       	std	Z+30, r24	; 0x1e
    18c8:	97 8f       	std	Z+31, r25	; 0x1f
    18ca:	a0 a3       	std	Z+32, r26	; 0x20
    18cc:	b1 a3       	std	Z+33, r27	; 0x21
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == 2){
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + Timebase_Timer_Get_Seconds());
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	08 95       	ret

000018d8 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	e0 91 93 01 	lds	r30, 0x0193
    18de:	f0 91 94 01 	lds	r31, 0x0194
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	25 e1       	ldi	r18, 0x15	; 21
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	bc 01       	movw	r22, r24
    18ea:	62 9f       	mul	r22, r18
    18ec:	c0 01       	movw	r24, r0
    18ee:	63 9f       	mul	r22, r19
    18f0:	90 0d       	add	r25, r0
    18f2:	72 9f       	mul	r23, r18
    18f4:	90 0d       	add	r25, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	e8 0f       	add	r30, r24
    18fa:	f9 1f       	adc	r31, r25
    18fc:	81 89       	ldd	r24, Z+17	; 0x11
    18fe:	86 95       	lsr	r24
    1900:	8f 70       	andi	r24, 0x0F	; 15
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	09 f4       	brne	.+2      	; 0x1908 <Timebase_UpCounter_Expired+0x30>
    1906:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == 4){
    return 1;
  }else{
    return 0;
  }
}
    1908:	84 2f       	mov	r24, r20
    190a:	08 95       	ret

0000190c <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    190c:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == 4){
    190e:	e0 91 93 01 	lds	r30, 0x0193
    1912:	f0 91 94 01 	lds	r31, 0x0194
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	85 e1       	ldi	r24, 0x15	; 21
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	bc 01       	movw	r22, r24
    1920:	26 9f       	mul	r18, r22
    1922:	c0 01       	movw	r24, r0
    1924:	27 9f       	mul	r18, r23
    1926:	90 0d       	add	r25, r0
    1928:	36 9f       	mul	r19, r22
    192a:	90 0d       	add	r25, r0
    192c:	11 24       	eor	r1, r1
    192e:	e8 0f       	add	r30, r24
    1930:	f9 1f       	adc	r31, r25
    1932:	81 89       	ldd	r24, Z+17	; 0x11
    1934:	86 95       	lsr	r24
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	11 f0       	breq	.+4      	; 0x1940 <Timebase_UpCounter_Expired_Event+0x34>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1940:	84 2f       	mov	r24, r20
    1942:	0e 94 49 0b 	call	0x1692	; 0x1692 <Timebase_UpCounter_Reset>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1948:	08 95       	ret

0000194a <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    194a:	e0 91 93 01 	lds	r30, 0x0193
    194e:	f0 91 94 01 	lds	r31, 0x0194
    1952:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, uint32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    1954:	25 e1       	ldi	r18, 0x15	; 21
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	dc 01       	movw	r26, r24
    195a:	a2 9f       	mul	r26, r18
    195c:	c0 01       	movw	r24, r0
    195e:	a3 9f       	mul	r26, r19
    1960:	90 0d       	add	r25, r0
    1962:	b2 9f       	mul	r27, r18
    1964:	90 0d       	add	r25, r0
    1966:	11 24       	eor	r1, r1
    1968:	e8 0f       	add	r30, r24
    196a:	f9 1f       	adc	r31, r25
    196c:	81 89       	ldd	r24, Z+17	; 0x11
    196e:	80 fd       	sbrc	r24, 0
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <Timebase_UpCounter_Set_Period_Value_Securely+0x46>
uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1972:	86 8d       	ldd	r24, Z+30	; 0x1e
    1974:	97 8d       	ldd	r25, Z+31	; 0x1f
    1976:	a0 a1       	ldd	r26, Z+32	; 0x20
    1978:	b1 a1       	ldd	r27, Z+33	; 0x21
    197a:	84 0f       	add	r24, r20
    197c:	95 1f       	adc	r25, r21
    197e:	a6 1f       	adc	r26, r22
    1980:	b7 1f       	adc	r27, r23
    1982:	82 a3       	std	Z+34, r24	; 0x22
    1984:	93 a3       	std	Z+35, r25	; 0x23
    1986:	a4 a3       	std	Z+36, r26	; 0x24
    1988:	b5 a3       	std	Z+37, r27	; 0x25
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    198a:	81 89       	ldd	r24, Z+17	; 0x11
    198c:	81 60       	ori	r24, 0x01	; 1
    198e:	81 8b       	std	Z+17, r24	; 0x11
    1990:	08 95       	ret

00001992 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
    1992:	e0 91 93 01 	lds	r30, 0x0193
    1996:	f0 91 94 01 	lds	r31, 0x0194
    199a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

uint32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    199c:	25 e1       	ldi	r18, 0x15	; 21
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	ac 01       	movw	r20, r24
    19a2:	42 9f       	mul	r20, r18
    19a4:	c0 01       	movw	r24, r0
    19a6:	43 9f       	mul	r20, r19
    19a8:	90 0d       	add	r25, r0
    19aa:	52 9f       	mul	r21, r18
    19ac:	90 0d       	add	r25, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	e8 0f       	add	r30, r24
    19b2:	f9 1f       	adc	r31, r25
    19b4:	22 a1       	ldd	r18, Z+34	; 0x22
    19b6:	33 a1       	ldd	r19, Z+35	; 0x23
    19b8:	44 a1       	ldd	r20, Z+36	; 0x24
    19ba:	55 a1       	ldd	r21, Z+37	; 0x25
    19bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    19be:	97 8d       	ldd	r25, Z+31	; 0x1f
    19c0:	a0 a1       	ldd	r26, Z+32	; 0x20
    19c2:	b1 a1       	ldd	r27, Z+33	; 0x21
    19c4:	28 1b       	sub	r18, r24
    19c6:	39 0b       	sbc	r19, r25
    19c8:	4a 0b       	sbc	r20, r26
    19ca:	5b 0b       	sbc	r21, r27
    19cc:	57 ff       	sbrs	r21, 7
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <Timebase_UpCounter_Get_Remaining_Period_Value+0x46>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    19d8:	b9 01       	movw	r22, r18
    19da:	ca 01       	movw	r24, r20
    19dc:	08 95       	ret

000019de <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
    19e2:	c0 91 93 01 	lds	r28, 0x0193
    19e6:	d0 91 94 01 	lds	r29, 0x0194
    19ea:	68 2f       	mov	r22, r24
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

uint32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    19ee:	85 e1       	ldi	r24, 0x15	; 21
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	68 9f       	mul	r22, r24
    19f4:	f0 01       	movw	r30, r0
    19f6:	69 9f       	mul	r22, r25
    19f8:	f0 0d       	add	r31, r0
    19fa:	78 9f       	mul	r23, r24
    19fc:	f0 0d       	add	r31, r0
    19fe:	11 24       	eor	r1, r1
    1a00:	ec 0f       	add	r30, r28
    1a02:	fd 1f       	adc	r31, r29
    1a04:	22 a1       	ldd	r18, Z+34	; 0x22
    1a06:	33 a1       	ldd	r19, Z+35	; 0x23
    1a08:	44 a1       	ldd	r20, Z+36	; 0x24
    1a0a:	55 a1       	ldd	r21, Z+37	; 0x25
    1a0c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a0e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a10:	a0 a1       	ldd	r26, Z+32	; 0x20
    1a12:	b1 a1       	ldd	r27, Z+33	; 0x21
    1a14:	28 1b       	sub	r18, r24
    1a16:	39 0b       	sbc	r19, r25
    1a18:	4a 0b       	sbc	r20, r26
    1a1a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	07 c0       	rjmp	.+14     	; 0x1a2e <Timebase_UpCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_UpCounter_Get_Period_Flag( window )){
    1a20:	21 15       	cp	r18, r1
    1a22:	31 05       	cpc	r19, r1
    1a24:	41 05       	cpc	r20, r1
    1a26:	51 05       	cpc	r21, r1
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <Timebase_UpCounter_Period_Value_Expired+0x50>
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	12 c0       	rjmp	.+36     	; 0x1a52 <Timebase_UpCounter_Period_Value_Expired+0x74>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	85 e1       	ldi	r24, 0x15	; 21
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	ac 01       	movw	r20, r24
    1a36:	64 9f       	mul	r22, r20
    1a38:	c0 01       	movw	r24, r0
    1a3a:	65 9f       	mul	r22, r21
    1a3c:	90 0d       	add	r25, r0
    1a3e:	74 9f       	mul	r23, r20
    1a40:	90 0d       	add	r25, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	c8 0f       	add	r28, r24
    1a46:	d9 1f       	adc	r29, r25
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	80 ff       	sbrs	r24, 0
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1a52:	82 2f       	mov	r24, r18
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1a5a:	1f 93       	push	r17
    1a5c:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == 1){
    1a5e:	0e 94 ef 0c 	call	0x19de	; 0x19de <Timebase_UpCounter_Period_Value_Expired>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	16 c0       	rjmp	.+44     	; 0x1a96 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    1a6a:	e0 91 93 01 	lds	r30, 0x0193
    1a6e:	f0 91 94 01 	lds	r31, 0x0194
    1a72:	21 2f       	mov	r18, r17
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	85 e1       	ldi	r24, 0x15	; 21
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	24 9f       	mul	r18, r20
    1a7e:	c0 01       	movw	r24, r0
    1a80:	25 9f       	mul	r18, r21
    1a82:	90 0d       	add	r25, r0
    1a84:	34 9f       	mul	r19, r20
    1a86:	90 0d       	add	r25, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	e8 0f       	add	r30, r24
    1a8c:	f9 1f       	adc	r31, r25
    1a8e:	81 89       	ldd	r24, Z+17	; 0x11
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	81 8b       	std	Z+17, r24	; 0x11
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1a96:	1f 91       	pop	r17
    1a98:	08 95       	ret

00001a9a <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <Timebase_UpCounter_Update>
  }
}
    1aa0:	08 95       	ret

00001aa2 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 49 0b 	call	0x1692	; 0x1692 <Timebase_UpCounter_Reset>
  }
}
    1aa8:	08 95       	ret

00001aaa <Timebase_DownCounter_Get_Status>:
#endif



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    1aaa:	e0 91 93 01 	lds	r30, 0x0193
    1aae:	f0 91 94 01 	lds	r31, 0x0194
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	2d e0       	ldi	r18, 0x0D	; 13
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	ac 01       	movw	r20, r24
    1aba:	42 9f       	mul	r20, r18
    1abc:	c0 01       	movw	r24, r0
    1abe:	43 9f       	mul	r20, r19
    1ac0:	90 0d       	add	r25, r0
    1ac2:	52 9f       	mul	r21, r18
    1ac4:	90 0d       	add	r25, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	e8 0f       	add	r30, r24
    1aca:	f9 1f       	adc	r31, r25
    1acc:	86 a1       	ldd	r24, Z+38	; 0x26
    1ace:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    1ad0:	8f 70       	andi	r24, 0x0F	; 15
    1ad2:	08 95       	ret

00001ad4 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1ad4:	e0 91 93 01 	lds	r30, 0x0193
    1ad8:	f0 91 94 01 	lds	r31, 0x0194
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	2d e0       	ldi	r18, 0x0D	; 13
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	ac 01       	movw	r20, r24
    1ae4:	42 9f       	mul	r20, r18
    1ae6:	c0 01       	movw	r24, r0
    1ae8:	43 9f       	mul	r20, r19
    1aea:	90 0d       	add	r25, r0
    1aec:	52 9f       	mul	r21, r18
    1aee:	90 0d       	add	r25, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	e8 0f       	add	r30, r24
    1af4:	f9 1f       	adc	r31, r25
    1af6:	6f 70       	andi	r22, 0x0F	; 15
    1af8:	66 0f       	add	r22, r22
    1afa:	86 a1       	ldd	r24, Z+38	; 0x26
    1afc:	81 7e       	andi	r24, 0xE1	; 225
    1afe:	86 2b       	or	r24, r22
    1b00:	86 a3       	std	Z+38, r24	; 0x26
}
    1b02:	08 95       	ret

00001b04 <Timebase_DownCounter_Get_Value>:

uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
    1b04:	e0 91 93 01 	lds	r30, 0x0193
    1b08:	f0 91 94 01 	lds	r31, 0x0194
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	2d e0       	ldi	r18, 0x0D	; 13
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	ac 01       	movw	r20, r24
    1b14:	42 9f       	mul	r20, r18
    1b16:	c0 01       	movw	r24, r0
    1b18:	43 9f       	mul	r20, r19
    1b1a:	90 0d       	add	r25, r0
    1b1c:	52 9f       	mul	r21, r18
    1b1e:	90 0d       	add	r25, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	e8 0f       	add	r30, r24
    1b24:	f9 1f       	adc	r31, r25
    1b26:	df 01       	movw	r26, r30
    1b28:	9b 96       	adiw	r26, 0x2b	; 43
    1b2a:	63 a5       	ldd	r22, Z+43	; 0x2b
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	7c 91       	ld	r23, X
    1b30:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->DownCounter[window].Value;
}
    1b32:	12 96       	adiw	r26, 0x02	; 2
    1b34:	8c 91       	ld	r24, X
    1b36:	12 97       	sbiw	r26, 0x02	; 2
    1b38:	13 96       	adiw	r26, 0x03	; 3
    1b3a:	9c 91       	ld	r25, X
    1b3c:	08 95       	ret

00001b3e <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1b3e:	e0 91 93 01 	lds	r30, 0x0193
    1b42:	f0 91 94 01 	lds	r31, 0x0194
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	2d e0       	ldi	r18, 0x0D	; 13
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	a2 9f       	mul	r26, r18
    1b50:	c0 01       	movw	r24, r0
    1b52:	a3 9f       	mul	r26, r19
    1b54:	90 0d       	add	r25, r0
    1b56:	b2 9f       	mul	r27, r18
    1b58:	90 0d       	add	r25, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	e8 0f       	add	r30, r24
    1b5e:	f9 1f       	adc	r31, r25
    1b60:	43 a7       	std	Z+43, r20	; 0x2b
    1b62:	54 a7       	std	Z+44, r21	; 0x2c
    1b64:	65 a7       	std	Z+45, r22	; 0x2d
    1b66:	76 a7       	std	Z+46, r23	; 0x2e
}
    1b68:	08 95       	ret

00001b6a <Timebase_DownCounter_Get_EndValue>:

uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    1b6a:	e0 91 93 01 	lds	r30, 0x0193
    1b6e:	f0 91 94 01 	lds	r31, 0x0194
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	2d e0       	ldi	r18, 0x0D	; 13
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	ac 01       	movw	r20, r24
    1b7a:	42 9f       	mul	r20, r18
    1b7c:	c0 01       	movw	r24, r0
    1b7e:	43 9f       	mul	r20, r19
    1b80:	90 0d       	add	r25, r0
    1b82:	52 9f       	mul	r21, r18
    1b84:	90 0d       	add	r25, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	e8 0f       	add	r30, r24
    1b8a:	f9 1f       	adc	r31, r25
    1b8c:	df 01       	movw	r26, r30
    1b8e:	97 96       	adiw	r26, 0x27	; 39
    1b90:	67 a1       	ldd	r22, Z+39	; 0x27
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	7c 91       	ld	r23, X
    1b96:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}
    1b98:	12 96       	adiw	r26, 0x02	; 2
    1b9a:	8c 91       	ld	r24, X
    1b9c:	12 97       	sbiw	r26, 0x02	; 2
    1b9e:	13 96       	adiw	r26, 0x03	; 3
    1ba0:	9c 91       	ld	r25, X
    1ba2:	08 95       	ret

00001ba4 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1ba4:	e0 91 93 01 	lds	r30, 0x0193
    1ba8:	f0 91 94 01 	lds	r31, 0x0194
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	2d e0       	ldi	r18, 0x0D	; 13
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	a2 9f       	mul	r26, r18
    1bb6:	c0 01       	movw	r24, r0
    1bb8:	a3 9f       	mul	r26, r19
    1bba:	90 0d       	add	r25, r0
    1bbc:	b2 9f       	mul	r27, r18
    1bbe:	90 0d       	add	r25, r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	e8 0f       	add	r30, r24
    1bc4:	f9 1f       	adc	r31, r25
    1bc6:	47 a3       	std	Z+39, r20	; 0x27
    1bc8:	50 a7       	std	Z+40, r21	; 0x28
    1bca:	61 a7       	std	Z+41, r22	; 0x29
    1bcc:	72 a7       	std	Z+42, r23	; 0x2a
}
    1bce:	08 95       	ret

00001bd0 <Timebase_DownCounter_Get_PeriodValue>:


uint32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    1bd0:	e0 91 93 01 	lds	r30, 0x0193
    1bd4:	f0 91 94 01 	lds	r31, 0x0194
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	2d e0       	ldi	r18, 0x0D	; 13
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	ac 01       	movw	r20, r24
    1be0:	42 9f       	mul	r20, r18
    1be2:	c0 01       	movw	r24, r0
    1be4:	43 9f       	mul	r20, r19
    1be6:	90 0d       	add	r25, r0
    1be8:	52 9f       	mul	r21, r18
    1bea:	90 0d       	add	r25, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	e8 0f       	add	r30, r24
    1bf0:	f9 1f       	adc	r31, r25
    1bf2:	df 01       	movw	r26, r30
    1bf4:	9f 96       	adiw	r26, 0x2f	; 47
    1bf6:	67 a5       	ldd	r22, Z+47	; 0x2f
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	7c 91       	ld	r23, X
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->DownCounter[window].PeriodValue;
}
    1bfe:	12 96       	adiw	r26, 0x02	; 2
    1c00:	8c 91       	ld	r24, X
    1c02:	12 97       	sbiw	r26, 0x02	; 2
    1c04:	13 96       	adiw	r26, 0x03	; 3
    1c06:	9c 91       	ld	r25, X
    1c08:	08 95       	ret

00001c0a <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  if(value < 0){
    Timebase->DownCounter[window].PeriodValue = 0;
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1c0a:	e0 91 93 01 	lds	r30, 0x0193
    1c0e:	f0 91 94 01 	lds	r31, 0x0194
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	2d e0       	ldi	r18, 0x0D	; 13
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	dc 01       	movw	r26, r24
    1c1a:	a2 9f       	mul	r26, r18
    1c1c:	c0 01       	movw	r24, r0
    1c1e:	a3 9f       	mul	r26, r19
    1c20:	90 0d       	add	r25, r0
    1c22:	b2 9f       	mul	r27, r18
    1c24:	90 0d       	add	r25, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	e8 0f       	add	r30, r24
    1c2a:	f9 1f       	adc	r31, r25
    1c2c:	47 a7       	std	Z+47, r20	; 0x2f
    1c2e:	50 ab       	std	Z+48, r21	; 0x30
    1c30:	61 ab       	std	Z+49, r22	; 0x31
    1c32:	72 ab       	std	Z+50, r23	; 0x32
  }
  
}
    1c34:	08 95       	ret

00001c36 <Timebase_DownCounter_Get_Period_Flag>:

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    1c36:	e0 91 93 01 	lds	r30, 0x0193
    1c3a:	f0 91 94 01 	lds	r31, 0x0194
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	2d e0       	ldi	r18, 0x0D	; 13
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	ac 01       	movw	r20, r24
    1c46:	42 9f       	mul	r20, r18
    1c48:	c0 01       	movw	r24, r0
    1c4a:	43 9f       	mul	r20, r19
    1c4c:	90 0d       	add	r25, r0
    1c4e:	52 9f       	mul	r21, r18
    1c50:	90 0d       	add	r25, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	e8 0f       	add	r30, r24
    1c56:	f9 1f       	adc	r31, r25
    1c58:	86 a1       	ldd	r24, Z+38	; 0x26
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
}
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	08 95       	ret

00001c5e <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1c5e:	e0 91 93 01 	lds	r30, 0x0193
    1c62:	f0 91 94 01 	lds	r31, 0x0194
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	2d e0       	ldi	r18, 0x0D	; 13
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	42 9f       	mul	r20, r18
    1c70:	c0 01       	movw	r24, r0
    1c72:	43 9f       	mul	r20, r19
    1c74:	90 0d       	add	r25, r0
    1c76:	52 9f       	mul	r21, r18
    1c78:	90 0d       	add	r25, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	e8 0f       	add	r30, r24
    1c7e:	f9 1f       	adc	r31, r25
    1c80:	86 a1       	ldd	r24, Z+38	; 0x26
    1c82:	81 60       	ori	r24, 0x01	; 1
    1c84:	86 a3       	std	Z+38, r24	; 0x26
}
    1c86:	08 95       	ret

00001c88 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1c88:	e0 91 93 01 	lds	r30, 0x0193
    1c8c:	f0 91 94 01 	lds	r31, 0x0194
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	2d e0       	ldi	r18, 0x0D	; 13
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	ac 01       	movw	r20, r24
    1c98:	42 9f       	mul	r20, r18
    1c9a:	c0 01       	movw	r24, r0
    1c9c:	43 9f       	mul	r20, r19
    1c9e:	90 0d       	add	r25, r0
    1ca0:	52 9f       	mul	r21, r18
    1ca2:	90 0d       	add	r25, r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	e8 0f       	add	r30, r24
    1ca8:	f9 1f       	adc	r31, r25
    1caa:	86 a1       	ldd	r24, Z+38	; 0x26
    1cac:	8e 7f       	andi	r24, 0xFE	; 254
    1cae:	86 a3       	std	Z+38, r24	; 0x26
}
    1cb0:	08 95       	ret

00001cb2 <Timebase_DownCounter_Reset>:
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1cb2:	e0 91 93 01 	lds	r30, 0x0193
    1cb6:	f0 91 94 01 	lds	r31, 0x0194
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	2d e0       	ldi	r18, 0x0D	; 13
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	42 9f       	mul	r20, r18
    1cc4:	c0 01       	movw	r24, r0
    1cc6:	43 9f       	mul	r20, r19
    1cc8:	90 0d       	add	r25, r0
    1cca:	52 9f       	mul	r21, r18
    1ccc:	90 0d       	add	r25, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	e8 0f       	add	r30, r24
    1cd2:	f9 1f       	adc	r31, r25
    1cd4:	17 a2       	std	Z+39, r1	; 0x27
    1cd6:	10 a6       	std	Z+40, r1	; 0x28
    1cd8:	11 a6       	std	Z+41, r1	; 0x29
    1cda:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1cdc:	13 a6       	std	Z+43, r1	; 0x2b
    1cde:	14 a6       	std	Z+44, r1	; 0x2c
    1ce0:	15 a6       	std	Z+45, r1	; 0x2d
    1ce2:	16 a6       	std	Z+46, r1	; 0x2e
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1ce4:	86 a1       	ldd	r24, Z+38	; 0x26
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1ce6:	80 7e       	andi	r24, 0xE0	; 224
    1ce8:	86 a3       	std	Z+38, r24	; 0x26
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, 0);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    1cea:	08 95       	ret

00001cec <Timebase_DownCounter_Clear_All_Flags>:
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1cec:	e0 91 93 01 	lds	r30, 0x0193
    1cf0:	f0 91 94 01 	lds	r31, 0x0194
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2d e0       	ldi	r18, 0x0D	; 13
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	ac 01       	movw	r20, r24
    1cfc:	42 9f       	mul	r20, r18
    1cfe:	c0 01       	movw	r24, r0
    1d00:	43 9f       	mul	r20, r19
    1d02:	90 0d       	add	r25, r0
    1d04:	52 9f       	mul	r21, r18
    1d06:	90 0d       	add	r25, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	e8 0f       	add	r30, r24
    1d0c:	f9 1f       	adc	r31, r25
    1d0e:	17 a2       	std	Z+39, r1	; 0x27
    1d10:	10 a6       	std	Z+40, r1	; 0x28
    1d12:	11 a6       	std	Z+41, r1	; 0x29
    1d14:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1d16:	13 a6       	std	Z+43, r1	; 0x2b
    1d18:	14 a6       	std	Z+44, r1	; 0x2c
    1d1a:	15 a6       	std	Z+45, r1	; 0x2d
    1d1c:	16 a6       	std	Z+46, r1	; 0x2e
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1d1e:	86 a1       	ldd	r24, Z+38	; 0x26
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1d20:	80 7e       	andi	r24, 0xE0	; 224
    1d22:	86 a3       	std	Z+38, r24	; 0x26
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    1d24:	08 95       	ret

00001d26 <Timebase_DownCounter_Start>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1d26:	e0 91 93 01 	lds	r30, 0x0193
    1d2a:	f0 91 94 01 	lds	r31, 0x0194
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 1){
    1d30:	2d e0       	ldi	r18, 0x0D	; 13
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	ac 01       	movw	r20, r24
    1d36:	42 9f       	mul	r20, r18
    1d38:	c0 01       	movw	r24, r0
    1d3a:	43 9f       	mul	r20, r19
    1d3c:	90 0d       	add	r25, r0
    1d3e:	52 9f       	mul	r21, r18
    1d40:	90 0d       	add	r25, r0
    1d42:	11 24       	eor	r1, r1
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	96 a1       	ldd	r25, Z+38	; 0x26
    1d4a:	89 2f       	mov	r24, r25
    1d4c:	86 95       	lsr	r24
    1d4e:	8f 70       	andi	r24, 0x0F	; 15
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <Timebase_DownCounter_Start+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1d54:	91 7e       	andi	r25, 0xE1	; 225
    1d56:	92 60       	ori	r25, 0x02	; 2
    1d58:	96 a3       	std	Z+38, r25	; 0x26
    1d5a:	08 95       	ret

00001d5c <Timebase_DownCounter_Stop>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1d5c:	e0 91 93 01 	lds	r30, 0x0193
    1d60:	f0 91 94 01 	lds	r31, 0x0194
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, 1); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 2){
    1d66:	2d e0       	ldi	r18, 0x0D	; 13
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	ac 01       	movw	r20, r24
    1d6c:	42 9f       	mul	r20, r18
    1d6e:	c0 01       	movw	r24, r0
    1d70:	43 9f       	mul	r20, r19
    1d72:	90 0d       	add	r25, r0
    1d74:	52 9f       	mul	r21, r18
    1d76:	90 0d       	add	r25, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	e8 0f       	add	r30, r24
    1d7c:	f9 1f       	adc	r31, r25
    1d7e:	96 a1       	ldd	r25, Z+38	; 0x26
    1d80:	89 2f       	mov	r24, r25
    1d82:	86 95       	lsr	r24
    1d84:	8f 70       	andi	r24, 0x0F	; 15
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <Timebase_DownCounter_Stop+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1d8a:	91 7e       	andi	r25, 0xE1	; 225
    1d8c:	94 60       	ori	r25, 0x04	; 4
    1d8e:	96 a3       	std	Z+38, r25	; 0x26
    1d90:	08 95       	ret

00001d92 <Timebase_DownCounter_Set_Securely>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1d92:	a0 91 93 01 	lds	r26, 0x0193
    1d96:	b0 91 94 01 	lds	r27, 0x0194
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, uint32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == 0 ){
    1d9c:	2d e0       	ldi	r18, 0x0D	; 13
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	82 9f       	mul	r24, r18
    1da2:	f0 01       	movw	r30, r0
    1da4:	83 9f       	mul	r24, r19
    1da6:	f0 0d       	add	r31, r0
    1da8:	92 9f       	mul	r25, r18
    1daa:	f0 0d       	add	r31, r0
    1dac:	11 24       	eor	r1, r1
    1dae:	ea 0f       	add	r30, r26
    1db0:	fb 1f       	adc	r31, r27
    1db2:	86 a1       	ldd	r24, Z+38	; 0x26
    1db4:	86 95       	lsr	r24
    1db6:	8f 70       	andi	r24, 0x0F	; 15
    1db8:	d9 f4       	brne	.+54     	; 0x1df0 <Timebase_DownCounter_Set_Securely+0x5e>
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1dba:	43 a7       	std	Z+43, r20	; 0x2b
    1dbc:	54 a7       	std	Z+44, r21	; 0x2c
    1dbe:	65 a7       	std	Z+45, r22	; 0x2d
    1dc0:	76 a7       	std	Z+46, r23	; 0x2e
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1dc2:	1c 96       	adiw	r26, 0x0c	; 12
    1dc4:	8d 91       	ld	r24, X+
    1dc6:	9d 91       	ld	r25, X+
    1dc8:	0d 90       	ld	r0, X+
    1dca:	bc 91       	ld	r27, X
    1dcc:	a0 2d       	mov	r26, r0
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1dce:	84 0f       	add	r24, r20
    1dd0:	95 1f       	adc	r25, r21
    1dd2:	a6 1f       	adc	r26, r22
    1dd4:	b7 1f       	adc	r27, r23
    1dd6:	87 a3       	std	Z+39, r24	; 0x27
    1dd8:	90 a7       	std	Z+40, r25	; 0x28
    1dda:	a1 a7       	std	Z+41, r26	; 0x29
    1ddc:	b2 a7       	std	Z+42, r27	; 0x2a
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 1){
    1dde:	96 a1       	ldd	r25, Z+38	; 0x26
    1de0:	89 2f       	mov	r24, r25
    1de2:	86 95       	lsr	r24
    1de4:	8f 70       	andi	r24, 0x0F	; 15
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <Timebase_DownCounter_Set_Securely+0x5e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1dea:	91 7e       	andi	r25, 0xE1	; 225
    1dec:	92 60       	ori	r25, 0x02	; 2
    1dee:	96 a3       	std	Z+38, r25	; 0x26
    1df0:	08 95       	ret

00001df2 <Timebase_DownCounter_Set_Forcefully>:
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, uint32_t value){
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1df6:	e0 91 93 01 	lds	r30, 0x0193
    1dfa:	f0 91 94 01 	lds	r31, 0x0194
    1dfe:	a8 2f       	mov	r26, r24
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	2d e0       	ldi	r18, 0x0D	; 13
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	e9 01       	movw	r28, r18
    1e08:	ac 9f       	mul	r26, r28
    1e0a:	90 01       	movw	r18, r0
    1e0c:	ad 9f       	mul	r26, r29
    1e0e:	30 0d       	add	r19, r0
    1e10:	bc 9f       	mul	r27, r28
    1e12:	30 0d       	add	r19, r0
    1e14:	11 24       	eor	r1, r1
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	17 a2       	std	Z+39, r1	; 0x27
    1e1c:	10 a6       	std	Z+40, r1	; 0x28
    1e1e:	11 a6       	std	Z+41, r1	; 0x29
    1e20:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1e22:	13 a6       	std	Z+43, r1	; 0x2b
    1e24:	14 a6       	std	Z+44, r1	; 0x2c
    1e26:	15 a6       	std	Z+45, r1	; 0x2d
    1e28:	16 a6       	std	Z+46, r1	; 0x2e
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1e2a:	96 a1       	ldd	r25, Z+38	; 0x26
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1e2c:	90 7e       	andi	r25, 0xE0	; 224
    1e2e:	96 a3       	std	Z+38, r25	; 0x26
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, uint32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    1e30:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Timebase_DownCounter_Set_Securely>
} 
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <Timebase_DownCounter_Update>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1e3a:	a0 91 93 01 	lds	r26, 0x0193
    1e3e:	b0 91 94 01 	lds	r27, 0x0194
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	2d e0       	ldi	r18, 0x0D	; 13
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	82 9f       	mul	r24, r18
    1e4a:	f0 01       	movw	r30, r0
    1e4c:	83 9f       	mul	r24, r19
    1e4e:	f0 0d       	add	r31, r0
    1e50:	92 9f       	mul	r25, r18
    1e52:	f0 0d       	add	r31, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	ea 0f       	add	r30, r26
    1e58:	fb 1f       	adc	r31, r27
    1e5a:	86 a1       	ldd	r24, Z+38	; 0x26
    1e5c:	86 95       	lsr	r24
    1e5e:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	19 f5       	brne	.+70     	; 0x1eaa <Timebase_DownCounter_Update+0x70>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1e64:	1c 96       	adiw	r26, 0x0c	; 12
    1e66:	2d 91       	ld	r18, X+
    1e68:	3d 91       	ld	r19, X+
    1e6a:	4d 91       	ld	r20, X+
    1e6c:	5c 91       	ld	r21, X
    1e6e:	1f 97       	sbiw	r26, 0x0f	; 15
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1e70:	87 a1       	ldd	r24, Z+39	; 0x27
    1e72:	90 a5       	ldd	r25, Z+40	; 0x28
    1e74:	a1 a5       	ldd	r26, Z+41	; 0x29
    1e76:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1e78:	82 1b       	sub	r24, r18
    1e7a:	93 0b       	sbc	r25, r19
    1e7c:	a4 0b       	sbc	r26, r20
    1e7e:	b5 0b       	sbc	r27, r21
    1e80:	83 a7       	std	Z+43, r24	; 0x2b
    1e82:	94 a7       	std	Z+44, r25	; 0x2c
    1e84:	a5 a7       	std	Z+45, r26	; 0x2d
    1e86:	b6 a7       	std	Z+46, r27	; 0x2e
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	a1 05       	cpc	r26, r1
    1e8c:	b1 05       	cpc	r27, r1
    1e8e:	09 f5       	brne	.+66     	; 0x1ed2 <Timebase_DownCounter_Update+0x98>
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1e90:	17 a2       	std	Z+39, r1	; 0x27
    1e92:	10 a6       	std	Z+40, r1	; 0x28
    1e94:	11 a6       	std	Z+41, r1	; 0x29
    1e96:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1e98:	13 a6       	std	Z+43, r1	; 0x2b
    1e9a:	14 a6       	std	Z+44, r1	; 0x2c
    1e9c:	15 a6       	std	Z+45, r1	; 0x2d
    1e9e:	16 a6       	std	Z+46, r1	; 0x2e
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1ea0:	86 a1       	ldd	r24, Z+38	; 0x26
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1ea2:	80 7e       	andi	r24, 0xE0	; 224
    1ea4:	88 60       	ori	r24, 0x08	; 8
    1ea6:	86 a3       	std	Z+38, r24	; 0x26
    1ea8:	08 95       	ret
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, 4);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == 2){ 
    1eaa:	82 30       	cpi	r24, 0x02	; 2
    1eac:	91 f4       	brne	.+36     	; 0x1ed2 <Timebase_DownCounter_Update+0x98>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1eae:	1c 96       	adiw	r26, 0x0c	; 12
    1eb0:	2d 91       	ld	r18, X+
    1eb2:	3d 91       	ld	r19, X+
    1eb4:	4d 91       	ld	r20, X+
    1eb6:	5c 91       	ld	r21, X
    1eb8:	1f 97       	sbiw	r26, 0x0f	; 15
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1eba:	83 a5       	ldd	r24, Z+43	; 0x2b
    1ebc:	94 a5       	ldd	r25, Z+44	; 0x2c
    1ebe:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1ec0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1ec2:	82 0f       	add	r24, r18
    1ec4:	93 1f       	adc	r25, r19
    1ec6:	a4 1f       	adc	r26, r20
    1ec8:	b5 1f       	adc	r27, r21
    1eca:	87 a3       	std	Z+39, r24	; 0x27
    1ecc:	90 a7       	std	Z+40, r25	; 0x28
    1ece:	a1 a7       	std	Z+41, r26	; 0x29
    1ed0:	b2 a7       	std	Z+42, r27	; 0x2a
    1ed2:	08 95       	ret

00001ed4 <Timebase_DownCounter_Expired>:
  } else if (Timebase_DownCounter_Get_Status( window ) == 2){ 
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	e0 91 93 01 	lds	r30, 0x0193
    1eda:	f0 91 94 01 	lds	r31, 0x0194
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	2d e0       	ldi	r18, 0x0D	; 13
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	62 9f       	mul	r22, r18
    1ee8:	c0 01       	movw	r24, r0
    1eea:	63 9f       	mul	r22, r19
    1eec:	90 0d       	add	r25, r0
    1eee:	72 9f       	mul	r23, r18
    1ef0:	90 0d       	add	r25, r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	e8 0f       	add	r30, r24
    1ef6:	f9 1f       	adc	r31, r25
    1ef8:	86 a1       	ldd	r24, Z+38	; 0x26
    1efa:	86 95       	lsr	r24
    1efc:	8f 70       	andi	r24, 0x0F	; 15
    1efe:	84 30       	cpi	r24, 0x04	; 4
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <Timebase_DownCounter_Expired+0x30>
    1f02:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == 4){
    return 1;
  }else{
    return 0;
  }
}
    1f04:	84 2f       	mov	r24, r20
    1f06:	08 95       	ret

00001f08 <Timebase_DownCounter_Expired_Event>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1f08:	e0 91 93 01 	lds	r30, 0x0193
    1f0c:	f0 91 94 01 	lds	r31, 0x0194
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == 4){
    1f12:	2d e0       	ldi	r18, 0x0D	; 13
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	ac 01       	movw	r20, r24
    1f18:	42 9f       	mul	r20, r18
    1f1a:	c0 01       	movw	r24, r0
    1f1c:	43 9f       	mul	r20, r19
    1f1e:	90 0d       	add	r25, r0
    1f20:	52 9f       	mul	r21, r18
    1f22:	90 0d       	add	r25, r0
    1f24:	11 24       	eor	r1, r1
    1f26:	e8 0f       	add	r30, r24
    1f28:	f9 1f       	adc	r31, r25
    1f2a:	86 a1       	ldd	r24, Z+38	; 0x26
    1f2c:	86 95       	lsr	r24
    1f2e:	8f 70       	andi	r24, 0x0F	; 15
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	11 f0       	breq	.+4      	; 0x1f38 <Timebase_DownCounter_Expired_Event+0x30>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	08 95       	ret
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1f38:	17 a2       	std	Z+39, r1	; 0x27
    1f3a:	10 a6       	std	Z+40, r1	; 0x28
    1f3c:	11 a6       	std	Z+41, r1	; 0x29
    1f3e:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1f40:	13 a6       	std	Z+43, r1	; 0x2b
    1f42:	14 a6       	std	Z+44, r1	; 0x2c
    1f44:	15 a6       	std	Z+45, r1	; 0x2d
    1f46:	16 a6       	std	Z+46, r1	; 0x2e
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1f48:	86 a1       	ldd	r24, Z+38	; 0x26
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1f4a:	80 7e       	andi	r24, 0xE0	; 224
    1f4c:	86 a3       	std	Z+38, r24	; 0x26
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1f50:	08 95       	ret

00001f52 <Timebase_DownCounter_Set_Period_Value_Securely>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
    1f52:	e0 91 93 01 	lds	r30, 0x0193
    1f56:	f0 91 94 01 	lds	r31, 0x0194
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, uint32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    1f5c:	2d e0       	ldi	r18, 0x0D	; 13
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	dc 01       	movw	r26, r24
    1f62:	a2 9f       	mul	r26, r18
    1f64:	c0 01       	movw	r24, r0
    1f66:	a3 9f       	mul	r26, r19
    1f68:	90 0d       	add	r25, r0
    1f6a:	b2 9f       	mul	r27, r18
    1f6c:	90 0d       	add	r25, r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	e8 0f       	add	r30, r24
    1f72:	f9 1f       	adc	r31, r25
    1f74:	86 a1       	ldd	r24, Z+38	; 0x26
    1f76:	80 fd       	sbrc	r24, 0
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <Timebase_DownCounter_Set_Period_Value_Securely+0x46>

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  if(value < 0){
    Timebase->DownCounter[window].PeriodValue = 0;
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1f7a:	83 a5       	ldd	r24, Z+43	; 0x2b
    1f7c:	94 a5       	ldd	r25, Z+44	; 0x2c
    1f7e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1f80:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1f82:	84 1b       	sub	r24, r20
    1f84:	95 0b       	sbc	r25, r21
    1f86:	a6 0b       	sbc	r26, r22
    1f88:	b7 0b       	sbc	r27, r23
    1f8a:	87 a7       	std	Z+47, r24	; 0x2f
    1f8c:	90 ab       	std	Z+48, r25	; 0x30
    1f8e:	a1 ab       	std	Z+49, r26	; 0x31
    1f90:	b2 ab       	std	Z+50, r27	; 0x32
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1f92:	86 a1       	ldd	r24, Z+38	; 0x26
    1f94:	81 60       	ori	r24, 0x01	; 1
    1f96:	86 a3       	std	Z+38, r24	; 0x26
    1f98:	08 95       	ret

00001f9a <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
    1f9a:	e0 91 93 01 	lds	r30, 0x0193
    1f9e:	f0 91 94 01 	lds	r31, 0x0194
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

uint32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1fa4:	2d e0       	ldi	r18, 0x0D	; 13
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	ac 01       	movw	r20, r24
    1faa:	42 9f       	mul	r20, r18
    1fac:	c0 01       	movw	r24, r0
    1fae:	43 9f       	mul	r20, r19
    1fb0:	90 0d       	add	r25, r0
    1fb2:	52 9f       	mul	r21, r18
    1fb4:	90 0d       	add	r25, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	e8 0f       	add	r30, r24
    1fba:	f9 1f       	adc	r31, r25
    1fbc:	23 a5       	ldd	r18, Z+43	; 0x2b
    1fbe:	34 a5       	ldd	r19, Z+44	; 0x2c
    1fc0:	45 a5       	ldd	r20, Z+45	; 0x2d
    1fc2:	56 a5       	ldd	r21, Z+46	; 0x2e
    1fc4:	87 a5       	ldd	r24, Z+47	; 0x2f
    1fc6:	90 a9       	ldd	r25, Z+48	; 0x30
    1fc8:	a1 a9       	ldd	r26, Z+49	; 0x31
    1fca:	b2 a9       	ldd	r27, Z+50	; 0x32
    1fcc:	28 1b       	sub	r18, r24
    1fce:	39 0b       	sbc	r19, r25
    1fd0:	4a 0b       	sbc	r20, r26
    1fd2:	5b 0b       	sbc	r21, r27
    1fd4:	57 ff       	sbrs	r21, 7
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <Timebase_DownCounter_Get_Remaining_Period_Value+0x46>
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1fe0:	b9 01       	movw	r22, r18
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	08 95       	ret

00001fe6 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
    1fea:	c0 91 93 01 	lds	r28, 0x0193
    1fee:	d0 91 94 01 	lds	r29, 0x0194
    1ff2:	68 2f       	mov	r22, r24
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

uint32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1ff6:	8d e0       	ldi	r24, 0x0D	; 13
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	68 9f       	mul	r22, r24
    1ffc:	f0 01       	movw	r30, r0
    1ffe:	69 9f       	mul	r22, r25
    2000:	f0 0d       	add	r31, r0
    2002:	78 9f       	mul	r23, r24
    2004:	f0 0d       	add	r31, r0
    2006:	11 24       	eor	r1, r1
    2008:	ec 0f       	add	r30, r28
    200a:	fd 1f       	adc	r31, r29
    200c:	23 a5       	ldd	r18, Z+43	; 0x2b
    200e:	34 a5       	ldd	r19, Z+44	; 0x2c
    2010:	45 a5       	ldd	r20, Z+45	; 0x2d
    2012:	56 a5       	ldd	r21, Z+46	; 0x2e
    2014:	87 a5       	ldd	r24, Z+47	; 0x2f
    2016:	90 a9       	ldd	r25, Z+48	; 0x30
    2018:	a1 a9       	ldd	r26, Z+49	; 0x31
    201a:	b2 a9       	ldd	r27, Z+50	; 0x32
    201c:	28 1b       	sub	r18, r24
    201e:	39 0b       	sbc	r19, r25
    2020:	4a 0b       	sbc	r20, r26
    2022:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2024:	57 fd       	sbrc	r21, 7
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <Timebase_DownCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    2028:	21 15       	cp	r18, r1
    202a:	31 05       	cpc	r19, r1
    202c:	41 05       	cpc	r20, r1
    202e:	51 05       	cpc	r21, r1
    2030:	11 f0       	breq	.+4      	; 0x2036 <Timebase_DownCounter_Period_Value_Expired+0x50>
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	12 c0       	rjmp	.+36     	; 0x205a <Timebase_DownCounter_Period_Value_Expired+0x74>
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	8d e0       	ldi	r24, 0x0D	; 13
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	ac 01       	movw	r20, r24
    203e:	64 9f       	mul	r22, r20
    2040:	c0 01       	movw	r24, r0
    2042:	65 9f       	mul	r22, r21
    2044:	90 0d       	add	r25, r0
    2046:	74 9f       	mul	r23, r20
    2048:	90 0d       	add	r25, r0
    204a:	11 24       	eor	r1, r1
    204c:	c8 0f       	add	r28, r24
    204e:	d9 1f       	adc	r29, r25
    2050:	8e a1       	ldd	r24, Y+38	; 0x26
    2052:	80 ff       	sbrs	r24, 0
    2054:	21 e0       	ldi	r18, 0x01	; 1
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    205a:	82 2f       	mov	r24, r18
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2062:	1f 93       	push	r17
    2064:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    2066:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Timebase_DownCounter_Period_Value_Expired>
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	11 f0       	breq	.+4      	; 0x2072 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	16 c0       	rjmp	.+44     	; 0x209e <Timebase_DownCounter_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    2072:	e0 91 93 01 	lds	r30, 0x0193
    2076:	f0 91 94 01 	lds	r31, 0x0194
    207a:	21 2f       	mov	r18, r17
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	8d e0       	ldi	r24, 0x0D	; 13
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	ac 01       	movw	r20, r24
    2084:	24 9f       	mul	r18, r20
    2086:	c0 01       	movw	r24, r0
    2088:	25 9f       	mul	r18, r21
    208a:	90 0d       	add	r25, r0
    208c:	34 9f       	mul	r19, r20
    208e:	90 0d       	add	r25, r0
    2090:	11 24       	eor	r1, r1
    2092:	e8 0f       	add	r30, r24
    2094:	f9 1f       	adc	r31, r25
    2096:	86 a1       	ldd	r24, Z+38	; 0x26
    2098:	8e 7f       	andi	r24, 0xFE	; 254
    209a:	86 a3       	std	Z+38, r24	; 0x26
    209c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    209e:	1f 91       	pop	r17
    20a0:	08 95       	ret

000020a2 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <Timebase_DownCounter_Update>
  }
}
    20a8:	08 95       	ret

000020aa <Timebase_DownCounter_Reset_All>:
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    20aa:	e0 91 93 01 	lds	r30, 0x0193
    20ae:	f0 91 94 01 	lds	r31, 0x0194
    20b2:	17 a2       	std	Z+39, r1	; 0x27
    20b4:	10 a6       	std	Z+40, r1	; 0x28
    20b6:	11 a6       	std	Z+41, r1	; 0x29
    20b8:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    20ba:	13 a6       	std	Z+43, r1	; 0x2b
    20bc:	14 a6       	std	Z+44, r1	; 0x2c
    20be:	15 a6       	std	Z+45, r1	; 0x2d
    20c0:	16 a6       	std	Z+46, r1	; 0x2e
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    20c2:	86 a1       	ldd	r24, Z+38	; 0x26
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    20c4:	80 7e       	andi	r24, 0xE0	; 224
    20c6:	86 a3       	std	Z+38, r24	; 0x26

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    20c8:	08 95       	ret

000020ca <Timebase_Reset>:



void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    20ca:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    20ce:	0e 94 55 10 	call	0x20aa	; 0x20aa <Timebase_DownCounter_Reset_All>
  #endif
}
    20d2:	08 95       	ret

000020d4 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    20da:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    20de:	c8 01       	movw	r24, r16
    20e0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <Timebase_Timer_Config>
  Timebase_Reset();
    20e4:	0e 94 65 10 	call	0x20ca	; 0x20ca <Timebase_Reset>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    20e8:	e0 91 93 01 	lds	r30, 0x0193
    20ec:	f0 91 94 01 	lds	r31, 0x0194
    20f0:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
    20f2:	8f 33       	cpi	r24, 0x3F	; 63
    20f4:	18 f4       	brcc	.+6      	; 0x20fc <Timebase_Init+0x28>
    Timebase->ActiveTokens+=1;
    20f6:	80 89       	ldd	r24, Z+16	; 0x10
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	80 8b       	std	Z+16, r24	; 0x10
  Timebase_Timer_Config(UpdateRateHz);
  Timebase_Reset();
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
}
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
    2102:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <Timebase_UpCounter_Update_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    2106:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Timebase_DownCounter_Update_All>
  #endif
}
    210a:	08 95       	ret

0000210c <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
  Timebase->Time.SubSeconds++;
    2110:	c0 91 93 01 	lds	r28, 0x0193
    2114:	d0 91 94 01 	lds	r29, 0x0194
    2118:	88 85       	ldd	r24, Y+8	; 0x08
    211a:	99 85       	ldd	r25, Y+9	; 0x09
    211c:	aa 85       	ldd	r26, Y+10	; 0x0a
    211e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	a1 1d       	adc	r26, r1
    2124:	b1 1d       	adc	r27, r1
    2126:	88 87       	std	Y+8, r24	; 0x08
    2128:	99 87       	std	Y+9, r25	; 0x09
    212a:	aa 87       	std	Y+10, r26	; 0x0a
    212c:	bb 87       	std	Y+11, r27	; 0x0b
  TCNT2  = Timebase->Time.OVFUpdateValue;
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	80 93 b2 00 	sts	0x00B2, r24
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    2134:	68 85       	ldd	r22, Y+8	; 0x08
    2136:	79 85       	ldd	r23, Y+9	; 0x09
    2138:	8a 85       	ldd	r24, Y+10	; 0x0a
    213a:	9b 85       	ldd	r25, Y+11	; 0x0b
    213c:	29 81       	ldd	r18, Y+1	; 0x01
    213e:	3a 81       	ldd	r19, Y+2	; 0x02
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
    2148:	61 15       	cp	r22, r1
    214a:	71 05       	cpc	r23, r1
    214c:	81 05       	cpc	r24, r1
    214e:	91 05       	cpc	r25, r1
    2150:	91 f4       	brne	.+36     	; 0x2176 <Timebase_ISR_Executables+0x6a>
    Timebase->Time.Seconds++;
    2152:	8c 85       	ldd	r24, Y+12	; 0x0c
    2154:	9d 85       	ldd	r25, Y+13	; 0x0d
    2156:	ae 85       	ldd	r26, Y+14	; 0x0e
    2158:	bf 85       	ldd	r27, Y+15	; 0x0f
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	a1 1d       	adc	r26, r1
    215e:	b1 1d       	adc	r27, r1
    2160:	8c 87       	std	Y+12, r24	; 0x0c
    2162:	9d 87       	std	Y+13, r25	; 0x0d
    2164:	ae 87       	std	Y+14, r26	; 0x0e
    2166:	bf 87       	std	Y+15, r27	; 0x0f


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    2168:	88 89       	ldd	r24, Y+16	; 0x10
  Timebase->Time.SubSeconds++;
  TCNT2  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
    216a:	88 23       	and	r24, r24
    216c:	21 f4       	brne	.+8      	; 0x2176 <Timebase_ISR_Executables+0x6a>
      Timebase->Time.SubSeconds = 0;
    216e:	18 86       	std	Y+8, r1	; 0x08
    2170:	19 86       	std	Y+9, r1	; 0x09
    2172:	1a 86       	std	Y+10, r1	; 0x0a
    2174:	1b 86       	std	Y+11, r1	; 0x0b
    }
	#endif
  }
}
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <__vector_16>:

ISR(TIMER0_OVF_vect){
    217c:	1f 92       	push	r1
    217e:	0f 92       	push	r0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	0f 92       	push	r0
    2184:	11 24       	eor	r1, r1
    2186:	2f 93       	push	r18
    2188:	3f 93       	push	r19
    218a:	4f 93       	push	r20
    218c:	5f 93       	push	r21
    218e:	6f 93       	push	r22
    2190:	7f 93       	push	r23
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	af 93       	push	r26
    2198:	bf 93       	push	r27
    219a:	ef 93       	push	r30
    219c:	ff 93       	push	r31
  Timebase_ISR_Executables();
    219e:	0e 94 86 10 	call	0x210c	; 0x210c <Timebase_ISR_Executables>
    21a2:	ff 91       	pop	r31
    21a4:	ef 91       	pop	r30
    21a6:	bf 91       	pop	r27
    21a8:	af 91       	pop	r26
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	7f 91       	pop	r23
    21b0:	6f 91       	pop	r22
    21b2:	5f 91       	pop	r21
    21b4:	4f 91       	pop	r20
    21b6:	3f 91       	pop	r19
    21b8:	2f 91       	pop	r18
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	0f 90       	pop	r0
    21c0:	1f 90       	pop	r1
    21c2:	18 95       	reti

000021c4 <__mulsi3>:
    21c4:	62 9f       	mul	r22, r18
    21c6:	d0 01       	movw	r26, r0
    21c8:	73 9f       	mul	r23, r19
    21ca:	f0 01       	movw	r30, r0
    21cc:	82 9f       	mul	r24, r18
    21ce:	e0 0d       	add	r30, r0
    21d0:	f1 1d       	adc	r31, r1
    21d2:	64 9f       	mul	r22, r20
    21d4:	e0 0d       	add	r30, r0
    21d6:	f1 1d       	adc	r31, r1
    21d8:	92 9f       	mul	r25, r18
    21da:	f0 0d       	add	r31, r0
    21dc:	83 9f       	mul	r24, r19
    21de:	f0 0d       	add	r31, r0
    21e0:	74 9f       	mul	r23, r20
    21e2:	f0 0d       	add	r31, r0
    21e4:	65 9f       	mul	r22, r21
    21e6:	f0 0d       	add	r31, r0
    21e8:	99 27       	eor	r25, r25
    21ea:	72 9f       	mul	r23, r18
    21ec:	b0 0d       	add	r27, r0
    21ee:	e1 1d       	adc	r30, r1
    21f0:	f9 1f       	adc	r31, r25
    21f2:	63 9f       	mul	r22, r19
    21f4:	b0 0d       	add	r27, r0
    21f6:	e1 1d       	adc	r30, r1
    21f8:	f9 1f       	adc	r31, r25
    21fa:	bd 01       	movw	r22, r26
    21fc:	cf 01       	movw	r24, r30
    21fe:	11 24       	eor	r1, r1
    2200:	08 95       	ret

00002202 <__udivmodsi4>:
    2202:	a1 e2       	ldi	r26, 0x21	; 33
    2204:	1a 2e       	mov	r1, r26
    2206:	aa 1b       	sub	r26, r26
    2208:	bb 1b       	sub	r27, r27
    220a:	fd 01       	movw	r30, r26
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <__udivmodsi4_ep>

0000220e <__udivmodsi4_loop>:
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	ee 1f       	adc	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	a2 17       	cp	r26, r18
    2218:	b3 07       	cpc	r27, r19
    221a:	e4 07       	cpc	r30, r20
    221c:	f5 07       	cpc	r31, r21
    221e:	20 f0       	brcs	.+8      	; 0x2228 <__udivmodsi4_ep>
    2220:	a2 1b       	sub	r26, r18
    2222:	b3 0b       	sbc	r27, r19
    2224:	e4 0b       	sbc	r30, r20
    2226:	f5 0b       	sbc	r31, r21

00002228 <__udivmodsi4_ep>:
    2228:	66 1f       	adc	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	88 1f       	adc	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	1a 94       	dec	r1
    2232:	69 f7       	brne	.-38     	; 0x220e <__udivmodsi4_loop>
    2234:	60 95       	com	r22
    2236:	70 95       	com	r23
    2238:	80 95       	com	r24
    223a:	90 95       	com	r25
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	bd 01       	movw	r22, r26
    2242:	cf 01       	movw	r24, r30
    2244:	08 95       	ret

00002246 <__divmodsi4>:
    2246:	97 fb       	bst	r25, 7
    2248:	09 2e       	mov	r0, r25
    224a:	05 26       	eor	r0, r21
    224c:	0e d0       	rcall	.+28     	; 0x226a <__divmodsi4_neg1>
    224e:	57 fd       	sbrc	r21, 7
    2250:	04 d0       	rcall	.+8      	; 0x225a <__divmodsi4_neg2>
    2252:	d7 df       	rcall	.-82     	; 0x2202 <__udivmodsi4>
    2254:	0a d0       	rcall	.+20     	; 0x226a <__divmodsi4_neg1>
    2256:	00 1c       	adc	r0, r0
    2258:	38 f4       	brcc	.+14     	; 0x2268 <__divmodsi4_exit>

0000225a <__divmodsi4_neg2>:
    225a:	50 95       	com	r21
    225c:	40 95       	com	r20
    225e:	30 95       	com	r19
    2260:	21 95       	neg	r18
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	4f 4f       	sbci	r20, 0xFF	; 255
    2266:	5f 4f       	sbci	r21, 0xFF	; 255

00002268 <__divmodsi4_exit>:
    2268:	08 95       	ret

0000226a <__divmodsi4_neg1>:
    226a:	f6 f7       	brtc	.-4      	; 0x2268 <__divmodsi4_exit>
    226c:	90 95       	com	r25
    226e:	80 95       	com	r24
    2270:	70 95       	com	r23
    2272:	61 95       	neg	r22
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	08 95       	ret

0000227c <_exit>:
    227c:	f8 94       	cli

0000227e <__stop_program>:
    227e:	ff cf       	rjmp	.-2      	; 0x227e <__stop_program>
