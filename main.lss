
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000014de  00001572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800122  00800122  00001594  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000087e  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d09  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00003b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001553  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  00005820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000870  00000000  00000000  00005e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5d  00000000  00000000  000066c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000711d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	ee ed       	ldi	r30, 0xDE	; 222
      aa:	f4 e1       	ldi	r31, 0x14	; 20
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a7 38       	cpi	r26, 0x87	; 135
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include <math.h>
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29

  DDRD  |= (1<<4);
      d8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      da:	5c 98       	cbi	0x0b, 4	; 11
  
  I2C_Init();
      dc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <I2C_Init>
  debug_init();
      e0:	0e 94 c0 06 	call	0xd80	; 0xd80 <debug_init>
  debug_tx_text_nl("Debug Started");
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	0e 94 83 05 	call	0xb06	; 0xb06 <debug_tx_text_nl>
  I2C_Set_Mode_Active();
      ec:	0e 94 2e 02 	call	0x45c	; 0x45c <I2C_Set_Mode_Active>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f0:	c0 e7       	ldi	r28, 0x70	; 112
      f2:	d7 e1       	ldi	r29, 0x17	; 23
  
  while(1){
    
    debug_tx_number_cm(I2C_Read_Pitch_Angle());
      f4:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_Read_Pitch_Angle>
      f8:	aa 27       	eor	r26, r26
      fa:	97 fd       	sbrc	r25, 7
      fc:	a0 95       	com	r26
      fe:	ba 2f       	mov	r27, r26
     100:	bc 01       	movw	r22, r24
     102:	cd 01       	movw	r24, r26
     104:	0e 94 0a 06 	call	0xc14	; 0xc14 <debug_tx_number_cm>
	debug_tx_number_cm(I2C_Read_Roll_Angle());
     108:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <I2C_Read_Roll_Angle>
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	bc 01       	movw	r22, r24
     116:	cd 01       	movw	r24, r26
     118:	0e 94 0a 06 	call	0xc14	; 0xc14 <debug_tx_number_cm>
	
	debug_tx_nl();
     11c:	0e 94 61 05 	call	0xac2	; 0xac2 <debug_tx_nl>
     120:	ce 01       	movw	r24, r28
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <main+0x4e>
     126:	e6 cf       	rjmp	.-52     	; 0xf4 <main+0x20>

00000128 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     128:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     12c:	10 92 23 01 	sts	0x0123, r1
}
     130:	08 95       	ret

00000132 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     132:	80 e5       	ldi	r24, 0x50	; 80
     134:	8a 95       	dec	r24
     136:	f1 f7       	brne	.-4      	; 0x134 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     138:	08 95       	ret

0000013a <I2C_Bit_Delay>:
     13a:	80 ea       	ldi	r24, 0xA0	; 160
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     140:	08 95       	ret

00000142 <I2C_Guard_Delay>:
     142:	88 e0       	ldi	r24, 0x08	; 8
     144:	8a 95       	dec	r24
     146:	f1 f7       	brne	.-4      	; 0x144 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     148:	08 95       	ret

0000014a <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	11 f4       	brne	.+4      	; 0x152 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     14e:	3c 9a       	sbi	0x07, 4	; 7
     150:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     152:	3c 98       	cbi	0x07, 4	; 7
     154:	08 95       	ret

00000156 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	11 f4       	brne	.+4      	; 0x15e <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     15a:	44 9a       	sbi	0x08, 4	; 8
     15c:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     15e:	44 98       	cbi	0x08, 4	; 8
     160:	08 95       	ret

00000162 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	19 f4       	brne	.+6      	; 0x16c <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     166:	44 9a       	sbi	0x08, 4	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     168:	3c 98       	cbi	0x07, 4	; 7
     16a:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     16c:	44 98       	cbi	0x08, 4	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     16e:	3c 9a       	sbi	0x07, 4	; 7
     170:	08 95       	ret

00000172 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     172:	86 b1       	in	r24, 0x06	; 6
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	24 e0       	ldi	r18, 0x04	; 4
     178:	96 95       	lsr	r25
     17a:	87 95       	ror	r24
     17c:	2a 95       	dec	r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     180:	81 70       	andi	r24, 0x01	; 1
     182:	08 95       	ret

00000184 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	11 f4       	brne	.+4      	; 0x18c <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     188:	3d 9a       	sbi	0x07, 5	; 7
     18a:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     18c:	3d 98       	cbi	0x07, 5	; 7
     18e:	08 95       	ret

00000190 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	11 f4       	brne	.+4      	; 0x198 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     194:	45 9a       	sbi	0x08, 5	; 8
     196:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     198:	45 98       	cbi	0x08, 5	; 8
     19a:	08 95       	ret

0000019c <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	19 f4       	brne	.+6      	; 0x1a6 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1a0:	45 9a       	sbi	0x08, 5	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1a2:	3d 98       	cbi	0x07, 5	; 7
     1a4:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1a6:	45 98       	cbi	0x08, 5	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1a8:	3d 9a       	sbi	0x07, 5	; 7
     1aa:	08 95       	ret

000001ac <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     1ac:	86 b1       	in	r24, 0x06	; 6
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	35 e0       	ldi	r19, 0x05	; 5
     1b2:	96 95       	lsr	r25
     1b4:	87 95       	ror	r24
     1b6:	3a 95       	dec	r19
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1ba:	81 70       	andi	r24, 0x01	; 1
     1bc:	08 95       	ret

000001be <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1be:	3c 98       	cbi	0x07, 4	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
}
     1c6:	08 95       	ret

000001c8 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1c8:	3d 98       	cbi	0x07, 5	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
}
     1d0:	08 95       	ret

000001d2 <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1d2:	3c 9a       	sbi	0x07, 4	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1d4:	3d 98       	cbi	0x07, 5	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
}
     1e2:	08 95       	ret

000001e4 <I2C_Start>:

void I2C_Start(void){
     1e4:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     1f2:	10 e5       	ldi	r17, 0x50	; 80
     1f4:	81 2f       	mov	r24, r17
     1f6:	8a 95       	dec	r24
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     200:	81 2f       	mov	r24, r17
     202:	8a 95       	dec	r24
     204:	f1 f7       	brne	.-4      	; 0x202 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     20c:	1a 95       	dec	r17
     20e:	f1 f7       	brne	.-4      	; 0x20c <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     210:	1f 91       	pop	r17
     212:	08 95       	ret

00000214 <I2C_Stop>:

void I2C_Stop(void){
     214:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     222:	10 e5       	ldi	r17, 0x50	; 80
     224:	81 2f       	mov	r24, r17
     226:	8a 95       	dec	r24
     228:	f1 f7       	brne	.-4      	; 0x226 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     230:	81 2f       	mov	r24, r17
     232:	8a 95       	dec	r24
     234:	f1 f7       	brne	.-4      	; 0x232 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     23c:	1a 95       	dec	r17
     23e:	f1 f7       	brne	.-4      	; 0x23c <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     240:	1f 91       	pop	r17
     242:	08 95       	ret

00000244 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	08 2f       	mov	r16, r24
     24e:	10 e0       	ldi	r17, 0x00	; 0
     250:	50 e5       	ldi	r21, 0x50	; 80
     252:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     254:	48 e0       	ldi	r20, 0x08	; 8
     256:	e4 2e       	mov	r14, r20
     258:	07 ff       	sbrs	r16, 7
     25a:	02 c0       	rjmp	.+4      	; 0x260 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	01 c0       	rjmp	.+2      	; 0x262 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     266:	8f 2d       	mov	r24, r15
     268:	8a 95       	dec	r24
     26a:	f1 f7       	brne	.-4      	; 0x268 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     272:	8f 2d       	mov	r24, r15
     274:	8a 95       	dec	r24
     276:	f1 f7       	brne	.-4      	; 0x274 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     27e:	8e 2d       	mov	r24, r14
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     284:	1f 5f       	subi	r17, 0xFF	; 255
     286:	18 30       	cpi	r17, 0x08	; 8
     288:	11 f0       	breq	.+4      	; 0x28e <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     28a:	00 0f       	add	r16, r16
     28c:	e5 cf       	rjmp	.-54     	; 0x258 <I2C_Data_Send+0x14>
  }
}
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	08 95       	ret

00000298 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     2a4:	10 e0       	ldi	r17, 0x00	; 0
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	60 e5       	ldi	r22, 0x50	; 80
     2aa:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     2ac:	11 0f       	add	r17, r17
     2ae:	8f 2d       	mov	r24, r15
     2b0:	8a 95       	dec	r24
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     2ba:	35 99       	sbic	0x06, 5	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     2bc:	11 60       	ori	r17, 0x01	; 1
     2be:	8f 2d       	mov	r24, r15
     2c0:	8a 95       	dec	r24
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     2ca:	0f 5f       	subi	r16, 0xFF	; 255
     2cc:	08 30       	cpi	r16, 0x08	; 8
     2ce:	71 f7       	brne	.-36     	; 0x2ac <I2C_Data_Receive+0x14>
     2d0:	80 e5       	ldi	r24, 0x50	; 80
     2d2:	8a 95       	dec	r24
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
  return data;
}
     2dc:	81 2f       	mov	r24, r17
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	08 95       	ret

000002e6 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     2e6:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     2ee:	10 e5       	ldi	r17, 0x50	; 80
     2f0:	81 2f       	mov	r24, r17
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     2fc:	1a 95       	dec	r17
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
}
     306:	1f 91       	pop	r17
     308:	08 95       	ret

0000030a <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     30a:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     312:	10 e5       	ldi	r17, 0x50	; 80
     314:	81 2f       	mov	r24, r17
     316:	8a 95       	dec	r24
     318:	f1 f7       	brne	.-4      	; 0x316 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     320:	1a 95       	dec	r17
     322:	f1 f7       	brne	.-4      	; 0x320 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
}
     32a:	1f 91       	pop	r17
     32c:	08 95       	ret

0000032e <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SDA_Set_Output>
     338:	00 e5       	ldi	r16, 0x50	; 80
     33a:	80 2f       	mov	r24, r16
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     346:	16 b1       	in	r17, 0x06	; 6
     348:	0a 95       	dec	r16
     34a:	f1 f7       	brne	.-4      	; 0x348 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_SCL_Set_Output>
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <I2C_Get_Ack+0x26>
     358:	12 95       	swap	r17
     35a:	16 95       	lsr	r17
     35c:	17 70       	andi	r17, 0x07	; 7
     35e:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     360:	81 2f       	mov	r24, r17
     362:	81 70       	andi	r24, 0x01	; 1
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     36a:	1f 93       	push	r17
     36c:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     36e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <I2C_Start>
  I2C_Data_Send(address);
     372:	81 2f       	mov	r24, r17
     374:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     378:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
     37c:	18 2f       	mov	r17, r24
  I2C_Stop();
     37e:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Stop>
  return ack;
}
     382:	81 2f       	mov	r24, r17
     384:	1f 91       	pop	r17
     386:	08 95       	ret

00000388 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     388:	1f 93       	push	r17
     38a:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     38c:	81 2f       	mov	r24, r17
     38e:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_Send_Device_Address>
	if(sts==1){
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	11 f4       	brne	.+4      	; 0x39a <I2C_Get_Device_Address+0x12>
     396:	81 2f       	mov	r24, r17
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     39a:	1f 5f       	subi	r17, 0xFF	; 255
     39c:	1f 3f       	cpi	r17, 0xFF	; 255
     39e:	b1 f7       	brne	.-20     	; 0x38c <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     3a0:	1f 91       	pop	r17
     3a2:	08 95       	ret

000003a4 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     3b0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     3b4:	80 91 22 01 	lds	r24, 0x0122
     3b8:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     3bc:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
     3c0:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     3c2:	81 2f       	mov	r24, r17
     3c4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     3c8:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
     3cc:	f8 2e       	mov	r15, r24
  I2C_Stop();
     3ce:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Stop>
  I2C_Start();
     3d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     3d6:	80 91 23 01 	lds	r24, 0x0123
     3da:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     3de:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
     3e2:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     3e4:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_Data_Receive>
     3e8:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     3ea:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
     3ee:	08 2f       	mov	r16, r24
  I2C_Stop();
     3f0:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Stop>
  if(sts == 0x07){
     3f4:	ff 0c       	add	r15, r15
     3f6:	11 0f       	add	r17, r17
     3f8:	11 0f       	add	r17, r17
     3fa:	1f 29       	or	r17, r15
     3fc:	1e 29       	or	r17, r14
     3fe:	00 0f       	add	r16, r16
     400:	00 0f       	add	r16, r16
     402:	00 0f       	add	r16, r16
     404:	01 2b       	or	r16, r17
     406:	07 30       	cpi	r16, 0x07	; 7
     408:	11 f0       	breq	.+4      	; 0x40e <I2C_Read_Register+0x6a>
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	01 c0       	rjmp	.+2      	; 0x410 <I2C_Read_Register+0x6c>
     40e:	8d 2d       	mov	r24, r13
    sts = data;
  }else{
    sts = 0xFF;
  }
  return sts;
}
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	08 95       	ret

0000041c <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	18 2f       	mov	r17, r24
     422:	06 2f       	mov	r16, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     424:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     428:	80 91 22 01 	lds	r24, 0x0122
     42c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     430:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
  I2C_Data_Send(reg);
     434:	81 2f       	mov	r24, r17
     436:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     43a:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>

  I2C_Data_Send(val);
     43e:	80 2f       	mov	r24, r16
     440:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     444:	0e 94 97 01 	call	0x32e	; 0x32e <I2C_Get_Ack>
  I2C_Stop();
     448:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Stop>
  if(sts == 0x07){
    sts = data;
  }else{
    sts = 0xFF;
  }
}
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <I2C_Set_Mode_Sleep>:
	LPF_Set_Alpha(5,LPF_EN);
  #endif
}

void I2C_Set_Mode_Sleep(void){
  I2C_Write_Register(0x6B, 0x40);
     452:	8b e6       	ldi	r24, 0x6B	; 107
     454:	60 e4       	ldi	r22, 0x40	; 64
     456:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_Write_Register>
}
     45a:	08 95       	ret

0000045c <I2C_Set_Mode_Active>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
     45c:	8b e6       	ldi	r24, 0x6B	; 107
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_Write_Register>
}
     464:	08 95       	ret

00000466 <I2C_Read_Temp>:
    data = LPF_Get_Filtered_Value(5, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Temp(void){
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
     46a:	81 e4       	ldi	r24, 0x41	; 65
     46c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     470:	18 2f       	mov	r17, r24
     472:	00 e0       	ldi	r16, 0x00	; 0
  data |= I2C_Read_Register(0x42);
     474:	82 e4       	ldi	r24, 0x42	; 66
     476:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
     47a:	90 e0       	ldi	r25, 0x00	; 0
  data /=340;
     47c:	80 2b       	or	r24, r16
     47e:	91 2b       	or	r25, r17
     480:	64 e5       	ldi	r22, 0x54	; 84
     482:	71 e0       	ldi	r23, 0x01	; 1
     484:	0e 94 09 0a 	call	0x1412	; 0x1412 <__divmodhi4>
     488:	9b 01       	movw	r18, r22
     48a:	2c 5d       	subi	r18, 0xDC	; 220
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
  data +=36;
  return data;
}
     48e:	c9 01       	movw	r24, r18
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	08 95       	ret

00000496 <I2C_Read_Gyro_Z>:
    data = LPF_Get_Filtered_Value(4, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Z(void){
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
     49e:	87 e4       	ldi	r24, 0x47	; 71
     4a0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     4a4:	f8 2e       	mov	r15, r24
     4a6:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
     4a8:	88 e4       	ldi	r24, 0x48	; 72
     4aa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	e8 2a       	or	r14, r24
     4b2:	f9 2a       	or	r15, r25
     4b4:	00 27       	eor	r16, r16
     4b6:	f7 fc       	sbrc	r15, 7
     4b8:	00 95       	com	r16
     4ba:	10 2f       	mov	r17, r16
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	b8 01       	movw	r22, r16
     4c0:	a7 01       	movw	r20, r14
     4c2:	0e 94 41 07 	call	0xe82	; 0xe82 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     4c6:	cb 01       	movw	r24, r22
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	08 95       	ret

000004d2 <I2C_Read_Gyro_Y>:
    data = LPF_Get_Filtered_Value(3, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Y(void){
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x45);
     4da:	85 e4       	ldi	r24, 0x45	; 69
     4dc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     4e0:	f8 2e       	mov	r15, r24
     4e2:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
     4e4:	86 e4       	ldi	r24, 0x46	; 70
     4e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	e8 2a       	or	r14, r24
     4ee:	f9 2a       	or	r15, r25
     4f0:	00 27       	eor	r16, r16
     4f2:	f7 fc       	sbrc	r15, 7
     4f4:	00 95       	com	r16
     4f6:	10 2f       	mov	r17, r16
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	b8 01       	movw	r22, r16
     4fc:	a7 01       	movw	r20, r14
     4fe:	0e 94 41 07 	call	0xe82	; 0xe82 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     502:	cb 01       	movw	r24, r22
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <I2C_Read_Gyro_X>:
    data = LPF_Get_Filtered_Value(2, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_X(void){
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
     516:	83 e4       	ldi	r24, 0x43	; 67
     518:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     51c:	f8 2e       	mov	r15, r24
     51e:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
     520:	84 e4       	ldi	r24, 0x44	; 68
     522:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	e8 2a       	or	r14, r24
     52a:	f9 2a       	or	r15, r25
     52c:	00 27       	eor	r16, r16
     52e:	f7 fc       	sbrc	r15, 7
     530:	00 95       	com	r16
     532:	10 2f       	mov	r17, r16
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	b8 01       	movw	r22, r16
     538:	a7 01       	movw	r20, r14
     53a:	0e 94 41 07 	call	0xe82	; 0xe82 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     53e:	cb 01       	movw	r24, r22
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <I2C_Read_Acc_Z>:
    data = LPF_Get_Filtered_Value(1, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Z(void){
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
     552:	8f e3       	ldi	r24, 0x3F	; 63
     554:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     558:	f8 2e       	mov	r15, r24
     55a:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	e8 2a       	or	r14, r24
     566:	f9 2a       	or	r15, r25
     568:	00 27       	eor	r16, r16
     56a:	f7 fc       	sbrc	r15, 7
     56c:	00 95       	com	r16
     56e:	10 2f       	mov	r17, r16
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	b8 01       	movw	r22, r16
     574:	a7 01       	movw	r20, r14
     576:	0e 94 41 07 	call	0xe82	; 0xe82 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     57a:	cb 01       	movw	r24, r22
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <I2C_Read_Acc_Y>:
    data = LPF_Get_Filtered_Value(0, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Y(void){
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
     58e:	8d e3       	ldi	r24, 0x3D	; 61
     590:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     594:	f8 2e       	mov	r15, r24
     596:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
     598:	8e e3       	ldi	r24, 0x3E	; 62
     59a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	e8 2a       	or	r14, r24
     5a2:	f9 2a       	or	r15, r25
     5a4:	00 27       	eor	r16, r16
     5a6:	f7 fc       	sbrc	r15, 7
     5a8:	00 95       	com	r16
     5aa:	10 2f       	mov	r17, r16
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	b8 01       	movw	r22, r16
     5b0:	a7 01       	movw	r20, r14
     5b2:	0e 94 41 07 	call	0xe82	; 0xe82 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5b6:	cb 01       	movw	r24, r22
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	08 95       	ret

000005c2 <I2C_Read_Roll_Angle>:
  pitch*=10.0;
  pitch*=57.3;
  return (int)pitch;
}

int I2C_Read_Roll_Angle(void){
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
  float ay=I2C_Read_Acc_Y();
     5d2:	0e 94 c3 02 	call	0x586	; 0x586 <I2C_Read_Acc_Y>
     5d6:	7c 01       	movw	r14, r24
  float az=I2C_Read_Acc_Z();
     5d8:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Read_Acc_Z>
     5dc:	5c 01       	movw	r10, r24
  float divy=ay/az;
  float roll = atan(divy);
     5de:	00 27       	eor	r16, r16
     5e0:	f7 fc       	sbrc	r15, 7
     5e2:	00 95       	com	r16
     5e4:	10 2f       	mov	r17, r16
     5e6:	c8 01       	movw	r24, r16
     5e8:	b7 01       	movw	r22, r14
     5ea:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatsisf>
     5ee:	7b 01       	movw	r14, r22
     5f0:	8c 01       	movw	r16, r24
     5f2:	cc 24       	eor	r12, r12
     5f4:	b7 fc       	sbrc	r11, 7
     5f6:	c0 94       	com	r12
     5f8:	dc 2c       	mov	r13, r12
     5fa:	c6 01       	movw	r24, r12
     5fc:	b5 01       	movw	r22, r10
     5fe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatsisf>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c8 01       	movw	r24, r16
     608:	b7 01       	movw	r22, r14
     60a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__divsf3>
     60e:	0e 94 a9 07 	call	0xf52	; 0xf52 <atan>
  roll*=10.0;
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e2       	ldi	r20, 0x20	; 32
     618:	51 e4       	ldi	r21, 0x41	; 65
     61a:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3>
     61e:	23 e3       	ldi	r18, 0x33	; 51
     620:	33 e3       	ldi	r19, 0x33	; 51
     622:	45 e6       	ldi	r20, 0x65	; 101
     624:	52 e4       	ldi	r21, 0x42	; 66
     626:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3>
     62a:	0e 94 39 08 	call	0x1072	; 0x1072 <__fixsfsi>
  roll*=57.3;
  return (int)roll;
}
     62e:	cb 01       	movw	r24, r22
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	08 95       	ret

00000642 <I2C_Read_Acc_X>:

void I2C_Set_Mode_Active(void){
  I2C_Write_Register(0x6B, 0x00);
}

int16_t I2C_Read_Acc_X(void){
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
     64a:	8b e3       	ldi	r24, 0x3B	; 59
     64c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  data <<= 8;
     650:	f8 2e       	mov	r15, r24
     652:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
     654:	8c e3       	ldi	r24, 0x3C	; 60
     656:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	e8 2a       	or	r14, r24
     65e:	f9 2a       	or	r15, r25
     660:	00 27       	eor	r16, r16
     662:	f7 fc       	sbrc	r15, 7
     664:	00 95       	com	r16
     666:	10 2f       	mov	r17, r16
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	b8 01       	movw	r22, r16
     66c:	a7 01       	movw	r20, r14
     66e:	0e 94 41 07 	call	0xe82	; 0xe82 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     672:	cb 01       	movw	r24, r22
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	08 95       	ret

0000067e <I2C_Read_Pitch_Angle>:
  data /=340;
  data +=36;
  return data;
}

int I2C_Read_Pitch_Angle(void){
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
  float ax=I2C_Read_Acc_X();
     68e:	0e 94 21 03 	call	0x642	; 0x642 <I2C_Read_Acc_X>
     692:	7c 01       	movw	r14, r24
  float az=I2C_Read_Acc_Z();
     694:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Read_Acc_Z>
     698:	5c 01       	movw	r10, r24
  float divx=ax/az;
  float pitch = atan(divx);
     69a:	00 27       	eor	r16, r16
     69c:	f7 fc       	sbrc	r15, 7
     69e:	00 95       	com	r16
     6a0:	10 2f       	mov	r17, r16
     6a2:	c8 01       	movw	r24, r16
     6a4:	b7 01       	movw	r22, r14
     6a6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatsisf>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	cc 24       	eor	r12, r12
     6b0:	b7 fc       	sbrc	r11, 7
     6b2:	c0 94       	com	r12
     6b4:	dc 2c       	mov	r13, r12
     6b6:	c6 01       	movw	r24, r12
     6b8:	b5 01       	movw	r22, r10
     6ba:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatsisf>
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	c8 01       	movw	r24, r16
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__divsf3>
     6ca:	0e 94 a9 07 	call	0xf52	; 0xf52 <atan>
  pitch*=10.0;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e2       	ldi	r20, 0x20	; 32
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3>
     6da:	23 e3       	ldi	r18, 0x33	; 51
     6dc:	33 e3       	ldi	r19, 0x33	; 51
     6de:	45 e6       	ldi	r20, 0x65	; 101
     6e0:	52 e4       	ldi	r21, 0x42	; 66
     6e2:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3>
     6e6:	0e 94 39 08 	call	0x1072	; 0x1072 <__fixsfsi>
  pitch*=57.3;
  return (int)pitch;
}
     6ea:	cb 01       	movw	r24, r22
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	bf 90       	pop	r11
     6fa:	af 90       	pop	r10
     6fc:	08 95       	ret

000006fe <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     6fe:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     702:	10 92 23 01 	sts	0x0123, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     706:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     70a:	0e 94 c4 01 	call	0x388	; 0x388 <I2C_Get_Device_Address>
     70e:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	80 93 23 01 	sts	0x0123, r24
  #ifdef LPF_EN
	LPF_Init();
     718:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	6a e0       	ldi	r22, 0x0A	; 10
     720:	0e 94 27 07 	call	0xe4e	; 0xe4e <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	6a e0       	ldi	r22, 0x0A	; 10
     728:	0e 94 27 07 	call	0xe4e	; 0xe4e <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	6a e0       	ldi	r22, 0x0A	; 10
     730:	0e 94 27 07 	call	0xe4e	; 0xe4e <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	6a e0       	ldi	r22, 0x0A	; 10
     738:	0e 94 27 07 	call	0xe4e	; 0xe4e <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	6a e0       	ldi	r22, 0x0A	; 10
     740:	0e 94 27 07 	call	0xe4e	; 0xe4e <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
     744:	85 e0       	ldi	r24, 0x05	; 5
     746:	6a e0       	ldi	r22, 0x0A	; 10
     748:	0e 94 27 07 	call	0xe4e	; 0xe4e <LPF_Set_Alpha>
  #endif
}
     74c:	08 95       	ret

0000074e <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     74e:	10 92 24 01 	sts	0x0124, r1
  debug.datareg=0;
     752:	10 92 25 01 	sts	0x0125, r1
  debug.databsy=1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 26 01 	sts	0x0126, r24
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     760:	fc 01       	movw	r30, r24
     762:	ec 5d       	subi	r30, 0xDC	; 220
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	13 82       	std	Z+3, r1	; 0x03
     768:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     76a:	80 32       	cpi	r24, 0x20	; 32
     76c:	91 05       	cpc	r25, r1
     76e:	c1 f7       	brne	.-16     	; 0x760 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     770:	10 92 47 01 	sts	0x0147, r1
     774:	e8 e4       	ldi	r30, 0x48	; 72
     776:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     778:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	e0 35       	cpi	r30, 0x50	; 80
     77e:	f8 07       	cpc	r31, r24
     780:	d9 f7       	brne	.-10     	; 0x778 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     782:	10 82       	st	Z, r1
}
     784:	08 95       	ret

00000786 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     786:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     788:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     78a:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     792:	e8 e6       	ldi	r30, 0x68	; 104
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	82 60       	ori	r24, 0x02	; 2
     79a:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     79c:	ec e6       	ldi	r30, 0x6C	; 108
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	80 64       	ori	r24, 0x40	; 64
     7a4:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     7a6:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     7a8:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     7aa:	08 95       	ret

000007ac <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     7b0:	ee e6       	ldi	r30, 0x6E	; 110
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	10 82       	st	Z, r1
  TCNT0 =200;
     7b6:	88 ec       	ldi	r24, 0xC8	; 200
     7b8:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     7ba:	84 e0       	ldi	r24, 0x04	; 4
     7bc:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     7c2:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     7c4:	08 95       	ret

000007c6 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     7c6:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     7ca:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     7cc:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     7ce:	08 95       	ret

000007d0 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     7d0:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     7d2:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     7d4:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     7d6:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     7d8:	08 95       	ret

000007da <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     7da:	5d 9a       	sbi	0x0b, 5	; 11
}
     7dc:	08 95       	ret

000007de <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     7de:	5d 98       	cbi	0x0b, 5	; 11
}
     7e0:	08 95       	ret

000007e2 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	11 f4       	brne	.+4      	; 0x7ea <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     7e6:	5d 9a       	sbi	0x0b, 5	; 11
     7e8:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     7ea:	5d 98       	cbi	0x0b, 5	; 11
     7ec:	08 95       	ret

000007ee <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     7ee:	86 b1       	in	r24, 0x06	; 6
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	26 e0       	ldi	r18, 0x06	; 6
     7f4:	96 95       	lsr	r25
     7f6:	87 95       	ror	r24
     7f8:	2a 95       	dec	r18
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     7fc:	81 70       	andi	r24, 0x01	; 1
     7fe:	08 95       	ret

00000800 <debug_delay>:

void debug_delay(uint16_t val){
     800:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     802:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     808:	86 b5       	in	r24, 0x26	; 38
     80a:	82 33       	cpi	r24, 0x32	; 50
     80c:	e8 f3       	brcs	.-6      	; 0x808 <debug_delay+0x8>
    TCNT0=0;
     80e:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     810:	86 b5       	in	r24, 0x26	; 38
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	82 17       	cp	r24, r18
     816:	93 07       	cpc	r25, r19
     818:	d8 f3       	brcs	.-10     	; 0x810 <debug_delay+0x10>
  TCCR0B=0;
     81a:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     81c:	08 95       	ret

0000081e <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     81e:	80 91 1c 01 	lds	r24, 0x011C
     822:	90 91 1d 01 	lds	r25, 0x011D
     826:	0e 94 00 04 	call	0x800	; 0x800 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     82a:	08 95       	ret

0000082c <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     82c:	80 91 1e 01 	lds	r24, 0x011E
     830:	90 91 1f 01 	lds	r25, 0x011F
     834:	0e 94 00 04 	call	0x800	; 0x800 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     838:	08 95       	ret

0000083a <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     83a:	80 91 20 01 	lds	r24, 0x0120
     83e:	90 91 21 01 	lds	r25, 0x0121
     842:	0e 94 00 04 	call	0x800	; 0x800 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     846:	08 95       	ret

00000848 <debug_tx_byte>:


void debug_tx_byte(uint8_t val){
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	2a 97       	sbiw	r28, 0x0a	; 10
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     866:	fe 01       	movw	r30, r28
     868:	31 96       	adiw	r30, 0x01	; 1
     86a:	9a e0       	ldi	r25, 0x0A	; 10
     86c:	df 01       	movw	r26, r30
     86e:	1d 92       	st	X+, r1
     870:	9a 95       	dec	r25
     872:	e9 f7       	brne	.-6      	; 0x86e <debug_tx_byte+0x26>
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9a 87       	std	Y+10, r25	; 0x0a
     878:	fe 01       	movw	r30, r28
     87a:	32 96       	adiw	r30, 0x02	; 2
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     880:	48 2f       	mov	r20, r24
     882:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     884:	61 e0       	ldi	r22, 0x01	; 1


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     886:	ca 01       	movw	r24, r20
     888:	02 2e       	mov	r0, r18
     88a:	02 c0       	rjmp	.+4      	; 0x890 <debug_tx_byte+0x48>
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
     890:	0a 94       	dec	r0
     892:	e2 f7       	brpl	.-8      	; 0x88c <debug_tx_byte+0x44>
     894:	80 ff       	sbrs	r24, 0
     896:	02 c0       	rjmp	.+4      	; 0x89c <debug_tx_byte+0x54>
	  buf[i+1]=1;
     898:	60 83       	st	Z, r22
     89a:	01 c0       	rjmp	.+2      	; 0x89e <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     89c:	10 82       	st	Z, r1
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	31 96       	adiw	r30, 0x01	; 1
}


void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     8a4:	28 30       	cpi	r18, 0x08	; 8
     8a6:	31 05       	cpc	r19, r1
     8a8:	71 f7       	brne	.-36     	; 0x886 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     8aa:	df b6       	in	r13, 0x3f	; 63
  cli();
     8ac:	f8 94       	cli
     8ae:	8e 01       	movw	r16, r28
     8b0:	0f 5f       	subi	r16, 0xFF	; 255
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     8b4:	3b e0       	ldi	r19, 0x0B	; 11
     8b6:	e3 2e       	mov	r14, r19
     8b8:	f1 2c       	mov	r15, r1
     8ba:	ec 0e       	add	r14, r28
     8bc:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     8be:	f8 01       	movw	r30, r16
     8c0:	80 81       	ld	r24, Z
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	11 f4       	brne	.+4      	; 0x8ca <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     8c6:	5d 9a       	sbi	0x0b, 5	; 11
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     8ca:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     8cc:	0e 94 0f 04 	call	0x81e	; 0x81e <debug_delay_index_0>
     8d0:	0f 5f       	subi	r16, 0xFF	; 255
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     8d4:	0e 15       	cp	r16, r14
     8d6:	1f 05       	cpc	r17, r15
     8d8:	91 f7       	brne	.-28     	; 0x8be <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     8da:	df be       	out	0x3f, r13	; 63
}
     8dc:	2a 96       	adiw	r28, 0x0a	; 10
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	08 95       	ret

000008f8 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     8fe:	36 9b       	sbis	0x06, 6	; 6
     900:	21 c0       	rjmp	.+66     	; 0x944 <__stack+0x45>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0x35>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     906:	0e 94 16 04 	call	0x82c	; 0x82c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     90a:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     90c:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     90e:	17 30       	cpi	r17, 0x07	; 7
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
	    val>>=1;
     912:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     914:	1f 5f       	subi	r17, 0xFF	; 255
     916:	18 30       	cpi	r17, 0x08	; 8
     918:	b1 f7       	brne	.-20     	; 0x906 <__stack+0x7>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     91a:	0e 94 16 04 	call	0x82c	; 0x82c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     91e:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     920:	f6 fc       	sbrc	r15, 6
     922:	07 c0       	rjmp	.+14     	; 0x932 <__stack+0x33>
     924:	86 ff       	sbrs	r24, 6
     926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
	  debug.datareg=val;
     928:	00 93 25 01 	sts	0x0125, r16
	  debug.error=0x00;
     92c:	10 92 24 01 	sts	0x0124, r1
     930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
	}else{
	  debug.error=0x01;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 24 01 	sts	0x0124, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     938:	80 91 25 01 	lds	r24, 0x0125
}
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     944:	0e 94 1d 04 	call	0x83a	; 0x83a <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     948:	f6 b0       	in	r15, 0x06	; 6
     94a:	00 e0       	ldi	r16, 0x00	; 0
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	db cf       	rjmp	.-74     	; 0x906 <__stack+0x7>

00000950 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     950:	80 91 25 01 	lds	r24, 0x0125
}
     954:	08 95       	ret

00000956 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     956:	10 92 25 01 	sts	0x0125, r1
}
     95a:	08 95       	ret

0000095c <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     95c:	80 93 25 01 	sts	0x0125, r24
}
     960:	08 95       	ret

00000962 <debug_tx_hex>:

void debug_tx_hex(uint32_t val){
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	7b 01       	movw	r14, r22
     976:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	e8 16       	cp	r14, r24
     97c:	f1 04       	cpc	r15, r1
     97e:	01 05       	cpc	r16, r1
     980:	11 05       	cpc	r17, r1
     982:	09 f0       	breq	.+2      	; 0x986 <debug_tx_hex+0x24>
     984:	30 f4       	brcc	.+12     	; 0x992 <debug_tx_hex+0x30>
     986:	c8 e0       	ldi	r28, 0x08	; 8
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	c6 2e       	mov	r12, r22
     98e:	d1 2c       	mov	r13, r1
     990:	14 c0       	rjmp	.+40     	; 0x9ba <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	e8 16       	cp	r14, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	f8 06       	cpc	r15, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	08 07       	cpc	r16, r24
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	18 07       	cpc	r17, r24
     9a2:	30 f0       	brcs	.+12     	; 0x9b0 <debug_tx_hex+0x4e>
     9a4:	c0 e2       	ldi	r28, 0x20	; 32
     9a6:	d0 e0       	ldi	r29, 0x00	; 0
     9a8:	58 e0       	ldi	r21, 0x08	; 8
     9aa:	c5 2e       	mov	r12, r21
     9ac:	d1 2c       	mov	r13, r1
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <debug_tx_hex+0x58>
     9b0:	c0 e1       	ldi	r28, 0x10	; 16
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	44 e0       	ldi	r20, 0x04	; 4
     9b6:	c4 2e       	mov	r12, r20
     9b8:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     9ba:	80 e3       	ldi	r24, 0x30	; 48
     9bc:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
  debug_tx_byte('x');
     9c0:	88 e7       	ldi	r24, 0x78	; 120
     9c2:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
     9c6:	bb 24       	eor	r11, r11
     9c8:	17 c0       	rjmp	.+46     	; 0x9f8 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     9ca:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     9cc:	d8 01       	movw	r26, r16
     9ce:	c7 01       	movw	r24, r14
     9d0:	0c 2e       	mov	r0, r28
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <debug_tx_hex+0x7a>
     9d4:	b6 95       	lsr	r27
     9d6:	a7 95       	ror	r26
     9d8:	97 95       	ror	r25
     9da:	87 95       	ror	r24
     9dc:	0a 94       	dec	r0
     9de:	d2 f7       	brpl	.-12     	; 0x9d4 <debug_tx_hex+0x72>
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	8f 70       	andi	r24, 0x0F	; 15
     9e4:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     9e6:	8a 30       	cpi	r24, 0x0A	; 10
     9e8:	91 05       	cpc	r25, r1
     9ea:	10 f0       	brcs	.+4      	; 0x9f0 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     9ec:	c7 96       	adiw	r24, 0x37	; 55
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     9f0:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     9f2:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     9f6:	b3 94       	inc	r11
     9f8:	8b 2d       	mov	r24, r11
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	8c 15       	cp	r24, r12
     9fe:	9d 05       	cpc	r25, r13
     a00:	20 f3       	brcs	.-56     	; 0x9ca <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	ef 90       	pop	r14
     a0e:	df 90       	pop	r13
     a10:	cf 90       	pop	r12
     a12:	bf 90       	pop	r11
     a14:	08 95       	ret

00000a16 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     a16:	af 92       	push	r10
     a18:	bf 92       	push	r11
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	7b 01       	movw	r14, r22
     a2c:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     a2e:	6f 3f       	cpi	r22, 0xFF	; 255
     a30:	71 05       	cpc	r23, r1
     a32:	81 05       	cpc	r24, r1
     a34:	91 05       	cpc	r25, r1
     a36:	09 f0       	breq	.+2      	; 0xa3a <debug_tx_bin+0x24>
     a38:	18 f4       	brcc	.+6      	; 0xa40 <debug_tx_bin+0x2a>
     a3a:	f7 e0       	ldi	r31, 0x07	; 7
     a3c:	df 2e       	mov	r13, r31
     a3e:	0d c0       	rjmp	.+26     	; 0xa5a <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     a40:	60 30       	cpi	r22, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	73 07       	cpc	r23, r19
     a46:	31 e0       	ldi	r19, 0x01	; 1
     a48:	83 07       	cpc	r24, r19
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	93 07       	cpc	r25, r19
     a4e:	18 f0       	brcs	.+6      	; 0xa56 <debug_tx_bin+0x40>
     a50:	ef e1       	ldi	r30, 0x1F	; 31
     a52:	de 2e       	mov	r13, r30
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <debug_tx_bin+0x44>
     a56:	7f e0       	ldi	r23, 0x0F	; 15
     a58:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     a5a:	80 e3       	ldi	r24, 0x30	; 48
     a5c:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
  debug_tx_byte('b');
     a60:	82 e6       	ldi	r24, 0x62	; 98
     a62:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
     a66:	c0 e0       	ldi	r28, 0x00	; 0
     a68:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     a6a:	cd 2c       	mov	r12, r13
     a6c:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     a6e:	56 01       	movw	r10, r12
     a70:	08 94       	sec
     a72:	a1 1c       	adc	r10, r1
     a74:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     a76:	c6 01       	movw	r24, r12
     a78:	8c 1b       	sub	r24, r28
     a7a:	9d 0b       	sbc	r25, r29
     a7c:	a8 01       	movw	r20, r16
     a7e:	97 01       	movw	r18, r14
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <debug_tx_bin+0x74>
     a82:	56 95       	lsr	r21
     a84:	47 95       	ror	r20
     a86:	37 95       	ror	r19
     a88:	27 95       	ror	r18
     a8a:	8a 95       	dec	r24
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <debug_tx_bin+0x6c>
     a8e:	da 01       	movw	r26, r20
     a90:	c9 01       	movw	r24, r18
     a92:	81 70       	andi	r24, 0x01	; 1
     a94:	90 70       	andi	r25, 0x00	; 0
     a96:	89 2b       	or	r24, r25
     a98:	11 f0       	breq	.+4      	; 0xa9e <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     a9a:	81 e3       	ldi	r24, 0x31	; 49
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     a9e:	80 e3       	ldi	r24, 0x30	; 48
     aa0:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
     aa4:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     aa6:	ca 15       	cp	r28, r10
     aa8:	db 05       	cpc	r29, r11
     aaa:	29 f7       	brne	.-54     	; 0xa76 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	bf 90       	pop	r11
     abe:	af 90       	pop	r10
     ac0:	08 95       	ret

00000ac2 <debug_tx_nl>:

void debug_tx_nl(void){
  debug_tx_byte('\r');
     ac2:	8d e0       	ldi	r24, 0x0D	; 13
     ac4:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
  debug_tx_byte('\n');
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
}
     ace:	08 95       	ret

00000ad0 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
}
     ad6:	08 95       	ret

00000ad8 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     ad8:	8c e2       	ldi	r24, 0x2C	; 44
     ada:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
}
     ade:	08 95       	ret

00000ae0 <debug_tx_text>:

void debug_tx_text(char *str){
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	ec 01       	movw	r28, r24
     ae8:	10 e0       	ldi	r17, 0x00	; 0
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     aec:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
        i++;
     af0:	1f 5f       	subi	r17, 0xFF	; 255
  debug_tx_byte(',');
}

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     af2:	fe 01       	movw	r30, r28
     af4:	e1 0f       	add	r30, r17
     af6:	f1 1d       	adc	r31, r1
     af8:	80 81       	ld	r24, Z
     afa:	88 23       	and	r24, r24
     afc:	b9 f7       	brne	.-18     	; 0xaec <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	08 95       	ret

00000b06 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     b06:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_nl();
     b0a:	0e 94 61 05 	call	0xac2	; 0xac2 <debug_tx_nl>
}
     b0e:	08 95       	ret

00000b10 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     b10:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     b14:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
}
     b18:	08 95       	ret

00000b1a <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     b1a:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_cm();
     b1e:	0e 94 6c 05 	call	0xad8	; 0xad8 <debug_tx_cm>
}
     b22:	08 95       	ret

00000b24 <debug_determine_digit_numbers>:

void debug_determine_digit_numbers(uint32_t num){
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	6b 01       	movw	r12, r22
     b34:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     b36:	61 15       	cp	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	81 05       	cpc	r24, r1
     b3c:	91 05       	cpc	r25, r1
     b3e:	31 f4       	brne	.+12     	; 0xb4c <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     b40:	10 92 48 01 	sts	0x0148, r1
    debug.input_num_digits=1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 50 01 	sts	0x0150, r24
     b4a:	23 c0       	rjmp	.+70     	; 0xb92 <debug_determine_digit_numbers+0x6e>
     b4c:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     b4e:	0b 2d       	mov	r16, r11
     b50:	10 e0       	ldi	r17, 0x00	; 0
     b52:	0c 5d       	subi	r16, 0xDC	; 220
     b54:	1e 4f       	sbci	r17, 0xFE	; 254
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	2a e0       	ldi	r18, 0x0A	; 10
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__udivmodsi4>
     b66:	f8 01       	movw	r30, r16
     b68:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     b6a:	c7 01       	movw	r24, r14
     b6c:	b6 01       	movw	r22, r12
     b6e:	2a e0       	ldi	r18, 0x0A	; 10
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__udivmodsi4>
     b7a:	c9 01       	movw	r24, r18
     b7c:	da 01       	movw	r26, r20
     b7e:	6c 01       	movw	r12, r24
     b80:	7d 01       	movw	r14, r26
      i++;
     b82:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     b84:	c1 14       	cp	r12, r1
     b86:	d1 04       	cpc	r13, r1
     b88:	e1 04       	cpc	r14, r1
     b8a:	f1 04       	cpc	r15, r1
     b8c:	01 f7       	brne	.-64     	; 0xb4e <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     b8e:	b0 92 50 01 	sts	0x0150, r11
  }
}
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	08 95       	ret

00000ba2 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     ba2:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     ba4:	10 91 50 01 	lds	r17, 0x0150
     ba8:	09 c0       	rjmp	.+18     	; 0xbbc <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     baa:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     bac:	e1 2f       	mov	r30, r17
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ec 5d       	subi	r30, 0xDC	; 220
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     bb6:	80 5d       	subi	r24, 0xD0	; 208
     bb8:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     bbc:	11 23       	and	r17, r17
     bbe:	a9 f7       	brne	.-22     	; 0xbaa <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     bc0:	1f 91       	pop	r17
     bc2:	08 95       	ret

00000bc4 <debug_tx_number>:

void debug_tx_number(int32_t num){
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	7b 01       	movw	r14, r22
     bce:	8c 01       	movw	r16, r24
  if(num<0){
     bd0:	97 ff       	sbrs	r25, 7
     bd2:	0b c0       	rjmp	.+22     	; 0xbea <debug_tx_number+0x26>
    debug_tx_byte('-');
     bd4:	8d e2       	ldi	r24, 0x2D	; 45
     bd6:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_byte>
	num=-num;
     bda:	10 95       	com	r17
     bdc:	00 95       	com	r16
     bde:	f0 94       	com	r15
     be0:	e0 94       	com	r14
     be2:	e1 1c       	adc	r14, r1
     be4:	f1 1c       	adc	r15, r1
     be6:	01 1d       	adc	r16, r1
     be8:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     bea:	c8 01       	movw	r24, r16
     bec:	b7 01       	movw	r22, r14
     bee:	0e 94 92 05 	call	0xb24	; 0xb24 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     bf2:	0e 94 d1 05 	call	0xba2	; 0xba2 <debug_tx_number_digits>
}
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	08 95       	ret

00000c00 <debug_tx_number_nl>:

void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     c00:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <debug_tx_number>
  debug_tx_nl();
     c04:	0e 94 61 05 	call	0xac2	; 0xac2 <debug_tx_nl>
}
     c08:	08 95       	ret

00000c0a <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     c0a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <debug_tx_number>
  debug_tx_sp();
     c0e:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
}
     c12:	08 95       	ret

00000c14 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     c14:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <debug_tx_number>
  debug_tx_text(",");
     c18:	8e e0       	ldi	r24, 0x0E	; 14
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
}
     c20:	08 95       	ret

00000c22 <debug_tx_number_hex_nl>:

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     c22:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_hex>
  debug_tx_nl();
     c26:	0e 94 61 05 	call	0xac2	; 0xac2 <debug_tx_nl>
}
     c2a:	08 95       	ret

00000c2c <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     c2c:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_hex>
  debug_tx_sp();
     c30:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
}
     c34:	08 95       	ret

00000c36 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     c36:	0e 94 b1 04 	call	0x962	; 0x962 <debug_tx_hex>
  debug_tx_text(",");
     c3a:	8e e0       	ldi	r24, 0x0E	; 14
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
}
     c42:	08 95       	ret

00000c44 <debug_tx_parameter_nl>:

void debug_tx_parameter_nl(char *name, int32_t num){
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	7a 01       	movw	r14, r20
     c4e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c50:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     c54:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
  debug_tx_number_nl(num);
     c58:	c8 01       	movw	r24, r16
     c5a:	b7 01       	movw	r22, r14
     c5c:	0e 94 00 06 	call	0xc00	; 0xc00 <debug_tx_number_nl>
}
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	08 95       	ret

00000c6a <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	7a 01       	movw	r14, r20
     c74:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c76:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     c7a:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
  debug_tx_number_sp(num);
     c7e:	c8 01       	movw	r24, r16
     c80:	b7 01       	movw	r22, r14
     c82:	0e 94 05 06 	call	0xc0a	; 0xc0a <debug_tx_number_sp>
}
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	08 95       	ret

00000c90 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	7a 01       	movw	r14, r20
     c9a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c9c:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     ca0:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
  debug_tx_number_cm(num);
     ca4:	c8 01       	movw	r24, r16
     ca6:	b7 01       	movw	r22, r14
     ca8:	0e 94 0a 06 	call	0xc14	; 0xc14 <debug_tx_number_cm>
}
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <debug_tx_parameter_hex_nl>:

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	7a 01       	movw	r14, r20
     cc0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     cc2:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     cc6:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     cca:	c8 01       	movw	r24, r16
     ccc:	b7 01       	movw	r22, r14
     cce:	0e 94 11 06 	call	0xc22	; 0xc22 <debug_tx_number_hex_nl>
}
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	7a 01       	movw	r14, r20
     ce6:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     ce8:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     cec:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     cf0:	c8 01       	movw	r24, r16
     cf2:	b7 01       	movw	r22, r14
     cf4:	0e 94 16 06 	call	0xc2c	; 0xc2c <debug_tx_number_hex_sp>
}
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	7a 01       	movw	r14, r20
     d0c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     d0e:	0e 94 70 05 	call	0xae0	; 0xae0 <debug_tx_text>
  debug_tx_sp();
     d12:	0e 94 68 05 	call	0xad0	; 0xad0 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     d16:	c8 01       	movw	r24, r16
     d18:	b7 01       	movw	r22, r14
     d1a:	0e 94 1b 06 	call	0xc36	; 0xc36 <debug_tx_number_hex_cm>
}
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	08 95       	ret

00000d28 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     d28:	e4 e2       	ldi	r30, 0x24	; 36
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	e8 0f       	add	r30, r24
     d2e:	f1 1d       	adc	r31, r1
     d30:	83 81       	ldd	r24, Z+3	; 0x03
}
     d32:	08 95       	ret

00000d34 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d34:	80 91 47 01 	lds	r24, 0x0147
}
     d38:	08 95       	ret

00000d3a <debug_flush_buf>:

void debug_flush_buf(void){
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     d3e:	fc 01       	movw	r30, r24
     d40:	ec 5d       	subi	r30, 0xDC	; 220
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
     d44:	13 82       	std	Z+3, r1	; 0x03
     d46:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     d48:	80 32       	cpi	r24, 0x20	; 32
     d4a:	91 05       	cpc	r25, r1
     d4c:	c1 f7       	brne	.-16     	; 0xd3e <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     d4e:	10 92 47 01 	sts	0x0147, r1
}
     d52:	08 95       	ret

00000d54 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     d54:	80 91 26 01 	lds	r24, 0x0126
}
     d58:	08 95       	ret

00000d5a <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     d5a:	80 91 26 01 	lds	r24, 0x0126
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     d5e:	88 23       	and	r24, r24
     d60:	11 f0       	breq	.+4      	; 0xd66 <debug_data_available_rx_buf+0xc>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d66:	80 91 47 01 	lds	r24, 0x0147
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <debug_data_available_rx_buf+0x18>
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     d76:	89 2f       	mov	r24, r25
     d78:	08 95       	ret

00000d7a <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d7a:	80 91 47 01 	lds	r24, 0x0147
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     d7e:	08 95       	ret

00000d80 <debug_init>:

void debug_init(void){
  debug_struct_init();
     d80:	0e 94 a7 03 	call	0x74e	; 0x74e <debug_struct_init>
  debug_timings_init();
     d84:	0e 94 c3 03 	call	0x786	; 0x786 <debug_timings_init>
  debug_gpio_init();
     d88:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <debug_gpio_init>
}
     d8c:	08 95       	ret

00000d8e <__vector_4>:


ISR(ISR_PCINT_VECT){
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
  debug.databsy=1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 26 01 	sts	0x0126, r24
  uint8_t val=debug_rx_byte();
     db6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <debug_rx_byte>
     dba:	98 2f       	mov	r25, r24
  if(debug.error==0){
     dbc:	80 91 24 01 	lds	r24, 0x0124
     dc0:	88 23       	and	r24, r24
     dc2:	99 f4       	brne	.+38     	; 0xdea <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     dc4:	e0 91 47 01 	lds	r30, 0x0147
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	ec 5d       	subi	r30, 0xDC	; 220
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     dd0:	80 91 47 01 	lds	r24, 0x0147
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	80 93 47 01 	sts	0x0147, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     dda:	80 91 47 01 	lds	r24, 0x0147
     dde:	81 32       	cpi	r24, 0x21	; 33
     de0:	10 f0       	brcs	.+4      	; 0xde6 <__vector_4+0x58>
	  debug.bufindex=0;
     de2:	10 92 47 01 	sts	0x0147, r1
	}
    debug_timer_start();
     de6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_16>:

ISR(TIMER_OVF_VECT){
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     e16:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     e1a:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     e1c:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     e1e:	10 92 26 01 	sts	0x0126, r1
}
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     e2c:	e1 e5       	ldi	r30, 0x51	; 81
     e2e:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     e30:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     e32:	11 82       	std	Z+1, r1	; 0x01
     e34:	12 82       	std	Z+2, r1	; 0x02
     e36:	13 82       	std	Z+3, r1	; 0x03
     e38:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     e3a:	15 82       	std	Z+5, r1	; 0x05
     e3c:	16 82       	std	Z+6, r1	; 0x06
     e3e:	17 82       	std	Z+7, r1	; 0x07
     e40:	10 86       	std	Z+8, r1	; 0x08
     e42:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	e7 38       	cpi	r30, 0x87	; 135
     e48:	f8 07       	cpc	r31, r24
     e4a:	91 f7       	brne	.-28     	; 0xe30 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     e4c:	08 95       	ret

00000e4e <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	23 e0       	ldi	r18, 0x03	; 3
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	2a 95       	dec	r18
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <LPF_Set_Alpha+0x6>
     e5c:	e8 0f       	add	r30, r24
     e5e:	f9 1f       	adc	r31, r25
     e60:	ef 5a       	subi	r30, 0xAF	; 175
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	60 83       	st	Z, r22
}
     e66:	08 95       	ret

00000e68 <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	fc 01       	movw	r30, r24
     e6c:	33 e0       	ldi	r19, 0x03	; 3
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	3a 95       	dec	r19
     e74:	e1 f7       	brne	.-8      	; 0xe6e <LPF_Get_Alpha+0x6>
     e76:	e8 0f       	add	r30, r24
     e78:	f9 1f       	adc	r31, r25
     e7a:	ef 5a       	subi	r30, 0xAF	; 175
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     e7e:	80 81       	ld	r24, Z
     e80:	08 95       	ret

00000e82 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     e82:	2f 92       	push	r2
     e84:	3f 92       	push	r3
     e86:	4f 92       	push	r4
     e88:	5f 92       	push	r5
     e8a:	6f 92       	push	r6
     e8c:	7f 92       	push	r7
     e8e:	8f 92       	push	r8
     e90:	9f 92       	push	r9
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	1a 01       	movw	r2, r20
     ea4:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	6c 01       	movw	r12, r24
     eaa:	53 e0       	ldi	r21, 0x03	; 3
     eac:	cc 0c       	add	r12, r12
     eae:	dd 1c       	adc	r13, r13
     eb0:	5a 95       	dec	r21
     eb2:	e1 f7       	brne	.-8      	; 0xeac <LPF_Get_Filtered_Value+0x2a>
     eb4:	c8 0e       	add	r12, r24
     eb6:	d9 1e       	adc	r13, r25
     eb8:	81 e5       	ldi	r24, 0x51	; 81
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	c8 0e       	add	r12, r24
     ebe:	d9 1e       	adc	r13, r25
     ec0:	f6 01       	movw	r30, r12
     ec2:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     ec4:	62 2e       	mov	r6, r18
     ec6:	77 24       	eor	r7, r7
     ec8:	88 24       	eor	r8, r8
     eca:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     ecc:	64 e6       	ldi	r22, 0x64	; 100
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	62 1b       	sub	r22, r18
     ed2:	71 09       	sbc	r23, r1
     ed4:	88 27       	eor	r24, r24
     ed6:	77 fd       	sbrc	r23, 7
     ed8:	80 95       	com	r24
     eda:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     edc:	45 e0       	ldi	r20, 0x05	; 5
     ede:	a4 2e       	mov	r10, r20
     ee0:	b1 2c       	mov	r11, r1
     ee2:	ac 0c       	add	r10, r12
     ee4:	bd 1c       	adc	r11, r13
     ee6:	25 81       	ldd	r18, Z+5	; 0x05
     ee8:	36 81       	ldd	r19, Z+6	; 0x06
     eea:	47 81       	ldd	r20, Z+7	; 0x07
     eec:	50 85       	ldd	r21, Z+8	; 0x08
     eee:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__mulsi3>
     ef2:	7b 01       	movw	r14, r22
     ef4:	8c 01       	movw	r16, r24
     ef6:	c2 01       	movw	r24, r4
     ef8:	b1 01       	movw	r22, r2
     efa:	a4 01       	movw	r20, r8
     efc:	93 01       	movw	r18, r6
     efe:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__mulsi3>
     f02:	e6 0e       	add	r14, r22
     f04:	f7 1e       	adc	r15, r23
     f06:	08 1f       	adc	r16, r24
     f08:	19 1f       	adc	r17, r25
     f0a:	c8 01       	movw	r24, r16
     f0c:	b7 01       	movw	r22, r14
     f0e:	24 e6       	ldi	r18, 0x64	; 100
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	0e 94 3e 0a 	call	0x147c	; 0x147c <__divmodsi4>
     f1a:	ca 01       	movw	r24, r20
     f1c:	f6 01       	movw	r30, r12
     f1e:	25 83       	std	Z+5, r18	; 0x05
     f20:	f5 01       	movw	r30, r10
     f22:	31 83       	std	Z+1, r19	; 0x01
     f24:	42 83       	std	Z+2, r20	; 0x02
     f26:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     f28:	b9 01       	movw	r22, r18
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	5f 90       	pop	r5
     f44:	4f 90       	pop	r4
     f46:	3f 90       	pop	r3
     f48:	2f 90       	pop	r2
     f4a:	08 95       	ret

00000f4c <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     f4c:	0e 94 16 07 	call	0xe2c	; 0xe2c <LPF_Struct_Init>
     f50:	08 95       	ret

00000f52 <atan>:
     f52:	df 93       	push	r29
     f54:	dd 27       	eor	r29, r29
     f56:	b9 2f       	mov	r27, r25
     f58:	bf 77       	andi	r27, 0x7F	; 127
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	16 16       	cp	r1, r22
     f60:	17 06       	cpc	r1, r23
     f62:	48 07       	cpc	r20, r24
     f64:	5b 07       	cpc	r21, r27
     f66:	10 f4       	brcc	.+4      	; 0xf6c <atan+0x1a>
     f68:	d9 2f       	mov	r29, r25
     f6a:	67 d1       	rcall	.+718    	; 0x123a <inverse>
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	7f 93       	push	r23
     f72:	6f 93       	push	r22
     f74:	cc d1       	rcall	.+920    	; 0x130e <square>
     f76:	e8 e6       	ldi	r30, 0x68	; 104
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	f2 d0       	rcall	.+484    	; 0x1160 <__fp_powser>
     f7c:	24 d1       	rcall	.+584    	; 0x11c6 <__fp_round>
     f7e:	2f 91       	pop	r18
     f80:	3f 91       	pop	r19
     f82:	4f 91       	pop	r20
     f84:	5f 91       	pop	r21
     f86:	6c d1       	rcall	.+728    	; 0x1260 <__mulsf3x>
     f88:	dd 23       	and	r29, r29
     f8a:	49 f0       	breq	.+18     	; 0xf9e <atan+0x4c>
     f8c:	90 58       	subi	r25, 0x80	; 128
     f8e:	a2 ea       	ldi	r26, 0xA2	; 162
     f90:	2a ed       	ldi	r18, 0xDA	; 218
     f92:	3f e0       	ldi	r19, 0x0F	; 15
     f94:	49 ec       	ldi	r20, 0xC9	; 201
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	d0 78       	andi	r29, 0x80	; 128
     f9a:	5d 27       	eor	r21, r29
     f9c:	c8 d1       	rcall	.+912    	; 0x132e <__addsf3x>
     f9e:	df 91       	pop	r29
     fa0:	12 c1       	rjmp	.+548    	; 0x11c6 <__fp_round>

00000fa2 <__divsf3>:
     fa2:	0c d0       	rcall	.+24     	; 0xfbc <__divsf3x>
     fa4:	10 c1       	rjmp	.+544    	; 0x11c6 <__fp_round>
     fa6:	08 d1       	rcall	.+528    	; 0x11b8 <__fp_pscB>
     fa8:	40 f0       	brcs	.+16     	; 0xfba <__divsf3+0x18>
     faa:	ff d0       	rcall	.+510    	; 0x11aa <__fp_pscA>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__divsf3+0x18>
     fae:	21 f4       	brne	.+8      	; 0xfb8 <__divsf3+0x16>
     fb0:	5f 3f       	cpi	r21, 0xFF	; 255
     fb2:	19 f0       	breq	.+6      	; 0xfba <__divsf3+0x18>
     fb4:	cc c0       	rjmp	.+408    	; 0x114e <__fp_inf>
     fb6:	51 11       	cpse	r21, r1
     fb8:	3a c1       	rjmp	.+628    	; 0x122e <__fp_szero>
     fba:	cf c0       	rjmp	.+414    	; 0x115a <__fp_nan>

00000fbc <__divsf3x>:
     fbc:	15 d1       	rcall	.+554    	; 0x11e8 <__fp_split3>
     fbe:	98 f3       	brcs	.-26     	; 0xfa6 <__divsf3+0x4>

00000fc0 <__divsf3_pse>:
     fc0:	99 23       	and	r25, r25
     fc2:	c9 f3       	breq	.-14     	; 0xfb6 <__divsf3+0x14>
     fc4:	55 23       	and	r21, r21
     fc6:	b1 f3       	breq	.-20     	; 0xfb4 <__divsf3+0x12>
     fc8:	95 1b       	sub	r25, r21
     fca:	55 0b       	sbc	r21, r21
     fcc:	bb 27       	eor	r27, r27
     fce:	aa 27       	eor	r26, r26
     fd0:	62 17       	cp	r22, r18
     fd2:	73 07       	cpc	r23, r19
     fd4:	84 07       	cpc	r24, r20
     fd6:	38 f0       	brcs	.+14     	; 0xfe6 <__divsf3_pse+0x26>
     fd8:	9f 5f       	subi	r25, 0xFF	; 255
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	44 1f       	adc	r20, r20
     fe2:	aa 1f       	adc	r26, r26
     fe4:	a9 f3       	breq	.-22     	; 0xfd0 <__divsf3_pse+0x10>
     fe6:	33 d0       	rcall	.+102    	; 0x104e <__divsf3_pse+0x8e>
     fe8:	0e 2e       	mov	r0, r30
     fea:	3a f0       	brmi	.+14     	; 0xffa <__divsf3_pse+0x3a>
     fec:	e0 e8       	ldi	r30, 0x80	; 128
     fee:	30 d0       	rcall	.+96     	; 0x1050 <__divsf3_pse+0x90>
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	e6 95       	lsr	r30
     ff6:	00 1c       	adc	r0, r0
     ff8:	ca f7       	brpl	.-14     	; 0xfec <__divsf3_pse+0x2c>
     ffa:	29 d0       	rcall	.+82     	; 0x104e <__divsf3_pse+0x8e>
     ffc:	fe 2f       	mov	r31, r30
     ffe:	27 d0       	rcall	.+78     	; 0x104e <__divsf3_pse+0x8e>
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	bb 1f       	adc	r27, r27
    1008:	26 17       	cp	r18, r22
    100a:	37 07       	cpc	r19, r23
    100c:	48 07       	cpc	r20, r24
    100e:	ab 07       	cpc	r26, r27
    1010:	b0 e8       	ldi	r27, 0x80	; 128
    1012:	09 f0       	breq	.+2      	; 0x1016 <__divsf3_pse+0x56>
    1014:	bb 0b       	sbc	r27, r27
    1016:	80 2d       	mov	r24, r0
    1018:	bf 01       	movw	r22, r30
    101a:	ff 27       	eor	r31, r31
    101c:	93 58       	subi	r25, 0x83	; 131
    101e:	5f 4f       	sbci	r21, 0xFF	; 255
    1020:	2a f0       	brmi	.+10     	; 0x102c <__divsf3_pse+0x6c>
    1022:	9e 3f       	cpi	r25, 0xFE	; 254
    1024:	51 05       	cpc	r21, r1
    1026:	68 f0       	brcs	.+26     	; 0x1042 <__divsf3_pse+0x82>
    1028:	92 c0       	rjmp	.+292    	; 0x114e <__fp_inf>
    102a:	01 c1       	rjmp	.+514    	; 0x122e <__fp_szero>
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	ec f3       	brlt	.-6      	; 0x102a <__divsf3_pse+0x6a>
    1030:	98 3e       	cpi	r25, 0xE8	; 232
    1032:	dc f3       	brlt	.-10     	; 0x102a <__divsf3_pse+0x6a>
    1034:	86 95       	lsr	r24
    1036:	77 95       	ror	r23
    1038:	67 95       	ror	r22
    103a:	b7 95       	ror	r27
    103c:	f7 95       	ror	r31
    103e:	9f 5f       	subi	r25, 0xFF	; 255
    1040:	c9 f7       	brne	.-14     	; 0x1034 <__divsf3_pse+0x74>
    1042:	88 0f       	add	r24, r24
    1044:	91 1d       	adc	r25, r1
    1046:	96 95       	lsr	r25
    1048:	87 95       	ror	r24
    104a:	97 f9       	bld	r25, 7
    104c:	08 95       	ret
    104e:	e1 e0       	ldi	r30, 0x01	; 1
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	bb 1f       	adc	r27, r27
    1058:	62 17       	cp	r22, r18
    105a:	73 07       	cpc	r23, r19
    105c:	84 07       	cpc	r24, r20
    105e:	ba 07       	cpc	r27, r26
    1060:	20 f0       	brcs	.+8      	; 0x106a <__divsf3_pse+0xaa>
    1062:	62 1b       	sub	r22, r18
    1064:	73 0b       	sbc	r23, r19
    1066:	84 0b       	sbc	r24, r20
    1068:	ba 0b       	sbc	r27, r26
    106a:	ee 1f       	adc	r30, r30
    106c:	88 f7       	brcc	.-30     	; 0x1050 <__divsf3_pse+0x90>
    106e:	e0 95       	com	r30
    1070:	08 95       	ret

00001072 <__fixsfsi>:
    1072:	04 d0       	rcall	.+8      	; 0x107c <__fixunssfsi>
    1074:	68 94       	set
    1076:	b1 11       	cpse	r27, r1
    1078:	da c0       	rjmp	.+436    	; 0x122e <__fp_szero>
    107a:	08 95       	ret

0000107c <__fixunssfsi>:
    107c:	bd d0       	rcall	.+378    	; 0x11f8 <__fp_splitA>
    107e:	88 f0       	brcs	.+34     	; 0x10a2 <__fixunssfsi+0x26>
    1080:	9f 57       	subi	r25, 0x7F	; 127
    1082:	90 f0       	brcs	.+36     	; 0x10a8 <__fixunssfsi+0x2c>
    1084:	b9 2f       	mov	r27, r25
    1086:	99 27       	eor	r25, r25
    1088:	b7 51       	subi	r27, 0x17	; 23
    108a:	a0 f0       	brcs	.+40     	; 0x10b4 <__fixunssfsi+0x38>
    108c:	d1 f0       	breq	.+52     	; 0x10c2 <__fixunssfsi+0x46>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	1a f0       	brmi	.+6      	; 0x109e <__fixunssfsi+0x22>
    1098:	ba 95       	dec	r27
    109a:	c9 f7       	brne	.-14     	; 0x108e <__fixunssfsi+0x12>
    109c:	12 c0       	rjmp	.+36     	; 0x10c2 <__fixunssfsi+0x46>
    109e:	b1 30       	cpi	r27, 0x01	; 1
    10a0:	81 f0       	breq	.+32     	; 0x10c2 <__fixunssfsi+0x46>
    10a2:	c4 d0       	rcall	.+392    	; 0x122c <__fp_zero>
    10a4:	b1 e0       	ldi	r27, 0x01	; 1
    10a6:	08 95       	ret
    10a8:	c1 c0       	rjmp	.+386    	; 0x122c <__fp_zero>
    10aa:	67 2f       	mov	r22, r23
    10ac:	78 2f       	mov	r23, r24
    10ae:	88 27       	eor	r24, r24
    10b0:	b8 5f       	subi	r27, 0xF8	; 248
    10b2:	39 f0       	breq	.+14     	; 0x10c2 <__fixunssfsi+0x46>
    10b4:	b9 3f       	cpi	r27, 0xF9	; 249
    10b6:	cc f3       	brlt	.-14     	; 0x10aa <__fixunssfsi+0x2e>
    10b8:	86 95       	lsr	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	b3 95       	inc	r27
    10c0:	d9 f7       	brne	.-10     	; 0x10b8 <__fixunssfsi+0x3c>
    10c2:	3e f4       	brtc	.+14     	; 0x10d2 <__fixunssfsi+0x56>
    10c4:	90 95       	com	r25
    10c6:	80 95       	com	r24
    10c8:	70 95       	com	r23
    10ca:	61 95       	neg	r22
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	08 95       	ret

000010d4 <__floatunsisf>:
    10d4:	e8 94       	clt
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <__floatsisf+0x12>

000010d8 <__floatsisf>:
    10d8:	97 fb       	bst	r25, 7
    10da:	3e f4       	brtc	.+14     	; 0x10ea <__floatsisf+0x12>
    10dc:	90 95       	com	r25
    10de:	80 95       	com	r24
    10e0:	70 95       	com	r23
    10e2:	61 95       	neg	r22
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	8f 4f       	sbci	r24, 0xFF	; 255
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	99 23       	and	r25, r25
    10ec:	a9 f0       	breq	.+42     	; 0x1118 <__floatsisf+0x40>
    10ee:	f9 2f       	mov	r31, r25
    10f0:	96 e9       	ldi	r25, 0x96	; 150
    10f2:	bb 27       	eor	r27, r27
    10f4:	93 95       	inc	r25
    10f6:	f6 95       	lsr	r31
    10f8:	87 95       	ror	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	b7 95       	ror	r27
    1100:	f1 11       	cpse	r31, r1
    1102:	f8 cf       	rjmp	.-16     	; 0x10f4 <__floatsisf+0x1c>
    1104:	fa f4       	brpl	.+62     	; 0x1144 <__floatsisf+0x6c>
    1106:	bb 0f       	add	r27, r27
    1108:	11 f4       	brne	.+4      	; 0x110e <__floatsisf+0x36>
    110a:	60 ff       	sbrs	r22, 0
    110c:	1b c0       	rjmp	.+54     	; 0x1144 <__floatsisf+0x6c>
    110e:	6f 5f       	subi	r22, 0xFF	; 255
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	8f 4f       	sbci	r24, 0xFF	; 255
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <__floatsisf+0x6c>
    1118:	88 23       	and	r24, r24
    111a:	11 f0       	breq	.+4      	; 0x1120 <__floatsisf+0x48>
    111c:	96 e9       	ldi	r25, 0x96	; 150
    111e:	11 c0       	rjmp	.+34     	; 0x1142 <__floatsisf+0x6a>
    1120:	77 23       	and	r23, r23
    1122:	21 f0       	breq	.+8      	; 0x112c <__floatsisf+0x54>
    1124:	9e e8       	ldi	r25, 0x8E	; 142
    1126:	87 2f       	mov	r24, r23
    1128:	76 2f       	mov	r23, r22
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <__floatsisf+0x5e>
    112c:	66 23       	and	r22, r22
    112e:	71 f0       	breq	.+28     	; 0x114c <__floatsisf+0x74>
    1130:	96 e8       	ldi	r25, 0x86	; 134
    1132:	86 2f       	mov	r24, r22
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	2a f0       	brmi	.+10     	; 0x1144 <__floatsisf+0x6c>
    113a:	9a 95       	dec	r25
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	88 1f       	adc	r24, r24
    1142:	da f7       	brpl	.-10     	; 0x113a <__floatsisf+0x62>
    1144:	88 0f       	add	r24, r24
    1146:	96 95       	lsr	r25
    1148:	87 95       	ror	r24
    114a:	97 f9       	bld	r25, 7
    114c:	08 95       	ret

0000114e <__fp_inf>:
    114e:	97 f9       	bld	r25, 7
    1150:	9f 67       	ori	r25, 0x7F	; 127
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	08 95       	ret

0000115a <__fp_nan>:
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	80 ec       	ldi	r24, 0xC0	; 192
    115e:	08 95       	ret

00001160 <__fp_powser>:
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	1f 93       	push	r17
    1166:	0f 93       	push	r16
    1168:	ff 92       	push	r15
    116a:	ef 92       	push	r14
    116c:	df 92       	push	r13
    116e:	7b 01       	movw	r14, r22
    1170:	8c 01       	movw	r16, r24
    1172:	68 94       	set
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <__fp_powser+0x20>
    1176:	da 2e       	mov	r13, r26
    1178:	ef 01       	movw	r28, r30
    117a:	72 d0       	rcall	.+228    	; 0x1260 <__mulsf3x>
    117c:	fe 01       	movw	r30, r28
    117e:	e8 94       	clt
    1180:	a5 91       	lpm	r26, Z+
    1182:	25 91       	lpm	r18, Z+
    1184:	35 91       	lpm	r19, Z+
    1186:	45 91       	lpm	r20, Z+
    1188:	55 91       	lpm	r21, Z+
    118a:	ae f3       	brts	.-22     	; 0x1176 <__fp_powser+0x16>
    118c:	ef 01       	movw	r28, r30
    118e:	cf d0       	rcall	.+414    	; 0x132e <__addsf3x>
    1190:	fe 01       	movw	r30, r28
    1192:	97 01       	movw	r18, r14
    1194:	a8 01       	movw	r20, r16
    1196:	da 94       	dec	r13
    1198:	79 f7       	brne	.-34     	; 0x1178 <__fp_powser+0x18>
    119a:	df 90       	pop	r13
    119c:	ef 90       	pop	r14
    119e:	ff 90       	pop	r15
    11a0:	0f 91       	pop	r16
    11a2:	1f 91       	pop	r17
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <__fp_pscA>:
    11aa:	00 24       	eor	r0, r0
    11ac:	0a 94       	dec	r0
    11ae:	16 16       	cp	r1, r22
    11b0:	17 06       	cpc	r1, r23
    11b2:	18 06       	cpc	r1, r24
    11b4:	09 06       	cpc	r0, r25
    11b6:	08 95       	ret

000011b8 <__fp_pscB>:
    11b8:	00 24       	eor	r0, r0
    11ba:	0a 94       	dec	r0
    11bc:	12 16       	cp	r1, r18
    11be:	13 06       	cpc	r1, r19
    11c0:	14 06       	cpc	r1, r20
    11c2:	05 06       	cpc	r0, r21
    11c4:	08 95       	ret

000011c6 <__fp_round>:
    11c6:	09 2e       	mov	r0, r25
    11c8:	03 94       	inc	r0
    11ca:	00 0c       	add	r0, r0
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <__fp_round+0xc>
    11ce:	88 23       	and	r24, r24
    11d0:	52 f0       	brmi	.+20     	; 0x11e6 <__fp_round+0x20>
    11d2:	bb 0f       	add	r27, r27
    11d4:	40 f4       	brcc	.+16     	; 0x11e6 <__fp_round+0x20>
    11d6:	bf 2b       	or	r27, r31
    11d8:	11 f4       	brne	.+4      	; 0x11de <__fp_round+0x18>
    11da:	60 ff       	sbrs	r22, 0
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <__fp_round+0x20>
    11de:	6f 5f       	subi	r22, 0xFF	; 255
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	08 95       	ret

000011e8 <__fp_split3>:
    11e8:	57 fd       	sbrc	r21, 7
    11ea:	90 58       	subi	r25, 0x80	; 128
    11ec:	44 0f       	add	r20, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	59 f0       	breq	.+22     	; 0x1208 <__fp_splitA+0x10>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	71 f0       	breq	.+28     	; 0x1212 <__fp_splitA+0x1a>
    11f6:	47 95       	ror	r20

000011f8 <__fp_splitA>:
    11f8:	88 0f       	add	r24, r24
    11fa:	97 fb       	bst	r25, 7
    11fc:	99 1f       	adc	r25, r25
    11fe:	61 f0       	breq	.+24     	; 0x1218 <__fp_splitA+0x20>
    1200:	9f 3f       	cpi	r25, 0xFF	; 255
    1202:	79 f0       	breq	.+30     	; 0x1222 <__fp_splitA+0x2a>
    1204:	87 95       	ror	r24
    1206:	08 95       	ret
    1208:	12 16       	cp	r1, r18
    120a:	13 06       	cpc	r1, r19
    120c:	14 06       	cpc	r1, r20
    120e:	55 1f       	adc	r21, r21
    1210:	f2 cf       	rjmp	.-28     	; 0x11f6 <__fp_split3+0xe>
    1212:	46 95       	lsr	r20
    1214:	f1 df       	rcall	.-30     	; 0x11f8 <__fp_splitA>
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <__fp_splitA+0x30>
    1218:	16 16       	cp	r1, r22
    121a:	17 06       	cpc	r1, r23
    121c:	18 06       	cpc	r1, r24
    121e:	99 1f       	adc	r25, r25
    1220:	f1 cf       	rjmp	.-30     	; 0x1204 <__fp_splitA+0xc>
    1222:	86 95       	lsr	r24
    1224:	71 05       	cpc	r23, r1
    1226:	61 05       	cpc	r22, r1
    1228:	08 94       	sec
    122a:	08 95       	ret

0000122c <__fp_zero>:
    122c:	e8 94       	clt

0000122e <__fp_szero>:
    122e:	bb 27       	eor	r27, r27
    1230:	66 27       	eor	r22, r22
    1232:	77 27       	eor	r23, r23
    1234:	cb 01       	movw	r24, r22
    1236:	97 f9       	bld	r25, 7
    1238:	08 95       	ret

0000123a <inverse>:
    123a:	9b 01       	movw	r18, r22
    123c:	ac 01       	movw	r20, r24
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	9f e3       	ldi	r25, 0x3F	; 63
    1246:	ad ce       	rjmp	.-678    	; 0xfa2 <__divsf3>

00001248 <__mulsf3>:
    1248:	0b d0       	rcall	.+22     	; 0x1260 <__mulsf3x>
    124a:	bd cf       	rjmp	.-134    	; 0x11c6 <__fp_round>
    124c:	ae df       	rcall	.-164    	; 0x11aa <__fp_pscA>
    124e:	28 f0       	brcs	.+10     	; 0x125a <__mulsf3+0x12>
    1250:	b3 df       	rcall	.-154    	; 0x11b8 <__fp_pscB>
    1252:	18 f0       	brcs	.+6      	; 0x125a <__mulsf3+0x12>
    1254:	95 23       	and	r25, r21
    1256:	09 f0       	breq	.+2      	; 0x125a <__mulsf3+0x12>
    1258:	7a cf       	rjmp	.-268    	; 0x114e <__fp_inf>
    125a:	7f cf       	rjmp	.-258    	; 0x115a <__fp_nan>
    125c:	11 24       	eor	r1, r1
    125e:	e7 cf       	rjmp	.-50     	; 0x122e <__fp_szero>

00001260 <__mulsf3x>:
    1260:	c3 df       	rcall	.-122    	; 0x11e8 <__fp_split3>
    1262:	a0 f3       	brcs	.-24     	; 0x124c <__mulsf3+0x4>

00001264 <__mulsf3_pse>:
    1264:	95 9f       	mul	r25, r21
    1266:	d1 f3       	breq	.-12     	; 0x125c <__mulsf3+0x14>
    1268:	95 0f       	add	r25, r21
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	55 1f       	adc	r21, r21
    126e:	62 9f       	mul	r22, r18
    1270:	f0 01       	movw	r30, r0
    1272:	72 9f       	mul	r23, r18
    1274:	bb 27       	eor	r27, r27
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	63 9f       	mul	r22, r19
    127c:	aa 27       	eor	r26, r26
    127e:	f0 0d       	add	r31, r0
    1280:	b1 1d       	adc	r27, r1
    1282:	aa 1f       	adc	r26, r26
    1284:	64 9f       	mul	r22, r20
    1286:	66 27       	eor	r22, r22
    1288:	b0 0d       	add	r27, r0
    128a:	a1 1d       	adc	r26, r1
    128c:	66 1f       	adc	r22, r22
    128e:	82 9f       	mul	r24, r18
    1290:	22 27       	eor	r18, r18
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	73 9f       	mul	r23, r19
    129a:	b0 0d       	add	r27, r0
    129c:	a1 1d       	adc	r26, r1
    129e:	62 1f       	adc	r22, r18
    12a0:	83 9f       	mul	r24, r19
    12a2:	a0 0d       	add	r26, r0
    12a4:	61 1d       	adc	r22, r1
    12a6:	22 1f       	adc	r18, r18
    12a8:	74 9f       	mul	r23, r20
    12aa:	33 27       	eor	r19, r19
    12ac:	a0 0d       	add	r26, r0
    12ae:	61 1d       	adc	r22, r1
    12b0:	23 1f       	adc	r18, r19
    12b2:	84 9f       	mul	r24, r20
    12b4:	60 0d       	add	r22, r0
    12b6:	21 1d       	adc	r18, r1
    12b8:	82 2f       	mov	r24, r18
    12ba:	76 2f       	mov	r23, r22
    12bc:	6a 2f       	mov	r22, r26
    12be:	11 24       	eor	r1, r1
    12c0:	9f 57       	subi	r25, 0x7F	; 127
    12c2:	50 40       	sbci	r21, 0x00	; 0
    12c4:	8a f0       	brmi	.+34     	; 0x12e8 <__mulsf3_pse+0x84>
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <__mulsf3_pse+0x9c>
    12c8:	88 23       	and	r24, r24
    12ca:	4a f0       	brmi	.+18     	; 0x12de <__mulsf3_pse+0x7a>
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	bb 1f       	adc	r27, r27
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <__mulsf3_pse+0x64>
    12de:	9e 3f       	cpi	r25, 0xFE	; 254
    12e0:	51 05       	cpc	r21, r1
    12e2:	70 f0       	brcs	.+28     	; 0x1300 <__mulsf3_pse+0x9c>
    12e4:	34 cf       	rjmp	.-408    	; 0x114e <__fp_inf>
    12e6:	a3 cf       	rjmp	.-186    	; 0x122e <__fp_szero>
    12e8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ea:	ec f3       	brlt	.-6      	; 0x12e6 <__mulsf3_pse+0x82>
    12ec:	98 3e       	cpi	r25, 0xE8	; 232
    12ee:	dc f3       	brlt	.-10     	; 0x12e6 <__mulsf3_pse+0x82>
    12f0:	86 95       	lsr	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	b7 95       	ror	r27
    12f8:	f7 95       	ror	r31
    12fa:	e7 95       	ror	r30
    12fc:	9f 5f       	subi	r25, 0xFF	; 255
    12fe:	c1 f7       	brne	.-16     	; 0x12f0 <__mulsf3_pse+0x8c>
    1300:	fe 2b       	or	r31, r30
    1302:	88 0f       	add	r24, r24
    1304:	91 1d       	adc	r25, r1
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret

0000130e <square>:
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	9a cf       	rjmp	.-204    	; 0x1248 <__mulsf3>
    1314:	4a df       	rcall	.-364    	; 0x11aa <__fp_pscA>
    1316:	30 f0       	brcs	.+12     	; 0x1324 <square+0x16>
    1318:	4f df       	rcall	.-354    	; 0x11b8 <__fp_pscB>
    131a:	20 f0       	brcs	.+8      	; 0x1324 <square+0x16>
    131c:	31 f4       	brne	.+12     	; 0x132a <square+0x1c>
    131e:	9f 3f       	cpi	r25, 0xFF	; 255
    1320:	11 f4       	brne	.+4      	; 0x1326 <square+0x18>
    1322:	1e f4       	brtc	.+6      	; 0x132a <square+0x1c>
    1324:	1a cf       	rjmp	.-460    	; 0x115a <__fp_nan>
    1326:	0e f4       	brtc	.+2      	; 0x132a <square+0x1c>
    1328:	e0 95       	com	r30
    132a:	e7 fb       	bst	r30, 7
    132c:	10 cf       	rjmp	.-480    	; 0x114e <__fp_inf>

0000132e <__addsf3x>:
    132e:	e9 2f       	mov	r30, r25
    1330:	5b df       	rcall	.-330    	; 0x11e8 <__fp_split3>
    1332:	80 f3       	brcs	.-32     	; 0x1314 <square+0x6>
    1334:	ba 17       	cp	r27, r26
    1336:	62 07       	cpc	r22, r18
    1338:	73 07       	cpc	r23, r19
    133a:	84 07       	cpc	r24, r20
    133c:	95 07       	cpc	r25, r21
    133e:	18 f0       	brcs	.+6      	; 0x1346 <__addsf3x+0x18>
    1340:	71 f4       	brne	.+28     	; 0x135e <__addsf3x+0x30>
    1342:	9e f5       	brtc	.+102    	; 0x13aa <__addsf3x+0x7c>
    1344:	73 cf       	rjmp	.-282    	; 0x122c <__fp_zero>
    1346:	0e f4       	brtc	.+2      	; 0x134a <__addsf3x+0x1c>
    1348:	e0 95       	com	r30
    134a:	0b 2e       	mov	r0, r27
    134c:	ba 2f       	mov	r27, r26
    134e:	a0 2d       	mov	r26, r0
    1350:	0b 01       	movw	r0, r22
    1352:	b9 01       	movw	r22, r18
    1354:	90 01       	movw	r18, r0
    1356:	0c 01       	movw	r0, r24
    1358:	ca 01       	movw	r24, r20
    135a:	a0 01       	movw	r20, r0
    135c:	11 24       	eor	r1, r1
    135e:	ff 27       	eor	r31, r31
    1360:	59 1b       	sub	r21, r25
    1362:	99 f0       	breq	.+38     	; 0x138a <__addsf3x+0x5c>
    1364:	59 3f       	cpi	r21, 0xF9	; 249
    1366:	50 f4       	brcc	.+20     	; 0x137c <__addsf3x+0x4e>
    1368:	50 3e       	cpi	r21, 0xE0	; 224
    136a:	68 f1       	brcs	.+90     	; 0x13c6 <__addsf3x+0x98>
    136c:	1a 16       	cp	r1, r26
    136e:	f0 40       	sbci	r31, 0x00	; 0
    1370:	a2 2f       	mov	r26, r18
    1372:	23 2f       	mov	r18, r19
    1374:	34 2f       	mov	r19, r20
    1376:	44 27       	eor	r20, r20
    1378:	58 5f       	subi	r21, 0xF8	; 248
    137a:	f3 cf       	rjmp	.-26     	; 0x1362 <__addsf3x+0x34>
    137c:	46 95       	lsr	r20
    137e:	37 95       	ror	r19
    1380:	27 95       	ror	r18
    1382:	a7 95       	ror	r26
    1384:	f0 40       	sbci	r31, 0x00	; 0
    1386:	53 95       	inc	r21
    1388:	c9 f7       	brne	.-14     	; 0x137c <__addsf3x+0x4e>
    138a:	7e f4       	brtc	.+30     	; 0x13aa <__addsf3x+0x7c>
    138c:	1f 16       	cp	r1, r31
    138e:	ba 0b       	sbc	r27, r26
    1390:	62 0b       	sbc	r22, r18
    1392:	73 0b       	sbc	r23, r19
    1394:	84 0b       	sbc	r24, r20
    1396:	ba f0       	brmi	.+46     	; 0x13c6 <__addsf3x+0x98>
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <__addsf3x+0x96>
    139c:	ff 0f       	add	r31, r31
    139e:	bb 1f       	adc	r27, r27
    13a0:	66 1f       	adc	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	c2 f7       	brpl	.-16     	; 0x1398 <__addsf3x+0x6a>
    13a8:	0e c0       	rjmp	.+28     	; 0x13c6 <__addsf3x+0x98>
    13aa:	ba 0f       	add	r27, r26
    13ac:	62 1f       	adc	r22, r18
    13ae:	73 1f       	adc	r23, r19
    13b0:	84 1f       	adc	r24, r20
    13b2:	48 f4       	brcc	.+18     	; 0x13c6 <__addsf3x+0x98>
    13b4:	87 95       	ror	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	f7 95       	ror	r31
    13be:	9e 3f       	cpi	r25, 0xFE	; 254
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <__addsf3x+0x96>
    13c2:	b3 cf       	rjmp	.-154    	; 0x132a <square+0x1c>
    13c4:	93 95       	inc	r25
    13c6:	88 0f       	add	r24, r24
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__addsf3x+0x9e>
    13ca:	99 27       	eor	r25, r25
    13cc:	ee 0f       	add	r30, r30
    13ce:	97 95       	ror	r25
    13d0:	87 95       	ror	r24
    13d2:	08 95       	ret

000013d4 <__mulsi3>:
    13d4:	62 9f       	mul	r22, r18
    13d6:	d0 01       	movw	r26, r0
    13d8:	73 9f       	mul	r23, r19
    13da:	f0 01       	movw	r30, r0
    13dc:	82 9f       	mul	r24, r18
    13de:	e0 0d       	add	r30, r0
    13e0:	f1 1d       	adc	r31, r1
    13e2:	64 9f       	mul	r22, r20
    13e4:	e0 0d       	add	r30, r0
    13e6:	f1 1d       	adc	r31, r1
    13e8:	92 9f       	mul	r25, r18
    13ea:	f0 0d       	add	r31, r0
    13ec:	83 9f       	mul	r24, r19
    13ee:	f0 0d       	add	r31, r0
    13f0:	74 9f       	mul	r23, r20
    13f2:	f0 0d       	add	r31, r0
    13f4:	65 9f       	mul	r22, r21
    13f6:	f0 0d       	add	r31, r0
    13f8:	99 27       	eor	r25, r25
    13fa:	72 9f       	mul	r23, r18
    13fc:	b0 0d       	add	r27, r0
    13fe:	e1 1d       	adc	r30, r1
    1400:	f9 1f       	adc	r31, r25
    1402:	63 9f       	mul	r22, r19
    1404:	b0 0d       	add	r27, r0
    1406:	e1 1d       	adc	r30, r1
    1408:	f9 1f       	adc	r31, r25
    140a:	bd 01       	movw	r22, r26
    140c:	cf 01       	movw	r24, r30
    140e:	11 24       	eor	r1, r1
    1410:	08 95       	ret

00001412 <__divmodhi4>:
    1412:	97 fb       	bst	r25, 7
    1414:	09 2e       	mov	r0, r25
    1416:	07 26       	eor	r0, r23
    1418:	0a d0       	rcall	.+20     	; 0x142e <__divmodhi4_neg1>
    141a:	77 fd       	sbrc	r23, 7
    141c:	04 d0       	rcall	.+8      	; 0x1426 <__divmodhi4_neg2>
    141e:	49 d0       	rcall	.+146    	; 0x14b2 <__udivmodhi4>
    1420:	06 d0       	rcall	.+12     	; 0x142e <__divmodhi4_neg1>
    1422:	00 20       	and	r0, r0
    1424:	1a f4       	brpl	.+6      	; 0x142c <__divmodhi4_exit>

00001426 <__divmodhi4_neg2>:
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255

0000142c <__divmodhi4_exit>:
    142c:	08 95       	ret

0000142e <__divmodhi4_neg1>:
    142e:	f6 f7       	brtc	.-4      	; 0x142c <__divmodhi4_exit>
    1430:	90 95       	com	r25
    1432:	81 95       	neg	r24
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	08 95       	ret

00001438 <__udivmodsi4>:
    1438:	a1 e2       	ldi	r26, 0x21	; 33
    143a:	1a 2e       	mov	r1, r26
    143c:	aa 1b       	sub	r26, r26
    143e:	bb 1b       	sub	r27, r27
    1440:	fd 01       	movw	r30, r26
    1442:	0d c0       	rjmp	.+26     	; 0x145e <__udivmodsi4_ep>

00001444 <__udivmodsi4_loop>:
    1444:	aa 1f       	adc	r26, r26
    1446:	bb 1f       	adc	r27, r27
    1448:	ee 1f       	adc	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	a2 17       	cp	r26, r18
    144e:	b3 07       	cpc	r27, r19
    1450:	e4 07       	cpc	r30, r20
    1452:	f5 07       	cpc	r31, r21
    1454:	20 f0       	brcs	.+8      	; 0x145e <__udivmodsi4_ep>
    1456:	a2 1b       	sub	r26, r18
    1458:	b3 0b       	sbc	r27, r19
    145a:	e4 0b       	sbc	r30, r20
    145c:	f5 0b       	sbc	r31, r21

0000145e <__udivmodsi4_ep>:
    145e:	66 1f       	adc	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	1a 94       	dec	r1
    1468:	69 f7       	brne	.-38     	; 0x1444 <__udivmodsi4_loop>
    146a:	60 95       	com	r22
    146c:	70 95       	com	r23
    146e:	80 95       	com	r24
    1470:	90 95       	com	r25
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	bd 01       	movw	r22, r26
    1478:	cf 01       	movw	r24, r30
    147a:	08 95       	ret

0000147c <__divmodsi4>:
    147c:	97 fb       	bst	r25, 7
    147e:	09 2e       	mov	r0, r25
    1480:	05 26       	eor	r0, r21
    1482:	0e d0       	rcall	.+28     	; 0x14a0 <__divmodsi4_neg1>
    1484:	57 fd       	sbrc	r21, 7
    1486:	04 d0       	rcall	.+8      	; 0x1490 <__divmodsi4_neg2>
    1488:	d7 df       	rcall	.-82     	; 0x1438 <__udivmodsi4>
    148a:	0a d0       	rcall	.+20     	; 0x14a0 <__divmodsi4_neg1>
    148c:	00 1c       	adc	r0, r0
    148e:	38 f4       	brcc	.+14     	; 0x149e <__divmodsi4_exit>

00001490 <__divmodsi4_neg2>:
    1490:	50 95       	com	r21
    1492:	40 95       	com	r20
    1494:	30 95       	com	r19
    1496:	21 95       	neg	r18
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	4f 4f       	sbci	r20, 0xFF	; 255
    149c:	5f 4f       	sbci	r21, 0xFF	; 255

0000149e <__divmodsi4_exit>:
    149e:	08 95       	ret

000014a0 <__divmodsi4_neg1>:
    14a0:	f6 f7       	brtc	.-4      	; 0x149e <__divmodsi4_exit>
    14a2:	90 95       	com	r25
    14a4:	80 95       	com	r24
    14a6:	70 95       	com	r23
    14a8:	61 95       	neg	r22
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	8f 4f       	sbci	r24, 0xFF	; 255
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	08 95       	ret

000014b2 <__udivmodhi4>:
    14b2:	aa 1b       	sub	r26, r26
    14b4:	bb 1b       	sub	r27, r27
    14b6:	51 e1       	ldi	r21, 0x11	; 17
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <__udivmodhi4_ep>

000014ba <__udivmodhi4_loop>:
    14ba:	aa 1f       	adc	r26, r26
    14bc:	bb 1f       	adc	r27, r27
    14be:	a6 17       	cp	r26, r22
    14c0:	b7 07       	cpc	r27, r23
    14c2:	10 f0       	brcs	.+4      	; 0x14c8 <__udivmodhi4_ep>
    14c4:	a6 1b       	sub	r26, r22
    14c6:	b7 0b       	sbc	r27, r23

000014c8 <__udivmodhi4_ep>:
    14c8:	88 1f       	adc	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	5a 95       	dec	r21
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <__udivmodhi4_loop>
    14d0:	80 95       	com	r24
    14d2:	90 95       	com	r25
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	08 95       	ret

000014da <_exit>:
    14da:	f8 94       	cli

000014dc <__stop_program>:
    14dc:	ff cf       	rjmp	.-2      	; 0x14dc <__stop_program>
