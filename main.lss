
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001cb4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800122  00800122  00001d6a  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00001d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ca3  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028cf  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b12  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002074  00000000  00000000  00005ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000910  00000000  00000000  00007f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c1c  00000000  00000000  00008854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e9c  00000000  00000000  00009470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000a30c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e4 eb       	ldi	r30, 0xB4	; 180
      aa:	fc e1       	ldi	r31, 0x1C	; 28
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a7 3a       	cpi	r26, 0xA7	; 167
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29

  DDRD  |= (1<<4);
      f0:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      f2:	5c 98       	cbi	0x0b, 4	; 11
  
  Timer_Init();
      f4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Timer_Init>
  debug_init();
      f8:	0e 94 93 06 	call	0xd26	; 0xd26 <debug_init>
  debug_tx_text_nl("Debug Started");
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 0c 05 	call	0xa18	; 0xa18 <debug_tx_text_nl>
  
  MPU6050_Init();
     104:	0e 94 0b 0b 	call	0x1616	; 0x1616 <MPU6050_Init>
     108:	aa 24       	eor	r10, r10
     10a:	bb 24       	eor	r11, r11
     10c:	65 01       	movw	r12, r10
     10e:	ee 24       	eor	r14, r14
     110:	ff 24       	eor	r15, r15
     112:	87 01       	movw	r16, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     114:	c0 e3       	ldi	r28, 0x30	; 48
     116:	d5 e7       	ldi	r29, 0x75	; 117
  int32_t ang_z=0;
  int32_t temp=0;
  while(1){
	
	
	MPU6050_Read_Acc_Gyro();
     118:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <MPU6050_Read_Acc_Gyro>
	
	int32_t time=Timer_Get_Time();
     11c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Timer_Get_Time>
     120:	96 2e       	mov	r9, r22
     122:	87 2e       	mov	r8, r23
     124:	78 2e       	mov	r7, r24
     126:	69 2e       	mov	r6, r25
	Timer_Start();
     128:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <Timer_Start>
	
	if(MPU6050_Get_Error()==0){
     12c:	0e 94 38 08 	call	0x1070	; 0x1070 <MPU6050_Get_Error>
     130:	89 2b       	or	r24, r25
     132:	09 f0       	breq	.+2      	; 0x136 <main+0x62>
     134:	51 c0       	rjmp	.+162    	; 0x1d8 <main+0x104>
	  
	  temp = MPU6050_Get_GyroX();
     136:	0e 94 06 08 	call	0x100c	; 0x100c <MPU6050_Get_GyroX>
     13a:	aa 27       	eor	r26, r26
     13c:	97 fd       	sbrc	r25, 7
     13e:	a0 95       	com	r26
     140:	ba 2f       	mov	r27, r26
	  temp*= time;
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	29 2d       	mov	r18, r9
     148:	38 2d       	mov	r19, r8
     14a:	47 2d       	mov	r20, r7
     14c:	56 2d       	mov	r21, r6
     14e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsi3>
	  temp/= 100000;
	  ang_x+=temp;
     152:	20 ea       	ldi	r18, 0xA0	; 160
     154:	36 e8       	ldi	r19, 0x86	; 134
     156:	41 e0       	ldi	r20, 0x01	; 1
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__divmodsi4>
     15e:	a2 0e       	add	r10, r18
     160:	b3 1e       	adc	r11, r19
     162:	c4 1e       	adc	r12, r20
     164:	d5 1e       	adc	r13, r21
	  
	  temp = MPU6050_Get_GyroY();
     166:	0e 94 0b 08 	call	0x1016	; 0x1016 <MPU6050_Get_GyroY>
     16a:	aa 27       	eor	r26, r26
     16c:	97 fd       	sbrc	r25, 7
     16e:	a0 95       	com	r26
     170:	ba 2f       	mov	r27, r26
	  temp*= time;
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	29 2d       	mov	r18, r9
     178:	38 2d       	mov	r19, r8
     17a:	47 2d       	mov	r20, r7
     17c:	56 2d       	mov	r21, r6
     17e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsi3>
	  temp/= 100000;
	  ang_y+=temp;
     182:	20 ea       	ldi	r18, 0xA0	; 160
     184:	36 e8       	ldi	r19, 0x86	; 134
     186:	41 e0       	ldi	r20, 0x01	; 1
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__divmodsi4>
     18e:	e2 0e       	add	r14, r18
     190:	f3 1e       	adc	r15, r19
     192:	04 1f       	adc	r16, r20
     194:	15 1f       	adc	r17, r21
	  
	  temp = MPU6050_Get_GyroZ();
     196:	0e 94 10 08 	call	0x1020	; 0x1020 <MPU6050_Get_GyroZ>
	  temp*= time;
	  temp/= 100000;
	  ang_z+=temp;
	  
	  debug_tx_number_cm(MPU6050_Read_Pitch());
     19a:	0e 94 8a 08 	call	0x1114	; 0x1114 <MPU6050_Read_Pitch>
     19e:	aa 27       	eor	r26, r26
     1a0:	97 fd       	sbrc	r25, 7
     1a2:	a0 95       	com	r26
     1a4:	ba 2f       	mov	r27, r26
     1a6:	bc 01       	movw	r22, r24
     1a8:	cd 01       	movw	r24, r26
     1aa:	0e 94 93 05 	call	0xb26	; 0xb26 <debug_tx_number_cm>
	  debug_tx_number_cm(MPU6050_Read_Roll());
     1ae:	0e 94 42 08 	call	0x1084	; 0x1084 <MPU6050_Read_Roll>
     1b2:	aa 27       	eor	r26, r26
     1b4:	97 fd       	sbrc	r25, 7
     1b6:	a0 95       	com	r26
     1b8:	ba 2f       	mov	r27, r26
     1ba:	bc 01       	movw	r22, r24
     1bc:	cd 01       	movw	r24, r26
     1be:	0e 94 93 05 	call	0xb26	; 0xb26 <debug_tx_number_cm>
	  debug_tx_number_cm(ang_x);
     1c2:	c6 01       	movw	r24, r12
     1c4:	b5 01       	movw	r22, r10
     1c6:	0e 94 93 05 	call	0xb26	; 0xb26 <debug_tx_number_cm>
	  debug_tx_number_cm(ang_y);
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 93 05 	call	0xb26	; 0xb26 <debug_tx_number_cm>
	  //debug_tx_number_cm(ang_z);
	  debug_tx_nl();
     1d2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <debug_tx_nl>
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <main+0x108>
	  
	}else{
	  MPU6050_Restart();
     1d8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MPU6050_Restart>
     1dc:	ce 01       	movw	r24, r28
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x10a>
     1e2:	9a cf       	rjmp	.-204    	; 0x118 <main+0x44>

000001e4 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     1e4:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     1e8:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     1f2:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     1f6:	10 92 27 01 	sts	0x0127, r1
     1fa:	10 92 26 01 	sts	0x0126, r1
}
     1fe:	08 95       	ret

00000200 <I2C_Error_Clear>:

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     200:	10 92 25 01 	sts	0x0125, r1
}
     204:	08 95       	ret

00000206 <I2C_Error_Accu_Clear>:

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     206:	10 92 27 01 	sts	0x0127, r1
     20a:	10 92 26 01 	sts	0x0126, r1
}
     20e:	08 95       	ret

00000210 <I2C_Error_Clear_All>:
  I2C.Error=0x00;
  I2C.ErrorAccu=0x00;
}

void I2C_Error_Clear(void){
  I2C.Error=0x00;
     210:	10 92 25 01 	sts	0x0125, r1
}

void I2C_Error_Accu_Clear(void){
  I2C.ErrorAccu=0x00;
     214:	10 92 27 01 	sts	0x0127, r1
     218:	10 92 26 01 	sts	0x0126, r1
}

void I2C_Error_Clear_All(void){
  I2C_Error_Clear();
  I2C_Error_Accu_Clear();
}
     21c:	08 95       	ret

0000021e <I2C_Get_Error>:

uint8_t I2C_Get_Error(void){
  return I2C.Error;
}
     21e:	80 91 25 01 	lds	r24, 0x0125
     222:	08 95       	ret

00000224 <I2C_Get_ErrorAccu>:

uint16_t I2C_Get_ErrorAccu(void){
  return I2C.ErrorAccu;
}
     224:	80 91 26 01 	lds	r24, 0x0126
     228:	90 91 27 01 	lds	r25, 0x0127
     22c:	08 95       	ret

0000022e <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     22e:	80 e5       	ldi	r24, 0x50	; 80
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     234:	08 95       	ret

00000236 <I2C_Bit_Delay>:
     236:	80 ea       	ldi	r24, 0xA0	; 160
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     23c:	08 95       	ret

0000023e <I2C_Guard_Delay>:
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	8a 95       	dec	r24
     242:	f1 f7       	brne	.-4      	; 0x240 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     244:	08 95       	ret

00000246 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	11 f4       	brne	.+4      	; 0x24e <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     24a:	3d 9a       	sbi	0x07, 5	; 7
     24c:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     24e:	3d 98       	cbi	0x07, 5	; 7
     250:	08 95       	ret

00000252 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	11 f4       	brne	.+4      	; 0x25a <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     256:	45 9a       	sbi	0x08, 5	; 8
     258:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     25a:	45 98       	cbi	0x08, 5	; 8
     25c:	08 95       	ret

0000025e <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     25e:	81 30       	cpi	r24, 0x01	; 1
     260:	19 f4       	brne	.+6      	; 0x268 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     262:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     264:	3d 98       	cbi	0x07, 5	; 7
     266:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     268:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     26a:	3d 9a       	sbi	0x07, 5	; 7
     26c:	08 95       	ret

0000026e <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     26e:	86 b1       	in	r24, 0x06	; 6
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	25 e0       	ldi	r18, 0x05	; 5
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	2a 95       	dec	r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     27c:	81 70       	andi	r24, 0x01	; 1
     27e:	08 95       	ret

00000280 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	11 f4       	brne	.+4      	; 0x288 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     284:	3c 9a       	sbi	0x07, 4	; 7
     286:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     288:	3c 98       	cbi	0x07, 4	; 7
     28a:	08 95       	ret

0000028c <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	11 f4       	brne	.+4      	; 0x294 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     290:	44 9a       	sbi	0x08, 4	; 8
     292:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     294:	44 98       	cbi	0x08, 4	; 8
     296:	08 95       	ret

00000298 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	19 f4       	brne	.+6      	; 0x2a2 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     29c:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     29e:	3c 98       	cbi	0x07, 4	; 7
     2a0:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     2a2:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     2a4:	3c 9a       	sbi	0x07, 4	; 7
     2a6:	08 95       	ret

000002a8 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     2a8:	86 b1       	in	r24, 0x06	; 6
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	34 e0       	ldi	r19, 0x04	; 4
     2ae:	96 95       	lsr	r25
     2b0:	87 95       	ror	r24
     2b2:	3a 95       	dec	r19
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     2b6:	81 70       	andi	r24, 0x01	; 1
     2b8:	08 95       	ret

000002ba <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     2ba:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}
     2c2:	08 95       	ret

000002c4 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     2c4:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
}
     2cc:	08 95       	ret

000002ce <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     2ce:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     2d0:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
}
     2de:	08 95       	ret

000002e0 <I2C_Start>:

void I2C_Start(void){
     2e0:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     2ee:	10 e5       	ldi	r17, 0x50	; 80
     2f0:	81 2f       	mov	r24, r17
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     2fc:	81 2f       	mov	r24, r17
     2fe:	8a 95       	dec	r24
     300:	f1 f7       	brne	.-4      	; 0x2fe <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     308:	1a 95       	dec	r17
     30a:	f1 f7       	brne	.-4      	; 0x308 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     30c:	1f 91       	pop	r17
     30e:	08 95       	ret

00000310 <I2C_Stop>:

void I2C_Stop(void){
     310:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     31e:	10 e5       	ldi	r17, 0x50	; 80
     320:	81 2f       	mov	r24, r17
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     32c:	81 2f       	mov	r24, r17
     32e:	8a 95       	dec	r24
     330:	f1 f7       	brne	.-4      	; 0x32e <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     338:	1a 95       	dec	r17
     33a:	f1 f7       	brne	.-4      	; 0x338 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     33c:	1f 91       	pop	r17
     33e:	08 95       	ret

00000340 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	08 2f       	mov	r16, r24
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	50 e5       	ldi	r21, 0x50	; 80
     34e:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     350:	48 e0       	ldi	r20, 0x08	; 8
     352:	e4 2e       	mov	r14, r20
     354:	07 ff       	sbrs	r16, 7
     356:	02 c0       	rjmp	.+4      	; 0x35c <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	01 c0       	rjmp	.+2      	; 0x35e <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     362:	8f 2d       	mov	r24, r15
     364:	8a 95       	dec	r24
     366:	f1 f7       	brne	.-4      	; 0x364 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     36e:	8f 2d       	mov	r24, r15
     370:	8a 95       	dec	r24
     372:	f1 f7       	brne	.-4      	; 0x370 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     37a:	8e 2d       	mov	r24, r14
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     380:	1f 5f       	subi	r17, 0xFF	; 255
     382:	18 30       	cpi	r17, 0x08	; 8
     384:	11 f0       	breq	.+4      	; 0x38a <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     386:	00 0f       	add	r16, r16
     388:	e5 cf       	rjmp	.-54     	; 0x354 <I2C_Data_Send+0x14>
  }
}
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	08 95       	ret

00000394 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	60 e5       	ldi	r22, 0x50	; 80
     3a6:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     3a8:	11 0f       	add	r17, r17
     3aa:	8f 2d       	mov	r24, r15
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     3b6:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     3b8:	11 60       	ori	r17, 0x01	; 1
     3ba:	8f 2d       	mov	r24, r15
     3bc:	8a 95       	dec	r24
     3be:	f1 f7       	brne	.-4      	; 0x3bc <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	08 30       	cpi	r16, 0x08	; 8
     3ca:	71 f7       	brne	.-36     	; 0x3a8 <I2C_Data_Receive+0x14>
     3cc:	80 e5       	ldi	r24, 0x50	; 80
     3ce:	8a 95       	dec	r24
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <I2C_Data_Receive+0x3a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  return data;
}
     3d2:	81 2f       	mov	r24, r17
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	08 95       	ret

000003dc <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     3dc:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     3e4:	10 e5       	ldi	r17, 0x50	; 80
     3e6:	81 2f       	mov	r24, r17
     3e8:	8a 95       	dec	r24
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     3f2:	1a 95       	dec	r17
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}
     3fc:	1f 91       	pop	r17
     3fe:	08 95       	ret

00000400 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     400:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     408:	10 e5       	ldi	r17, 0x50	; 80
     40a:	81 2f       	mov	r24, r17
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     416:	1a 95       	dec	r17
     418:	f1 f7       	brne	.-4      	; 0x416 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
}
     420:	1f 91       	pop	r17
     422:	08 95       	ret

00000424 <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_SDA_Set_Output>
     42e:	00 e5       	ldi	r16, 0x50	; 80
     430:	80 2f       	mov	r24, r16
     432:	8a 95       	dec	r24
     434:	f1 f7       	brne	.-4      	; 0x432 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     43c:	16 b1       	in	r17, 0x06	; 6
     43e:	0a 95       	dec	r16
     440:	f1 f7       	brne	.-4      	; 0x43e <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_SCL_Set_Output>
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	8a 95       	dec	r24
     44c:	f1 f7       	brne	.-4      	; 0x44a <I2C_Get_Ack+0x26>
     44e:	12 95       	swap	r17
     450:	1f 70       	andi	r17, 0x0F	; 15
     452:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     454:	81 2f       	mov	r24, r17
     456:	81 70       	andi	r24, 0x01	; 1
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     45e:	1f 93       	push	r17
     460:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     462:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(address);
     466:	81 2f       	mov	r24, r17
     468:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     46c:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     470:	18 2f       	mov	r17, r24
  I2C_Stop();
     472:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  return ack;
}
     476:	81 2f       	mov	r24, r17
     478:	1f 91       	pop	r17
     47a:	08 95       	ret

0000047c <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     47c:	1f 93       	push	r17
     47e:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t sts=0;
  for(uint8_t i=1;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     480:	81 2f       	mov	r24, r17
     482:	0e 94 2f 02 	call	0x45e	; 0x45e <I2C_Send_Device_Address>
	if(sts==1){
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	11 f4       	brne	.+4      	; 0x48e <I2C_Get_Device_Address+0x12>
     48a:	81 2f       	mov	r24, r17
     48c:	03 c0       	rjmp	.+6      	; 0x494 <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=1;i<255;i++){
     48e:	1f 5f       	subi	r17, 0xFF	; 255
     490:	1f 3f       	cpi	r17, 0xFF	; 255
     492:	b1 f7       	brne	.-20     	; 0x480 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     494:	1f 91       	pop	r17
     496:	08 95       	ret

00000498 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     4a4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     4a8:	80 91 22 01 	lds	r24, 0x0122
     4ac:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     4b0:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     4b4:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     4b6:	81 2f       	mov	r24, r17
     4b8:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     4bc:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     4c0:	f8 2e       	mov	r15, r24
  I2C_Stop();
     4c2:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  I2C_Start();
     4c6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     4ca:	80 91 23 01 	lds	r24, 0x0123
     4ce:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     4d2:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     4d6:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     4d8:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_Data_Receive>
     4dc:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     4de:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     4e2:	08 2f       	mov	r16, r24
  I2C_Stop();
     4e4:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  if(sts == 0x07){
     4e8:	ff 0c       	add	r15, r15
     4ea:	11 0f       	add	r17, r17
     4ec:	11 0f       	add	r17, r17
     4ee:	1f 29       	or	r17, r15
     4f0:	1e 29       	or	r17, r14
     4f2:	00 0f       	add	r16, r16
     4f4:	00 0f       	add	r16, r16
     4f6:	00 0f       	add	r16, r16
     4f8:	01 2b       	or	r16, r17
     4fa:	07 30       	cpi	r16, 0x07	; 7
     4fc:	21 f4       	brne	.+8      	; 0x506 <I2C_Read_Register+0x6e>
    sts = data;
	I2C.Error=0x00;
     4fe:	10 92 25 01 	sts	0x0125, r1
     502:	8d 2d       	mov	r24, r13
     504:	0d c0       	rjmp	.+26     	; 0x520 <I2C_Read_Register+0x88>
  }else{
    data=0;
	I2C.Error=0x01;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     50c:	80 91 26 01 	lds	r24, 0x0126
     510:	90 91 27 01 	lds	r25, 0x0127
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	90 93 27 01 	sts	0x0127, r25
     51a:	80 93 26 01 	sts	0x0126, r24
     51e:	8f ef       	ldi	r24, 0xFF	; 255
    sts = 0xFF;
  }
  return sts;
}
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	08 95       	ret

0000052c <I2C_Read_Register_Multiple>:


void I2C_Read_Register_Multiple(uint8_t reg, uint8_t len, uint8_t *data){
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	18 2f       	mov	r17, r24
     53c:	d6 2e       	mov	r13, r22
     53e:	04 2f       	mov	r16, r20
     540:	f5 2e       	mov	r15, r21
  uint8_t sts=0,temp_data=0;
  uint8_t lut[8]={0,3,7,15,31,63,127,255};
  I2C_Start();
     542:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     546:	80 91 22 01 	lds	r24, 0x0122
     54a:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     54e:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
  I2C_Data_Send(reg);
     552:	81 2f       	mov	r24, r17
     554:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     558:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
  //I2C_Stop();
  I2C_Start();
     55c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     560:	80 91 23 01 	lds	r24, 0x0123
     564:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     568:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     56c:	20 2f       	mov	r18, r16
     56e:	3f 2d       	mov	r19, r15
     570:	c9 01       	movw	r24, r18
     572:	ec 01       	movw	r28, r24
     574:	ff 24       	eor	r15, r15
  for(uint8_t i=0;i<len; i++){
    temp_data = I2C_Data_Receive();
	if(i==(len-1)){
     576:	0d 2d       	mov	r16, r13
     578:	10 e0       	ldi	r17, 0x00	; 0
     57a:	01 50       	subi	r16, 0x01	; 1
     57c:	10 40       	sbci	r17, 0x00	; 0
     57e:	0f c0       	rjmp	.+30     	; 0x59e <I2C_Read_Register_Multiple+0x72>
  //I2C_Stop();
  I2C_Start();
  I2C_Data_Send(I2C.ReadAddr);
  sts |= I2C_Get_Ack()<<2;
  for(uint8_t i=0;i<len; i++){
    temp_data = I2C_Data_Receive();
     580:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_Data_Receive>
     584:	e8 2e       	mov	r14, r24
	if(i==(len-1)){
     586:	8f 2d       	mov	r24, r15
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	80 17       	cp	r24, r16
     58c:	91 07       	cpc	r25, r17
     58e:	19 f4       	brne	.+6      	; 0x596 <I2C_Read_Register_Multiple+0x6a>
	  I2C_Set_Nack();
     590:	0e 94 00 02 	call	0x400	; 0x400 <I2C_Set_Nack>
     594:	02 c0       	rjmp	.+4      	; 0x59a <I2C_Read_Register_Multiple+0x6e>
	}else{
	  I2C_Set_Ack();
     596:	0e 94 ee 01 	call	0x3dc	; 0x3dc <I2C_Set_Ack>
	}
    //sts |= (I2C_Get_Ack()<<(3+i));
	data[i] = temp_data;
     59a:	e9 92       	st	Y+, r14
  sts |= I2C_Get_Ack()<<1;
  //I2C_Stop();
  I2C_Start();
  I2C_Data_Send(I2C.ReadAddr);
  sts |= I2C_Get_Ack()<<2;
  for(uint8_t i=0;i<len; i++){
     59c:	f3 94       	inc	r15
     59e:	fd 14       	cp	r15, r13
     5a0:	78 f3       	brcs	.-34     	; 0x580 <I2C_Read_Register_Multiple+0x54>
	  I2C_Set_Ack();
	}
    //sts |= (I2C_Get_Ack()<<(3+i));
	data[i] = temp_data;
  }
  I2C_Stop();
     5a2:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
    sts = 0xFF;
	for(uint8_t i=0;i<len; i++){
	  data[i] = 0;
	}
  }*/
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	08 95       	ret

000005b6 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	18 2f       	mov	r17, r24
     5c0:	f6 2e       	mov	r15, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     5c2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     5c6:	80 91 22 01 	lds	r24, 0x0122
     5ca:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     5ce:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     5d2:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     5d4:	81 2f       	mov	r24, r17
     5d6:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     5da:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     5de:	08 2f       	mov	r16, r24
  I2C_Data_Send(val);
     5e0:	8f 2d       	mov	r24, r15
     5e2:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     5e6:	0e 94 12 02 	call	0x424	; 0x424 <I2C_Get_Ack>
     5ea:	18 2f       	mov	r17, r24
  I2C_Stop();
     5ec:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
  if(sts == 0x07){
     5f0:	00 0f       	add	r16, r16
     5f2:	11 0f       	add	r17, r17
     5f4:	11 0f       	add	r17, r17
     5f6:	10 2b       	or	r17, r16
     5f8:	1e 29       	or	r17, r14
     5fa:	17 30       	cpi	r17, 0x07	; 7
     5fc:	19 f4       	brne	.+6      	; 0x604 <I2C_Write_Register+0x4e>
    sts = data;
	I2C.Error=0x00;
     5fe:	10 92 25 01 	sts	0x0125, r1
     602:	0c c0       	rjmp	.+24     	; 0x61c <I2C_Write_Register+0x66>
  }else{
	I2C.Error=0x02;
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	80 93 25 01 	sts	0x0125, r24
	I2C.ErrorAccu++;
     60a:	80 91 26 01 	lds	r24, 0x0126
     60e:	90 91 27 01 	lds	r25, 0x0127
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	90 93 27 01 	sts	0x0127, r25
     618:	80 93 26 01 	sts	0x0126, r24
    sts = 0xFF;
  }
}
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	08 95       	ret

00000626 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     626:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     62a:	10 92 23 01 	sts	0x0123, r1
  I2C.DiscardSmpl=0x01;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 24 01 	sts	0x0124, r24
  I2C.Error=0x00;
     634:	10 92 25 01 	sts	0x0125, r1
  I2C.ErrorAccu=0x00;
     638:	10 92 27 01 	sts	0x0127, r1
     63c:	10 92 26 01 	sts	0x0126, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     640:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     644:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Get_Device_Address>
     648:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	80 93 23 01 	sts	0x0123, r24
}
     652:	08 95       	ret

00000654 <I2C_Get_Write_Addr>:


uint8_t I2C_Get_Write_Addr(void){
  return I2C.WriteAddr;
}
     654:	80 91 22 01 	lds	r24, 0x0122
     658:	08 95       	ret

0000065a <I2C_Get_Read_Addr>:

uint8_t I2C_Get_Read_Addr(void){
  return I2C.ReadAddr;
}
     65a:	80 91 23 01 	lds	r24, 0x0123
     65e:	08 95       	ret

00000660 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     660:	10 92 28 01 	sts	0x0128, r1
  debug.datareg=0;
     664:	10 92 29 01 	sts	0x0129, r1
  debug.databsy=1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 2a 01 	sts	0x012A, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     672:	fc 01       	movw	r30, r24
     674:	e8 5d       	subi	r30, 0xD8	; 216
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	13 82       	std	Z+3, r1	; 0x03
     67a:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     67c:	80 32       	cpi	r24, 0x20	; 32
     67e:	91 05       	cpc	r25, r1
     680:	c1 f7       	brne	.-16     	; 0x672 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     682:	10 92 4b 01 	sts	0x014B, r1
     686:	ec e4       	ldi	r30, 0x4C	; 76
     688:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     68a:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	e4 35       	cpi	r30, 0x54	; 84
     690:	f8 07       	cpc	r31, r24
     692:	d9 f7       	brne	.-10     	; 0x68a <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     694:	10 82       	st	Z, r1
}
     696:	08 95       	ret

00000698 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     698:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     69a:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     69c:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     6a4:	e8 e6       	ldi	r30, 0x68	; 104
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     6ae:	ec e6       	ldi	r30, 0x6C	; 108
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     6b8:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     6ba:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     6bc:	08 95       	ret

000006be <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     6c2:	ee e6       	ldi	r30, 0x6E	; 110
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	10 82       	st	Z, r1
  TCNT0 =200;
     6c8:	88 ec       	ldi	r24, 0xC8	; 200
     6ca:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     6d4:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     6d6:	08 95       	ret

000006d8 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     6d8:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     6dc:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     6de:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     6e0:	08 95       	ret

000006e2 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     6e2:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     6e4:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     6e6:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     6e8:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     6ea:	08 95       	ret

000006ec <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     6ec:	5d 9a       	sbi	0x0b, 5	; 11
}
     6ee:	08 95       	ret

000006f0 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     6f0:	5d 98       	cbi	0x0b, 5	; 11
}
     6f2:	08 95       	ret

000006f4 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     6f8:	5d 9a       	sbi	0x0b, 5	; 11
     6fa:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     6fc:	5d 98       	cbi	0x0b, 5	; 11
     6fe:	08 95       	ret

00000700 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     700:	86 b1       	in	r24, 0x06	; 6
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	26 e0       	ldi	r18, 0x06	; 6
     706:	96 95       	lsr	r25
     708:	87 95       	ror	r24
     70a:	2a 95       	dec	r18
     70c:	e1 f7       	brne	.-8      	; 0x706 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     70e:	81 70       	andi	r24, 0x01	; 1
     710:	08 95       	ret

00000712 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     712:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     714:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     71a:	86 b5       	in	r24, 0x26	; 38
     71c:	82 33       	cpi	r24, 0x32	; 50
     71e:	e8 f3       	brcs	.-6      	; 0x71a <debug_delay+0x8>
    TCNT0=0;
     720:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     722:	86 b5       	in	r24, 0x26	; 38
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	82 17       	cp	r24, r18
     728:	93 07       	cpc	r25, r19
     72a:	d8 f3       	brcs	.-10     	; 0x722 <debug_delay+0x10>
  TCCR0B=0;
     72c:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     72e:	08 95       	ret

00000730 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     730:	80 91 1c 01 	lds	r24, 0x011C
     734:	90 91 1d 01 	lds	r25, 0x011D
     738:	0e 94 89 03 	call	0x712	; 0x712 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     73c:	08 95       	ret

0000073e <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     73e:	80 91 1e 01 	lds	r24, 0x011E
     742:	90 91 1f 01 	lds	r25, 0x011F
     746:	0e 94 89 03 	call	0x712	; 0x712 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     74a:	08 95       	ret

0000074c <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     74c:	80 91 20 01 	lds	r24, 0x0120
     750:	90 91 21 01 	lds	r25, 0x0121
     754:	0e 94 89 03 	call	0x712	; 0x712 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     758:	08 95       	ret

0000075a <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	2a 97       	sbiw	r28, 0x0a	; 10
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     778:	fe 01       	movw	r30, r28
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	9a e0       	ldi	r25, 0x0A	; 10
     77e:	df 01       	movw	r26, r30
     780:	1d 92       	st	X+, r1
     782:	9a 95       	dec	r25
     784:	e9 f7       	brne	.-6      	; 0x780 <debug_tx_byte+0x26>
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	9a 87       	std	Y+10, r25	; 0x0a
     78a:	fe 01       	movw	r30, r28
     78c:	32 96       	adiw	r30, 0x02	; 2
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     792:	48 2f       	mov	r20, r24
     794:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     796:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     798:	ca 01       	movw	r24, r20
     79a:	02 2e       	mov	r0, r18
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <debug_tx_byte+0x48>
     79e:	95 95       	asr	r25
     7a0:	87 95       	ror	r24
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <debug_tx_byte+0x44>
     7a6:	80 ff       	sbrs	r24, 0
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <debug_tx_byte+0x54>
	  buf[i+1]=1;
     7aa:	60 83       	st	Z, r22
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     7ae:	10 82       	st	Z, r1
     7b0:	2f 5f       	subi	r18, 0xFF	; 255
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     7b6:	28 30       	cpi	r18, 0x08	; 8
     7b8:	31 05       	cpc	r19, r1
     7ba:	71 f7       	brne	.-36     	; 0x798 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     7bc:	df b6       	in	r13, 0x3f	; 63
  cli();
     7be:	f8 94       	cli
     7c0:	8e 01       	movw	r16, r28
     7c2:	0f 5f       	subi	r16, 0xFF	; 255
     7c4:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     7c6:	3b e0       	ldi	r19, 0x0B	; 11
     7c8:	e3 2e       	mov	r14, r19
     7ca:	f1 2c       	mov	r15, r1
     7cc:	ec 0e       	add	r14, r28
     7ce:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     7d0:	f8 01       	movw	r30, r16
     7d2:	80 81       	ld	r24, Z
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	11 f4       	brne	.+4      	; 0x7dc <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     7d8:	5d 9a       	sbi	0x0b, 5	; 11
     7da:	01 c0       	rjmp	.+2      	; 0x7de <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     7dc:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     7de:	0e 94 98 03 	call	0x730	; 0x730 <debug_delay_index_0>
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     7e6:	0e 15       	cp	r16, r14
     7e8:	1f 05       	cpc	r17, r15
     7ea:	91 f7       	brne	.-28     	; 0x7d0 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     7ec:	df be       	out	0x3f, r13	; 63
}
     7ee:	2a 96       	adiw	r28, 0x0a	; 10
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	08 95       	ret

0000080a <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     810:	36 9b       	sbis	0x06, 6	; 6
     812:	21 c0       	rjmp	.+66     	; 0x856 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	17 c0       	rjmp	.+46     	; 0x846 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     818:	0e 94 9f 03 	call	0x73e	; 0x73e <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     81c:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     81e:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     820:	17 30       	cpi	r17, 0x07	; 7
     822:	09 f0       	breq	.+2      	; 0x826 <debug_rx_byte+0x1c>
	    val>>=1;
     824:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     826:	1f 5f       	subi	r17, 0xFF	; 255
     828:	18 30       	cpi	r17, 0x08	; 8
     82a:	b1 f7       	brne	.-20     	; 0x818 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     82c:	0e 94 9f 03 	call	0x73e	; 0x73e <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     830:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     832:	f6 fc       	sbrc	r15, 6
     834:	07 c0       	rjmp	.+14     	; 0x844 <debug_rx_byte+0x3a>
     836:	86 ff       	sbrs	r24, 6
     838:	05 c0       	rjmp	.+10     	; 0x844 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     83a:	00 93 29 01 	sts	0x0129, r16
	  debug.error=0x00;
     83e:	10 92 28 01 	sts	0x0128, r1
     842:	03 c0       	rjmp	.+6      	; 0x84a <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 28 01 	sts	0x0128, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     84a:	80 91 29 01 	lds	r24, 0x0129
}
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     856:	0e 94 a6 03 	call	0x74c	; 0x74c <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     85a:	f6 b0       	in	r15, 0x06	; 6
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	db cf       	rjmp	.-74     	; 0x818 <debug_rx_byte+0xe>

00000862 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     862:	80 91 29 01 	lds	r24, 0x0129
}
     866:	08 95       	ret

00000868 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     868:	10 92 29 01 	sts	0x0129, r1
}
     86c:	08 95       	ret

0000086e <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     86e:	80 93 29 01 	sts	0x0129, r24
}
     872:	08 95       	ret

00000874 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     874:	bf 92       	push	r11
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	7b 01       	movw	r14, r22
     888:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	e8 16       	cp	r14, r24
     88e:	f1 04       	cpc	r15, r1
     890:	01 05       	cpc	r16, r1
     892:	11 05       	cpc	r17, r1
     894:	09 f0       	breq	.+2      	; 0x898 <debug_tx_hex+0x24>
     896:	30 f4       	brcc	.+12     	; 0x8a4 <debug_tx_hex+0x30>
     898:	c8 e0       	ldi	r28, 0x08	; 8
     89a:	d0 e0       	ldi	r29, 0x00	; 0
     89c:	62 e0       	ldi	r22, 0x02	; 2
     89e:	c6 2e       	mov	r12, r22
     8a0:	d1 2c       	mov	r13, r1
     8a2:	14 c0       	rjmp	.+40     	; 0x8cc <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	e8 16       	cp	r14, r24
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	f8 06       	cpc	r15, r24
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	08 07       	cpc	r16, r24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	18 07       	cpc	r17, r24
     8b4:	30 f0       	brcs	.+12     	; 0x8c2 <debug_tx_hex+0x4e>
     8b6:	c0 e2       	ldi	r28, 0x20	; 32
     8b8:	d0 e0       	ldi	r29, 0x00	; 0
     8ba:	58 e0       	ldi	r21, 0x08	; 8
     8bc:	c5 2e       	mov	r12, r21
     8be:	d1 2c       	mov	r13, r1
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <debug_tx_hex+0x58>
     8c2:	c0 e1       	ldi	r28, 0x10	; 16
     8c4:	d0 e0       	ldi	r29, 0x00	; 0
     8c6:	44 e0       	ldi	r20, 0x04	; 4
     8c8:	c4 2e       	mov	r12, r20
     8ca:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     8cc:	80 e3       	ldi	r24, 0x30	; 48
     8ce:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
  debug_tx_byte('x');
     8d2:	88 e7       	ldi	r24, 0x78	; 120
     8d4:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
     8d8:	bb 24       	eor	r11, r11
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__stack+0xb>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     8dc:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     8de:	d8 01       	movw	r26, r16
     8e0:	c7 01       	movw	r24, r14
     8e2:	0c 2e       	mov	r0, r28
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <debug_tx_hex+0x7a>
     8e6:	b6 95       	lsr	r27
     8e8:	a7 95       	ror	r26
     8ea:	97 95       	ror	r25
     8ec:	87 95       	ror	r24
     8ee:	0a 94       	dec	r0
     8f0:	d2 f7       	brpl	.-12     	; 0x8e6 <debug_tx_hex+0x72>
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	8f 70       	andi	r24, 0x0F	; 15
     8f6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     8f8:	8a 30       	cpi	r24, 0x0A	; 10
     8fa:	91 05       	cpc	r25, r1
     8fc:	10 f0       	brcs	.+4      	; 0x902 <__stack+0x3>
	    hex_digit+=55;
     8fe:	c7 96       	adiw	r24, 0x37	; 55
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
	  }else {
	    hex_digit+=48;
     902:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     904:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     908:	b3 94       	inc	r11
     90a:	8b 2d       	mov	r24, r11
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	8c 15       	cp	r24, r12
     910:	9d 05       	cpc	r25, r13
     912:	20 f3       	brcs	.-56     	; 0x8dc <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	bf 90       	pop	r11
     926:	08 95       	ret

00000928 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     928:	af 92       	push	r10
     92a:	bf 92       	push	r11
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	7b 01       	movw	r14, r22
     93e:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     940:	6f 3f       	cpi	r22, 0xFF	; 255
     942:	71 05       	cpc	r23, r1
     944:	81 05       	cpc	r24, r1
     946:	91 05       	cpc	r25, r1
     948:	09 f0       	breq	.+2      	; 0x94c <debug_tx_bin+0x24>
     94a:	18 f4       	brcc	.+6      	; 0x952 <debug_tx_bin+0x2a>
     94c:	f7 e0       	ldi	r31, 0x07	; 7
     94e:	df 2e       	mov	r13, r31
     950:	0d c0       	rjmp	.+26     	; 0x96c <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     952:	60 30       	cpi	r22, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	73 07       	cpc	r23, r19
     958:	31 e0       	ldi	r19, 0x01	; 1
     95a:	83 07       	cpc	r24, r19
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	93 07       	cpc	r25, r19
     960:	18 f0       	brcs	.+6      	; 0x968 <debug_tx_bin+0x40>
     962:	ef e1       	ldi	r30, 0x1F	; 31
     964:	de 2e       	mov	r13, r30
     966:	02 c0       	rjmp	.+4      	; 0x96c <debug_tx_bin+0x44>
     968:	7f e0       	ldi	r23, 0x0F	; 15
     96a:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     96c:	80 e3       	ldi	r24, 0x30	; 48
     96e:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
  debug_tx_byte('b');
     972:	82 e6       	ldi	r24, 0x62	; 98
     974:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     97c:	cd 2c       	mov	r12, r13
     97e:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     980:	56 01       	movw	r10, r12
     982:	08 94       	sec
     984:	a1 1c       	adc	r10, r1
     986:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     988:	c6 01       	movw	r24, r12
     98a:	8c 1b       	sub	r24, r28
     98c:	9d 0b       	sbc	r25, r29
     98e:	a8 01       	movw	r20, r16
     990:	97 01       	movw	r18, r14
     992:	04 c0       	rjmp	.+8      	; 0x99c <debug_tx_bin+0x74>
     994:	56 95       	lsr	r21
     996:	47 95       	ror	r20
     998:	37 95       	ror	r19
     99a:	27 95       	ror	r18
     99c:	8a 95       	dec	r24
     99e:	d2 f7       	brpl	.-12     	; 0x994 <debug_tx_bin+0x6c>
     9a0:	da 01       	movw	r26, r20
     9a2:	c9 01       	movw	r24, r18
     9a4:	81 70       	andi	r24, 0x01	; 1
     9a6:	90 70       	andi	r25, 0x00	; 0
     9a8:	89 2b       	or	r24, r25
     9aa:	11 f0       	breq	.+4      	; 0x9b0 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     9ac:	81 e3       	ldi	r24, 0x31	; 49
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     9b0:	80 e3       	ldi	r24, 0x30	; 48
     9b2:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
     9b6:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     9b8:	ca 15       	cp	r28, r10
     9ba:	db 05       	cpc	r29, r11
     9bc:	29 f7       	brne	.-54     	; 0x988 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	08 95       	ret

000009d4 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     9d4:	8d e0       	ldi	r24, 0x0D	; 13
     9d6:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
  debug_tx_byte('\n');
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
}
     9e0:	08 95       	ret

000009e2 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     9e2:	80 e2       	ldi	r24, 0x20	; 32
     9e4:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
}
     9e8:	08 95       	ret

000009ea <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     9ea:	8c e2       	ldi	r24, 0x2C	; 44
     9ec:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
}
     9f0:	08 95       	ret

000009f2 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     9fe:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
        i++;
     a02:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     a04:	fe 01       	movw	r30, r28
     a06:	e1 0f       	add	r30, r17
     a08:	f1 1d       	adc	r31, r1
     a0a:	80 81       	ld	r24, Z
     a0c:	88 23       	and	r24, r24
     a0e:	b9 f7       	brne	.-18     	; 0x9fe <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	08 95       	ret

00000a18 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     a18:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_nl();
     a1c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <debug_tx_nl>
}
     a20:	08 95       	ret

00000a22 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     a22:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     a26:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
}
     a2a:	08 95       	ret

00000a2c <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     a2c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_cm();
     a30:	0e 94 f5 04 	call	0x9ea	; 0x9ea <debug_tx_cm>
}
     a34:	08 95       	ret

00000a36 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	6b 01       	movw	r12, r22
     a46:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     a48:	61 15       	cp	r22, r1
     a4a:	71 05       	cpc	r23, r1
     a4c:	81 05       	cpc	r24, r1
     a4e:	91 05       	cpc	r25, r1
     a50:	31 f4       	brne	.+12     	; 0xa5e <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     a52:	10 92 4c 01 	sts	0x014C, r1
    debug.input_num_digits=1;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 54 01 	sts	0x0154, r24
     a5c:	23 c0       	rjmp	.+70     	; 0xaa4 <debug_determine_digit_numbers+0x6e>
     a5e:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     a60:	0b 2d       	mov	r16, r11
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	08 5d       	subi	r16, 0xD8	; 216
     a66:	1e 4f       	sbci	r17, 0xFE	; 254
     a68:	c7 01       	movw	r24, r14
     a6a:	b6 01       	movw	r22, r12
     a6c:	2a e0       	ldi	r18, 0x0A	; 10
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodsi4>
     a78:	f8 01       	movw	r30, r16
     a7a:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
     a80:	2a e0       	ldi	r18, 0x0A	; 10
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodsi4>
     a8c:	c9 01       	movw	r24, r18
     a8e:	da 01       	movw	r26, r20
     a90:	6c 01       	movw	r12, r24
     a92:	7d 01       	movw	r14, r26
      i++;
     a94:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     a96:	c1 14       	cp	r12, r1
     a98:	d1 04       	cpc	r13, r1
     a9a:	e1 04       	cpc	r14, r1
     a9c:	f1 04       	cpc	r15, r1
     a9e:	01 f7       	brne	.-64     	; 0xa60 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     aa0:	b0 92 54 01 	sts	0x0154, r11
  }
}
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	08 95       	ret

00000ab4 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     ab4:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     ab6:	10 91 54 01 	lds	r17, 0x0154
     aba:	09 c0       	rjmp	.+18     	; 0xace <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     abc:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     abe:	e1 2f       	mov	r30, r17
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	e8 5d       	subi	r30, 0xD8	; 216
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     ac8:	80 5d       	subi	r24, 0xD0	; 208
     aca:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     ace:	11 23       	and	r17, r17
     ad0:	a9 f7       	brne	.-22     	; 0xabc <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     ad2:	1f 91       	pop	r17
     ad4:	08 95       	ret

00000ad6 <debug_tx_number>:

void debug_tx_number(int32_t num){
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	7b 01       	movw	r14, r22
     ae0:	8c 01       	movw	r16, r24
  if(num<0){
     ae2:	97 ff       	sbrs	r25, 7
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <debug_tx_number+0x26>
    debug_tx_byte('-');
     ae6:	8d e2       	ldi	r24, 0x2D	; 45
     ae8:	0e 94 ad 03 	call	0x75a	; 0x75a <debug_tx_byte>
	num=-num;
     aec:	10 95       	com	r17
     aee:	00 95       	com	r16
     af0:	f0 94       	com	r15
     af2:	e0 94       	com	r14
     af4:	e1 1c       	adc	r14, r1
     af6:	f1 1c       	adc	r15, r1
     af8:	01 1d       	adc	r16, r1
     afa:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     afc:	c8 01       	movw	r24, r16
     afe:	b7 01       	movw	r22, r14
     b00:	0e 94 1b 05 	call	0xa36	; 0xa36 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     b04:	0e 94 5a 05 	call	0xab4	; 0xab4 <debug_tx_number_digits>
}
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     b12:	0e 94 6b 05 	call	0xad6	; 0xad6 <debug_tx_number>
  debug_tx_nl();
     b16:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <debug_tx_nl>
}
     b1a:	08 95       	ret

00000b1c <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     b1c:	0e 94 6b 05 	call	0xad6	; 0xad6 <debug_tx_number>
  debug_tx_sp();
     b20:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
}
     b24:	08 95       	ret

00000b26 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     b26:	0e 94 6b 05 	call	0xad6	; 0xad6 <debug_tx_number>
  debug_tx_text(",");
     b2a:	8e e0       	ldi	r24, 0x0E	; 14
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
}
     b32:	08 95       	ret

00000b34 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     b34:	0e 94 3a 04 	call	0x874	; 0x874 <debug_tx_hex>
  debug_tx_nl();
     b38:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <debug_tx_nl>
}
     b3c:	08 95       	ret

00000b3e <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     b3e:	0e 94 3a 04 	call	0x874	; 0x874 <debug_tx_hex>
  debug_tx_sp();
     b42:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
}
     b46:	08 95       	ret

00000b48 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     b48:	0e 94 3a 04 	call	0x874	; 0x874 <debug_tx_hex>
  debug_tx_text(",");
     b4c:	8e e0       	ldi	r24, 0x0E	; 14
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
}
     b54:	08 95       	ret

00000b56 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     b56:	0e 94 94 04 	call	0x928	; 0x928 <debug_tx_bin>
  debug_tx_nl();
     b5a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <debug_tx_nl>
}
     b5e:	08 95       	ret

00000b60 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     b60:	0e 94 94 04 	call	0x928	; 0x928 <debug_tx_bin>
  debug_tx_sp();
     b64:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
}
     b68:	08 95       	ret

00000b6a <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     b6a:	0e 94 94 04 	call	0x928	; 0x928 <debug_tx_bin>
  debug_tx_text(",");
     b6e:	8e e0       	ldi	r24, 0x0E	; 14
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
}
     b76:	08 95       	ret

00000b78 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	7a 01       	movw	r14, r20
     b82:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     b84:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     b88:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_nl(num);
     b8c:	c8 01       	movw	r24, r16
     b8e:	b7 01       	movw	r22, r14
     b90:	0e 94 89 05 	call	0xb12	; 0xb12 <debug_tx_number_nl>
}
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	7a 01       	movw	r14, r20
     ba8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     baa:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     bae:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_sp(num);
     bb2:	c8 01       	movw	r24, r16
     bb4:	b7 01       	movw	r22, r14
     bb6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <debug_tx_number_sp>
}
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	08 95       	ret

00000bc4 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	7a 01       	movw	r14, r20
     bce:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     bd0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     bd4:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_cm(num);
     bd8:	c8 01       	movw	r24, r16
     bda:	b7 01       	movw	r22, r14
     bdc:	0e 94 93 05 	call	0xb26	; 0xb26 <debug_tx_number_cm>
}
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	08 95       	ret

00000bea <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	7a 01       	movw	r14, r20
     bf4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     bf6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     bfa:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     bfe:	c8 01       	movw	r24, r16
     c00:	b7 01       	movw	r22, r14
     c02:	0e 94 9a 05 	call	0xb34	; 0xb34 <debug_tx_number_hex_nl>
}
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	7a 01       	movw	r14, r20
     c1a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c1c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     c20:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     c24:	c8 01       	movw	r24, r16
     c26:	b7 01       	movw	r22, r14
     c28:	0e 94 9f 05 	call	0xb3e	; 0xb3e <debug_tx_number_hex_sp>
}
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	7a 01       	movw	r14, r20
     c40:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c42:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     c46:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     c4a:	c8 01       	movw	r24, r16
     c4c:	b7 01       	movw	r22, r14
     c4e:	0e 94 a4 05 	call	0xb48	; 0xb48 <debug_tx_number_hex_cm>
}
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	08 95       	ret

00000c5c <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	7a 01       	movw	r14, r20
     c66:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c68:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     c6c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     c70:	c8 01       	movw	r24, r16
     c72:	b7 01       	movw	r22, r14
     c74:	0e 94 ab 05 	call	0xb56	; 0xb56 <debug_tx_number_bin_nl>
}
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	7a 01       	movw	r14, r20
     c8c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     c8e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     c92:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     c96:	c8 01       	movw	r24, r16
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 b0 05 	call	0xb60	; 0xb60 <debug_tx_number_bin_sp>
}
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	08 95       	ret

00000ca8 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	7a 01       	movw	r14, r20
     cb2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     cb4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debug_tx_text>
  debug_tx_sp();
     cb8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     cbc:	c8 01       	movw	r24, r16
     cbe:	b7 01       	movw	r22, r14
     cc0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <debug_tx_number_bin_cm>
}
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	08 95       	ret

00000cce <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     cce:	e8 e2       	ldi	r30, 0x28	; 40
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	e8 0f       	add	r30, r24
     cd4:	f1 1d       	adc	r31, r1
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
}
     cd8:	08 95       	ret

00000cda <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     cda:	80 91 4b 01 	lds	r24, 0x014B
}
     cde:	08 95       	ret

00000ce0 <debug_flush_buf>:

void debug_flush_buf(void){
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     ce4:	fc 01       	movw	r30, r24
     ce6:	e8 5d       	subi	r30, 0xD8	; 216
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	13 82       	std	Z+3, r1	; 0x03
     cec:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     cee:	80 32       	cpi	r24, 0x20	; 32
     cf0:	91 05       	cpc	r25, r1
     cf2:	c1 f7       	brne	.-16     	; 0xce4 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     cf4:	10 92 4b 01 	sts	0x014B, r1
}
     cf8:	08 95       	ret

00000cfa <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     cfa:	80 91 2a 01 	lds	r24, 0x012A
}
     cfe:	08 95       	ret

00000d00 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     d00:	80 91 2a 01 	lds	r24, 0x012A
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     d04:	88 23       	and	r24, r24
     d06:	11 f0       	breq	.+4      	; 0xd0c <debug_data_available_rx_buf+0xc>
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d0c:	80 91 4b 01 	lds	r24, 0x014B
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	88 23       	and	r24, r24
     d14:	09 f4       	brne	.+2      	; 0xd18 <debug_data_available_rx_buf+0x18>
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     d1c:	89 2f       	mov	r24, r25
     d1e:	08 95       	ret

00000d20 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     d20:	80 91 4b 01 	lds	r24, 0x014B
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     d24:	08 95       	ret

00000d26 <debug_init>:

void debug_init(void){
  debug_struct_init();
     d26:	0e 94 30 03 	call	0x660	; 0x660 <debug_struct_init>
  debug_timings_init();
     d2a:	0e 94 4c 03 	call	0x698	; 0x698 <debug_timings_init>
  debug_gpio_init();
     d2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <debug_gpio_init>
}
     d32:	08 95       	ret

00000d34 <__vector_4>:


ISR(ISR_PCINT_VECT){
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
  debug.databsy=1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 2a 01 	sts	0x012A, r24
  uint8_t val=debug_rx_byte();
     d5c:	0e 94 05 04 	call	0x80a	; 0x80a <debug_rx_byte>
     d60:	98 2f       	mov	r25, r24
  if(debug.error==0){
     d62:	80 91 28 01 	lds	r24, 0x0128
     d66:	88 23       	and	r24, r24
     d68:	99 f4       	brne	.+38     	; 0xd90 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
     d6a:	e0 91 4b 01 	lds	r30, 0x014B
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	e8 5d       	subi	r30, 0xD8	; 216
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
     d76:	80 91 4b 01 	lds	r24, 0x014B
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 93 4b 01 	sts	0x014B, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
     d80:	80 91 4b 01 	lds	r24, 0x014B
     d84:	81 32       	cpi	r24, 0x21	; 33
     d86:	10 f0       	brcs	.+4      	; 0xd8c <__vector_4+0x58>
	  debug.bufindex=0;
     d88:	10 92 4b 01 	sts	0x014B, r1
	}
    debug_timer_start();
     d8c:	0e 94 5f 03 	call	0x6be	; 0x6be <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_16>:

ISR(TIMER_OVF_VECT){
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     dbc:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     dc0:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     dc2:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
     dc4:	10 92 2a 01 	sts	0x012A, r1
}
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
     dd2:	e5 e5       	ldi	r30, 0x55	; 85
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
     dd6:	10 82       	st	Z, r1
    LPF[i].Input = 0;
     dd8:	11 82       	std	Z+1, r1	; 0x01
     dda:	12 82       	std	Z+2, r1	; 0x02
     ddc:	13 82       	std	Z+3, r1	; 0x03
     dde:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
     de0:	15 82       	std	Z+5, r1	; 0x05
     de2:	16 82       	std	Z+6, r1	; 0x06
     de4:	17 82       	std	Z+7, r1	; 0x07
     de6:	10 86       	std	Z+8, r1	; 0x08
     de8:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	eb 38       	cpi	r30, 0x8B	; 139
     dee:	f8 07       	cpc	r31, r24
     df0:	91 f7       	brne	.-28     	; 0xdd6 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
     df2:	08 95       	ret

00000df4 <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	23 e0       	ldi	r18, 0x03	; 3
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	2a 95       	dec	r18
     e00:	e1 f7       	brne	.-8      	; 0xdfa <LPF_Set_Alpha+0x6>
     e02:	e8 0f       	add	r30, r24
     e04:	f9 1f       	adc	r31, r25
     e06:	eb 5a       	subi	r30, 0xAB	; 171
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	60 83       	st	Z, r22
}
     e0c:	08 95       	ret

00000e0e <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	fc 01       	movw	r30, r24
     e12:	33 e0       	ldi	r19, 0x03	; 3
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	3a 95       	dec	r19
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <LPF_Get_Alpha+0x6>
     e1c:	e8 0f       	add	r30, r24
     e1e:	f9 1f       	adc	r31, r25
     e20:	eb 5a       	subi	r30, 0xAB	; 171
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
     e24:	80 81       	ld	r24, Z
     e26:	08 95       	ret

00000e28 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	1a 01       	movw	r2, r20
     e4a:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	6c 01       	movw	r12, r24
     e50:	53 e0       	ldi	r21, 0x03	; 3
     e52:	cc 0c       	add	r12, r12
     e54:	dd 1c       	adc	r13, r13
     e56:	5a 95       	dec	r21
     e58:	e1 f7       	brne	.-8      	; 0xe52 <LPF_Get_Filtered_Value+0x2a>
     e5a:	c8 0e       	add	r12, r24
     e5c:	d9 1e       	adc	r13, r25
     e5e:	85 e5       	ldi	r24, 0x55	; 85
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	c8 0e       	add	r12, r24
     e64:	d9 1e       	adc	r13, r25
     e66:	f6 01       	movw	r30, r12
     e68:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
     e6a:	62 2e       	mov	r6, r18
     e6c:	77 24       	eor	r7, r7
     e6e:	88 24       	eor	r8, r8
     e70:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
     e72:	64 e6       	ldi	r22, 0x64	; 100
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	62 1b       	sub	r22, r18
     e78:	71 09       	sbc	r23, r1
     e7a:	88 27       	eor	r24, r24
     e7c:	77 fd       	sbrc	r23, 7
     e7e:	80 95       	com	r24
     e80:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
     e82:	45 e0       	ldi	r20, 0x05	; 5
     e84:	a4 2e       	mov	r10, r20
     e86:	b1 2c       	mov	r11, r1
     e88:	ac 0c       	add	r10, r12
     e8a:	bd 1c       	adc	r11, r13
     e8c:	25 81       	ldd	r18, Z+5	; 0x05
     e8e:	36 81       	ldd	r19, Z+6	; 0x06
     e90:	47 81       	ldd	r20, Z+7	; 0x07
     e92:	50 85       	ldd	r21, Z+8	; 0x08
     e94:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsi3>
     e98:	7b 01       	movw	r14, r22
     e9a:	8c 01       	movw	r16, r24
     e9c:	c2 01       	movw	r24, r4
     e9e:	b1 01       	movw	r22, r2
     ea0:	a4 01       	movw	r20, r8
     ea2:	93 01       	movw	r18, r6
     ea4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsi3>
     ea8:	e6 0e       	add	r14, r22
     eaa:	f7 1e       	adc	r15, r23
     eac:	08 1f       	adc	r16, r24
     eae:	19 1f       	adc	r17, r25
     eb0:	c8 01       	movw	r24, r16
     eb2:	b7 01       	movw	r22, r14
     eb4:	24 e6       	ldi	r18, 0x64	; 100
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__divmodsi4>
     ec0:	ca 01       	movw	r24, r20
     ec2:	f6 01       	movw	r30, r12
     ec4:	25 83       	std	Z+5, r18	; 0x05
     ec6:	f5 01       	movw	r30, r10
     ec8:	31 83       	std	Z+1, r19	; 0x01
     eca:	42 83       	std	Z+2, r20	; 0x02
     ecc:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
     ece:	b9 01       	movw	r22, r18
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	5f 90       	pop	r5
     eea:	4f 90       	pop	r4
     eec:	3f 90       	pop	r3
     eee:	2f 90       	pop	r2
     ef0:	08 95       	ret

00000ef2 <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
     ef2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LPF_Struct_Init>
     ef6:	08 95       	ret

00000ef8 <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	21 e4       	ldi	r18, 0x41	; 65
     f02:	33 e0       	ldi	r19, 0x03	; 3
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsi3>
     f0c:	60 51       	subi	r22, 0x10	; 16
     f0e:	76 4b       	sbci	r23, 0xB6	; 182
     f10:	8d 4f       	sbci	r24, 0xFD	; 253
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
     f14:	24 e6       	ldi	r18, 0x64	; 100
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodsi4>
     f20:	30 93 89 00 	sts	0x0089, r19
     f24:	20 93 88 00 	sts	0x0088, r18
     f28:	08 95       	ret

00000f2a <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
     f2e:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
     f30:	60 e6       	ldi	r22, 0x60	; 96
     f32:	73 ee       	ldi	r23, 0xE3	; 227
     f34:	86 e1       	ldi	r24, 0x16	; 22
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodsi4>
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	30 40       	sbci	r19, 0x00	; 0
     f40:	30 93 87 00 	sts	0x0087, r19
     f44:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
     f48:	8c ed       	ldi	r24, 0xDC	; 220
     f4a:	95 e0       	ldi	r25, 0x05	; 5
     f4c:	90 93 89 00 	sts	0x0089, r25
     f50:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
     f54:	82 e8       	ldi	r24, 0x82	; 130
     f56:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     f5a:	8a e1       	ldi	r24, 0x1A	; 26
     f5c:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 7c 07 	call	0xef8	; 0xef8 <Servo_Set_Angle>
     f68:	88 ee       	ldi	r24, 0xE8	; 232
     f6a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	2c e2       	ldi	r18, 0x2C	; 44
     f6e:	31 e0       	ldi	r19, 0x01	; 1
     f70:	f9 01       	movw	r30, r18
     f72:	31 97       	sbiw	r30, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <Servo_Init+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f78:	d9 f7       	brne	.-10     	; 0xf70 <Servo_Init+0x46>
  _delay_ms(100);
}
     f7a:	08 95       	ret

00000f7c <MPU6050_Struct_Init>:
}mpu6050_t;

mpu6050_t MPU6050;

void MPU6050_Struct_Init(void){
  MPU6050.AccX=0;
     f7c:	10 92 8c 01 	sts	0x018C, r1
     f80:	10 92 8b 01 	sts	0x018B, r1
  MPU6050.AccY=0;
     f84:	10 92 8e 01 	sts	0x018E, r1
     f88:	10 92 8d 01 	sts	0x018D, r1
  MPU6050.AccZ=0;
     f8c:	10 92 90 01 	sts	0x0190, r1
     f90:	10 92 8f 01 	sts	0x018F, r1
  MPU6050.GyroX=0;
     f94:	10 92 92 01 	sts	0x0192, r1
     f98:	10 92 91 01 	sts	0x0191, r1
  MPU6050.GyroY=0;
     f9c:	10 92 94 01 	sts	0x0194, r1
     fa0:	10 92 93 01 	sts	0x0193, r1
  MPU6050.GyroZ=0;
     fa4:	10 92 96 01 	sts	0x0196, r1
     fa8:	10 92 95 01 	sts	0x0195, r1
  MPU6050.GyroXCal=0;
     fac:	10 92 98 01 	sts	0x0198, r1
     fb0:	10 92 97 01 	sts	0x0197, r1
  MPU6050.GyroYCal=0;
     fb4:	10 92 9a 01 	sts	0x019A, r1
     fb8:	10 92 99 01 	sts	0x0199, r1
  MPU6050.GyroZCal=0;
     fbc:	10 92 9c 01 	sts	0x019C, r1
     fc0:	10 92 9b 01 	sts	0x019B, r1
  MPU6050.Pitch=0;
     fc4:	10 92 9e 01 	sts	0x019E, r1
     fc8:	10 92 9d 01 	sts	0x019D, r1
  MPU6050.Roll=0;
     fcc:	10 92 a0 01 	sts	0x01A0, r1
     fd0:	10 92 9f 01 	sts	0x019F, r1
  MPU6050.Yaw=0;
     fd4:	10 92 a2 01 	sts	0x01A2, r1
     fd8:	10 92 a1 01 	sts	0x01A1, r1
  MPU6050.Temp=0;
     fdc:	10 92 a4 01 	sts	0x01A4, r1
     fe0:	10 92 a3 01 	sts	0x01A3, r1
  MPU6050.Error=0;
     fe4:	10 92 a6 01 	sts	0x01A6, r1
     fe8:	10 92 a5 01 	sts	0x01A5, r1
}
     fec:	08 95       	ret

00000fee <MPU6050_Get_AccX>:

int MPU6050_Get_AccX(void){
  return MPU6050.AccX;
}
     fee:	80 91 8b 01 	lds	r24, 0x018B
     ff2:	90 91 8c 01 	lds	r25, 0x018C
     ff6:	08 95       	ret

00000ff8 <MPU6050_Get_AccY>:

int MPU6050_Get_AccY(void){
  return MPU6050.AccY;
}
     ff8:	80 91 8d 01 	lds	r24, 0x018D
     ffc:	90 91 8e 01 	lds	r25, 0x018E
    1000:	08 95       	ret

00001002 <MPU6050_Get_AccZ>:

int MPU6050_Get_AccZ(void){
  return MPU6050.AccZ;
}
    1002:	80 91 8f 01 	lds	r24, 0x018F
    1006:	90 91 90 01 	lds	r25, 0x0190
    100a:	08 95       	ret

0000100c <MPU6050_Get_GyroX>:

int MPU6050_Get_GyroX(void){
  return MPU6050.GyroX;
}
    100c:	80 91 91 01 	lds	r24, 0x0191
    1010:	90 91 92 01 	lds	r25, 0x0192
    1014:	08 95       	ret

00001016 <MPU6050_Get_GyroY>:

int MPU6050_Get_GyroY(void){
  return MPU6050.GyroY;
}
    1016:	80 91 93 01 	lds	r24, 0x0193
    101a:	90 91 94 01 	lds	r25, 0x0194
    101e:	08 95       	ret

00001020 <MPU6050_Get_GyroZ>:

int MPU6050_Get_GyroZ(void){
  return MPU6050.GyroZ;
}
    1020:	80 91 95 01 	lds	r24, 0x0195
    1024:	90 91 96 01 	lds	r25, 0x0196
    1028:	08 95       	ret

0000102a <MPU6050_Get_GyroXCal>:

int MPU6050_Get_GyroXCal(void){
  return MPU6050.GyroXCal;
}
    102a:	80 91 97 01 	lds	r24, 0x0197
    102e:	90 91 98 01 	lds	r25, 0x0198
    1032:	08 95       	ret

00001034 <MPU6050_Get_GyroYCal>:

int MPU6050_Get_GyroYCal(void){
  return MPU6050.GyroYCal;
}
    1034:	80 91 99 01 	lds	r24, 0x0199
    1038:	90 91 9a 01 	lds	r25, 0x019A
    103c:	08 95       	ret

0000103e <MPU6050_Get_GyroZCal>:

int MPU6050_Get_GyroZCal(void){
  return MPU6050.GyroZCal;
}
    103e:	80 91 9b 01 	lds	r24, 0x019B
    1042:	90 91 9c 01 	lds	r25, 0x019C
    1046:	08 95       	ret

00001048 <MPU6050_Get_Pitch>:

int MPU6050_Get_Pitch(void){
  return MPU6050.Pitch;
}
    1048:	80 91 9d 01 	lds	r24, 0x019D
    104c:	90 91 9e 01 	lds	r25, 0x019E
    1050:	08 95       	ret

00001052 <MPU6050_Get_Roll>:

int MPU6050_Get_Roll(void){
  return MPU6050.Roll;
}
    1052:	80 91 9f 01 	lds	r24, 0x019F
    1056:	90 91 a0 01 	lds	r25, 0x01A0
    105a:	08 95       	ret

0000105c <MPU6050_Get_Yaw>:

int MPU6050_Get_Yaw(void){
  return MPU6050.Yaw;
}
    105c:	80 91 a1 01 	lds	r24, 0x01A1
    1060:	90 91 a2 01 	lds	r25, 0x01A2
    1064:	08 95       	ret

00001066 <MPU6050_Get_Temp>:

int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}
    1066:	80 91 a3 01 	lds	r24, 0x01A3
    106a:	90 91 a4 01 	lds	r25, 0x01A4
    106e:	08 95       	ret

00001070 <MPU6050_Get_Error>:

int MPU6050_Get_Error(void){
  return MPU6050.Error;
}
    1070:	80 91 a5 01 	lds	r24, 0x01A5
    1074:	90 91 a6 01 	lds	r25, 0x01A6
    1078:	08 95       	ret

0000107a <MPU6050_Error_Clear>:

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
    107a:	10 92 a6 01 	sts	0x01A6, r1
    107e:	10 92 a5 01 	sts	0x01A5, r1
}
    1082:	08 95       	ret

00001084 <MPU6050_Read_Roll>:
    MPU6050.Pitch=0;
    return 0;
  }
}

int MPU6050_Read_Roll(void){
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
  if(MPU6050.Error==0){
    108c:	80 91 a5 01 	lds	r24, 0x01A5
    1090:	90 91 a6 01 	lds	r25, 0x01A6
    1094:	89 2b       	or	r24, r25
    1096:	91 f5       	brne	.+100    	; 0x10fc <MPU6050_Read_Roll+0x78>
    float ay=MPU6050_Get_AccY();
    float az=MPU6050_Get_AccZ();
    float divy=ay/az;
    float roll = atan(divy);
    1098:	60 91 8d 01 	lds	r22, 0x018D
    109c:	70 91 8e 01 	lds	r23, 0x018E
    10a0:	88 27       	eor	r24, r24
    10a2:	77 fd       	sbrc	r23, 7
    10a4:	80 95       	com	r24
    10a6:	98 2f       	mov	r25, r24
    10a8:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
    10ac:	7b 01       	movw	r14, r22
    10ae:	8c 01       	movw	r16, r24
    10b0:	60 91 8f 01 	lds	r22, 0x018F
    10b4:	70 91 90 01 	lds	r23, 0x0190
    10b8:	88 27       	eor	r24, r24
    10ba:	77 fd       	sbrc	r23, 7
    10bc:	80 95       	com	r24
    10be:	98 2f       	mov	r25, r24
    10c0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__divsf3>
    10d0:	0e 94 94 0b 	call	0x1728	; 0x1728 <atan>
    roll*=10.0;
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsf3>
    roll*=57.3;
	MPU6050.Roll=(int)roll;
    10e0:	23 e3       	ldi	r18, 0x33	; 51
    10e2:	33 e3       	ldi	r19, 0x33	; 51
    10e4:	45 e6       	ldi	r20, 0x65	; 101
    10e6:	52 e4       	ldi	r21, 0x42	; 66
    10e8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsf3>
    10ec:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
    10f0:	9b 01       	movw	r18, r22
    10f2:	70 93 a0 01 	sts	0x01A0, r23
    10f6:	60 93 9f 01 	sts	0x019F, r22
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <MPU6050_Read_Roll+0x84>
    return MPU6050.Roll;
  }else{
    MPU6050.Roll=0;
    10fc:	10 92 a0 01 	sts	0x01A0, r1
    1100:	10 92 9f 01 	sts	0x019F, r1
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
    1108:	c9 01       	movw	r24, r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	08 95       	ret

00001114 <MPU6050_Read_Pitch>:
void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
  MPU6050_Read_Gyro();
}

int MPU6050_Read_Pitch(void){
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
  if(MPU6050.Error==0){
    111c:	80 91 a5 01 	lds	r24, 0x01A5
    1120:	90 91 a6 01 	lds	r25, 0x01A6
    1124:	89 2b       	or	r24, r25
    1126:	91 f5       	brne	.+100    	; 0x118c <MPU6050_Read_Pitch+0x78>
    float ax=MPU6050_Get_AccX();
    float az=MPU6050_Get_AccZ();
    float divx=ax/az;
    float pitch = atan(divx);
    1128:	60 91 8b 01 	lds	r22, 0x018B
    112c:	70 91 8c 01 	lds	r23, 0x018C
    1130:	88 27       	eor	r24, r24
    1132:	77 fd       	sbrc	r23, 7
    1134:	80 95       	com	r24
    1136:	98 2f       	mov	r25, r24
    1138:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
    113c:	7b 01       	movw	r14, r22
    113e:	8c 01       	movw	r16, r24
    1140:	60 91 8f 01 	lds	r22, 0x018F
    1144:	70 91 90 01 	lds	r23, 0x0190
    1148:	88 27       	eor	r24, r24
    114a:	77 fd       	sbrc	r23, 7
    114c:	80 95       	com	r24
    114e:	98 2f       	mov	r25, r24
    1150:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	c8 01       	movw	r24, r16
    115a:	b7 01       	movw	r22, r14
    115c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__divsf3>
    1160:	0e 94 94 0b 	call	0x1728	; 0x1728 <atan>
    pitch*=10.0;
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsf3>
    pitch*=57.3;
	MPU6050.Pitch=(int)pitch;
    1170:	23 e3       	ldi	r18, 0x33	; 51
    1172:	33 e3       	ldi	r19, 0x33	; 51
    1174:	45 e6       	ldi	r20, 0x65	; 101
    1176:	52 e4       	ldi	r21, 0x42	; 66
    1178:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsf3>
    117c:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
    1180:	9b 01       	movw	r18, r22
    1182:	70 93 9e 01 	sts	0x019E, r23
    1186:	60 93 9d 01 	sts	0x019D, r22
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <MPU6050_Read_Pitch+0x84>
	return MPU6050.Pitch;
  }else{
    MPU6050.Pitch=0;
    118c:	10 92 9e 01 	sts	0x019E, r1
    1190:	10 92 9d 01 	sts	0x019D, r1
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }
}
    1198:	c9 01       	movw	r24, r18
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	08 95       	ret

000011a4 <MPU6050_Get_Mode>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    11a4:	8b e6       	ldi	r24, 0x6B	; 107
    11a6:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
}
    11aa:	08 95       	ret

000011ac <MPU6050_Read_Temp>:
  data/=131;
  MPU6050.GyroZ=data;
  return (int16_t)data;
}

int MPU6050_Read_Temp(void){
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
    11b2:	81 e4       	ldi	r24, 0x41	; 65
    11b4:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    11b8:	f8 2e       	mov	r15, r24
  error1 = I2C_Get_Error();
    11ba:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    11be:	18 2f       	mov	r17, r24
  data <<= 8;
  data |= I2C_Read_Register(0x42);
    11c0:	82 e4       	ldi	r24, 0x42	; 66
    11c2:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    11c6:	08 2f       	mov	r16, r24
  error2 = I2C_Get_Error();
    11c8:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
  data /=340;
  data +=36;
  if( (error1!=0) || (error2!=0) ){
    11cc:	11 23       	and	r17, r17
    11ce:	81 f4       	brne	.+32     	; 0x11f0 <MPU6050_Read_Temp+0x44>
    11d0:	88 23       	and	r24, r24
    11d2:	71 f4       	brne	.+28     	; 0x11f0 <MPU6050_Read_Temp+0x44>

int MPU6050_Read_Temp(void){
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x41);
  error1 = I2C_Get_Error();
  data <<= 8;
    11d4:	9f 2d       	mov	r25, r15
    11d6:	80 e0       	ldi	r24, 0x00	; 0
  data |= I2C_Read_Register(0x42);
    11d8:	20 2f       	mov	r18, r16
    11da:	30 e0       	ldi	r19, 0x00	; 0
  error2 = I2C_Get_Error();
  data /=340;
    11dc:	82 2b       	or	r24, r18
    11de:	93 2b       	or	r25, r19
    11e0:	64 e5       	ldi	r22, 0x54	; 84
    11e2:	71 e0       	ldi	r23, 0x01	; 1
    11e4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__divmodhi4>
  data +=36;
    11e8:	9b 01       	movw	r18, r22
    11ea:	2c 5d       	subi	r18, 0xDC	; 220
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <MPU6050_Read_Temp+0x54>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x21;
    11f0:	81 e2       	ldi	r24, 0x21	; 33
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	90 93 a6 01 	sts	0x01A6, r25
    11f8:	80 93 a5 01 	sts	0x01A5, r24
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
  }
  MPU6050.Temp=data;
    1200:	30 93 a4 01 	sts	0x01A4, r19
    1204:	20 93 a3 01 	sts	0x01A3, r18
  return data;
}
    1208:	c9 01       	movw	r24, r18
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	08 95       	ret

00001212 <MPU6050_Read_GyroZ>:
  data/=131;
  MPU6050.GyroY=data;
  return data;
}

int MPU6050_Read_GyroZ(void){
    1212:	af 92       	push	r10
    1214:	bf 92       	push	r11
    1216:	cf 92       	push	r12
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x47);
    1222:	87 e4       	ldi	r24, 0x47	; 71
    1224:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1228:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    122a:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    122e:	b8 2e       	mov	r11, r24
  data <<= 8;
    1230:	fd 2c       	mov	r15, r13
    1232:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
    1234:	88 e4       	ldi	r24, 0x48	; 72
    1236:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    123a:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    123c:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1240:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    1242:	dd 24       	eor	r13, r13
    1244:	ec 28       	or	r14, r12
    1246:	fd 28       	or	r15, r13
    1248:	00 27       	eor	r16, r16
    124a:	f7 fc       	sbrc	r15, 7
    124c:	00 95       	com	r16
    124e:	10 2f       	mov	r17, r16
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	b8 01       	movw	r22, r16
    1254:	a7 01       	movw	r20, r14
    1256:	0e 94 14 07 	call	0xe28	; 0xe28 <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroZCal;
    125a:	20 91 9b 01 	lds	r18, 0x019B
    125e:	30 91 9c 01 	lds	r19, 0x019C
  if( (error1!=0) || (error2!=0) ){
    1262:	bb 20       	and	r11, r11
    1264:	31 f4       	brne	.+12     	; 0x1272 <MPU6050_Read_GyroZ+0x60>
    1266:	aa 20       	and	r10, r10
    1268:	21 f4       	brne	.+8      	; 0x1272 <MPU6050_Read_GyroZ+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x48);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
    126a:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroZCal;
    126c:	82 1b       	sub	r24, r18
    126e:	93 0b       	sbc	r25, r19
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <MPU6050_Read_GyroZ+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x13;
    1272:	83 e1       	ldi	r24, 0x13	; 19
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	90 93 a6 01 	sts	0x01A6, r25
    127a:	80 93 a5 01 	sts	0x01A5, r24
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    1282:	63 e8       	ldi	r22, 0x83	; 131
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__divmodhi4>
    128a:	cb 01       	movw	r24, r22
  MPU6050.GyroZ=data;
    128c:	60 93 95 01 	sts	0x0195, r22
    1290:	90 93 96 01 	sts	0x0196, r25
  return (int16_t)data;
}
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	08 95       	ret

000012a6 <MPU6050_Read_GyroY>:
  data/=131;
  MPU6050.GyroX=data;
  return data;
}

int MPU6050_Read_GyroY(void){
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x45);
    12b6:	85 e4       	ldi	r24, 0x45	; 69
    12b8:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    12bc:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    12be:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    12c2:	b8 2e       	mov	r11, r24
  data <<= 8;
    12c4:	fd 2c       	mov	r15, r13
    12c6:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
    12c8:	86 e4       	ldi	r24, 0x46	; 70
    12ca:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    12ce:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    12d0:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    12d4:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    12d6:	dd 24       	eor	r13, r13
    12d8:	ec 28       	or	r14, r12
    12da:	fd 28       	or	r15, r13
    12dc:	00 27       	eor	r16, r16
    12de:	f7 fc       	sbrc	r15, 7
    12e0:	00 95       	com	r16
    12e2:	10 2f       	mov	r17, r16
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	b8 01       	movw	r22, r16
    12e8:	a7 01       	movw	r20, r14
    12ea:	0e 94 14 07 	call	0xe28	; 0xe28 <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroYCal;
    12ee:	20 91 99 01 	lds	r18, 0x0199
    12f2:	30 91 9a 01 	lds	r19, 0x019A
  if( (error1!=0) || (error2!=0) ){
    12f6:	bb 20       	and	r11, r11
    12f8:	31 f4       	brne	.+12     	; 0x1306 <MPU6050_Read_GyroY+0x60>
    12fa:	aa 20       	and	r10, r10
    12fc:	21 f4       	brne	.+8      	; 0x1306 <MPU6050_Read_GyroY+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x46);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
    12fe:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroYCal;
    1300:	82 1b       	sub	r24, r18
    1302:	93 0b       	sbc	r25, r19
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <MPU6050_Read_GyroY+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x12;
    1306:	82 e1       	ldi	r24, 0x12	; 18
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 a6 01 	sts	0x01A6, r25
    130e:	80 93 a5 01 	sts	0x01A5, r24
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    1316:	63 e8       	ldi	r22, 0x83	; 131
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__divmodhi4>
    131e:	cb 01       	movw	r24, r22
  MPU6050.GyroY=data;
    1320:	60 93 93 01 	sts	0x0193, r22
    1324:	90 93 94 01 	sts	0x0194, r25
  return data;
}
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	08 95       	ret

0000133a <MPU6050_Read_GyroX>:
  }
  MPU6050.AccZ=data;
  return data;
}

int MPU6050_Read_GyroX(void){
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x43);
    134a:	83 e4       	ldi	r24, 0x43	; 67
    134c:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1350:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1352:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1356:	b8 2e       	mov	r11, r24
  data <<= 8;
    1358:	fd 2c       	mov	r15, r13
    135a:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
    135c:	84 e4       	ldi	r24, 0x44	; 68
    135e:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1362:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1364:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1368:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    136a:	dd 24       	eor	r13, r13
    136c:	ec 28       	or	r14, r12
    136e:	fd 28       	or	r15, r13
    1370:	00 27       	eor	r16, r16
    1372:	f7 fc       	sbrc	r15, 7
    1374:	00 95       	com	r16
    1376:	10 2f       	mov	r17, r16
    1378:	83 e0       	ldi	r24, 0x03	; 3
    137a:	b8 01       	movw	r22, r16
    137c:	a7 01       	movw	r20, r14
    137e:	0e 94 14 07 	call	0xe28	; 0xe28 <LPF_Get_Filtered_Value>
  #endif
  data-=MPU6050.GyroXCal;
    1382:	20 91 97 01 	lds	r18, 0x0197
    1386:	30 91 98 01 	lds	r19, 0x0198
  if( (error1!=0) || (error2!=0) ){
    138a:	bb 20       	and	r11, r11
    138c:	31 f4       	brne	.+12     	; 0x139a <MPU6050_Read_GyroX+0x60>
    138e:	aa 20       	and	r10, r10
    1390:	21 f4       	brne	.+8      	; 0x139a <MPU6050_Read_GyroX+0x60>
  error1 = I2C_Get_Error();
  data <<= 8;
  data |= I2C_Read_Register(0x44);
  error2 = I2C_Get_Error();
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
    1392:	cb 01       	movw	r24, r22
  #endif
  data-=MPU6050.GyroXCal;
    1394:	82 1b       	sub	r24, r18
    1396:	93 0b       	sbc	r25, r19
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <MPU6050_Read_GyroX+0x70>
  if( (error1!=0) || (error2!=0) ){
    data=0;
	MPU6050.Error=0x11;
    139a:	81 e1       	ldi	r24, 0x11	; 17
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 a6 01 	sts	0x01A6, r25
    13a2:	80 93 a5 01 	sts	0x01A5, r24
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
  }
  // 131 LSB/Degree/Second
  data/=131;
    13aa:	63 e8       	ldi	r22, 0x83	; 131
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__divmodhi4>
    13b2:	cb 01       	movw	r24, r22
  MPU6050.GyroX=data;
    13b4:	60 93 91 01 	sts	0x0191, r22
    13b8:	90 93 92 01 	sts	0x0192, r25
  return data;
}
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	08 95       	ret

000013ce <MPU6050_Read_Gyro>:
    MPU6050_Read_AccZ();
  }
}

void MPU6050_Read_Gyro(void){
  if(MPU6050.Error==0){
    13ce:	80 91 a5 01 	lds	r24, 0x01A5
    13d2:	90 91 a6 01 	lds	r25, 0x01A6
    13d6:	89 2b       	or	r24, r25
    13d8:	11 f4       	brne	.+4      	; 0x13de <MPU6050_Read_Gyro+0x10>
    MPU6050_Read_GyroX();
    13da:	0e 94 9d 09 	call	0x133a	; 0x133a <MPU6050_Read_GyroX>
  }
  if(MPU6050.Error==0){
    13de:	80 91 a5 01 	lds	r24, 0x01A5
    13e2:	90 91 a6 01 	lds	r25, 0x01A6
    13e6:	89 2b       	or	r24, r25
    13e8:	11 f4       	brne	.+4      	; 0x13ee <MPU6050_Read_Gyro+0x20>
    MPU6050_Read_GyroY();
    13ea:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MPU6050_Read_GyroY>
  }
  if(MPU6050.Error==0){
    13ee:	80 91 a5 01 	lds	r24, 0x01A5
    13f2:	90 91 a6 01 	lds	r25, 0x01A6
    13f6:	89 2b       	or	r24, r25
    13f8:	11 f4       	brne	.+4      	; 0x13fe <MPU6050_Read_Gyro+0x30>
    MPU6050_Read_GyroZ();
    13fa:	0e 94 09 09 	call	0x1212	; 0x1212 <MPU6050_Read_GyroZ>
    13fe:	08 95       	ret

00001400 <MPU6050_Read_AccZ>:
  }
  MPU6050.AccY=data;
  return data;
}

int MPU6050_Read_AccZ(void){
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3F);
    1410:	8f e3       	ldi	r24, 0x3F	; 63
    1412:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1416:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1418:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    141c:	b8 2e       	mov	r11, r24
  data <<= 8;
    141e:	fd 2c       	mov	r15, r13
    1420:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
    1422:	80 e4       	ldi	r24, 0x40	; 64
    1424:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1428:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    142a:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    142e:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
    1430:	dd 24       	eor	r13, r13
    1432:	ec 28       	or	r14, r12
    1434:	fd 28       	or	r15, r13
    1436:	00 27       	eor	r16, r16
    1438:	f7 fc       	sbrc	r15, 7
    143a:	00 95       	com	r16
    143c:	10 2f       	mov	r17, r16
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	b8 01       	movw	r22, r16
    1442:	a7 01       	movw	r20, r14
    1444:	0e 94 14 07 	call	0xe28	; 0xe28 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    1448:	bb 20       	and	r11, r11
    144a:	11 f4       	brne	.+4      	; 0x1450 <MPU6050_Read_AccZ+0x50>
    144c:	aa 20       	and	r10, r10
    144e:	41 f0       	breq	.+16     	; 0x1460 <MPU6050_Read_AccZ+0x60>
    data=0;
	MPU6050.Error=0x03;
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	90 93 a6 01 	sts	0x01A6, r25
    1458:	80 93 a5 01 	sts	0x01A5, r24
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccZ=data;
    1460:	70 93 90 01 	sts	0x0190, r23
    1464:	60 93 8f 01 	sts	0x018F, r22
  return data;
}
    1468:	cb 01       	movw	r24, r22
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	08 95       	ret

0000147c <MPU6050_Read_AccY>:
  }
  MPU6050.AccX=data;
  return data;
}

int MPU6050_Read_AccY(void){
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3D);
    148c:	8d e3       	ldi	r24, 0x3D	; 61
    148e:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1492:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1494:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1498:	b8 2e       	mov	r11, r24
  data <<= 8;
    149a:	fd 2c       	mov	r15, r13
    149c:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
    149e:	8e e3       	ldi	r24, 0x3E	; 62
    14a0:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    14a4:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    14a6:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    14aa:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
    14ac:	dd 24       	eor	r13, r13
    14ae:	ec 28       	or	r14, r12
    14b0:	fd 28       	or	r15, r13
    14b2:	00 27       	eor	r16, r16
    14b4:	f7 fc       	sbrc	r15, 7
    14b6:	00 95       	com	r16
    14b8:	10 2f       	mov	r17, r16
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	b8 01       	movw	r22, r16
    14be:	a7 01       	movw	r20, r14
    14c0:	0e 94 14 07 	call	0xe28	; 0xe28 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    14c4:	bb 20       	and	r11, r11
    14c6:	11 f4       	brne	.+4      	; 0x14cc <MPU6050_Read_AccY+0x50>
    14c8:	aa 20       	and	r10, r10
    14ca:	41 f0       	breq	.+16     	; 0x14dc <MPU6050_Read_AccY+0x60>
    data=0;
	MPU6050.Error=0x02;
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	90 93 a6 01 	sts	0x01A6, r25
    14d4:	80 93 a5 01 	sts	0x01A5, r24
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccY=data;
    14dc:	70 93 8e 01 	sts	0x018E, r23
    14e0:	60 93 8d 01 	sts	0x018D, r22
  return data;
}
    14e4:	cb 01       	movw	r24, r22
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	bf 90       	pop	r11
    14f4:	af 90       	pop	r10
    14f6:	08 95       	ret

000014f8 <MPU6050_Read_AccX>:
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    I2C_Write_Register(0x6B, 0x00);
  }
}

int MPU6050_Read_AccX(void){
    14f8:	af 92       	push	r10
    14fa:	bf 92       	push	r11
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
  int data=0, error1=0, error2=0;
  data = I2C_Read_Register(0x3B);
    1508:	8b e3       	ldi	r24, 0x3B	; 59
    150a:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    150e:	d8 2e       	mov	r13, r24
  error1 = I2C_Get_Error();
    1510:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1514:	b8 2e       	mov	r11, r24
  data <<= 8;
    1516:	fd 2c       	mov	r15, r13
    1518:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
    151a:	8c e3       	ldi	r24, 0x3C	; 60
    151c:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    1520:	c8 2e       	mov	r12, r24
  error2 = I2C_Get_Error();
    1522:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Get_Error>
    1526:	a8 2e       	mov	r10, r24
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
    1528:	dd 24       	eor	r13, r13
    152a:	ec 28       	or	r14, r12
    152c:	fd 28       	or	r15, r13
    152e:	00 27       	eor	r16, r16
    1530:	f7 fc       	sbrc	r15, 7
    1532:	00 95       	com	r16
    1534:	10 2f       	mov	r17, r16
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	b8 01       	movw	r22, r16
    153a:	a7 01       	movw	r20, r14
    153c:	0e 94 14 07 	call	0xe28	; 0xe28 <LPF_Get_Filtered_Value>
  #endif
  if( (error1!=0) || (error2!=0) ){
    1540:	bb 20       	and	r11, r11
    1542:	11 f4       	brne	.+4      	; 0x1548 <MPU6050_Read_AccX+0x50>
    1544:	aa 20       	and	r10, r10
    1546:	41 f0       	breq	.+16     	; 0x1558 <MPU6050_Read_AccX+0x60>
    data=0;
	MPU6050.Error=0x01;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	90 93 a6 01 	sts	0x01A6, r25
    1550:	80 93 a5 01 	sts	0x01A5, r24
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
  }
  MPU6050.AccX=data;
    1558:	70 93 8c 01 	sts	0x018C, r23
    155c:	60 93 8b 01 	sts	0x018B, r22
  return data;
}
    1560:	cb 01       	movw	r24, r22
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	08 95       	ret

00001574 <MPU6050_Read_Acc>:
  MPU6050.Temp=data;
  return data;
}

void MPU6050_Read_Acc(void){
  if(MPU6050.Error==0){
    1574:	80 91 a5 01 	lds	r24, 0x01A5
    1578:	90 91 a6 01 	lds	r25, 0x01A6
    157c:	89 2b       	or	r24, r25
    157e:	11 f4       	brne	.+4      	; 0x1584 <MPU6050_Read_Acc+0x10>
    MPU6050_Read_AccX();
    1580:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MPU6050_Read_AccX>
  }
  if(MPU6050.Error==0){
    1584:	80 91 a5 01 	lds	r24, 0x01A5
    1588:	90 91 a6 01 	lds	r25, 0x01A6
    158c:	89 2b       	or	r24, r25
    158e:	11 f4       	brne	.+4      	; 0x1594 <MPU6050_Read_Acc+0x20>
    MPU6050_Read_AccY();
    1590:	0e 94 3e 0a 	call	0x147c	; 0x147c <MPU6050_Read_AccY>
  }
  if(MPU6050.Error==0){
    1594:	80 91 a5 01 	lds	r24, 0x01A5
    1598:	90 91 a6 01 	lds	r25, 0x01A6
    159c:	89 2b       	or	r24, r25
    159e:	11 f4       	brne	.+4      	; 0x15a4 <MPU6050_Read_Acc+0x30>
    MPU6050_Read_AccZ();
    15a0:	0e 94 00 0a 	call	0x1400	; 0x1400 <MPU6050_Read_AccZ>
    15a4:	08 95       	ret

000015a6 <MPU6050_Read_Acc_Gyro>:
    MPU6050_Read_GyroZ();
  }
}

void MPU6050_Read_Acc_Gyro(void){
  MPU6050_Read_Acc();
    15a6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MPU6050_Read_Acc>
  MPU6050_Read_Gyro();
    15aa:	0e 94 e7 09 	call	0x13ce	; 0x13ce <MPU6050_Read_Gyro>
}
    15ae:	08 95       	ret

000015b0 <MPU6050_Set_Mode_Active>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    15b0:	8b e6       	ldi	r24, 0x6B	; 107
    15b2:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
    I2C_Write_Register(0x6B, 0x40);
  }
}

void MPU6050_Set_Mode_Active(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0x40){
    15b6:	86 ff       	sbrs	r24, 6
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <MPU6050_Set_Mode_Active+0x12>
    I2C_Write_Register(0x6B, 0x00);
    15ba:	8b e6       	ldi	r24, 0x6B	; 107
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	0e 94 db 02 	call	0x5b6	; 0x5b6 <I2C_Write_Register>
    15c2:	08 95       	ret

000015c4 <MPU6050_Restart>:
  MPU6050.GyroYCal=MPU6050_Get_GyroY();
  MPU6050.GyroZCal=MPU6050_Get_GyroZ();
  
}

void MPU6050_Restart(void){
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
  I2C_Error_Clear_All();
    15ca:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Error_Clear_All>
int MPU6050_Get_Temp(void){
  return MPU6050.Temp;
}

int MPU6050_Get_Error(void){
  return MPU6050.Error;
    15ce:	f0 90 a5 01 	lds	r15, 0x01A5
}

void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
    15d2:	10 92 a6 01 	sts	0x01A6, r1
    15d6:	10 92 a5 01 	sts	0x01A5, r1
    15da:	00 e7       	ldi	r16, 0x70	; 112
    15dc:	17 e1       	ldi	r17, 0x17	; 23
    15de:	c8 01       	movw	r24, r16
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <MPU6050_Restart+0x1c>
void MPU6050_Restart(void){
  I2C_Error_Clear_All();
  uint8_t temp=MPU6050_Get_Error();
  MPU6050_Error_Clear();
  _delay_ms(2);
  I2C_Stop();
    15e4:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Stop>
    15e8:	c8 01       	movw	r24, r16
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <MPU6050_Restart+0x26>
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
    15ee:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <MPU6050_Set_Mode_Active>
    15f2:	c8 01       	movw	r24, r16
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <MPU6050_Restart+0x30>
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
    15f8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <MPU6050_Read_Acc_Gyro>
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    15fc:	8b e6       	ldi	r24, 0x6B	; 107
    15fe:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
  I2C_Stop();
  _delay_ms(2);
  MPU6050_Set_Mode_Active();
  _delay_ms(2);
  MPU6050_Read_Acc_Gyro();
  if(MPU6050_Get_Mode()!=0){
    1602:	88 23       	and	r24, r24
    1604:	21 f0       	breq	.+8      	; 0x160e <MPU6050_Restart+0x4a>
    MPU6050.Error=temp;
    1606:	f0 92 a5 01 	sts	0x01A5, r15
    160a:	10 92 a6 01 	sts	0x01A6, r1
  }
}
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	08 95       	ret

00001616 <MPU6050_Init>:
    MPU6050.Roll=0;
    return 0;
  }
}

void MPU6050_Init(void){
    1616:	1f 93       	push	r17
  I2C_Init();
    1618:	0e 94 13 03 	call	0x626	; 0x626 <I2C_Init>
    161c:	80 e3       	ldi	r24, 0x30	; 48
    161e:	95 e7       	ldi	r25, 0x75	; 117
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <MPU6050_Init+0xa>
  _delay_ms(10);
  MPU6050_Struct_Init();
    1624:	0e 94 be 07 	call	0xf7c	; 0xf7c <MPU6050_Struct_Init>
  MPU6050_Set_Mode_Active();
    1628:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <MPU6050_Set_Mode_Active>
  #ifdef LPF_EN
	LPF_Init();
    162c:	0e 94 79 07 	call	0xef2	; 0xef2 <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	62 e3       	ldi	r22, 0x32	; 50
    1634:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	62 e3       	ldi	r22, 0x32	; 50
    163c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	62 e3       	ldi	r22, 0x32	; 50
    1644:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	62 e3       	ldi	r22, 0x32	; 50
    164c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	62 e3       	ldi	r22, 0x32	; 50
    1654:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
    1658:	85 e0       	ldi	r24, 0x05	; 5
    165a:	62 e3       	ldi	r22, 0x32	; 50
    165c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LPF_Set_Alpha>
    1660:	88 ee       	ldi	r24, 0xE8	; 232
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	2c e2       	ldi	r18, 0x2C	; 44
    1666:	31 e0       	ldi	r19, 0x01	; 1
    1668:	f9 01       	movw	r30, r18
    166a:	31 97       	sbiw	r30, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <MPU6050_Init+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	d9 f7       	brne	.-10     	; 0x1668 <MPU6050_Init+0x52>
    1672:	10 e0       	ldi	r17, 0x00	; 0
  #endif
  _delay_ms(100);
  for(uint8_t i=0;i<32;i++){
    MPU6050_Read_Acc_Gyro();
    1674:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <MPU6050_Read_Acc_Gyro>
	LPF_Set_Alpha(3,LPF_EN);
	LPF_Set_Alpha(4,LPF_EN);
	LPF_Set_Alpha(5,LPF_EN);
  #endif
  _delay_ms(100);
  for(uint8_t i=0;i<32;i++){
    1678:	1f 5f       	subi	r17, 0xFF	; 255
    167a:	10 32       	cpi	r17, 0x20	; 32
    167c:	d9 f7       	brne	.-10     	; 0x1674 <MPU6050_Init+0x5e>
    MPU6050_Read_Acc_Gyro();
  }
  MPU6050.GyroXCal=MPU6050_Get_GyroX();
    167e:	80 91 91 01 	lds	r24, 0x0191
    1682:	90 91 92 01 	lds	r25, 0x0192
    1686:	90 93 98 01 	sts	0x0198, r25
    168a:	80 93 97 01 	sts	0x0197, r24
  MPU6050.GyroYCal=MPU6050_Get_GyroY();
    168e:	80 91 93 01 	lds	r24, 0x0193
    1692:	90 91 94 01 	lds	r25, 0x0194
    1696:	90 93 9a 01 	sts	0x019A, r25
    169a:	80 93 99 01 	sts	0x0199, r24
  MPU6050.GyroZCal=MPU6050_Get_GyroZ();
    169e:	80 91 95 01 	lds	r24, 0x0195
    16a2:	90 91 96 01 	lds	r25, 0x0196
    16a6:	90 93 9c 01 	sts	0x019C, r25
    16aa:	80 93 9b 01 	sts	0x019B, r24
  
}
    16ae:	1f 91       	pop	r17
    16b0:	08 95       	ret

000016b2 <MPU6050_Set_Mode_Sleep>:
void MPU6050_Error_Clear(void){
  MPU6050.Error=0x00;
}

uint8_t MPU6050_Get_Mode(void){
  return I2C_Read_Register(0x6B);
    16b2:	8b e6       	ldi	r24, 0x6B	; 107
    16b4:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Read_Register>
}

void MPU6050_Set_Mode_Sleep(void){
  if( (MPU6050_Get_Mode() & 0x40) == 0){
    16b8:	86 fd       	sbrc	r24, 6
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <MPU6050_Set_Mode_Sleep+0x12>
    I2C_Write_Register(0x6B, 0x40);
    16bc:	8b e6       	ldi	r24, 0x6B	; 107
    16be:	60 e4       	ldi	r22, 0x40	; 64
    16c0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <I2C_Write_Register>
    16c4:	08 95       	ret

000016c6 <Timer_Struct_Init>:
#include <math.h>
#include "time.h"

void Timer_Struct_Init(void){
  
}
    16c6:	08 95       	ret

000016c8 <Timer_Config_Reg>:

void Timer_Config_Reg(void){
  TCCR1A = 0x00;
    16c8:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0x00;
    16cc:	a1 e8       	ldi	r26, 0x81	; 129
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	1c 92       	st	X, r1
  TCCR1C = 0x00;
    16d2:	10 92 82 00 	sts	0x0082, r1
  TCNT1  = 0x00;
    16d6:	e4 e8       	ldi	r30, 0x84	; 132
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	11 82       	std	Z+1, r1	; 0x01
    16dc:	10 82       	st	Z, r1
  TIMSK1 = 0x00;
    16de:	10 92 6f 00 	sts	0x006F, r1
  TIFR1  = 0x00;
    16e2:	16 ba       	out	0x16, r1	; 22
  TCCR1B = (1<<CS10)|(1<<CS11);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	8c 93       	st	X, r24
  TCNT1  = 0;
    16e8:	11 82       	std	Z+1, r1	; 0x01
    16ea:	10 82       	st	Z, r1
}
    16ec:	08 95       	ret

000016ee <Timer_Init>:

void Timer_Init(void){
  Timer_Struct_Init();
  Timer_Config_Reg();
    16ee:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <Timer_Config_Reg>
}
    16f2:	08 95       	ret

000016f4 <Timer_Start>:

void Timer_Start(void){
  TCNT1  = 0;
    16f4:	10 92 85 00 	sts	0x0085, r1
    16f8:	10 92 84 00 	sts	0x0084, r1
}
    16fc:	08 95       	ret

000016fe <Timer_Get_Time>:

uint32_t Timer_Get_Time(void){
  uint32_t temp=0;
  temp=TCNT1;
    16fe:	60 91 84 00 	lds	r22, 0x0084
    1702:	70 91 85 00 	lds	r23, 0x0085
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
  temp*=533;  //multiplied by 5.33us*100
    170a:	25 e1       	ldi	r18, 0x15	; 21
    170c:	32 e0       	ldi	r19, 0x02	; 2
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsi3>
    1716:	24 e6       	ldi	r18, 0x64	; 100
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodsi4>
    1722:	ca 01       	movw	r24, r20
  temp/=100;
  return temp;
}
    1724:	b9 01       	movw	r22, r18
    1726:	08 95       	ret

00001728 <atan>:
    1728:	df 93       	push	r29
    172a:	dd 27       	eor	r29, r29
    172c:	b9 2f       	mov	r27, r25
    172e:	bf 77       	andi	r27, 0x7F	; 127
    1730:	40 e8       	ldi	r20, 0x80	; 128
    1732:	5f e3       	ldi	r21, 0x3F	; 63
    1734:	16 16       	cp	r1, r22
    1736:	17 06       	cpc	r1, r23
    1738:	48 07       	cpc	r20, r24
    173a:	5b 07       	cpc	r21, r27
    173c:	10 f4       	brcc	.+4      	; 0x1742 <atan+0x1a>
    173e:	d9 2f       	mov	r29, r25
    1740:	67 d1       	rcall	.+718    	; 0x1a10 <inverse>
    1742:	9f 93       	push	r25
    1744:	8f 93       	push	r24
    1746:	7f 93       	push	r23
    1748:	6f 93       	push	r22
    174a:	cc d1       	rcall	.+920    	; 0x1ae4 <square>
    174c:	e8 e6       	ldi	r30, 0x68	; 104
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	f2 d0       	rcall	.+484    	; 0x1936 <__fp_powser>
    1752:	24 d1       	rcall	.+584    	; 0x199c <__fp_round>
    1754:	2f 91       	pop	r18
    1756:	3f 91       	pop	r19
    1758:	4f 91       	pop	r20
    175a:	5f 91       	pop	r21
    175c:	6c d1       	rcall	.+728    	; 0x1a36 <__mulsf3x>
    175e:	dd 23       	and	r29, r29
    1760:	49 f0       	breq	.+18     	; 0x1774 <atan+0x4c>
    1762:	90 58       	subi	r25, 0x80	; 128
    1764:	a2 ea       	ldi	r26, 0xA2	; 162
    1766:	2a ed       	ldi	r18, 0xDA	; 218
    1768:	3f e0       	ldi	r19, 0x0F	; 15
    176a:	49 ec       	ldi	r20, 0xC9	; 201
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	d0 78       	andi	r29, 0x80	; 128
    1770:	5d 27       	eor	r21, r29
    1772:	c8 d1       	rcall	.+912    	; 0x1b04 <__addsf3x>
    1774:	df 91       	pop	r29
    1776:	12 c1       	rjmp	.+548    	; 0x199c <__fp_round>

00001778 <__divsf3>:
    1778:	0c d0       	rcall	.+24     	; 0x1792 <__divsf3x>
    177a:	10 c1       	rjmp	.+544    	; 0x199c <__fp_round>
    177c:	08 d1       	rcall	.+528    	; 0x198e <__fp_pscB>
    177e:	40 f0       	brcs	.+16     	; 0x1790 <__divsf3+0x18>
    1780:	ff d0       	rcall	.+510    	; 0x1980 <__fp_pscA>
    1782:	30 f0       	brcs	.+12     	; 0x1790 <__divsf3+0x18>
    1784:	21 f4       	brne	.+8      	; 0x178e <__divsf3+0x16>
    1786:	5f 3f       	cpi	r21, 0xFF	; 255
    1788:	19 f0       	breq	.+6      	; 0x1790 <__divsf3+0x18>
    178a:	cc c0       	rjmp	.+408    	; 0x1924 <__fp_inf>
    178c:	51 11       	cpse	r21, r1
    178e:	3a c1       	rjmp	.+628    	; 0x1a04 <__fp_szero>
    1790:	cf c0       	rjmp	.+414    	; 0x1930 <__fp_nan>

00001792 <__divsf3x>:
    1792:	15 d1       	rcall	.+554    	; 0x19be <__fp_split3>
    1794:	98 f3       	brcs	.-26     	; 0x177c <__divsf3+0x4>

00001796 <__divsf3_pse>:
    1796:	99 23       	and	r25, r25
    1798:	c9 f3       	breq	.-14     	; 0x178c <__divsf3+0x14>
    179a:	55 23       	and	r21, r21
    179c:	b1 f3       	breq	.-20     	; 0x178a <__divsf3+0x12>
    179e:	95 1b       	sub	r25, r21
    17a0:	55 0b       	sbc	r21, r21
    17a2:	bb 27       	eor	r27, r27
    17a4:	aa 27       	eor	r26, r26
    17a6:	62 17       	cp	r22, r18
    17a8:	73 07       	cpc	r23, r19
    17aa:	84 07       	cpc	r24, r20
    17ac:	38 f0       	brcs	.+14     	; 0x17bc <__divsf3_pse+0x26>
    17ae:	9f 5f       	subi	r25, 0xFF	; 255
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	22 0f       	add	r18, r18
    17b4:	33 1f       	adc	r19, r19
    17b6:	44 1f       	adc	r20, r20
    17b8:	aa 1f       	adc	r26, r26
    17ba:	a9 f3       	breq	.-22     	; 0x17a6 <__divsf3_pse+0x10>
    17bc:	33 d0       	rcall	.+102    	; 0x1824 <__divsf3_pse+0x8e>
    17be:	0e 2e       	mov	r0, r30
    17c0:	3a f0       	brmi	.+14     	; 0x17d0 <__divsf3_pse+0x3a>
    17c2:	e0 e8       	ldi	r30, 0x80	; 128
    17c4:	30 d0       	rcall	.+96     	; 0x1826 <__divsf3_pse+0x90>
    17c6:	91 50       	subi	r25, 0x01	; 1
    17c8:	50 40       	sbci	r21, 0x00	; 0
    17ca:	e6 95       	lsr	r30
    17cc:	00 1c       	adc	r0, r0
    17ce:	ca f7       	brpl	.-14     	; 0x17c2 <__divsf3_pse+0x2c>
    17d0:	29 d0       	rcall	.+82     	; 0x1824 <__divsf3_pse+0x8e>
    17d2:	fe 2f       	mov	r31, r30
    17d4:	27 d0       	rcall	.+78     	; 0x1824 <__divsf3_pse+0x8e>
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	bb 1f       	adc	r27, r27
    17de:	26 17       	cp	r18, r22
    17e0:	37 07       	cpc	r19, r23
    17e2:	48 07       	cpc	r20, r24
    17e4:	ab 07       	cpc	r26, r27
    17e6:	b0 e8       	ldi	r27, 0x80	; 128
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__divsf3_pse+0x56>
    17ea:	bb 0b       	sbc	r27, r27
    17ec:	80 2d       	mov	r24, r0
    17ee:	bf 01       	movw	r22, r30
    17f0:	ff 27       	eor	r31, r31
    17f2:	93 58       	subi	r25, 0x83	; 131
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	2a f0       	brmi	.+10     	; 0x1802 <__divsf3_pse+0x6c>
    17f8:	9e 3f       	cpi	r25, 0xFE	; 254
    17fa:	51 05       	cpc	r21, r1
    17fc:	68 f0       	brcs	.+26     	; 0x1818 <__divsf3_pse+0x82>
    17fe:	92 c0       	rjmp	.+292    	; 0x1924 <__fp_inf>
    1800:	01 c1       	rjmp	.+514    	; 0x1a04 <__fp_szero>
    1802:	5f 3f       	cpi	r21, 0xFF	; 255
    1804:	ec f3       	brlt	.-6      	; 0x1800 <__divsf3_pse+0x6a>
    1806:	98 3e       	cpi	r25, 0xE8	; 232
    1808:	dc f3       	brlt	.-10     	; 0x1800 <__divsf3_pse+0x6a>
    180a:	86 95       	lsr	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	9f 5f       	subi	r25, 0xFF	; 255
    1816:	c9 f7       	brne	.-14     	; 0x180a <__divsf3_pse+0x74>
    1818:	88 0f       	add	r24, r24
    181a:	91 1d       	adc	r25, r1
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	97 f9       	bld	r25, 7
    1822:	08 95       	ret
    1824:	e1 e0       	ldi	r30, 0x01	; 1
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	bb 1f       	adc	r27, r27
    182e:	62 17       	cp	r22, r18
    1830:	73 07       	cpc	r23, r19
    1832:	84 07       	cpc	r24, r20
    1834:	ba 07       	cpc	r27, r26
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__divsf3_pse+0xaa>
    1838:	62 1b       	sub	r22, r18
    183a:	73 0b       	sbc	r23, r19
    183c:	84 0b       	sbc	r24, r20
    183e:	ba 0b       	sbc	r27, r26
    1840:	ee 1f       	adc	r30, r30
    1842:	88 f7       	brcc	.-30     	; 0x1826 <__divsf3_pse+0x90>
    1844:	e0 95       	com	r30
    1846:	08 95       	ret

00001848 <__fixsfsi>:
    1848:	04 d0       	rcall	.+8      	; 0x1852 <__fixunssfsi>
    184a:	68 94       	set
    184c:	b1 11       	cpse	r27, r1
    184e:	da c0       	rjmp	.+436    	; 0x1a04 <__fp_szero>
    1850:	08 95       	ret

00001852 <__fixunssfsi>:
    1852:	bd d0       	rcall	.+378    	; 0x19ce <__fp_splitA>
    1854:	88 f0       	brcs	.+34     	; 0x1878 <__fixunssfsi+0x26>
    1856:	9f 57       	subi	r25, 0x7F	; 127
    1858:	90 f0       	brcs	.+36     	; 0x187e <__fixunssfsi+0x2c>
    185a:	b9 2f       	mov	r27, r25
    185c:	99 27       	eor	r25, r25
    185e:	b7 51       	subi	r27, 0x17	; 23
    1860:	a0 f0       	brcs	.+40     	; 0x188a <__fixunssfsi+0x38>
    1862:	d1 f0       	breq	.+52     	; 0x1898 <__fixunssfsi+0x46>
    1864:	66 0f       	add	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	1a f0       	brmi	.+6      	; 0x1874 <__fixunssfsi+0x22>
    186e:	ba 95       	dec	r27
    1870:	c9 f7       	brne	.-14     	; 0x1864 <__fixunssfsi+0x12>
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <__fixunssfsi+0x46>
    1874:	b1 30       	cpi	r27, 0x01	; 1
    1876:	81 f0       	breq	.+32     	; 0x1898 <__fixunssfsi+0x46>
    1878:	c4 d0       	rcall	.+392    	; 0x1a02 <__fp_zero>
    187a:	b1 e0       	ldi	r27, 0x01	; 1
    187c:	08 95       	ret
    187e:	c1 c0       	rjmp	.+386    	; 0x1a02 <__fp_zero>
    1880:	67 2f       	mov	r22, r23
    1882:	78 2f       	mov	r23, r24
    1884:	88 27       	eor	r24, r24
    1886:	b8 5f       	subi	r27, 0xF8	; 248
    1888:	39 f0       	breq	.+14     	; 0x1898 <__fixunssfsi+0x46>
    188a:	b9 3f       	cpi	r27, 0xF9	; 249
    188c:	cc f3       	brlt	.-14     	; 0x1880 <__fixunssfsi+0x2e>
    188e:	86 95       	lsr	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b3 95       	inc	r27
    1896:	d9 f7       	brne	.-10     	; 0x188e <__fixunssfsi+0x3c>
    1898:	3e f4       	brtc	.+14     	; 0x18a8 <__fixunssfsi+0x56>
    189a:	90 95       	com	r25
    189c:	80 95       	com	r24
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	08 95       	ret

000018aa <__floatunsisf>:
    18aa:	e8 94       	clt
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <__floatsisf+0x12>

000018ae <__floatsisf>:
    18ae:	97 fb       	bst	r25, 7
    18b0:	3e f4       	brtc	.+14     	; 0x18c0 <__floatsisf+0x12>
    18b2:	90 95       	com	r25
    18b4:	80 95       	com	r24
    18b6:	70 95       	com	r23
    18b8:	61 95       	neg	r22
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8f 4f       	sbci	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	99 23       	and	r25, r25
    18c2:	a9 f0       	breq	.+42     	; 0x18ee <__floatsisf+0x40>
    18c4:	f9 2f       	mov	r31, r25
    18c6:	96 e9       	ldi	r25, 0x96	; 150
    18c8:	bb 27       	eor	r27, r27
    18ca:	93 95       	inc	r25
    18cc:	f6 95       	lsr	r31
    18ce:	87 95       	ror	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	f1 11       	cpse	r31, r1
    18d8:	f8 cf       	rjmp	.-16     	; 0x18ca <__floatsisf+0x1c>
    18da:	fa f4       	brpl	.+62     	; 0x191a <__floatsisf+0x6c>
    18dc:	bb 0f       	add	r27, r27
    18de:	11 f4       	brne	.+4      	; 0x18e4 <__floatsisf+0x36>
    18e0:	60 ff       	sbrs	r22, 0
    18e2:	1b c0       	rjmp	.+54     	; 0x191a <__floatsisf+0x6c>
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <__floatsisf+0x6c>
    18ee:	88 23       	and	r24, r24
    18f0:	11 f0       	breq	.+4      	; 0x18f6 <__floatsisf+0x48>
    18f2:	96 e9       	ldi	r25, 0x96	; 150
    18f4:	11 c0       	rjmp	.+34     	; 0x1918 <__floatsisf+0x6a>
    18f6:	77 23       	and	r23, r23
    18f8:	21 f0       	breq	.+8      	; 0x1902 <__floatsisf+0x54>
    18fa:	9e e8       	ldi	r25, 0x8E	; 142
    18fc:	87 2f       	mov	r24, r23
    18fe:	76 2f       	mov	r23, r22
    1900:	05 c0       	rjmp	.+10     	; 0x190c <__floatsisf+0x5e>
    1902:	66 23       	and	r22, r22
    1904:	71 f0       	breq	.+28     	; 0x1922 <__floatsisf+0x74>
    1906:	96 e8       	ldi	r25, 0x86	; 134
    1908:	86 2f       	mov	r24, r22
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	2a f0       	brmi	.+10     	; 0x191a <__floatsisf+0x6c>
    1910:	9a 95       	dec	r25
    1912:	66 0f       	add	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	da f7       	brpl	.-10     	; 0x1910 <__floatsisf+0x62>
    191a:	88 0f       	add	r24, r24
    191c:	96 95       	lsr	r25
    191e:	87 95       	ror	r24
    1920:	97 f9       	bld	r25, 7
    1922:	08 95       	ret

00001924 <__fp_inf>:
    1924:	97 f9       	bld	r25, 7
    1926:	9f 67       	ori	r25, 0x7F	; 127
    1928:	80 e8       	ldi	r24, 0x80	; 128
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	08 95       	ret

00001930 <__fp_nan>:
    1930:	9f ef       	ldi	r25, 0xFF	; 255
    1932:	80 ec       	ldi	r24, 0xC0	; 192
    1934:	08 95       	ret

00001936 <__fp_powser>:
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	1f 93       	push	r17
    193c:	0f 93       	push	r16
    193e:	ff 92       	push	r15
    1940:	ef 92       	push	r14
    1942:	df 92       	push	r13
    1944:	7b 01       	movw	r14, r22
    1946:	8c 01       	movw	r16, r24
    1948:	68 94       	set
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <__fp_powser+0x20>
    194c:	da 2e       	mov	r13, r26
    194e:	ef 01       	movw	r28, r30
    1950:	72 d0       	rcall	.+228    	; 0x1a36 <__mulsf3x>
    1952:	fe 01       	movw	r30, r28
    1954:	e8 94       	clt
    1956:	a5 91       	lpm	r26, Z+
    1958:	25 91       	lpm	r18, Z+
    195a:	35 91       	lpm	r19, Z+
    195c:	45 91       	lpm	r20, Z+
    195e:	55 91       	lpm	r21, Z+
    1960:	ae f3       	brts	.-22     	; 0x194c <__fp_powser+0x16>
    1962:	ef 01       	movw	r28, r30
    1964:	cf d0       	rcall	.+414    	; 0x1b04 <__addsf3x>
    1966:	fe 01       	movw	r30, r28
    1968:	97 01       	movw	r18, r14
    196a:	a8 01       	movw	r20, r16
    196c:	da 94       	dec	r13
    196e:	79 f7       	brne	.-34     	; 0x194e <__fp_powser+0x18>
    1970:	df 90       	pop	r13
    1972:	ef 90       	pop	r14
    1974:	ff 90       	pop	r15
    1976:	0f 91       	pop	r16
    1978:	1f 91       	pop	r17
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <__fp_pscA>:
    1980:	00 24       	eor	r0, r0
    1982:	0a 94       	dec	r0
    1984:	16 16       	cp	r1, r22
    1986:	17 06       	cpc	r1, r23
    1988:	18 06       	cpc	r1, r24
    198a:	09 06       	cpc	r0, r25
    198c:	08 95       	ret

0000198e <__fp_pscB>:
    198e:	00 24       	eor	r0, r0
    1990:	0a 94       	dec	r0
    1992:	12 16       	cp	r1, r18
    1994:	13 06       	cpc	r1, r19
    1996:	14 06       	cpc	r1, r20
    1998:	05 06       	cpc	r0, r21
    199a:	08 95       	ret

0000199c <__fp_round>:
    199c:	09 2e       	mov	r0, r25
    199e:	03 94       	inc	r0
    19a0:	00 0c       	add	r0, r0
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <__fp_round+0xc>
    19a4:	88 23       	and	r24, r24
    19a6:	52 f0       	brmi	.+20     	; 0x19bc <__fp_round+0x20>
    19a8:	bb 0f       	add	r27, r27
    19aa:	40 f4       	brcc	.+16     	; 0x19bc <__fp_round+0x20>
    19ac:	bf 2b       	or	r27, r31
    19ae:	11 f4       	brne	.+4      	; 0x19b4 <__fp_round+0x18>
    19b0:	60 ff       	sbrs	r22, 0
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <__fp_round+0x20>
    19b4:	6f 5f       	subi	r22, 0xFF	; 255
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	08 95       	ret

000019be <__fp_split3>:
    19be:	57 fd       	sbrc	r21, 7
    19c0:	90 58       	subi	r25, 0x80	; 128
    19c2:	44 0f       	add	r20, r20
    19c4:	55 1f       	adc	r21, r21
    19c6:	59 f0       	breq	.+22     	; 0x19de <__fp_splitA+0x10>
    19c8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <__fp_splitA+0x1a>
    19cc:	47 95       	ror	r20

000019ce <__fp_splitA>:
    19ce:	88 0f       	add	r24, r24
    19d0:	97 fb       	bst	r25, 7
    19d2:	99 1f       	adc	r25, r25
    19d4:	61 f0       	breq	.+24     	; 0x19ee <__fp_splitA+0x20>
    19d6:	9f 3f       	cpi	r25, 0xFF	; 255
    19d8:	79 f0       	breq	.+30     	; 0x19f8 <__fp_splitA+0x2a>
    19da:	87 95       	ror	r24
    19dc:	08 95       	ret
    19de:	12 16       	cp	r1, r18
    19e0:	13 06       	cpc	r1, r19
    19e2:	14 06       	cpc	r1, r20
    19e4:	55 1f       	adc	r21, r21
    19e6:	f2 cf       	rjmp	.-28     	; 0x19cc <__fp_split3+0xe>
    19e8:	46 95       	lsr	r20
    19ea:	f1 df       	rcall	.-30     	; 0x19ce <__fp_splitA>
    19ec:	08 c0       	rjmp	.+16     	; 0x19fe <__fp_splitA+0x30>
    19ee:	16 16       	cp	r1, r22
    19f0:	17 06       	cpc	r1, r23
    19f2:	18 06       	cpc	r1, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	f1 cf       	rjmp	.-30     	; 0x19da <__fp_splitA+0xc>
    19f8:	86 95       	lsr	r24
    19fa:	71 05       	cpc	r23, r1
    19fc:	61 05       	cpc	r22, r1
    19fe:	08 94       	sec
    1a00:	08 95       	ret

00001a02 <__fp_zero>:
    1a02:	e8 94       	clt

00001a04 <__fp_szero>:
    1a04:	bb 27       	eor	r27, r27
    1a06:	66 27       	eor	r22, r22
    1a08:	77 27       	eor	r23, r23
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	97 f9       	bld	r25, 7
    1a0e:	08 95       	ret

00001a10 <inverse>:
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	80 e8       	ldi	r24, 0x80	; 128
    1a1a:	9f e3       	ldi	r25, 0x3F	; 63
    1a1c:	ad ce       	rjmp	.-678    	; 0x1778 <__divsf3>

00001a1e <__mulsf3>:
    1a1e:	0b d0       	rcall	.+22     	; 0x1a36 <__mulsf3x>
    1a20:	bd cf       	rjmp	.-134    	; 0x199c <__fp_round>
    1a22:	ae df       	rcall	.-164    	; 0x1980 <__fp_pscA>
    1a24:	28 f0       	brcs	.+10     	; 0x1a30 <__mulsf3+0x12>
    1a26:	b3 df       	rcall	.-154    	; 0x198e <__fp_pscB>
    1a28:	18 f0       	brcs	.+6      	; 0x1a30 <__mulsf3+0x12>
    1a2a:	95 23       	and	r25, r21
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <__mulsf3+0x12>
    1a2e:	7a cf       	rjmp	.-268    	; 0x1924 <__fp_inf>
    1a30:	7f cf       	rjmp	.-258    	; 0x1930 <__fp_nan>
    1a32:	11 24       	eor	r1, r1
    1a34:	e7 cf       	rjmp	.-50     	; 0x1a04 <__fp_szero>

00001a36 <__mulsf3x>:
    1a36:	c3 df       	rcall	.-122    	; 0x19be <__fp_split3>
    1a38:	a0 f3       	brcs	.-24     	; 0x1a22 <__mulsf3+0x4>

00001a3a <__mulsf3_pse>:
    1a3a:	95 9f       	mul	r25, r21
    1a3c:	d1 f3       	breq	.-12     	; 0x1a32 <__mulsf3+0x14>
    1a3e:	95 0f       	add	r25, r21
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	55 1f       	adc	r21, r21
    1a44:	62 9f       	mul	r22, r18
    1a46:	f0 01       	movw	r30, r0
    1a48:	72 9f       	mul	r23, r18
    1a4a:	bb 27       	eor	r27, r27
    1a4c:	f0 0d       	add	r31, r0
    1a4e:	b1 1d       	adc	r27, r1
    1a50:	63 9f       	mul	r22, r19
    1a52:	aa 27       	eor	r26, r26
    1a54:	f0 0d       	add	r31, r0
    1a56:	b1 1d       	adc	r27, r1
    1a58:	aa 1f       	adc	r26, r26
    1a5a:	64 9f       	mul	r22, r20
    1a5c:	66 27       	eor	r22, r22
    1a5e:	b0 0d       	add	r27, r0
    1a60:	a1 1d       	adc	r26, r1
    1a62:	66 1f       	adc	r22, r22
    1a64:	82 9f       	mul	r24, r18
    1a66:	22 27       	eor	r18, r18
    1a68:	b0 0d       	add	r27, r0
    1a6a:	a1 1d       	adc	r26, r1
    1a6c:	62 1f       	adc	r22, r18
    1a6e:	73 9f       	mul	r23, r19
    1a70:	b0 0d       	add	r27, r0
    1a72:	a1 1d       	adc	r26, r1
    1a74:	62 1f       	adc	r22, r18
    1a76:	83 9f       	mul	r24, r19
    1a78:	a0 0d       	add	r26, r0
    1a7a:	61 1d       	adc	r22, r1
    1a7c:	22 1f       	adc	r18, r18
    1a7e:	74 9f       	mul	r23, r20
    1a80:	33 27       	eor	r19, r19
    1a82:	a0 0d       	add	r26, r0
    1a84:	61 1d       	adc	r22, r1
    1a86:	23 1f       	adc	r18, r19
    1a88:	84 9f       	mul	r24, r20
    1a8a:	60 0d       	add	r22, r0
    1a8c:	21 1d       	adc	r18, r1
    1a8e:	82 2f       	mov	r24, r18
    1a90:	76 2f       	mov	r23, r22
    1a92:	6a 2f       	mov	r22, r26
    1a94:	11 24       	eor	r1, r1
    1a96:	9f 57       	subi	r25, 0x7F	; 127
    1a98:	50 40       	sbci	r21, 0x00	; 0
    1a9a:	8a f0       	brmi	.+34     	; 0x1abe <__mulsf3_pse+0x84>
    1a9c:	e1 f0       	breq	.+56     	; 0x1ad6 <__mulsf3_pse+0x9c>
    1a9e:	88 23       	and	r24, r24
    1aa0:	4a f0       	brmi	.+18     	; 0x1ab4 <__mulsf3_pse+0x7a>
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	bb 1f       	adc	r27, r27
    1aa8:	66 1f       	adc	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	88 1f       	adc	r24, r24
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	50 40       	sbci	r21, 0x00	; 0
    1ab2:	a9 f7       	brne	.-22     	; 0x1a9e <__mulsf3_pse+0x64>
    1ab4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab6:	51 05       	cpc	r21, r1
    1ab8:	70 f0       	brcs	.+28     	; 0x1ad6 <__mulsf3_pse+0x9c>
    1aba:	34 cf       	rjmp	.-408    	; 0x1924 <__fp_inf>
    1abc:	a3 cf       	rjmp	.-186    	; 0x1a04 <__fp_szero>
    1abe:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac0:	ec f3       	brlt	.-6      	; 0x1abc <__mulsf3_pse+0x82>
    1ac2:	98 3e       	cpi	r25, 0xE8	; 232
    1ac4:	dc f3       	brlt	.-10     	; 0x1abc <__mulsf3_pse+0x82>
    1ac6:	86 95       	lsr	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	b7 95       	ror	r27
    1ace:	f7 95       	ror	r31
    1ad0:	e7 95       	ror	r30
    1ad2:	9f 5f       	subi	r25, 0xFF	; 255
    1ad4:	c1 f7       	brne	.-16     	; 0x1ac6 <__mulsf3_pse+0x8c>
    1ad6:	fe 2b       	or	r31, r30
    1ad8:	88 0f       	add	r24, r24
    1ada:	91 1d       	adc	r25, r1
    1adc:	96 95       	lsr	r25
    1ade:	87 95       	ror	r24
    1ae0:	97 f9       	bld	r25, 7
    1ae2:	08 95       	ret

00001ae4 <square>:
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	9a cf       	rjmp	.-204    	; 0x1a1e <__mulsf3>
    1aea:	4a df       	rcall	.-364    	; 0x1980 <__fp_pscA>
    1aec:	30 f0       	brcs	.+12     	; 0x1afa <square+0x16>
    1aee:	4f df       	rcall	.-354    	; 0x198e <__fp_pscB>
    1af0:	20 f0       	brcs	.+8      	; 0x1afa <square+0x16>
    1af2:	31 f4       	brne	.+12     	; 0x1b00 <square+0x1c>
    1af4:	9f 3f       	cpi	r25, 0xFF	; 255
    1af6:	11 f4       	brne	.+4      	; 0x1afc <square+0x18>
    1af8:	1e f4       	brtc	.+6      	; 0x1b00 <square+0x1c>
    1afa:	1a cf       	rjmp	.-460    	; 0x1930 <__fp_nan>
    1afc:	0e f4       	brtc	.+2      	; 0x1b00 <square+0x1c>
    1afe:	e0 95       	com	r30
    1b00:	e7 fb       	bst	r30, 7
    1b02:	10 cf       	rjmp	.-480    	; 0x1924 <__fp_inf>

00001b04 <__addsf3x>:
    1b04:	e9 2f       	mov	r30, r25
    1b06:	5b df       	rcall	.-330    	; 0x19be <__fp_split3>
    1b08:	80 f3       	brcs	.-32     	; 0x1aea <square+0x6>
    1b0a:	ba 17       	cp	r27, r26
    1b0c:	62 07       	cpc	r22, r18
    1b0e:	73 07       	cpc	r23, r19
    1b10:	84 07       	cpc	r24, r20
    1b12:	95 07       	cpc	r25, r21
    1b14:	18 f0       	brcs	.+6      	; 0x1b1c <__addsf3x+0x18>
    1b16:	71 f4       	brne	.+28     	; 0x1b34 <__addsf3x+0x30>
    1b18:	9e f5       	brtc	.+102    	; 0x1b80 <__addsf3x+0x7c>
    1b1a:	73 cf       	rjmp	.-282    	; 0x1a02 <__fp_zero>
    1b1c:	0e f4       	brtc	.+2      	; 0x1b20 <__addsf3x+0x1c>
    1b1e:	e0 95       	com	r30
    1b20:	0b 2e       	mov	r0, r27
    1b22:	ba 2f       	mov	r27, r26
    1b24:	a0 2d       	mov	r26, r0
    1b26:	0b 01       	movw	r0, r22
    1b28:	b9 01       	movw	r22, r18
    1b2a:	90 01       	movw	r18, r0
    1b2c:	0c 01       	movw	r0, r24
    1b2e:	ca 01       	movw	r24, r20
    1b30:	a0 01       	movw	r20, r0
    1b32:	11 24       	eor	r1, r1
    1b34:	ff 27       	eor	r31, r31
    1b36:	59 1b       	sub	r21, r25
    1b38:	99 f0       	breq	.+38     	; 0x1b60 <__addsf3x+0x5c>
    1b3a:	59 3f       	cpi	r21, 0xF9	; 249
    1b3c:	50 f4       	brcc	.+20     	; 0x1b52 <__addsf3x+0x4e>
    1b3e:	50 3e       	cpi	r21, 0xE0	; 224
    1b40:	68 f1       	brcs	.+90     	; 0x1b9c <__addsf3x+0x98>
    1b42:	1a 16       	cp	r1, r26
    1b44:	f0 40       	sbci	r31, 0x00	; 0
    1b46:	a2 2f       	mov	r26, r18
    1b48:	23 2f       	mov	r18, r19
    1b4a:	34 2f       	mov	r19, r20
    1b4c:	44 27       	eor	r20, r20
    1b4e:	58 5f       	subi	r21, 0xF8	; 248
    1b50:	f3 cf       	rjmp	.-26     	; 0x1b38 <__addsf3x+0x34>
    1b52:	46 95       	lsr	r20
    1b54:	37 95       	ror	r19
    1b56:	27 95       	ror	r18
    1b58:	a7 95       	ror	r26
    1b5a:	f0 40       	sbci	r31, 0x00	; 0
    1b5c:	53 95       	inc	r21
    1b5e:	c9 f7       	brne	.-14     	; 0x1b52 <__addsf3x+0x4e>
    1b60:	7e f4       	brtc	.+30     	; 0x1b80 <__addsf3x+0x7c>
    1b62:	1f 16       	cp	r1, r31
    1b64:	ba 0b       	sbc	r27, r26
    1b66:	62 0b       	sbc	r22, r18
    1b68:	73 0b       	sbc	r23, r19
    1b6a:	84 0b       	sbc	r24, r20
    1b6c:	ba f0       	brmi	.+46     	; 0x1b9c <__addsf3x+0x98>
    1b6e:	91 50       	subi	r25, 0x01	; 1
    1b70:	a1 f0       	breq	.+40     	; 0x1b9a <__addsf3x+0x96>
    1b72:	ff 0f       	add	r31, r31
    1b74:	bb 1f       	adc	r27, r27
    1b76:	66 1f       	adc	r22, r22
    1b78:	77 1f       	adc	r23, r23
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	c2 f7       	brpl	.-16     	; 0x1b6e <__addsf3x+0x6a>
    1b7e:	0e c0       	rjmp	.+28     	; 0x1b9c <__addsf3x+0x98>
    1b80:	ba 0f       	add	r27, r26
    1b82:	62 1f       	adc	r22, r18
    1b84:	73 1f       	adc	r23, r19
    1b86:	84 1f       	adc	r24, r20
    1b88:	48 f4       	brcc	.+18     	; 0x1b9c <__addsf3x+0x98>
    1b8a:	87 95       	ror	r24
    1b8c:	77 95       	ror	r23
    1b8e:	67 95       	ror	r22
    1b90:	b7 95       	ror	r27
    1b92:	f7 95       	ror	r31
    1b94:	9e 3f       	cpi	r25, 0xFE	; 254
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <__addsf3x+0x96>
    1b98:	b3 cf       	rjmp	.-154    	; 0x1b00 <square+0x1c>
    1b9a:	93 95       	inc	r25
    1b9c:	88 0f       	add	r24, r24
    1b9e:	08 f0       	brcs	.+2      	; 0x1ba2 <__addsf3x+0x9e>
    1ba0:	99 27       	eor	r25, r25
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	97 95       	ror	r25
    1ba6:	87 95       	ror	r24
    1ba8:	08 95       	ret

00001baa <__mulsi3>:
    1baa:	62 9f       	mul	r22, r18
    1bac:	d0 01       	movw	r26, r0
    1bae:	73 9f       	mul	r23, r19
    1bb0:	f0 01       	movw	r30, r0
    1bb2:	82 9f       	mul	r24, r18
    1bb4:	e0 0d       	add	r30, r0
    1bb6:	f1 1d       	adc	r31, r1
    1bb8:	64 9f       	mul	r22, r20
    1bba:	e0 0d       	add	r30, r0
    1bbc:	f1 1d       	adc	r31, r1
    1bbe:	92 9f       	mul	r25, r18
    1bc0:	f0 0d       	add	r31, r0
    1bc2:	83 9f       	mul	r24, r19
    1bc4:	f0 0d       	add	r31, r0
    1bc6:	74 9f       	mul	r23, r20
    1bc8:	f0 0d       	add	r31, r0
    1bca:	65 9f       	mul	r22, r21
    1bcc:	f0 0d       	add	r31, r0
    1bce:	99 27       	eor	r25, r25
    1bd0:	72 9f       	mul	r23, r18
    1bd2:	b0 0d       	add	r27, r0
    1bd4:	e1 1d       	adc	r30, r1
    1bd6:	f9 1f       	adc	r31, r25
    1bd8:	63 9f       	mul	r22, r19
    1bda:	b0 0d       	add	r27, r0
    1bdc:	e1 1d       	adc	r30, r1
    1bde:	f9 1f       	adc	r31, r25
    1be0:	bd 01       	movw	r22, r26
    1be2:	cf 01       	movw	r24, r30
    1be4:	11 24       	eor	r1, r1
    1be6:	08 95       	ret

00001be8 <__divmodhi4>:
    1be8:	97 fb       	bst	r25, 7
    1bea:	09 2e       	mov	r0, r25
    1bec:	07 26       	eor	r0, r23
    1bee:	0a d0       	rcall	.+20     	; 0x1c04 <__divmodhi4_neg1>
    1bf0:	77 fd       	sbrc	r23, 7
    1bf2:	04 d0       	rcall	.+8      	; 0x1bfc <__divmodhi4_neg2>
    1bf4:	49 d0       	rcall	.+146    	; 0x1c88 <__udivmodhi4>
    1bf6:	06 d0       	rcall	.+12     	; 0x1c04 <__divmodhi4_neg1>
    1bf8:	00 20       	and	r0, r0
    1bfa:	1a f4       	brpl	.+6      	; 0x1c02 <__divmodhi4_exit>

00001bfc <__divmodhi4_neg2>:
    1bfc:	70 95       	com	r23
    1bfe:	61 95       	neg	r22
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255

00001c02 <__divmodhi4_exit>:
    1c02:	08 95       	ret

00001c04 <__divmodhi4_neg1>:
    1c04:	f6 f7       	brtc	.-4      	; 0x1c02 <__divmodhi4_exit>
    1c06:	90 95       	com	r25
    1c08:	81 95       	neg	r24
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	08 95       	ret

00001c0e <__udivmodsi4>:
    1c0e:	a1 e2       	ldi	r26, 0x21	; 33
    1c10:	1a 2e       	mov	r1, r26
    1c12:	aa 1b       	sub	r26, r26
    1c14:	bb 1b       	sub	r27, r27
    1c16:	fd 01       	movw	r30, r26
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <__udivmodsi4_ep>

00001c1a <__udivmodsi4_loop>:
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	ee 1f       	adc	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	a2 17       	cp	r26, r18
    1c24:	b3 07       	cpc	r27, r19
    1c26:	e4 07       	cpc	r30, r20
    1c28:	f5 07       	cpc	r31, r21
    1c2a:	20 f0       	brcs	.+8      	; 0x1c34 <__udivmodsi4_ep>
    1c2c:	a2 1b       	sub	r26, r18
    1c2e:	b3 0b       	sbc	r27, r19
    1c30:	e4 0b       	sbc	r30, r20
    1c32:	f5 0b       	sbc	r31, r21

00001c34 <__udivmodsi4_ep>:
    1c34:	66 1f       	adc	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	88 1f       	adc	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	1a 94       	dec	r1
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <__udivmodsi4_loop>
    1c40:	60 95       	com	r22
    1c42:	70 95       	com	r23
    1c44:	80 95       	com	r24
    1c46:	90 95       	com	r25
    1c48:	9b 01       	movw	r18, r22
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	bd 01       	movw	r22, r26
    1c4e:	cf 01       	movw	r24, r30
    1c50:	08 95       	ret

00001c52 <__divmodsi4>:
    1c52:	97 fb       	bst	r25, 7
    1c54:	09 2e       	mov	r0, r25
    1c56:	05 26       	eor	r0, r21
    1c58:	0e d0       	rcall	.+28     	; 0x1c76 <__divmodsi4_neg1>
    1c5a:	57 fd       	sbrc	r21, 7
    1c5c:	04 d0       	rcall	.+8      	; 0x1c66 <__divmodsi4_neg2>
    1c5e:	d7 df       	rcall	.-82     	; 0x1c0e <__udivmodsi4>
    1c60:	0a d0       	rcall	.+20     	; 0x1c76 <__divmodsi4_neg1>
    1c62:	00 1c       	adc	r0, r0
    1c64:	38 f4       	brcc	.+14     	; 0x1c74 <__divmodsi4_exit>

00001c66 <__divmodsi4_neg2>:
    1c66:	50 95       	com	r21
    1c68:	40 95       	com	r20
    1c6a:	30 95       	com	r19
    1c6c:	21 95       	neg	r18
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	4f 4f       	sbci	r20, 0xFF	; 255
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255

00001c74 <__divmodsi4_exit>:
    1c74:	08 95       	ret

00001c76 <__divmodsi4_neg1>:
    1c76:	f6 f7       	brtc	.-4      	; 0x1c74 <__divmodsi4_exit>
    1c78:	90 95       	com	r25
    1c7a:	80 95       	com	r24
    1c7c:	70 95       	com	r23
    1c7e:	61 95       	neg	r22
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__udivmodhi4>:
    1c88:	aa 1b       	sub	r26, r26
    1c8a:	bb 1b       	sub	r27, r27
    1c8c:	51 e1       	ldi	r21, 0x11	; 17
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <__udivmodhi4_ep>

00001c90 <__udivmodhi4_loop>:
    1c90:	aa 1f       	adc	r26, r26
    1c92:	bb 1f       	adc	r27, r27
    1c94:	a6 17       	cp	r26, r22
    1c96:	b7 07       	cpc	r27, r23
    1c98:	10 f0       	brcs	.+4      	; 0x1c9e <__udivmodhi4_ep>
    1c9a:	a6 1b       	sub	r26, r22
    1c9c:	b7 0b       	sbc	r27, r23

00001c9e <__udivmodhi4_ep>:
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	5a 95       	dec	r21
    1ca4:	a9 f7       	brne	.-22     	; 0x1c90 <__udivmodhi4_loop>
    1ca6:	80 95       	com	r24
    1ca8:	90 95       	com	r25
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>
