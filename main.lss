
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000017c2  00001856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800122  00800122  00001878  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009f2  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002190  00000000  00000000  0000230a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087b  00000000  00000000  0000449a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019f0  00000000  00000000  00004d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000720  00000000  00000000  00006708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009be  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d8d  00000000  00000000  000077e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00008573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__vector_4>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_16>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e2 ec       	ldi	r30, 0xC2	; 194
      aa:	f7 e1       	ldi	r31, 0x17	; 23
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <.do_copy_data_start>

000000ae <.do_copy_data_loop>:
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0

000000b2 <.do_copy_data_start>:
      b2:	a2 32       	cpi	r26, 0x22	; 34
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <.do_copy_data_loop>

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a2 e2       	ldi	r26, 0x22	; 34
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	aa 38       	cpi	r26, 0x8A	; 138
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 df 0b 	jmp	0x17be	; 0x17be <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "servo.h"
#include "debug.h"
#include "i2c.h"
#include "lpf.h"

int main(void){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29

  DDRD  |= (1<<4);
      d8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
      da:	5c 98       	cbi	0x0b, 4	; 11
  
  MPU6050_Init();
      dc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MPU6050_Init>
  debug_init();
      e0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <debug_init>
  Servo_Init(50);
      e4:	62 e3       	ldi	r22, 0x32	; 50
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <Servo_Init>
  debug_tx_text_nl("Debug Started");
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <debug_tx_text_nl>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f8:	cc e2       	ldi	r28, 0x2C	; 44
      fa:	d1 e0       	ldi	r29, 0x01	; 1
	debug_tx_number_cm(I2C_Read_Roll_Angle());
	
	debug_tx_number_cm(I2C_Get_Error());
	debug_tx_number_cm(I2C_Get_ErrorAccu());*/
	
	debug_tx_number_cm(I2C_Read_Register(0x6B));
      fc:	8b e6       	ldi	r24, 0x6B	; 107
      fe:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	bc 01       	movw	r22, r24
     10a:	cd 01       	movw	r24, r26
     10c:	0e 94 f0 06 	call	0xde0	; 0xde0 <debug_tx_number_cm>
	debug_tx_number_cm(MPU6050_Read_Roll_Angle_Safely());
     110:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MPU6050_Read_Roll_Angle_Safely>
     114:	aa 27       	eor	r26, r26
     116:	97 fd       	sbrc	r25, 7
     118:	a0 95       	com	r26
     11a:	ba 2f       	mov	r27, r26
     11c:	bc 01       	movw	r22, r24
     11e:	cd 01       	movw	r24, r26
     120:	0e 94 f0 06 	call	0xde0	; 0xde0 <debug_tx_number_cm>
	
	debug_tx_nl();
     124:	0e 94 47 06 	call	0xc8e	; 0xc8e <debug_tx_nl>
     128:	88 ee       	ldi	r24, 0xE8	; 232
     12a:	93 e0       	ldi	r25, 0x03	; 3
     12c:	fe 01       	movw	r30, r28
     12e:	31 97       	sbiw	r30, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     132:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     134:	d9 f7       	brne	.-10     	; 0x12c <main+0x58>
     136:	e2 cf       	rjmp	.-60     	; 0xfc <main+0x28>

00000138 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     138:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     13c:	10 92 23 01 	sts	0x0123, r1
  I2C.Error=0x00;
     140:	10 92 24 01 	sts	0x0124, r1
  I2C.ErrorAccu=0x00;
     144:	10 92 26 01 	sts	0x0126, r1
     148:	10 92 25 01 	sts	0x0125, r1
}
     14c:	08 95       	ret

0000014e <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     14e:	80 e5       	ldi	r24, 0x50	; 80
     150:	8a 95       	dec	r24
     152:	f1 f7       	brne	.-4      	; 0x150 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
     154:	08 95       	ret

00000156 <I2C_Bit_Delay>:
     156:	80 ea       	ldi	r24, 0xA0	; 160
     158:	8a 95       	dec	r24
     15a:	f1 f7       	brne	.-4      	; 0x158 <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
     15c:	08 95       	ret

0000015e <I2C_Guard_Delay>:
     15e:	88 e0       	ldi	r24, 0x08	; 8
     160:	8a 95       	dec	r24
     162:	f1 f7       	brne	.-4      	; 0x160 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
     164:	08 95       	ret

00000166 <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	11 f4       	brne	.+4      	; 0x16e <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     16a:	3d 9a       	sbi	0x07, 5	; 7
     16c:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     16e:	3d 98       	cbi	0x07, 5	; 7
     170:	08 95       	ret

00000172 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	11 f4       	brne	.+4      	; 0x17a <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     176:	45 9a       	sbi	0x08, 5	; 8
     178:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     17a:	45 98       	cbi	0x08, 5	; 8
     17c:	08 95       	ret

0000017e <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	19 f4       	brne	.+6      	; 0x188 <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
     182:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     184:	3d 98       	cbi	0x07, 5	; 7
     186:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
     188:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     18a:	3d 9a       	sbi	0x07, 5	; 7
     18c:	08 95       	ret

0000018e <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
     18e:	86 b1       	in	r24, 0x06	; 6
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	25 e0       	ldi	r18, 0x05	; 5
     194:	96 95       	lsr	r25
     196:	87 95       	ror	r24
     198:	2a 95       	dec	r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     19c:	81 70       	andi	r24, 0x01	; 1
     19e:	08 95       	ret

000001a0 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1a4:	3c 9a       	sbi	0x07, 4	; 7
     1a6:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1a8:	3c 98       	cbi	0x07, 4	; 7
     1aa:	08 95       	ret

000001ac <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	11 f4       	brne	.+4      	; 0x1b4 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1b0:	44 9a       	sbi	0x08, 4	; 8
     1b2:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1b4:	44 98       	cbi	0x08, 4	; 8
     1b6:	08 95       	ret

000001b8 <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	19 f4       	brne	.+6      	; 0x1c2 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
     1bc:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1be:	3c 98       	cbi	0x07, 4	; 7
     1c0:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
     1c2:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
     1c4:	3c 9a       	sbi	0x07, 4	; 7
     1c6:	08 95       	ret

000001c8 <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     1c8:	86 b1       	in	r24, 0x06	; 6
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	34 e0       	ldi	r19, 0x04	; 4
     1ce:	96 95       	lsr	r25
     1d0:	87 95       	ror	r24
     1d2:	3a 95       	dec	r19
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
     1d6:	81 70       	andi	r24, 0x01	; 1
     1d8:	08 95       	ret

000001da <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
     1da:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
}
     1e2:	08 95       	ret

000001e4 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1e4:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
}
     1ec:	08 95       	ret

000001ee <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
     1ee:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
     1f0:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
}
     1fe:	08 95       	ret

00000200 <I2C_Start>:

void I2C_Start(void){
     200:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     20e:	10 e5       	ldi	r17, 0x50	; 80
     210:	81 2f       	mov	r24, r17
     212:	8a 95       	dec	r24
     214:	f1 f7       	brne	.-4      	; 0x212 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     21c:	81 2f       	mov	r24, r17
     21e:	8a 95       	dec	r24
     220:	f1 f7       	brne	.-4      	; 0x21e <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     228:	1a 95       	dec	r17
     22a:	f1 f7       	brne	.-4      	; 0x228 <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
     22c:	1f 91       	pop	r17
     22e:	08 95       	ret

00000230 <I2C_Stop>:

void I2C_Stop(void){
     230:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     23e:	10 e5       	ldi	r17, 0x50	; 80
     240:	81 2f       	mov	r24, r17
     242:	8a 95       	dec	r24
     244:	f1 f7       	brne	.-4      	; 0x242 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     24c:	81 2f       	mov	r24, r17
     24e:	8a 95       	dec	r24
     250:	f1 f7       	brne	.-4      	; 0x24e <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     258:	1a 95       	dec	r17
     25a:	f1 f7       	brne	.-4      	; 0x258 <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
     25c:	1f 91       	pop	r17
     25e:	08 95       	ret

00000260 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	08 2f       	mov	r16, r24
     26a:	10 e0       	ldi	r17, 0x00	; 0
     26c:	50 e5       	ldi	r21, 0x50	; 80
     26e:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
     270:	48 e0       	ldi	r20, 0x08	; 8
     272:	e4 2e       	mov	r14, r20
     274:	07 ff       	sbrs	r16, 7
     276:	02 c0       	rjmp	.+4      	; 0x27c <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	01 c0       	rjmp	.+2      	; 0x27e <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     282:	8f 2d       	mov	r24, r15
     284:	8a 95       	dec	r24
     286:	f1 f7       	brne	.-4      	; 0x284 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     28e:	8f 2d       	mov	r24, r15
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     29a:	8e 2d       	mov	r24, r14
     29c:	8a 95       	dec	r24
     29e:	f1 f7       	brne	.-4      	; 0x29c <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
     2a0:	1f 5f       	subi	r17, 0xFF	; 255
     2a2:	18 30       	cpi	r17, 0x08	; 8
     2a4:	11 f0       	breq	.+4      	; 0x2aa <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
     2a6:	00 0f       	add	r16, r16
     2a8:	e5 cf       	rjmp	.-54     	; 0x274 <I2C_Data_Send+0x14>
  }
}
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	ff 90       	pop	r15
     2b0:	ef 90       	pop	r14
     2b2:	08 95       	ret

000002b4 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     2c0:	10 e0       	ldi	r17, 0x00	; 0
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	60 e5       	ldi	r22, 0x50	; 80
     2c6:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
     2c8:	11 0f       	add	r17, r17
     2ca:	8f 2d       	mov	r24, r15
     2cc:	8a 95       	dec	r24
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     2d6:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
     2d8:	11 60       	ori	r17, 0x01	; 1
     2da:	8f 2d       	mov	r24, r15
     2dc:	8a 95       	dec	r24
     2de:	f1 f7       	brne	.-4      	; 0x2dc <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	08 30       	cpi	r16, 0x08	; 8
     2ea:	71 f7       	brne	.-36     	; 0x2c8 <I2C_Data_Receive+0x14>
     2ec:	80 e5       	ldi	r24, 0x50	; 80
     2ee:	8a 95       	dec	r24
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
  return data;
}
     2f8:	81 2f       	mov	r24, r17
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	08 95       	ret

00000302 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
     302:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     30a:	10 e5       	ldi	r17, 0x50	; 80
     30c:	81 2f       	mov	r24, r17
     30e:	8a 95       	dec	r24
     310:	f1 f7       	brne	.-4      	; 0x30e <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     318:	1a 95       	dec	r17
     31a:	f1 f7       	brne	.-4      	; 0x318 <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
}
     322:	1f 91       	pop	r17
     324:	08 95       	ret

00000326 <I2C_Set_Nack>:

void I2C_Set_Nack(void){
     326:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     32e:	10 e5       	ldi	r17, 0x50	; 80
     330:	81 2f       	mov	r24, r17
     332:	8a 95       	dec	r24
     334:	f1 f7       	brne	.-4      	; 0x332 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     33c:	1a 95       	dec	r17
     33e:	f1 f7       	brne	.-4      	; 0x33c <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
}
     346:	1f 91       	pop	r17
     348:	08 95       	ret

0000034a <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SDA_Set_Output>
     354:	00 e5       	ldi	r16, 0x50	; 80
     356:	80 2f       	mov	r24, r16
     358:	8a 95       	dec	r24
     35a:	f1 f7       	brne	.-4      	; 0x358 <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
     362:	16 b1       	in	r17, 0x06	; 6
     364:	0a 95       	dec	r16
     366:	f1 f7       	brne	.-4      	; 0x364 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_SCL_Set_Output>
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	8a 95       	dec	r24
     372:	f1 f7       	brne	.-4      	; 0x370 <I2C_Get_Ack+0x26>
     374:	12 95       	swap	r17
     376:	1f 70       	andi	r17, 0x0F	; 15
     378:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
     37a:	81 2f       	mov	r24, r17
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
     384:	1f 93       	push	r17
     386:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
     388:	0e 94 00 01 	call	0x200	; 0x200 <I2C_Start>
  I2C_Data_Send(address);
     38c:	81 2f       	mov	r24, r17
     38e:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  ack = I2C_Get_Ack();
     392:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     396:	18 2f       	mov	r17, r24
  I2C_Stop();
     398:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Stop>
  return ack;
}
     39c:	81 2f       	mov	r24, r17
     39e:	1f 91       	pop	r17
     3a0:	08 95       	ret

000003a2 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
     3a2:	1f 93       	push	r17
     3a4:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
     3a6:	81 2f       	mov	r24, r17
     3a8:	0e 94 c2 01 	call	0x384	; 0x384 <I2C_Send_Device_Address>
	if(sts==1){
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <I2C_Get_Device_Address+0x12>
     3b0:	81 2f       	mov	r24, r17
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
     3b4:	1f 5f       	subi	r17, 0xFF	; 255
     3b6:	1f 3f       	cpi	r17, 0xFF	; 255
     3b8:	b1 f7       	brne	.-20     	; 0x3a6 <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
     3ba:	1f 91       	pop	r17
     3bc:	08 95       	ret

000003be <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
     3ca:	0e 94 00 01 	call	0x200	; 0x200 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     3ce:	80 91 22 01 	lds	r24, 0x0122
     3d2:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     3d6:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     3da:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     3dc:	81 2f       	mov	r24, r17
     3de:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     3e2:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     3e6:	f8 2e       	mov	r15, r24
  I2C_Stop();
     3e8:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Stop>
  I2C_Start();
     3ec:	0e 94 00 01 	call	0x200	; 0x200 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
     3f0:	80 91 23 01 	lds	r24, 0x0123
     3f4:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     3f8:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     3fc:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
     3fe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_Data_Receive>
     402:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
     404:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     408:	08 2f       	mov	r16, r24
  I2C_Stop();
     40a:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Stop>
  if(sts == 0x07){
     40e:	ff 0c       	add	r15, r15
     410:	11 0f       	add	r17, r17
     412:	11 0f       	add	r17, r17
     414:	1f 29       	or	r17, r15
     416:	1e 29       	or	r17, r14
     418:	00 0f       	add	r16, r16
     41a:	00 0f       	add	r16, r16
     41c:	00 0f       	add	r16, r16
     41e:	01 2b       	or	r16, r17
     420:	07 30       	cpi	r16, 0x07	; 7
     422:	21 f4       	brne	.+8      	; 0x42c <I2C_Read_Register+0x6e>
    sts = data;
	I2C.Error=0x00;
     424:	10 92 24 01 	sts	0x0124, r1
     428:	8d 2d       	mov	r24, r13
     42a:	0d c0       	rjmp	.+26     	; 0x446 <I2C_Read_Register+0x88>
  }else{
    data=0;
	I2C.Error=0x01;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	80 93 24 01 	sts	0x0124, r24
	I2C.ErrorAccu++;
     432:	80 91 25 01 	lds	r24, 0x0125
     436:	90 91 26 01 	lds	r25, 0x0126
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	90 93 26 01 	sts	0x0126, r25
     440:	80 93 25 01 	sts	0x0125, r24
     444:	8f ef       	ldi	r24, 0xFF	; 255
    sts = 0xFF;
  }
  return sts;
}
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	df 90       	pop	r13
     450:	08 95       	ret

00000452 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	18 2f       	mov	r17, r24
     45c:	f6 2e       	mov	r15, r22
  uint8_t sts=0,data=0;
  I2C_Start();
     45e:	0e 94 00 01 	call	0x200	; 0x200 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
     462:	80 91 22 01 	lds	r24, 0x0122
     466:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
     46a:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     46e:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
     470:	81 2f       	mov	r24, r17
     472:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
     476:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     47a:	08 2f       	mov	r16, r24
  I2C_Data_Send(val);
     47c:	8f 2d       	mov	r24, r15
     47e:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
     482:	0e 94 a5 01 	call	0x34a	; 0x34a <I2C_Get_Ack>
     486:	18 2f       	mov	r17, r24
  I2C_Stop();
     488:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Stop>
  if(sts == 0x07){
     48c:	00 0f       	add	r16, r16
     48e:	11 0f       	add	r17, r17
     490:	11 0f       	add	r17, r17
     492:	10 2b       	or	r17, r16
     494:	1e 29       	or	r17, r14
     496:	17 30       	cpi	r17, 0x07	; 7
     498:	19 f4       	brne	.+6      	; 0x4a0 <I2C_Write_Register+0x4e>
    sts = data;
	I2C.Error=0x00;
     49a:	10 92 24 01 	sts	0x0124, r1
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <I2C_Write_Register+0x66>
  }else{
	I2C.Error=0x02;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	80 93 24 01 	sts	0x0124, r24
	I2C.ErrorAccu++;
     4a6:	80 91 25 01 	lds	r24, 0x0125
     4aa:	90 91 26 01 	lds	r25, 0x0126
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	90 93 26 01 	sts	0x0126, r25
     4b4:	80 93 25 01 	sts	0x0125, r24
    sts = 0xFF;
  }
}
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	08 95       	ret

000004c2 <I2C_Get_Error>:

uint8_t I2C_Get_Error(void){
  return I2C.Error;
}
     4c2:	80 91 24 01 	lds	r24, 0x0124
     4c6:	08 95       	ret

000004c8 <I2C_Get_ErrorAccu>:

uint16_t I2C_Get_ErrorAccu(void){
  return I2C.ErrorAccu;
}
     4c8:	80 91 25 01 	lds	r24, 0x0125
     4cc:	90 91 26 01 	lds	r25, 0x0126
     4d0:	08 95       	ret

000004d2 <I2C_Set_Mode_Sleep>:


//////////////////////////MPU-6050 Init///////////////////

void I2C_Set_Mode_Sleep(void){
  if( (I2C_Read_Register(0x6B) & 0x40) == 0){
     4d2:	8b e6       	ldi	r24, 0x6B	; 107
     4d4:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
     4d8:	86 fd       	sbrc	r24, 6
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <I2C_Set_Mode_Sleep+0x12>
    I2C_Write_Register(0x6B, 0x40);
     4dc:	8b e6       	ldi	r24, 0x6B	; 107
     4de:	60 e4       	ldi	r22, 0x40	; 64
     4e0:	0e 94 29 02 	call	0x452	; 0x452 <I2C_Write_Register>
     4e4:	08 95       	ret

000004e6 <I2C_Set_Mode_Active>:
  }
}

void I2C_Set_Mode_Active(void){
  if( (I2C_Read_Register(0x6B) & 0x40) != 0){
     4e6:	8b e6       	ldi	r24, 0x6B	; 107
     4e8:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
     4ec:	86 ff       	sbrs	r24, 6
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <I2C_Set_Mode_Active+0x12>
    I2C_Write_Register(0x6B, 0x00);
     4f0:	8b e6       	ldi	r24, 0x6B	; 107
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	0e 94 29 02 	call	0x452	; 0x452 <I2C_Write_Register>
     4f8:	08 95       	ret

000004fa <I2C_Read_Temp>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Temp(void){
     4fa:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
     4fc:	81 e4       	ldi	r24, 0x41	; 65
     4fe:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
     502:	18 2f       	mov	r17, r24
  data <<= 8;
  data |= I2C_Read_Register(0x42);
     504:	82 e4       	ldi	r24, 0x42	; 66
     506:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
     50a:	28 2f       	mov	r18, r24
  data /=340;
  data +=36;
  if(I2C_Get_Error()!=0){
     50c:	80 91 24 01 	lds	r24, 0x0124
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <I2C_Read_Temp+0x20>
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	0c c0       	rjmp	.+24     	; 0x532 <I2C_Read_Temp+0x38>
}

int16_t I2C_Read_Temp(void){
  int16_t data = 0;
  data = I2C_Read_Register(0x41);
  data <<= 8;
     51a:	91 2f       	mov	r25, r17
     51c:	80 e0       	ldi	r24, 0x00	; 0
  data |= I2C_Read_Register(0x42);
     51e:	30 e0       	ldi	r19, 0x00	; 0
  data /=340;
     520:	82 2b       	or	r24, r18
     522:	93 2b       	or	r25, r19
     524:	64 e5       	ldi	r22, 0x54	; 84
     526:	71 e0       	ldi	r23, 0x01	; 1
     528:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__divmodhi4>
  data +=36;
     52c:	9b 01       	movw	r18, r22
     52e:	2c 5d       	subi	r18, 0xDC	; 220
     530:	3f 4f       	sbci	r19, 0xFF	; 255
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return data;
}
     532:	c9 01       	movw	r24, r18
     534:	1f 91       	pop	r17
     536:	08 95       	ret

00000538 <I2C_Read_Gyro_Z>:
    data = LPF_Get_Filtered_Value(4, data);
  #endif
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Z(void){
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
     540:	87 e4       	ldi	r24, 0x47	; 71
     542:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  data <<= 8;
     546:	f8 2e       	mov	r15, r24
     548:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x48);
     54a:	88 e4       	ldi	r24, 0x48	; 72
     54c:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	e8 2a       	or	r14, r24
     554:	f9 2a       	or	r15, r25
     556:	00 27       	eor	r16, r16
     558:	f7 fc       	sbrc	r15, 7
     55a:	00 95       	com	r16
     55c:	10 2f       	mov	r17, r16
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	b8 01       	movw	r22, r16
     562:	a7 01       	movw	r20, r14
     564:	0e 94 71 08 	call	0x10e2	; 0x10e2 <LPF_Get_Filtered_Value>
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     56c:	80 91 24 01 	lds	r24, 0x0124
     570:	88 23       	and	r24, r24
     572:	19 f0       	breq	.+6      	; 0x57a <I2C_Read_Gyro_Z+0x42>
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	01 c0       	rjmp	.+2      	; 0x57c <I2C_Read_Gyro_Z+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x47);
  data <<= 8;
  data |= I2C_Read_Register(0x48);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(5, data);
     57a:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     57c:	cb 01       	movw	r24, r22
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	08 95       	ret

00000588 <I2C_Read_Gyro_Y>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_Y(void){
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x45);
     590:	85 e4       	ldi	r24, 0x45	; 69
     592:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  data <<= 8;
     596:	f8 2e       	mov	r15, r24
     598:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x46);
     59a:	86 e4       	ldi	r24, 0x46	; 70
     59c:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(4, data);
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	e8 2a       	or	r14, r24
     5a4:	f9 2a       	or	r15, r25
     5a6:	00 27       	eor	r16, r16
     5a8:	f7 fc       	sbrc	r15, 7
     5aa:	00 95       	com	r16
     5ac:	10 2f       	mov	r17, r16
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	b8 01       	movw	r22, r16
     5b2:	a7 01       	movw	r20, r14
     5b4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <LPF_Get_Filtered_Value>
  #endif
  return (int16_t)data;
}
     5b8:	cb 01       	movw	r24, r22
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	08 95       	ret

000005c4 <I2C_Read_Gyro_X>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Gyro_X(void){
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
     5cc:	83 e4       	ldi	r24, 0x43	; 67
     5ce:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  data <<= 8;
     5d2:	f8 2e       	mov	r15, r24
     5d4:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x44);
     5d6:	84 e4       	ldi	r24, 0x44	; 68
     5d8:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	e8 2a       	or	r14, r24
     5e0:	f9 2a       	or	r15, r25
     5e2:	00 27       	eor	r16, r16
     5e4:	f7 fc       	sbrc	r15, 7
     5e6:	00 95       	com	r16
     5e8:	10 2f       	mov	r17, r16
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	b8 01       	movw	r22, r16
     5ee:	a7 01       	movw	r20, r14
     5f0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <LPF_Get_Filtered_Value>
     5f4:	9b 01       	movw	r18, r22
     5f6:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     5f8:	80 91 24 01 	lds	r24, 0x0124
     5fc:	88 23       	and	r24, r24
     5fe:	19 f0       	breq	.+6      	; 0x606 <I2C_Read_Gyro_X+0x42>
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	01 c0       	rjmp	.+2      	; 0x608 <I2C_Read_Gyro_X+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x43);
  data <<= 8;
  data |= I2C_Read_Register(0x44);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(3, data);
     606:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     608:	cb 01       	movw	r24, r22
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <I2C_Read_Acc_Z>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Z(void){
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
     61c:	8f e3       	ldi	r24, 0x3F	; 63
     61e:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  data <<= 8;
     622:	f8 2e       	mov	r15, r24
     624:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x40);
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	e8 2a       	or	r14, r24
     630:	f9 2a       	or	r15, r25
     632:	00 27       	eor	r16, r16
     634:	f7 fc       	sbrc	r15, 7
     636:	00 95       	com	r16
     638:	10 2f       	mov	r17, r16
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	b8 01       	movw	r22, r16
     63e:	a7 01       	movw	r20, r14
     640:	0e 94 71 08 	call	0x10e2	; 0x10e2 <LPF_Get_Filtered_Value>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     648:	80 91 24 01 	lds	r24, 0x0124
     64c:	88 23       	and	r24, r24
     64e:	19 f0       	breq	.+6      	; 0x656 <I2C_Read_Acc_Z+0x42>
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	01 c0       	rjmp	.+2      	; 0x658 <I2C_Read_Acc_Z+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x3F);
  data <<= 8;
  data |= I2C_Read_Register(0x40);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(2, data);
     656:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     658:	cb 01       	movw	r24, r22
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	08 95       	ret

00000664 <I2C_Read_Acc_Y>:
    data=0;
  }
  return (int16_t)data;
}

int16_t I2C_Read_Acc_Y(void){
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
     66c:	8d e3       	ldi	r24, 0x3D	; 61
     66e:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  data <<= 8;
     672:	f8 2e       	mov	r15, r24
     674:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3E);
     676:	8e e3       	ldi	r24, 0x3E	; 62
     678:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	e8 2a       	or	r14, r24
     680:	f9 2a       	or	r15, r25
     682:	00 27       	eor	r16, r16
     684:	f7 fc       	sbrc	r15, 7
     686:	00 95       	com	r16
     688:	10 2f       	mov	r17, r16
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	b8 01       	movw	r22, r16
     68e:	a7 01       	movw	r20, r14
     690:	0e 94 71 08 	call	0x10e2	; 0x10e2 <LPF_Get_Filtered_Value>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     698:	80 91 24 01 	lds	r24, 0x0124
     69c:	88 23       	and	r24, r24
     69e:	19 f0       	breq	.+6      	; 0x6a6 <I2C_Read_Acc_Y+0x42>
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <I2C_Read_Acc_Y+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x3D);
  data <<= 8;
  data |= I2C_Read_Register(0x3E);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(1, data);
     6a6:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     6a8:	cb 01       	movw	r24, r22
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret

000006b4 <I2C_Read_Roll_Angle>:
  }else{
    return 0;
  }
}

int I2C_Read_Roll_Angle(void){
     6b4:	af 92       	push	r10
     6b6:	bf 92       	push	r11
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
  if(I2C_Get_Error()==0){
     6c4:	80 91 24 01 	lds	r24, 0x0124
     6c8:	88 23       	and	r24, r24
     6ca:	19 f0       	breq	.+6      	; 0x6d2 <I2C_Read_Roll_Angle+0x1e>
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	2e c0       	rjmp	.+92     	; 0x72e <I2C_Read_Roll_Angle+0x7a>
    float ay=I2C_Read_Acc_Y();
     6d2:	0e 94 32 03 	call	0x664	; 0x664 <I2C_Read_Acc_Y>
     6d6:	7c 01       	movw	r14, r24
    float az=I2C_Read_Acc_Z();
     6d8:	0e 94 0a 03 	call	0x614	; 0x614 <I2C_Read_Acc_Z>
     6dc:	5c 01       	movw	r10, r24
    float divy=ay/az;
    float roll = atan(divy);
     6de:	00 27       	eor	r16, r16
     6e0:	f7 fc       	sbrc	r15, 7
     6e2:	00 95       	com	r16
     6e4:	10 2f       	mov	r17, r16
     6e6:	c8 01       	movw	r24, r16
     6e8:	b7 01       	movw	r22, r14
     6ea:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatsisf>
     6ee:	7b 01       	movw	r14, r22
     6f0:	8c 01       	movw	r16, r24
     6f2:	cc 24       	eor	r12, r12
     6f4:	b7 fc       	sbrc	r11, 7
     6f6:	c0 94       	com	r12
     6f8:	dc 2c       	mov	r13, r12
     6fa:	c6 01       	movw	r24, r12
     6fc:	b5 01       	movw	r22, r10
     6fe:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatsisf>
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	c8 01       	movw	r24, r16
     708:	b7 01       	movw	r22, r14
     70a:	0e 94 43 09 	call	0x1286	; 0x1286 <__divsf3>
     70e:	0e 94 1b 09 	call	0x1236	; 0x1236 <atan>
    roll*=10.0;
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e2       	ldi	r20, 0x20	; 32
     718:	51 e4       	ldi	r21, 0x41	; 65
     71a:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
    roll*=57.3;
    return (int)roll;
     71e:	23 e3       	ldi	r18, 0x33	; 51
     720:	33 e3       	ldi	r19, 0x33	; 51
     722:	45 e6       	ldi	r20, 0x65	; 101
     724:	52 e4       	ldi	r21, 0x42	; 66
     726:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
     72a:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fixsfsi>
  }else{
    return 0;
  }
}
     72e:	cb 01       	movw	r24, r22
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	08 95       	ret

00000742 <I2C_Read_Acc_X>:
  if( (I2C_Read_Register(0x6B) & 0x40) != 0){
    I2C_Write_Register(0x6B, 0x00);
  }
}

int16_t I2C_Read_Acc_X(void){
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
     74a:	8b e3       	ldi	r24, 0x3B	; 59
     74c:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  data <<= 8;
     750:	f8 2e       	mov	r15, r24
     752:	ee 24       	eor	r14, r14
  data |= I2C_Read_Register(0x3C);
     754:	8c e3       	ldi	r24, 0x3C	; 60
     756:	0e 94 df 01 	call	0x3be	; 0x3be <I2C_Read_Register>
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	e8 2a       	or	r14, r24
     75e:	f9 2a       	or	r15, r25
     760:	00 27       	eor	r16, r16
     762:	f7 fc       	sbrc	r15, 7
     764:	00 95       	com	r16
     766:	10 2f       	mov	r17, r16
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	b8 01       	movw	r22, r16
     76c:	a7 01       	movw	r20, r14
     76e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <LPF_Get_Filtered_Value>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
  #endif
  if(I2C_Get_Error()!=0){
     776:	80 91 24 01 	lds	r24, 0x0124
     77a:	88 23       	and	r24, r24
     77c:	19 f0       	breq	.+6      	; 0x784 <I2C_Read_Acc_X+0x42>
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	01 c0       	rjmp	.+2      	; 0x786 <I2C_Read_Acc_X+0x44>
  int16_t data = 0;
  data = I2C_Read_Register(0x3B);
  data <<= 8;
  data |= I2C_Read_Register(0x3C);
  #ifdef LPF_EN
    data = LPF_Get_Filtered_Value(0, data);
     784:	b9 01       	movw	r22, r18
  #endif
  if(I2C_Get_Error()!=0){
    data=0;
  }
  return (int16_t)data;
}
     786:	cb 01       	movw	r24, r22
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	08 95       	ret

00000792 <MPU6050_Restart>:
  I2C_Read_Gyro_X();
  I2C_Read_Gyro_Y();
  I2C_Read_Gyro_Z();
}

void MPU6050_Restart(void){
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
  I2C_GPIO_Init();
     796:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_GPIO_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     79a:	00 e3       	ldi	r16, 0x30	; 48
     79c:	15 e7       	ldi	r17, 0x75	; 117
     79e:	c8 01       	movw	r24, r16
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <MPU6050_Restart+0xe>
  _delay_ms(10);
  I2C_Stop();
     7a4:	0e 94 18 01 	call	0x230	; 0x230 <I2C_Stop>
     7a8:	c8 01       	movw	r24, r16
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <MPU6050_Restart+0x18>
  _delay_ms(10);
  I2C_Set_Mode_Active();
     7ae:	0e 94 73 02 	call	0x4e6	; 0x4e6 <I2C_Set_Mode_Active>
     7b2:	c8 01       	movw	r24, r16
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <MPU6050_Restart+0x22>
  _delay_ms(10);
  I2C_Read_Acc_X();
     7b8:	0e 94 a1 03 	call	0x742	; 0x742 <I2C_Read_Acc_X>
  I2C_Read_Acc_Y();
     7bc:	0e 94 32 03 	call	0x664	; 0x664 <I2C_Read_Acc_Y>
  I2C_Read_Acc_Z();
     7c0:	0e 94 0a 03 	call	0x614	; 0x614 <I2C_Read_Acc_Z>
  I2C_Read_Gyro_X();
     7c4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_Read_Gyro_X>
  I2C_Read_Gyro_Y();
     7c8:	0e 94 c4 02 	call	0x588	; 0x588 <I2C_Read_Gyro_Y>
  I2C_Read_Gyro_Z();
     7cc:	0e 94 9c 02 	call	0x538	; 0x538 <I2C_Read_Gyro_Z>
}
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	08 95       	ret

000007d6 <MPU6050_Read_Roll_Angle_Safely>:
  pitch=I2C_Read_Pitch_Angle();
  return pitch;
}

int MPU6050_Read_Roll_Angle_Safely(void){
  int roll=I2C_Read_Roll_Angle();
     7d6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Read_Roll_Angle>
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <MPU6050_Read_Roll_Angle_Safely+0xa>
  while(I2C_Get_Error()!=0){
    MPU6050_Restart();
     7dc:	0e 94 c9 03 	call	0x792	; 0x792 <MPU6050_Restart>
  return pitch;
}

int MPU6050_Read_Roll_Angle_Safely(void){
  int roll=I2C_Read_Roll_Angle();
  while(I2C_Get_Error()!=0){
     7e0:	80 91 24 01 	lds	r24, 0x0124
     7e4:	88 23       	and	r24, r24
     7e6:	d1 f7       	brne	.-12     	; 0x7dc <MPU6050_Read_Roll_Angle_Safely+0x6>
    MPU6050_Restart();
  }
  roll=I2C_Read_Roll_Angle();
     7e8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Read_Roll_Angle>
  return roll;
}
     7ec:	08 95       	ret

000007ee <I2C_Read_Pitch_Angle>:
    data=0;
  }
  return data;
}

int I2C_Read_Pitch_Angle(void){
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
  if(I2C_Get_Error()==0){
     7fe:	80 91 24 01 	lds	r24, 0x0124
     802:	88 23       	and	r24, r24
     804:	19 f0       	breq	.+6      	; 0x80c <I2C_Read_Pitch_Angle+0x1e>
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	2e c0       	rjmp	.+92     	; 0x868 <I2C_Read_Pitch_Angle+0x7a>
    float ax=I2C_Read_Acc_X();
     80c:	0e 94 a1 03 	call	0x742	; 0x742 <I2C_Read_Acc_X>
     810:	7c 01       	movw	r14, r24
    float az=I2C_Read_Acc_Z();
     812:	0e 94 0a 03 	call	0x614	; 0x614 <I2C_Read_Acc_Z>
     816:	5c 01       	movw	r10, r24
    float divx=ax/az;
    float pitch = atan(divx);
     818:	00 27       	eor	r16, r16
     81a:	f7 fc       	sbrc	r15, 7
     81c:	00 95       	com	r16
     81e:	10 2f       	mov	r17, r16
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatsisf>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	cc 24       	eor	r12, r12
     82e:	b7 fc       	sbrc	r11, 7
     830:	c0 94       	com	r12
     832:	dc 2c       	mov	r13, r12
     834:	c6 01       	movw	r24, r12
     836:	b5 01       	movw	r22, r10
     838:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatsisf>
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	c8 01       	movw	r24, r16
     842:	b7 01       	movw	r22, r14
     844:	0e 94 43 09 	call	0x1286	; 0x1286 <__divsf3>
     848:	0e 94 1b 09 	call	0x1236	; 0x1236 <atan>
    pitch*=10.0;
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e2       	ldi	r20, 0x20	; 32
     852:	51 e4       	ldi	r21, 0x41	; 65
     854:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
    pitch*=57.3;
	return (int)pitch;
     858:	23 e3       	ldi	r18, 0x33	; 51
     85a:	33 e3       	ldi	r19, 0x33	; 51
     85c:	45 e6       	ldi	r20, 0x65	; 101
     85e:	52 e4       	ldi	r21, 0x42	; 66
     860:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
     864:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fixsfsi>
  }else{
    return 0;
  }
}
     868:	cb 01       	movw	r24, r22
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	08 95       	ret

0000087c <MPU6050_Read_Pitch_Angle_Safely>:
  I2C_Read_Gyro_Y();
  I2C_Read_Gyro_Z();
}

int MPU6050_Read_Pitch_Angle_Safely(void){
  int pitch=I2C_Read_Pitch_Angle();
     87c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <I2C_Read_Pitch_Angle>
     880:	02 c0       	rjmp	.+4      	; 0x886 <MPU6050_Read_Pitch_Angle_Safely+0xa>
  while(I2C_Get_Error()!=0){
    MPU6050_Restart();
     882:	0e 94 c9 03 	call	0x792	; 0x792 <MPU6050_Restart>
  I2C_Read_Gyro_Z();
}

int MPU6050_Read_Pitch_Angle_Safely(void){
  int pitch=I2C_Read_Pitch_Angle();
  while(I2C_Get_Error()!=0){
     886:	80 91 24 01 	lds	r24, 0x0124
     88a:	88 23       	and	r24, r24
     88c:	d1 f7       	brne	.-12     	; 0x882 <MPU6050_Read_Pitch_Angle_Safely+0x6>
    MPU6050_Restart();
  }
  pitch=I2C_Read_Pitch_Angle();
     88e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <I2C_Read_Pitch_Angle>
  return pitch;
}
     892:	08 95       	ret

00000894 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
     894:	10 92 22 01 	sts	0x0122, r1
  I2C.ReadAddr=0x00;
     898:	10 92 23 01 	sts	0x0123, r1
  I2C.Error=0x00;
     89c:	10 92 24 01 	sts	0x0124, r1
  I2C.ErrorAccu=0x00;
     8a0:	10 92 26 01 	sts	0x0126, r1
     8a4:	10 92 25 01 	sts	0x0125, r1
  return I2C.ErrorAccu;
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
     8a8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_GPIO_Init>
  I2C.WriteAddr = I2C_Get_Device_Address();
     8ac:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <I2C_Get_Device_Address>
     8b0:	80 93 22 01 	sts	0x0122, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	80 93 23 01 	sts	0x0123, r24
  #ifdef LPF_EN
	LPF_Init();
     8ba:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LPF_Init>
	LPF_Set_Alpha(0,LPF_EN);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	6a e0       	ldi	r22, 0x0A	; 10
     8c2:	0e 94 57 08 	call	0x10ae	; 0x10ae <LPF_Set_Alpha>
	LPF_Set_Alpha(1,LPF_EN);
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	6a e0       	ldi	r22, 0x0A	; 10
     8ca:	0e 94 57 08 	call	0x10ae	; 0x10ae <LPF_Set_Alpha>
	LPF_Set_Alpha(2,LPF_EN);
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	6a e0       	ldi	r22, 0x0A	; 10
     8d2:	0e 94 57 08 	call	0x10ae	; 0x10ae <LPF_Set_Alpha>
	LPF_Set_Alpha(3,LPF_EN);
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	6a e0       	ldi	r22, 0x0A	; 10
     8da:	0e 94 57 08 	call	0x10ae	; 0x10ae <LPF_Set_Alpha>
	LPF_Set_Alpha(4,LPF_EN);
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	6a e0       	ldi	r22, 0x0A	; 10
     8e2:	0e 94 57 08 	call	0x10ae	; 0x10ae <LPF_Set_Alpha>
	LPF_Set_Alpha(5,LPF_EN);
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	6a e0       	ldi	r22, 0x0A	; 10
     8ea:	0e 94 57 08 	call	0x10ae	; 0x10ae <LPF_Set_Alpha>
  #endif
}
     8ee:	08 95       	ret

000008f0 <MPU6050_Init>:
    return 0;
  }
}

void MPU6050_Init(void){
  I2C_Init();
     8f0:	0e 94 4a 04 	call	0x894	; 0x894 <I2C_Init>
  I2C_Set_Mode_Active();
     8f4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <I2C_Set_Mode_Active>
     8f8:	80 e7       	ldi	r24, 0x70	; 112
     8fa:	97 e1       	ldi	r25, 0x17	; 23
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <MPU6050_Init+0xc>
  _delay_ms(2);
  I2C_Read_Acc_X();
     900:	0e 94 a1 03 	call	0x742	; 0x742 <I2C_Read_Acc_X>
  I2C_Read_Acc_Y();
     904:	0e 94 32 03 	call	0x664	; 0x664 <I2C_Read_Acc_Y>
  I2C_Read_Acc_Z();
     908:	0e 94 0a 03 	call	0x614	; 0x614 <I2C_Read_Acc_Z>
  I2C_Read_Gyro_X();
     90c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_Read_Gyro_X>
  I2C_Read_Gyro_Y();
     910:	0e 94 c4 02 	call	0x588	; 0x588 <I2C_Read_Gyro_Y>
  I2C_Read_Gyro_Z();
     914:	0e 94 9c 02 	call	0x538	; 0x538 <I2C_Read_Gyro_Z>
}
     918:	08 95       	ret

0000091a <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     91a:	10 92 27 01 	sts	0x0127, r1
  debug.datareg=0;
     91e:	10 92 28 01 	sts	0x0128, r1
  debug.databsy=1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 29 01 	sts	0x0129, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     92c:	fc 01       	movw	r30, r24
     92e:	e9 5d       	subi	r30, 0xD9	; 217
     930:	fe 4f       	sbci	r31, 0xFE	; 254
     932:	13 82       	std	Z+3, r1	; 0x03
     934:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     936:	80 32       	cpi	r24, 0x20	; 32
     938:	91 05       	cpc	r25, r1
     93a:	c1 f7       	brne	.-16     	; 0x92c <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     93c:	10 92 4a 01 	sts	0x014A, r1
     940:	eb e4       	ldi	r30, 0x4B	; 75
     942:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     944:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	e3 35       	cpi	r30, 0x53	; 83
     94a:	f8 07       	cpc	r31, r24
     94c:	d9 f7       	brne	.-10     	; 0x944 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     94e:	10 82       	st	Z, r1
}
     950:	08 95       	ret

00000952 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     952:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     954:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     956:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     95e:	e8 e6       	ldi	r30, 0x68	; 104
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	82 60       	ori	r24, 0x02	; 2
     966:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     968:	ec e6       	ldi	r30, 0x6C	; 108
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	80 64       	ori	r24, 0x40	; 64
     970:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     972:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     974:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     976:	08 95       	ret

00000978 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     97c:	ee e6       	ldi	r30, 0x6E	; 110
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	10 82       	st	Z, r1
  TCNT0 =200;
     982:	88 ec       	ldi	r24, 0xC8	; 200
     984:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     98e:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     990:	08 95       	ret

00000992 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     992:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     996:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     998:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     99a:	08 95       	ret

0000099c <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     99c:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     99e:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     9a0:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     9a2:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     9a4:	08 95       	ret

000009a6 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     9a6:	5d 9a       	sbi	0x0b, 5	; 11
}
     9a8:	08 95       	ret

000009aa <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     9aa:	5d 98       	cbi	0x0b, 5	; 11
}
     9ac:	08 95       	ret

000009ae <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	11 f4       	brne	.+4      	; 0x9b6 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     9b2:	5d 9a       	sbi	0x0b, 5	; 11
     9b4:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     9b6:	5d 98       	cbi	0x0b, 5	; 11
     9b8:	08 95       	ret

000009ba <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     9ba:	86 b1       	in	r24, 0x06	; 6
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	26 e0       	ldi	r18, 0x06	; 6
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	2a 95       	dec	r18
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     9c8:	81 70       	andi	r24, 0x01	; 1
     9ca:	08 95       	ret

000009cc <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     9cc:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     9ce:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     9d4:	86 b5       	in	r24, 0x26	; 38
     9d6:	82 33       	cpi	r24, 0x32	; 50
     9d8:	e8 f3       	brcs	.-6      	; 0x9d4 <debug_delay+0x8>
    TCNT0=0;
     9da:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     9dc:	86 b5       	in	r24, 0x26	; 38
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	82 17       	cp	r24, r18
     9e2:	93 07       	cpc	r25, r19
     9e4:	d8 f3       	brcs	.-10     	; 0x9dc <debug_delay+0x10>
  TCCR0B=0;
     9e6:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     9e8:	08 95       	ret

000009ea <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     9ea:	80 91 1c 01 	lds	r24, 0x011C
     9ee:	90 91 1d 01 	lds	r25, 0x011D
     9f2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     9f6:	08 95       	ret

000009f8 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     9f8:	80 91 1e 01 	lds	r24, 0x011E
     9fc:	90 91 1f 01 	lds	r25, 0x011F
     a00:	0e 94 e6 04 	call	0x9cc	; 0x9cc <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     a04:	08 95       	ret

00000a06 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     a06:	80 91 20 01 	lds	r24, 0x0120
     a0a:	90 91 21 01 	lds	r25, 0x0121
     a0e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     a12:	08 95       	ret

00000a14 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	2a 97       	sbiw	r28, 0x0a	; 10
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     a32:	fe 01       	movw	r30, r28
     a34:	31 96       	adiw	r30, 0x01	; 1
     a36:	9a e0       	ldi	r25, 0x0A	; 10
     a38:	df 01       	movw	r26, r30
     a3a:	1d 92       	st	X+, r1
     a3c:	9a 95       	dec	r25
     a3e:	e9 f7       	brne	.-6      	; 0xa3a <debug_tx_byte+0x26>
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	9a 87       	std	Y+10, r25	; 0x0a
     a44:	fe 01       	movw	r30, r28
     a46:	32 96       	adiw	r30, 0x02	; 2
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     a4c:	48 2f       	mov	r20, r24
     a4e:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     a50:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     a52:	ca 01       	movw	r24, r20
     a54:	02 2e       	mov	r0, r18
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <debug_tx_byte+0x48>
     a58:	95 95       	asr	r25
     a5a:	87 95       	ror	r24
     a5c:	0a 94       	dec	r0
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <debug_tx_byte+0x44>
     a60:	80 ff       	sbrs	r24, 0
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <debug_tx_byte+0x54>
	  buf[i+1]=1;
     a64:	60 83       	st	Z, r22
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     a68:	10 82       	st	Z, r1
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     a70:	28 30       	cpi	r18, 0x08	; 8
     a72:	31 05       	cpc	r19, r1
     a74:	71 f7       	brne	.-36     	; 0xa52 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     a76:	df b6       	in	r13, 0x3f	; 63
  cli();
     a78:	f8 94       	cli
     a7a:	8e 01       	movw	r16, r28
     a7c:	0f 5f       	subi	r16, 0xFF	; 255
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     a80:	3b e0       	ldi	r19, 0x0B	; 11
     a82:	e3 2e       	mov	r14, r19
     a84:	f1 2c       	mov	r15, r1
     a86:	ec 0e       	add	r14, r28
     a88:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     a8a:	f8 01       	movw	r30, r16
     a8c:	80 81       	ld	r24, Z
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	11 f4       	brne	.+4      	; 0xa96 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     a92:	5d 9a       	sbi	0x0b, 5	; 11
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     a96:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     a98:	0e 94 f5 04 	call	0x9ea	; 0x9ea <debug_delay_index_0>
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     aa0:	0e 15       	cp	r16, r14
     aa2:	1f 05       	cpc	r17, r15
     aa4:	91 f7       	brne	.-28     	; 0xa8a <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     aa6:	df be       	out	0x3f, r13	; 63
}
     aa8:	2a 96       	adiw	r28, 0x0a	; 10
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	08 95       	ret

00000ac4 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     aca:	36 9b       	sbis	0x06, 6	; 6
     acc:	21 c0       	rjmp	.+66     	; 0xb10 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	17 c0       	rjmp	.+46     	; 0xb00 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     ad2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     ad6:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     ad8:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     ada:	17 30       	cpi	r17, 0x07	; 7
     adc:	09 f0       	breq	.+2      	; 0xae0 <debug_rx_byte+0x1c>
	    val>>=1;
     ade:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     ae0:	1f 5f       	subi	r17, 0xFF	; 255
     ae2:	18 30       	cpi	r17, 0x08	; 8
     ae4:	b1 f7       	brne	.-20     	; 0xad2 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     ae6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     aea:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     aec:	f6 fc       	sbrc	r15, 6
     aee:	07 c0       	rjmp	.+14     	; 0xafe <debug_rx_byte+0x3a>
     af0:	86 ff       	sbrs	r24, 6
     af2:	05 c0       	rjmp	.+10     	; 0xafe <debug_rx_byte+0x3a>
	  debug.datareg=val;
     af4:	00 93 28 01 	sts	0x0128, r16
	  debug.error=0x00;
     af8:	10 92 27 01 	sts	0x0127, r1
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 27 01 	sts	0x0127, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     b04:	80 91 28 01 	lds	r24, 0x0128
}
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     b10:	0e 94 03 05 	call	0xa06	; 0xa06 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     b14:	f6 b0       	in	r15, 0x06	; 6
     b16:	00 e0       	ldi	r16, 0x00	; 0
     b18:	10 e0       	ldi	r17, 0x00	; 0
     b1a:	db cf       	rjmp	.-74     	; 0xad2 <debug_rx_byte+0xe>

00000b1c <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     b1c:	80 91 28 01 	lds	r24, 0x0128
}
     b20:	08 95       	ret

00000b22 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     b22:	10 92 28 01 	sts	0x0128, r1
}
     b26:	08 95       	ret

00000b28 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     b28:	80 93 28 01 	sts	0x0128, r24
}
     b2c:	08 95       	ret

00000b2e <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     b2e:	bf 92       	push	r11
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	7b 01       	movw	r14, r22
     b42:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	e8 16       	cp	r14, r24
     b48:	f1 04       	cpc	r15, r1
     b4a:	01 05       	cpc	r16, r1
     b4c:	11 05       	cpc	r17, r1
     b4e:	09 f0       	breq	.+2      	; 0xb52 <debug_tx_hex+0x24>
     b50:	30 f4       	brcc	.+12     	; 0xb5e <debug_tx_hex+0x30>
     b52:	c8 e0       	ldi	r28, 0x08	; 8
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	c6 2e       	mov	r12, r22
     b5a:	d1 2c       	mov	r13, r1
     b5c:	14 c0       	rjmp	.+40     	; 0xb86 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	e8 16       	cp	r14, r24
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	f8 06       	cpc	r15, r24
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	08 07       	cpc	r16, r24
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	18 07       	cpc	r17, r24
     b6e:	30 f0       	brcs	.+12     	; 0xb7c <debug_tx_hex+0x4e>
     b70:	c0 e2       	ldi	r28, 0x20	; 32
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	58 e0       	ldi	r21, 0x08	; 8
     b76:	c5 2e       	mov	r12, r21
     b78:	d1 2c       	mov	r13, r1
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <debug_tx_hex+0x58>
     b7c:	c0 e1       	ldi	r28, 0x10	; 16
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	44 e0       	ldi	r20, 0x04	; 4
     b82:	c4 2e       	mov	r12, r20
     b84:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
  debug_tx_byte('x');
     b8c:	88 e7       	ldi	r24, 0x78	; 120
     b8e:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
     b92:	bb 24       	eor	r11, r11
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     b96:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     b98:	d8 01       	movw	r26, r16
     b9a:	c7 01       	movw	r24, r14
     b9c:	0c 2e       	mov	r0, r28
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <debug_tx_hex+0x7a>
     ba0:	b6 95       	lsr	r27
     ba2:	a7 95       	ror	r26
     ba4:	97 95       	ror	r25
     ba6:	87 95       	ror	r24
     ba8:	0a 94       	dec	r0
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <debug_tx_hex+0x72>
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	8f 70       	andi	r24, 0x0F	; 15
     bb0:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     bb2:	8a 30       	cpi	r24, 0x0A	; 10
     bb4:	91 05       	cpc	r25, r1
     bb6:	10 f0       	brcs	.+4      	; 0xbbc <debug_tx_hex+0x8e>
	    hex_digit+=55;
     bb8:	c7 96       	adiw	r24, 0x37	; 55
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     bbc:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     bbe:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     bc2:	b3 94       	inc	r11
     bc4:	8b 2d       	mov	r24, r11
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	8c 15       	cp	r24, r12
     bca:	9d 05       	cpc	r25, r13
     bcc:	20 f3       	brcs	.-56     	; 0xb96 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	bf 90       	pop	r11
     be0:	08 95       	ret

00000be2 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	7b 01       	movw	r14, r22
     bf8:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     bfa:	6f 3f       	cpi	r22, 0xFF	; 255
     bfc:	71 05       	cpc	r23, r1
     bfe:	81 05       	cpc	r24, r1
     c00:	91 05       	cpc	r25, r1
     c02:	09 f0       	breq	.+2      	; 0xc06 <debug_tx_bin+0x24>
     c04:	18 f4       	brcc	.+6      	; 0xc0c <debug_tx_bin+0x2a>
     c06:	f7 e0       	ldi	r31, 0x07	; 7
     c08:	df 2e       	mov	r13, r31
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     c0c:	60 30       	cpi	r22, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	73 07       	cpc	r23, r19
     c12:	31 e0       	ldi	r19, 0x01	; 1
     c14:	83 07       	cpc	r24, r19
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	93 07       	cpc	r25, r19
     c1a:	18 f0       	brcs	.+6      	; 0xc22 <debug_tx_bin+0x40>
     c1c:	ef e1       	ldi	r30, 0x1F	; 31
     c1e:	de 2e       	mov	r13, r30
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <debug_tx_bin+0x44>
     c22:	7f e0       	ldi	r23, 0x0F	; 15
     c24:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     c26:	80 e3       	ldi	r24, 0x30	; 48
     c28:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
  debug_tx_byte('b');
     c2c:	82 e6       	ldi	r24, 0x62	; 98
     c2e:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
     c32:	c0 e0       	ldi	r28, 0x00	; 0
     c34:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     c36:	cd 2c       	mov	r12, r13
     c38:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     c3a:	56 01       	movw	r10, r12
     c3c:	08 94       	sec
     c3e:	a1 1c       	adc	r10, r1
     c40:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     c42:	c6 01       	movw	r24, r12
     c44:	8c 1b       	sub	r24, r28
     c46:	9d 0b       	sbc	r25, r29
     c48:	a8 01       	movw	r20, r16
     c4a:	97 01       	movw	r18, r14
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <debug_tx_bin+0x74>
     c4e:	56 95       	lsr	r21
     c50:	47 95       	ror	r20
     c52:	37 95       	ror	r19
     c54:	27 95       	ror	r18
     c56:	8a 95       	dec	r24
     c58:	d2 f7       	brpl	.-12     	; 0xc4e <debug_tx_bin+0x6c>
     c5a:	da 01       	movw	r26, r20
     c5c:	c9 01       	movw	r24, r18
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	89 2b       	or	r24, r25
     c64:	11 f0       	breq	.+4      	; 0xc6a <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
     c66:	81 e3       	ldi	r24, 0x31	; 49
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
     c6a:	80 e3       	ldi	r24, 0x30	; 48
     c6c:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
     c70:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     c72:	ca 15       	cp	r28, r10
     c74:	db 05       	cpc	r29, r11
     c76:	29 f7       	brne	.-54     	; 0xc42 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	08 95       	ret

00000c8e <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
     c8e:	8d e0       	ldi	r24, 0x0D	; 13
     c90:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
  debug_tx_byte('\n');
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
}
     c9a:	08 95       	ret

00000c9c <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
     c9c:	80 e2       	ldi	r24, 0x20	; 32
     c9e:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
}
     ca2:	08 95       	ret

00000ca4 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
     ca4:	8c e2       	ldi	r24, 0x2C	; 44
     ca6:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
}
     caa:	08 95       	ret

00000cac <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
     cb8:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
        i++;
     cbc:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     cbe:	fe 01       	movw	r30, r28
     cc0:	e1 0f       	add	r30, r17
     cc2:	f1 1d       	adc	r31, r1
     cc4:	80 81       	ld	r24, Z
     cc6:	88 23       	and	r24, r24
     cc8:	b9 f7       	brne	.-18     	; 0xcb8 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	08 95       	ret

00000cd2 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
     cd2:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_nl();
     cd6:	0e 94 47 06 	call	0xc8e	; 0xc8e <debug_tx_nl>
}
     cda:	08 95       	ret

00000cdc <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
     cdc:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     ce0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
}
     ce4:	08 95       	ret

00000ce6 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
     ce6:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_cm();
     cea:	0e 94 52 06 	call	0xca4	; 0xca4 <debug_tx_cm>
}
     cee:	08 95       	ret

00000cf0 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	6b 01       	movw	r12, r22
     d00:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     d02:	61 15       	cp	r22, r1
     d04:	71 05       	cpc	r23, r1
     d06:	81 05       	cpc	r24, r1
     d08:	91 05       	cpc	r25, r1
     d0a:	31 f4       	brne	.+12     	; 0xd18 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
     d0c:	10 92 4b 01 	sts	0x014B, r1
    debug.input_num_digits=1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 53 01 	sts	0x0153, r24
     d16:	23 c0       	rjmp	.+70     	; 0xd5e <debug_determine_digit_numbers+0x6e>
     d18:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
     d1a:	0b 2d       	mov	r16, r11
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	09 5d       	subi	r16, 0xD9	; 217
     d20:	1e 4f       	sbci	r17, 0xFE	; 254
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	2a e0       	ldi	r18, 0x0A	; 10
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	0e 94 8e 0b 	call	0x171c	; 0x171c <__udivmodsi4>
     d32:	f8 01       	movw	r30, r16
     d34:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
     d36:	c7 01       	movw	r24, r14
     d38:	b6 01       	movw	r22, r12
     d3a:	2a e0       	ldi	r18, 0x0A	; 10
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	0e 94 8e 0b 	call	0x171c	; 0x171c <__udivmodsi4>
     d46:	c9 01       	movw	r24, r18
     d48:	da 01       	movw	r26, r20
     d4a:	6c 01       	movw	r12, r24
     d4c:	7d 01       	movw	r14, r26
      i++;
     d4e:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
     d50:	c1 14       	cp	r12, r1
     d52:	d1 04       	cpc	r13, r1
     d54:	e1 04       	cpc	r14, r1
     d56:	f1 04       	cpc	r15, r1
     d58:	01 f7       	brne	.-64     	; 0xd1a <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
     d5a:	b0 92 53 01 	sts	0x0153, r11
  }
}
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	08 95       	ret

00000d6e <debug_tx_number_digits>:

void debug_tx_number_digits(void){
     d6e:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     d70:	10 91 53 01 	lds	r17, 0x0153
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
     d76:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
     d78:	e1 2f       	mov	r30, r17
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	e9 5d       	subi	r30, 0xD9	; 217
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
     d82:	80 5d       	subi	r24, 0xD0	; 208
     d84:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
     d88:	11 23       	and	r17, r17
     d8a:	a9 f7       	brne	.-22     	; 0xd76 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
     d8c:	1f 91       	pop	r17
     d8e:	08 95       	ret

00000d90 <debug_tx_number>:

void debug_tx_number(int32_t num){
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	7b 01       	movw	r14, r22
     d9a:	8c 01       	movw	r16, r24
  if(num<0){
     d9c:	97 ff       	sbrs	r25, 7
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <debug_tx_number+0x26>
    debug_tx_byte('-');
     da0:	8d e2       	ldi	r24, 0x2D	; 45
     da2:	0e 94 0a 05 	call	0xa14	; 0xa14 <debug_tx_byte>
	num=-num;
     da6:	10 95       	com	r17
     da8:	00 95       	com	r16
     daa:	f0 94       	com	r15
     dac:	e0 94       	com	r14
     dae:	e1 1c       	adc	r14, r1
     db0:	f1 1c       	adc	r15, r1
     db2:	01 1d       	adc	r16, r1
     db4:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
     db6:	c8 01       	movw	r24, r16
     db8:	b7 01       	movw	r22, r14
     dba:	0e 94 78 06 	call	0xcf0	; 0xcf0 <debug_determine_digit_numbers>
  debug_tx_number_digits();
     dbe:	0e 94 b7 06 	call	0xd6e	; 0xd6e <debug_tx_number_digits>
}
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
     dcc:	0e 94 c8 06 	call	0xd90	; 0xd90 <debug_tx_number>
  debug_tx_nl();
     dd0:	0e 94 47 06 	call	0xc8e	; 0xc8e <debug_tx_nl>
}
     dd4:	08 95       	ret

00000dd6 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
     dd6:	0e 94 c8 06 	call	0xd90	; 0xd90 <debug_tx_number>
  debug_tx_sp();
     dda:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
}
     dde:	08 95       	ret

00000de0 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
     de0:	0e 94 c8 06 	call	0xd90	; 0xd90 <debug_tx_number>
  debug_tx_text(",");
     de4:	8e e0       	ldi	r24, 0x0E	; 14
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
}
     dec:	08 95       	ret

00000dee <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
     dee:	0e 94 97 05 	call	0xb2e	; 0xb2e <debug_tx_hex>
  debug_tx_nl();
     df2:	0e 94 47 06 	call	0xc8e	; 0xc8e <debug_tx_nl>
}
     df6:	08 95       	ret

00000df8 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
     df8:	0e 94 97 05 	call	0xb2e	; 0xb2e <debug_tx_hex>
  debug_tx_sp();
     dfc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
}
     e00:	08 95       	ret

00000e02 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
     e02:	0e 94 97 05 	call	0xb2e	; 0xb2e <debug_tx_hex>
  debug_tx_text(",");
     e06:	8e e0       	ldi	r24, 0x0E	; 14
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
}
     e0e:	08 95       	ret

00000e10 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
     e10:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <debug_tx_bin>
  debug_tx_nl();
     e14:	0e 94 47 06 	call	0xc8e	; 0xc8e <debug_tx_nl>
}
     e18:	08 95       	ret

00000e1a <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
     e1a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <debug_tx_bin>
  debug_tx_sp();
     e1e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
}
     e22:	08 95       	ret

00000e24 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
     e24:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <debug_tx_bin>
  debug_tx_text(",");
     e28:	8e e0       	ldi	r24, 0x0E	; 14
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
}
     e30:	08 95       	ret

00000e32 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	7a 01       	movw	r14, r20
     e3c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e3e:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     e42:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_nl(num);
     e46:	c8 01       	movw	r24, r16
     e48:	b7 01       	movw	r22, r14
     e4a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <debug_tx_number_nl>
}
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	08 95       	ret

00000e58 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	7a 01       	movw	r14, r20
     e62:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e64:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     e68:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_sp(num);
     e6c:	c8 01       	movw	r24, r16
     e6e:	b7 01       	movw	r22, r14
     e70:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <debug_tx_number_sp>
}
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	08 95       	ret

00000e7e <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	7a 01       	movw	r14, r20
     e88:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     e8a:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     e8e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_cm(num);
     e92:	c8 01       	movw	r24, r16
     e94:	b7 01       	movw	r22, r14
     e96:	0e 94 f0 06 	call	0xde0	; 0xde0 <debug_tx_number_cm>
}
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	08 95       	ret

00000ea4 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	7a 01       	movw	r14, r20
     eae:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     eb0:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     eb4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_hex_nl(num);
     eb8:	c8 01       	movw	r24, r16
     eba:	b7 01       	movw	r22, r14
     ebc:	0e 94 f7 06 	call	0xdee	; 0xdee <debug_tx_number_hex_nl>
}
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	08 95       	ret

00000eca <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	7a 01       	movw	r14, r20
     ed4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     ed6:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     eda:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_hex_sp(num);
     ede:	c8 01       	movw	r24, r16
     ee0:	b7 01       	movw	r22, r14
     ee2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <debug_tx_number_hex_sp>
}
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	08 95       	ret

00000ef0 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	7a 01       	movw	r14, r20
     efa:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     efc:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     f00:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_hex_cm(num);
     f04:	c8 01       	movw	r24, r16
     f06:	b7 01       	movw	r22, r14
     f08:	0e 94 01 07 	call	0xe02	; 0xe02 <debug_tx_number_hex_cm>
}
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	08 95       	ret

00000f16 <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	7a 01       	movw	r14, r20
     f20:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     f22:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     f26:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_bin_nl(num);
     f2a:	c8 01       	movw	r24, r16
     f2c:	b7 01       	movw	r22, r14
     f2e:	0e 94 08 07 	call	0xe10	; 0xe10 <debug_tx_number_bin_nl>
}
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	08 95       	ret

00000f3c <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	7a 01       	movw	r14, r20
     f46:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     f48:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     f4c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_bin_sp(num);
     f50:	c8 01       	movw	r24, r16
     f52:	b7 01       	movw	r22, r14
     f54:	0e 94 0d 07 	call	0xe1a	; 0xe1a <debug_tx_number_bin_sp>
}
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	08 95       	ret

00000f62 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	7a 01       	movw	r14, r20
     f6c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
     f6e:	0e 94 56 06 	call	0xcac	; 0xcac <debug_tx_text>
  debug_tx_sp();
     f72:	0e 94 4e 06 	call	0xc9c	; 0xc9c <debug_tx_sp>
  debug_tx_number_bin_cm(num);
     f76:	c8 01       	movw	r24, r16
     f78:	b7 01       	movw	r22, r14
     f7a:	0e 94 12 07 	call	0xe24	; 0xe24 <debug_tx_number_bin_cm>
}
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	08 95       	ret

00000f88 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
     f88:	e7 e2       	ldi	r30, 0x27	; 39
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	e8 0f       	add	r30, r24
     f8e:	f1 1d       	adc	r31, r1
     f90:	83 81       	ldd	r24, Z+3	; 0x03
}
     f92:	08 95       	ret

00000f94 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     f94:	80 91 4a 01 	lds	r24, 0x014A
}
     f98:	08 95       	ret

00000f9a <debug_flush_buf>:

void debug_flush_buf(void){
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     f9e:	fc 01       	movw	r30, r24
     fa0:	e9 5d       	subi	r30, 0xD9	; 217
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	13 82       	std	Z+3, r1	; 0x03
     fa6:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	91 05       	cpc	r25, r1
     fac:	c1 f7       	brne	.-16     	; 0xf9e <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     fae:	10 92 4a 01 	sts	0x014A, r1
}
     fb2:	08 95       	ret

00000fb4 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
     fb4:	80 91 29 01 	lds	r24, 0x0129
}
     fb8:	08 95       	ret

00000fba <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
     fba:	80 91 29 01 	lds	r24, 0x0129
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
     fbe:	88 23       	and	r24, r24
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <debug_data_available_rx_buf+0xc>
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     fc6:	80 91 4a 01 	lds	r24, 0x014A
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	88 23       	and	r24, r24
     fce:	09 f4       	brne	.+2      	; 0xfd2 <debug_data_available_rx_buf+0x18>
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
     fd6:	89 2f       	mov	r24, r25
     fd8:	08 95       	ret

00000fda <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
     fda:	80 91 4a 01 	lds	r24, 0x014A
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
     fde:	08 95       	ret

00000fe0 <debug_init>:

void debug_init(void){
  debug_struct_init();
     fe0:	0e 94 8d 04 	call	0x91a	; 0x91a <debug_struct_init>
  debug_timings_init();
     fe4:	0e 94 a9 04 	call	0x952	; 0x952 <debug_timings_init>
  debug_gpio_init();
     fe8:	0e 94 ce 04 	call	0x99c	; 0x99c <debug_gpio_init>
}
     fec:	08 95       	ret

00000fee <__vector_4>:


ISR(ISR_PCINT_VECT){
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
  debug.databsy=1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 29 01 	sts	0x0129, r24
  uint8_t val=debug_rx_byte();
    1016:	0e 94 62 05 	call	0xac4	; 0xac4 <debug_rx_byte>
    101a:	98 2f       	mov	r25, r24
  if(debug.error==0){
    101c:	80 91 27 01 	lds	r24, 0x0127
    1020:	88 23       	and	r24, r24
    1022:	99 f4       	brne	.+38     	; 0x104a <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
    1024:	e0 91 4a 01 	lds	r30, 0x014A
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	e9 5d       	subi	r30, 0xD9	; 217
    102c:	fe 4f       	sbci	r31, 0xFE	; 254
    102e:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
    1030:	80 91 4a 01 	lds	r24, 0x014A
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	80 93 4a 01 	sts	0x014A, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
    103a:	80 91 4a 01 	lds	r24, 0x014A
    103e:	81 32       	cpi	r24, 0x21	; 33
    1040:	10 f0       	brcs	.+4      	; 0x1046 <__vector_4+0x58>
	  debug.bufindex=0;
    1042:	10 92 4a 01 	sts	0x014A, r1
	}
    debug_timer_start();
    1046:	0e 94 bc 04 	call	0x978	; 0x978 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_16>:

ISR(TIMER_OVF_VECT){
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
    1076:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
    107a:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
    107c:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
    107e:	10 92 29 01 	sts	0x0129, r1
}
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <LPF_Struct_Init>:
  int32_t  Output;
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
    108c:	e4 e5       	ldi	r30, 0x54	; 84
    108e:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
    1090:	10 82       	st	Z, r1
    LPF[i].Input = 0;
    1092:	11 82       	std	Z+1, r1	; 0x01
    1094:	12 82       	std	Z+2, r1	; 0x02
    1096:	13 82       	std	Z+3, r1	; 0x03
    1098:	14 82       	std	Z+4, r1	; 0x04
	LPF[i].Output = 0;
    109a:	15 82       	std	Z+5, r1	; 0x05
    109c:	16 82       	std	Z+6, r1	; 0x06
    109e:	17 82       	std	Z+7, r1	; 0x07
    10a0:	10 86       	std	Z+8, r1	; 0x08
    10a2:	39 96       	adiw	r30, 0x09	; 9
}lpf_t;

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	ea 38       	cpi	r30, 0x8A	; 138
    10a8:	f8 07       	cpc	r31, r24
    10aa:	91 f7       	brne	.-28     	; 0x1090 <LPF_Struct_Init+0x4>
    LPF[i].Alpha = 0;
    LPF[i].Input = 0;
	LPF[i].Output = 0;
  }
}
    10ac:	08 95       	ret

000010ae <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	fc 01       	movw	r30, r24
    10b2:	23 e0       	ldi	r18, 0x03	; 3
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	2a 95       	dec	r18
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <LPF_Set_Alpha+0x6>
    10bc:	e8 0f       	add	r30, r24
    10be:	f9 1f       	adc	r31, r25
    10c0:	ec 5a       	subi	r30, 0xAC	; 172
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	60 83       	st	Z, r22
}
    10c6:	08 95       	ret

000010c8 <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	fc 01       	movw	r30, r24
    10cc:	33 e0       	ldi	r19, 0x03	; 3
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	3a 95       	dec	r19
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <LPF_Get_Alpha+0x6>
    10d6:	e8 0f       	add	r30, r24
    10d8:	f9 1f       	adc	r31, r25
    10da:	ec 5a       	subi	r30, 0xAC	; 172
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
    10de:	80 81       	ld	r24, Z
    10e0:	08 95       	ret

000010e2 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
    10e2:	2f 92       	push	r2
    10e4:	3f 92       	push	r3
    10e6:	4f 92       	push	r4
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	1a 01       	movw	r2, r20
    1104:	2b 01       	movw	r4, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	6c 01       	movw	r12, r24
    110a:	53 e0       	ldi	r21, 0x03	; 3
    110c:	cc 0c       	add	r12, r12
    110e:	dd 1c       	adc	r13, r13
    1110:	5a 95       	dec	r21
    1112:	e1 f7       	brne	.-8      	; 0x110c <LPF_Get_Filtered_Value+0x2a>
    1114:	c8 0e       	add	r12, r24
    1116:	d9 1e       	adc	r13, r25
    1118:	84 e5       	ldi	r24, 0x54	; 84
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	c8 0e       	add	r12, r24
    111e:	d9 1e       	adc	r13, r25
    1120:	f6 01       	movw	r30, r12
    1122:	20 81       	ld	r18, Z
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
    1124:	62 2e       	mov	r6, r18
    1126:	77 24       	eor	r7, r7
    1128:	88 24       	eor	r8, r8
    112a:	99 24       	eor	r9, r9
  tmp1*=val;
  int32_t tmp2=(100 - LPF_Get_Alpha(lpf_index));
    112c:	64 e6       	ldi	r22, 0x64	; 100
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	62 1b       	sub	r22, r18
    1132:	71 09       	sbc	r23, r1
    1134:	88 27       	eor	r24, r24
    1136:	77 fd       	sbrc	r23, 7
    1138:	80 95       	com	r24
    113a:	98 2f       	mov	r25, r24
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output  = tmp1 + tmp2;
  LPF[lpf_index].Output /= 100;
    113c:	45 e0       	ldi	r20, 0x05	; 5
    113e:	a4 2e       	mov	r10, r20
    1140:	b1 2c       	mov	r11, r1
    1142:	ac 0c       	add	r10, r12
    1144:	bd 1c       	adc	r11, r13
    1146:	25 81       	ldd	r18, Z+5	; 0x05
    1148:	36 81       	ldd	r19, Z+6	; 0x06
    114a:	47 81       	ldd	r20, Z+7	; 0x07
    114c:	50 85       	ldd	r21, Z+8	; 0x08
    114e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsi3>
    1152:	7b 01       	movw	r14, r22
    1154:	8c 01       	movw	r16, r24
    1156:	c2 01       	movw	r24, r4
    1158:	b1 01       	movw	r22, r2
    115a:	a4 01       	movw	r20, r8
    115c:	93 01       	movw	r18, r6
    115e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsi3>
    1162:	e6 0e       	add	r14, r22
    1164:	f7 1e       	adc	r15, r23
    1166:	08 1f       	adc	r16, r24
    1168:	19 1f       	adc	r17, r25
    116a:	c8 01       	movw	r24, r16
    116c:	b7 01       	movw	r22, r14
    116e:	24 e6       	ldi	r18, 0x64	; 100
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__divmodsi4>
    117a:	ca 01       	movw	r24, r20
    117c:	f6 01       	movw	r30, r12
    117e:	25 83       	std	Z+5, r18	; 0x05
    1180:	f5 01       	movw	r30, r10
    1182:	31 83       	std	Z+1, r19	; 0x01
    1184:	42 83       	std	Z+2, r20	; 0x02
    1186:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
    1188:	b9 01       	movw	r22, r18
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	9f 90       	pop	r9
    119c:	8f 90       	pop	r8
    119e:	7f 90       	pop	r7
    11a0:	6f 90       	pop	r6
    11a2:	5f 90       	pop	r5
    11a4:	4f 90       	pop	r4
    11a6:	3f 90       	pop	r3
    11a8:	2f 90       	pop	r2
    11aa:	08 95       	ret

000011ac <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
    11ac:	0e 94 46 08 	call	0x108c	; 0x108c <LPF_Struct_Init>
    11b0:	08 95       	ret

000011b2 <Servo_Set_Angle>:
}

void Servo_Set_Angle(uint16_t angle){
  uint32_t temp0 = angle;
  uint32_t temp1 = 150000;
  temp1 += (temp0*833);
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	21 e4       	ldi	r18, 0x41	; 65
    11bc:	33 e0       	ldi	r19, 0x03	; 3
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsi3>
    11c6:	60 51       	subi	r22, 0x10	; 16
    11c8:	76 4b       	sbci	r23, 0xB6	; 182
    11ca:	8d 4f       	sbci	r24, 0xFD	; 253
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
  temp1 /= 100;
  OCR1A = (uint16_t)temp1;
    11ce:	24 e6       	ldi	r18, 0x64	; 100
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	0e 94 8e 0b 	call	0x171c	; 0x171c <__udivmodsi4>
    11da:	30 93 89 00 	sts	0x0089, r19
    11de:	20 93 88 00 	sts	0x0088, r18
    11e2:	08 95       	ret

000011e4 <Servo_Init>:

#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void Servo_Init(uint32_t frequency){
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
  uint32_t temp=F_CPU;
  temp/=8;
  temp/=frequency;
  DDRB  |= (1<<1);
    11e8:	21 9a       	sbi	0x04, 1	; 4
  ICR1   = (uint16_t)temp-1;
    11ea:	60 e6       	ldi	r22, 0x60	; 96
    11ec:	73 ee       	ldi	r23, 0xE3	; 227
    11ee:	86 e1       	ldi	r24, 0x16	; 22
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 8e 0b 	call	0x171c	; 0x171c <__udivmodsi4>
    11f6:	21 50       	subi	r18, 0x01	; 1
    11f8:	30 40       	sbci	r19, 0x00	; 0
    11fa:	30 93 87 00 	sts	0x0087, r19
    11fe:	20 93 86 00 	sts	0x0086, r18
  OCR1A  = 1500;
    1202:	8c ed       	ldi	r24, 0xDC	; 220
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	90 93 89 00 	sts	0x0089, r25
    120a:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1<<WGM11)|(1<<COM1A1);
    120e:	82 e8       	ldi	r24, 0x82	; 130
    1210:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1214:	8a e1       	ldi	r24, 0x1A	; 26
    1216:	80 93 81 00 	sts	0x0081, r24
  Servo_Set_Angle(0);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Servo_Set_Angle>
    1222:	88 ee       	ldi	r24, 0xE8	; 232
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	2c e2       	ldi	r18, 0x2C	; 44
    1228:	31 e0       	ldi	r19, 0x01	; 1
    122a:	f9 01       	movw	r30, r18
    122c:	31 97       	sbiw	r30, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <Servo_Init+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1230:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1232:	d9 f7       	brne	.-10     	; 0x122a <Servo_Init+0x46>
  _delay_ms(100);
}
    1234:	08 95       	ret

00001236 <atan>:
    1236:	df 93       	push	r29
    1238:	dd 27       	eor	r29, r29
    123a:	b9 2f       	mov	r27, r25
    123c:	bf 77       	andi	r27, 0x7F	; 127
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	16 16       	cp	r1, r22
    1244:	17 06       	cpc	r1, r23
    1246:	48 07       	cpc	r20, r24
    1248:	5b 07       	cpc	r21, r27
    124a:	10 f4       	brcc	.+4      	; 0x1250 <atan+0x1a>
    124c:	d9 2f       	mov	r29, r25
    124e:	67 d1       	rcall	.+718    	; 0x151e <inverse>
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	7f 93       	push	r23
    1256:	6f 93       	push	r22
    1258:	cc d1       	rcall	.+920    	; 0x15f2 <square>
    125a:	e8 e6       	ldi	r30, 0x68	; 104
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	f2 d0       	rcall	.+484    	; 0x1444 <__fp_powser>
    1260:	24 d1       	rcall	.+584    	; 0x14aa <__fp_round>
    1262:	2f 91       	pop	r18
    1264:	3f 91       	pop	r19
    1266:	4f 91       	pop	r20
    1268:	5f 91       	pop	r21
    126a:	6c d1       	rcall	.+728    	; 0x1544 <__mulsf3x>
    126c:	dd 23       	and	r29, r29
    126e:	49 f0       	breq	.+18     	; 0x1282 <atan+0x4c>
    1270:	90 58       	subi	r25, 0x80	; 128
    1272:	a2 ea       	ldi	r26, 0xA2	; 162
    1274:	2a ed       	ldi	r18, 0xDA	; 218
    1276:	3f e0       	ldi	r19, 0x0F	; 15
    1278:	49 ec       	ldi	r20, 0xC9	; 201
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	d0 78       	andi	r29, 0x80	; 128
    127e:	5d 27       	eor	r21, r29
    1280:	c8 d1       	rcall	.+912    	; 0x1612 <__addsf3x>
    1282:	df 91       	pop	r29
    1284:	12 c1       	rjmp	.+548    	; 0x14aa <__fp_round>

00001286 <__divsf3>:
    1286:	0c d0       	rcall	.+24     	; 0x12a0 <__divsf3x>
    1288:	10 c1       	rjmp	.+544    	; 0x14aa <__fp_round>
    128a:	08 d1       	rcall	.+528    	; 0x149c <__fp_pscB>
    128c:	40 f0       	brcs	.+16     	; 0x129e <__divsf3+0x18>
    128e:	ff d0       	rcall	.+510    	; 0x148e <__fp_pscA>
    1290:	30 f0       	brcs	.+12     	; 0x129e <__divsf3+0x18>
    1292:	21 f4       	brne	.+8      	; 0x129c <__divsf3+0x16>
    1294:	5f 3f       	cpi	r21, 0xFF	; 255
    1296:	19 f0       	breq	.+6      	; 0x129e <__divsf3+0x18>
    1298:	cc c0       	rjmp	.+408    	; 0x1432 <__fp_inf>
    129a:	51 11       	cpse	r21, r1
    129c:	3a c1       	rjmp	.+628    	; 0x1512 <__fp_szero>
    129e:	cf c0       	rjmp	.+414    	; 0x143e <__fp_nan>

000012a0 <__divsf3x>:
    12a0:	15 d1       	rcall	.+554    	; 0x14cc <__fp_split3>
    12a2:	98 f3       	brcs	.-26     	; 0x128a <__divsf3+0x4>

000012a4 <__divsf3_pse>:
    12a4:	99 23       	and	r25, r25
    12a6:	c9 f3       	breq	.-14     	; 0x129a <__divsf3+0x14>
    12a8:	55 23       	and	r21, r21
    12aa:	b1 f3       	breq	.-20     	; 0x1298 <__divsf3+0x12>
    12ac:	95 1b       	sub	r25, r21
    12ae:	55 0b       	sbc	r21, r21
    12b0:	bb 27       	eor	r27, r27
    12b2:	aa 27       	eor	r26, r26
    12b4:	62 17       	cp	r22, r18
    12b6:	73 07       	cpc	r23, r19
    12b8:	84 07       	cpc	r24, r20
    12ba:	38 f0       	brcs	.+14     	; 0x12ca <__divsf3_pse+0x26>
    12bc:	9f 5f       	subi	r25, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	44 1f       	adc	r20, r20
    12c6:	aa 1f       	adc	r26, r26
    12c8:	a9 f3       	breq	.-22     	; 0x12b4 <__divsf3_pse+0x10>
    12ca:	33 d0       	rcall	.+102    	; 0x1332 <__divsf3_pse+0x8e>
    12cc:	0e 2e       	mov	r0, r30
    12ce:	3a f0       	brmi	.+14     	; 0x12de <__divsf3_pse+0x3a>
    12d0:	e0 e8       	ldi	r30, 0x80	; 128
    12d2:	30 d0       	rcall	.+96     	; 0x1334 <__divsf3_pse+0x90>
    12d4:	91 50       	subi	r25, 0x01	; 1
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	e6 95       	lsr	r30
    12da:	00 1c       	adc	r0, r0
    12dc:	ca f7       	brpl	.-14     	; 0x12d0 <__divsf3_pse+0x2c>
    12de:	29 d0       	rcall	.+82     	; 0x1332 <__divsf3_pse+0x8e>
    12e0:	fe 2f       	mov	r31, r30
    12e2:	27 d0       	rcall	.+78     	; 0x1332 <__divsf3_pse+0x8e>
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	bb 1f       	adc	r27, r27
    12ec:	26 17       	cp	r18, r22
    12ee:	37 07       	cpc	r19, r23
    12f0:	48 07       	cpc	r20, r24
    12f2:	ab 07       	cpc	r26, r27
    12f4:	b0 e8       	ldi	r27, 0x80	; 128
    12f6:	09 f0       	breq	.+2      	; 0x12fa <__divsf3_pse+0x56>
    12f8:	bb 0b       	sbc	r27, r27
    12fa:	80 2d       	mov	r24, r0
    12fc:	bf 01       	movw	r22, r30
    12fe:	ff 27       	eor	r31, r31
    1300:	93 58       	subi	r25, 0x83	; 131
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	2a f0       	brmi	.+10     	; 0x1310 <__divsf3_pse+0x6c>
    1306:	9e 3f       	cpi	r25, 0xFE	; 254
    1308:	51 05       	cpc	r21, r1
    130a:	68 f0       	brcs	.+26     	; 0x1326 <__divsf3_pse+0x82>
    130c:	92 c0       	rjmp	.+292    	; 0x1432 <__fp_inf>
    130e:	01 c1       	rjmp	.+514    	; 0x1512 <__fp_szero>
    1310:	5f 3f       	cpi	r21, 0xFF	; 255
    1312:	ec f3       	brlt	.-6      	; 0x130e <__divsf3_pse+0x6a>
    1314:	98 3e       	cpi	r25, 0xE8	; 232
    1316:	dc f3       	brlt	.-10     	; 0x130e <__divsf3_pse+0x6a>
    1318:	86 95       	lsr	r24
    131a:	77 95       	ror	r23
    131c:	67 95       	ror	r22
    131e:	b7 95       	ror	r27
    1320:	f7 95       	ror	r31
    1322:	9f 5f       	subi	r25, 0xFF	; 255
    1324:	c9 f7       	brne	.-14     	; 0x1318 <__divsf3_pse+0x74>
    1326:	88 0f       	add	r24, r24
    1328:	91 1d       	adc	r25, r1
    132a:	96 95       	lsr	r25
    132c:	87 95       	ror	r24
    132e:	97 f9       	bld	r25, 7
    1330:	08 95       	ret
    1332:	e1 e0       	ldi	r30, 0x01	; 1
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	bb 1f       	adc	r27, r27
    133c:	62 17       	cp	r22, r18
    133e:	73 07       	cpc	r23, r19
    1340:	84 07       	cpc	r24, r20
    1342:	ba 07       	cpc	r27, r26
    1344:	20 f0       	brcs	.+8      	; 0x134e <__divsf3_pse+0xaa>
    1346:	62 1b       	sub	r22, r18
    1348:	73 0b       	sbc	r23, r19
    134a:	84 0b       	sbc	r24, r20
    134c:	ba 0b       	sbc	r27, r26
    134e:	ee 1f       	adc	r30, r30
    1350:	88 f7       	brcc	.-30     	; 0x1334 <__divsf3_pse+0x90>
    1352:	e0 95       	com	r30
    1354:	08 95       	ret

00001356 <__fixsfsi>:
    1356:	04 d0       	rcall	.+8      	; 0x1360 <__fixunssfsi>
    1358:	68 94       	set
    135a:	b1 11       	cpse	r27, r1
    135c:	da c0       	rjmp	.+436    	; 0x1512 <__fp_szero>
    135e:	08 95       	ret

00001360 <__fixunssfsi>:
    1360:	bd d0       	rcall	.+378    	; 0x14dc <__fp_splitA>
    1362:	88 f0       	brcs	.+34     	; 0x1386 <__fixunssfsi+0x26>
    1364:	9f 57       	subi	r25, 0x7F	; 127
    1366:	90 f0       	brcs	.+36     	; 0x138c <__fixunssfsi+0x2c>
    1368:	b9 2f       	mov	r27, r25
    136a:	99 27       	eor	r25, r25
    136c:	b7 51       	subi	r27, 0x17	; 23
    136e:	a0 f0       	brcs	.+40     	; 0x1398 <__fixunssfsi+0x38>
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <__fixunssfsi+0x46>
    1372:	66 0f       	add	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	1a f0       	brmi	.+6      	; 0x1382 <__fixunssfsi+0x22>
    137c:	ba 95       	dec	r27
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__fixunssfsi+0x12>
    1380:	12 c0       	rjmp	.+36     	; 0x13a6 <__fixunssfsi+0x46>
    1382:	b1 30       	cpi	r27, 0x01	; 1
    1384:	81 f0       	breq	.+32     	; 0x13a6 <__fixunssfsi+0x46>
    1386:	c4 d0       	rcall	.+392    	; 0x1510 <__fp_zero>
    1388:	b1 e0       	ldi	r27, 0x01	; 1
    138a:	08 95       	ret
    138c:	c1 c0       	rjmp	.+386    	; 0x1510 <__fp_zero>
    138e:	67 2f       	mov	r22, r23
    1390:	78 2f       	mov	r23, r24
    1392:	88 27       	eor	r24, r24
    1394:	b8 5f       	subi	r27, 0xF8	; 248
    1396:	39 f0       	breq	.+14     	; 0x13a6 <__fixunssfsi+0x46>
    1398:	b9 3f       	cpi	r27, 0xF9	; 249
    139a:	cc f3       	brlt	.-14     	; 0x138e <__fixunssfsi+0x2e>
    139c:	86 95       	lsr	r24
    139e:	77 95       	ror	r23
    13a0:	67 95       	ror	r22
    13a2:	b3 95       	inc	r27
    13a4:	d9 f7       	brne	.-10     	; 0x139c <__fixunssfsi+0x3c>
    13a6:	3e f4       	brtc	.+14     	; 0x13b6 <__fixunssfsi+0x56>
    13a8:	90 95       	com	r25
    13aa:	80 95       	com	r24
    13ac:	70 95       	com	r23
    13ae:	61 95       	neg	r22
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	8f 4f       	sbci	r24, 0xFF	; 255
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	08 95       	ret

000013b8 <__floatunsisf>:
    13b8:	e8 94       	clt
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <__floatsisf+0x12>

000013bc <__floatsisf>:
    13bc:	97 fb       	bst	r25, 7
    13be:	3e f4       	brtc	.+14     	; 0x13ce <__floatsisf+0x12>
    13c0:	90 95       	com	r25
    13c2:	80 95       	com	r24
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	99 23       	and	r25, r25
    13d0:	a9 f0       	breq	.+42     	; 0x13fc <__floatsisf+0x40>
    13d2:	f9 2f       	mov	r31, r25
    13d4:	96 e9       	ldi	r25, 0x96	; 150
    13d6:	bb 27       	eor	r27, r27
    13d8:	93 95       	inc	r25
    13da:	f6 95       	lsr	r31
    13dc:	87 95       	ror	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	b7 95       	ror	r27
    13e4:	f1 11       	cpse	r31, r1
    13e6:	f8 cf       	rjmp	.-16     	; 0x13d8 <__floatsisf+0x1c>
    13e8:	fa f4       	brpl	.+62     	; 0x1428 <__floatsisf+0x6c>
    13ea:	bb 0f       	add	r27, r27
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__floatsisf+0x36>
    13ee:	60 ff       	sbrs	r22, 0
    13f0:	1b c0       	rjmp	.+54     	; 0x1428 <__floatsisf+0x6c>
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	8f 4f       	sbci	r24, 0xFF	; 255
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <__floatsisf+0x6c>
    13fc:	88 23       	and	r24, r24
    13fe:	11 f0       	breq	.+4      	; 0x1404 <__floatsisf+0x48>
    1400:	96 e9       	ldi	r25, 0x96	; 150
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <__floatsisf+0x6a>
    1404:	77 23       	and	r23, r23
    1406:	21 f0       	breq	.+8      	; 0x1410 <__floatsisf+0x54>
    1408:	9e e8       	ldi	r25, 0x8E	; 142
    140a:	87 2f       	mov	r24, r23
    140c:	76 2f       	mov	r23, r22
    140e:	05 c0       	rjmp	.+10     	; 0x141a <__floatsisf+0x5e>
    1410:	66 23       	and	r22, r22
    1412:	71 f0       	breq	.+28     	; 0x1430 <__floatsisf+0x74>
    1414:	96 e8       	ldi	r25, 0x86	; 134
    1416:	86 2f       	mov	r24, r22
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	2a f0       	brmi	.+10     	; 0x1428 <__floatsisf+0x6c>
    141e:	9a 95       	dec	r25
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	da f7       	brpl	.-10     	; 0x141e <__floatsisf+0x62>
    1428:	88 0f       	add	r24, r24
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <__fp_inf>:
    1432:	97 f9       	bld	r25, 7
    1434:	9f 67       	ori	r25, 0x7F	; 127
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	08 95       	ret

0000143e <__fp_nan>:
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	08 95       	ret

00001444 <__fp_powser>:
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	1f 93       	push	r17
    144a:	0f 93       	push	r16
    144c:	ff 92       	push	r15
    144e:	ef 92       	push	r14
    1450:	df 92       	push	r13
    1452:	7b 01       	movw	r14, r22
    1454:	8c 01       	movw	r16, r24
    1456:	68 94       	set
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <__fp_powser+0x20>
    145a:	da 2e       	mov	r13, r26
    145c:	ef 01       	movw	r28, r30
    145e:	72 d0       	rcall	.+228    	; 0x1544 <__mulsf3x>
    1460:	fe 01       	movw	r30, r28
    1462:	e8 94       	clt
    1464:	a5 91       	lpm	r26, Z+
    1466:	25 91       	lpm	r18, Z+
    1468:	35 91       	lpm	r19, Z+
    146a:	45 91       	lpm	r20, Z+
    146c:	55 91       	lpm	r21, Z+
    146e:	ae f3       	brts	.-22     	; 0x145a <__fp_powser+0x16>
    1470:	ef 01       	movw	r28, r30
    1472:	cf d0       	rcall	.+414    	; 0x1612 <__addsf3x>
    1474:	fe 01       	movw	r30, r28
    1476:	97 01       	movw	r18, r14
    1478:	a8 01       	movw	r20, r16
    147a:	da 94       	dec	r13
    147c:	79 f7       	brne	.-34     	; 0x145c <__fp_powser+0x18>
    147e:	df 90       	pop	r13
    1480:	ef 90       	pop	r14
    1482:	ff 90       	pop	r15
    1484:	0f 91       	pop	r16
    1486:	1f 91       	pop	r17
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <__fp_pscA>:
    148e:	00 24       	eor	r0, r0
    1490:	0a 94       	dec	r0
    1492:	16 16       	cp	r1, r22
    1494:	17 06       	cpc	r1, r23
    1496:	18 06       	cpc	r1, r24
    1498:	09 06       	cpc	r0, r25
    149a:	08 95       	ret

0000149c <__fp_pscB>:
    149c:	00 24       	eor	r0, r0
    149e:	0a 94       	dec	r0
    14a0:	12 16       	cp	r1, r18
    14a2:	13 06       	cpc	r1, r19
    14a4:	14 06       	cpc	r1, r20
    14a6:	05 06       	cpc	r0, r21
    14a8:	08 95       	ret

000014aa <__fp_round>:
    14aa:	09 2e       	mov	r0, r25
    14ac:	03 94       	inc	r0
    14ae:	00 0c       	add	r0, r0
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <__fp_round+0xc>
    14b2:	88 23       	and	r24, r24
    14b4:	52 f0       	brmi	.+20     	; 0x14ca <__fp_round+0x20>
    14b6:	bb 0f       	add	r27, r27
    14b8:	40 f4       	brcc	.+16     	; 0x14ca <__fp_round+0x20>
    14ba:	bf 2b       	or	r27, r31
    14bc:	11 f4       	brne	.+4      	; 0x14c2 <__fp_round+0x18>
    14be:	60 ff       	sbrs	r22, 0
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <__fp_round+0x20>
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	08 95       	ret

000014cc <__fp_split3>:
    14cc:	57 fd       	sbrc	r21, 7
    14ce:	90 58       	subi	r25, 0x80	; 128
    14d0:	44 0f       	add	r20, r20
    14d2:	55 1f       	adc	r21, r21
    14d4:	59 f0       	breq	.+22     	; 0x14ec <__fp_splitA+0x10>
    14d6:	5f 3f       	cpi	r21, 0xFF	; 255
    14d8:	71 f0       	breq	.+28     	; 0x14f6 <__fp_splitA+0x1a>
    14da:	47 95       	ror	r20

000014dc <__fp_splitA>:
    14dc:	88 0f       	add	r24, r24
    14de:	97 fb       	bst	r25, 7
    14e0:	99 1f       	adc	r25, r25
    14e2:	61 f0       	breq	.+24     	; 0x14fc <__fp_splitA+0x20>
    14e4:	9f 3f       	cpi	r25, 0xFF	; 255
    14e6:	79 f0       	breq	.+30     	; 0x1506 <__fp_splitA+0x2a>
    14e8:	87 95       	ror	r24
    14ea:	08 95       	ret
    14ec:	12 16       	cp	r1, r18
    14ee:	13 06       	cpc	r1, r19
    14f0:	14 06       	cpc	r1, r20
    14f2:	55 1f       	adc	r21, r21
    14f4:	f2 cf       	rjmp	.-28     	; 0x14da <__fp_split3+0xe>
    14f6:	46 95       	lsr	r20
    14f8:	f1 df       	rcall	.-30     	; 0x14dc <__fp_splitA>
    14fa:	08 c0       	rjmp	.+16     	; 0x150c <__fp_splitA+0x30>
    14fc:	16 16       	cp	r1, r22
    14fe:	17 06       	cpc	r1, r23
    1500:	18 06       	cpc	r1, r24
    1502:	99 1f       	adc	r25, r25
    1504:	f1 cf       	rjmp	.-30     	; 0x14e8 <__fp_splitA+0xc>
    1506:	86 95       	lsr	r24
    1508:	71 05       	cpc	r23, r1
    150a:	61 05       	cpc	r22, r1
    150c:	08 94       	sec
    150e:	08 95       	ret

00001510 <__fp_zero>:
    1510:	e8 94       	clt

00001512 <__fp_szero>:
    1512:	bb 27       	eor	r27, r27
    1514:	66 27       	eor	r22, r22
    1516:	77 27       	eor	r23, r23
    1518:	cb 01       	movw	r24, r22
    151a:	97 f9       	bld	r25, 7
    151c:	08 95       	ret

0000151e <inverse>:
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 e8       	ldi	r24, 0x80	; 128
    1528:	9f e3       	ldi	r25, 0x3F	; 63
    152a:	ad ce       	rjmp	.-678    	; 0x1286 <__divsf3>

0000152c <__mulsf3>:
    152c:	0b d0       	rcall	.+22     	; 0x1544 <__mulsf3x>
    152e:	bd cf       	rjmp	.-134    	; 0x14aa <__fp_round>
    1530:	ae df       	rcall	.-164    	; 0x148e <__fp_pscA>
    1532:	28 f0       	brcs	.+10     	; 0x153e <__mulsf3+0x12>
    1534:	b3 df       	rcall	.-154    	; 0x149c <__fp_pscB>
    1536:	18 f0       	brcs	.+6      	; 0x153e <__mulsf3+0x12>
    1538:	95 23       	and	r25, r21
    153a:	09 f0       	breq	.+2      	; 0x153e <__mulsf3+0x12>
    153c:	7a cf       	rjmp	.-268    	; 0x1432 <__fp_inf>
    153e:	7f cf       	rjmp	.-258    	; 0x143e <__fp_nan>
    1540:	11 24       	eor	r1, r1
    1542:	e7 cf       	rjmp	.-50     	; 0x1512 <__fp_szero>

00001544 <__mulsf3x>:
    1544:	c3 df       	rcall	.-122    	; 0x14cc <__fp_split3>
    1546:	a0 f3       	brcs	.-24     	; 0x1530 <__mulsf3+0x4>

00001548 <__mulsf3_pse>:
    1548:	95 9f       	mul	r25, r21
    154a:	d1 f3       	breq	.-12     	; 0x1540 <__mulsf3+0x14>
    154c:	95 0f       	add	r25, r21
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	55 1f       	adc	r21, r21
    1552:	62 9f       	mul	r22, r18
    1554:	f0 01       	movw	r30, r0
    1556:	72 9f       	mul	r23, r18
    1558:	bb 27       	eor	r27, r27
    155a:	f0 0d       	add	r31, r0
    155c:	b1 1d       	adc	r27, r1
    155e:	63 9f       	mul	r22, r19
    1560:	aa 27       	eor	r26, r26
    1562:	f0 0d       	add	r31, r0
    1564:	b1 1d       	adc	r27, r1
    1566:	aa 1f       	adc	r26, r26
    1568:	64 9f       	mul	r22, r20
    156a:	66 27       	eor	r22, r22
    156c:	b0 0d       	add	r27, r0
    156e:	a1 1d       	adc	r26, r1
    1570:	66 1f       	adc	r22, r22
    1572:	82 9f       	mul	r24, r18
    1574:	22 27       	eor	r18, r18
    1576:	b0 0d       	add	r27, r0
    1578:	a1 1d       	adc	r26, r1
    157a:	62 1f       	adc	r22, r18
    157c:	73 9f       	mul	r23, r19
    157e:	b0 0d       	add	r27, r0
    1580:	a1 1d       	adc	r26, r1
    1582:	62 1f       	adc	r22, r18
    1584:	83 9f       	mul	r24, r19
    1586:	a0 0d       	add	r26, r0
    1588:	61 1d       	adc	r22, r1
    158a:	22 1f       	adc	r18, r18
    158c:	74 9f       	mul	r23, r20
    158e:	33 27       	eor	r19, r19
    1590:	a0 0d       	add	r26, r0
    1592:	61 1d       	adc	r22, r1
    1594:	23 1f       	adc	r18, r19
    1596:	84 9f       	mul	r24, r20
    1598:	60 0d       	add	r22, r0
    159a:	21 1d       	adc	r18, r1
    159c:	82 2f       	mov	r24, r18
    159e:	76 2f       	mov	r23, r22
    15a0:	6a 2f       	mov	r22, r26
    15a2:	11 24       	eor	r1, r1
    15a4:	9f 57       	subi	r25, 0x7F	; 127
    15a6:	50 40       	sbci	r21, 0x00	; 0
    15a8:	8a f0       	brmi	.+34     	; 0x15cc <__mulsf3_pse+0x84>
    15aa:	e1 f0       	breq	.+56     	; 0x15e4 <__mulsf3_pse+0x9c>
    15ac:	88 23       	and	r24, r24
    15ae:	4a f0       	brmi	.+18     	; 0x15c2 <__mulsf3_pse+0x7a>
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	bb 1f       	adc	r27, r27
    15b6:	66 1f       	adc	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	88 1f       	adc	r24, r24
    15bc:	91 50       	subi	r25, 0x01	; 1
    15be:	50 40       	sbci	r21, 0x00	; 0
    15c0:	a9 f7       	brne	.-22     	; 0x15ac <__mulsf3_pse+0x64>
    15c2:	9e 3f       	cpi	r25, 0xFE	; 254
    15c4:	51 05       	cpc	r21, r1
    15c6:	70 f0       	brcs	.+28     	; 0x15e4 <__mulsf3_pse+0x9c>
    15c8:	34 cf       	rjmp	.-408    	; 0x1432 <__fp_inf>
    15ca:	a3 cf       	rjmp	.-186    	; 0x1512 <__fp_szero>
    15cc:	5f 3f       	cpi	r21, 0xFF	; 255
    15ce:	ec f3       	brlt	.-6      	; 0x15ca <__mulsf3_pse+0x82>
    15d0:	98 3e       	cpi	r25, 0xE8	; 232
    15d2:	dc f3       	brlt	.-10     	; 0x15ca <__mulsf3_pse+0x82>
    15d4:	86 95       	lsr	r24
    15d6:	77 95       	ror	r23
    15d8:	67 95       	ror	r22
    15da:	b7 95       	ror	r27
    15dc:	f7 95       	ror	r31
    15de:	e7 95       	ror	r30
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	c1 f7       	brne	.-16     	; 0x15d4 <__mulsf3_pse+0x8c>
    15e4:	fe 2b       	or	r31, r30
    15e6:	88 0f       	add	r24, r24
    15e8:	91 1d       	adc	r25, r1
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret

000015f2 <square>:
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	9a cf       	rjmp	.-204    	; 0x152c <__mulsf3>
    15f8:	4a df       	rcall	.-364    	; 0x148e <__fp_pscA>
    15fa:	30 f0       	brcs	.+12     	; 0x1608 <square+0x16>
    15fc:	4f df       	rcall	.-354    	; 0x149c <__fp_pscB>
    15fe:	20 f0       	brcs	.+8      	; 0x1608 <square+0x16>
    1600:	31 f4       	brne	.+12     	; 0x160e <square+0x1c>
    1602:	9f 3f       	cpi	r25, 0xFF	; 255
    1604:	11 f4       	brne	.+4      	; 0x160a <square+0x18>
    1606:	1e f4       	brtc	.+6      	; 0x160e <square+0x1c>
    1608:	1a cf       	rjmp	.-460    	; 0x143e <__fp_nan>
    160a:	0e f4       	brtc	.+2      	; 0x160e <square+0x1c>
    160c:	e0 95       	com	r30
    160e:	e7 fb       	bst	r30, 7
    1610:	10 cf       	rjmp	.-480    	; 0x1432 <__fp_inf>

00001612 <__addsf3x>:
    1612:	e9 2f       	mov	r30, r25
    1614:	5b df       	rcall	.-330    	; 0x14cc <__fp_split3>
    1616:	80 f3       	brcs	.-32     	; 0x15f8 <square+0x6>
    1618:	ba 17       	cp	r27, r26
    161a:	62 07       	cpc	r22, r18
    161c:	73 07       	cpc	r23, r19
    161e:	84 07       	cpc	r24, r20
    1620:	95 07       	cpc	r25, r21
    1622:	18 f0       	brcs	.+6      	; 0x162a <__addsf3x+0x18>
    1624:	71 f4       	brne	.+28     	; 0x1642 <__addsf3x+0x30>
    1626:	9e f5       	brtc	.+102    	; 0x168e <__addsf3x+0x7c>
    1628:	73 cf       	rjmp	.-282    	; 0x1510 <__fp_zero>
    162a:	0e f4       	brtc	.+2      	; 0x162e <__addsf3x+0x1c>
    162c:	e0 95       	com	r30
    162e:	0b 2e       	mov	r0, r27
    1630:	ba 2f       	mov	r27, r26
    1632:	a0 2d       	mov	r26, r0
    1634:	0b 01       	movw	r0, r22
    1636:	b9 01       	movw	r22, r18
    1638:	90 01       	movw	r18, r0
    163a:	0c 01       	movw	r0, r24
    163c:	ca 01       	movw	r24, r20
    163e:	a0 01       	movw	r20, r0
    1640:	11 24       	eor	r1, r1
    1642:	ff 27       	eor	r31, r31
    1644:	59 1b       	sub	r21, r25
    1646:	99 f0       	breq	.+38     	; 0x166e <__addsf3x+0x5c>
    1648:	59 3f       	cpi	r21, 0xF9	; 249
    164a:	50 f4       	brcc	.+20     	; 0x1660 <__addsf3x+0x4e>
    164c:	50 3e       	cpi	r21, 0xE0	; 224
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__addsf3x+0x98>
    1650:	1a 16       	cp	r1, r26
    1652:	f0 40       	sbci	r31, 0x00	; 0
    1654:	a2 2f       	mov	r26, r18
    1656:	23 2f       	mov	r18, r19
    1658:	34 2f       	mov	r19, r20
    165a:	44 27       	eor	r20, r20
    165c:	58 5f       	subi	r21, 0xF8	; 248
    165e:	f3 cf       	rjmp	.-26     	; 0x1646 <__addsf3x+0x34>
    1660:	46 95       	lsr	r20
    1662:	37 95       	ror	r19
    1664:	27 95       	ror	r18
    1666:	a7 95       	ror	r26
    1668:	f0 40       	sbci	r31, 0x00	; 0
    166a:	53 95       	inc	r21
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__addsf3x+0x4e>
    166e:	7e f4       	brtc	.+30     	; 0x168e <__addsf3x+0x7c>
    1670:	1f 16       	cp	r1, r31
    1672:	ba 0b       	sbc	r27, r26
    1674:	62 0b       	sbc	r22, r18
    1676:	73 0b       	sbc	r23, r19
    1678:	84 0b       	sbc	r24, r20
    167a:	ba f0       	brmi	.+46     	; 0x16aa <__addsf3x+0x98>
    167c:	91 50       	subi	r25, 0x01	; 1
    167e:	a1 f0       	breq	.+40     	; 0x16a8 <__addsf3x+0x96>
    1680:	ff 0f       	add	r31, r31
    1682:	bb 1f       	adc	r27, r27
    1684:	66 1f       	adc	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	c2 f7       	brpl	.-16     	; 0x167c <__addsf3x+0x6a>
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <__addsf3x+0x98>
    168e:	ba 0f       	add	r27, r26
    1690:	62 1f       	adc	r22, r18
    1692:	73 1f       	adc	r23, r19
    1694:	84 1f       	adc	r24, r20
    1696:	48 f4       	brcc	.+18     	; 0x16aa <__addsf3x+0x98>
    1698:	87 95       	ror	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	f7 95       	ror	r31
    16a2:	9e 3f       	cpi	r25, 0xFE	; 254
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <__addsf3x+0x96>
    16a6:	b3 cf       	rjmp	.-154    	; 0x160e <square+0x1c>
    16a8:	93 95       	inc	r25
    16aa:	88 0f       	add	r24, r24
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <__addsf3x+0x9e>
    16ae:	99 27       	eor	r25, r25
    16b0:	ee 0f       	add	r30, r30
    16b2:	97 95       	ror	r25
    16b4:	87 95       	ror	r24
    16b6:	08 95       	ret

000016b8 <__mulsi3>:
    16b8:	62 9f       	mul	r22, r18
    16ba:	d0 01       	movw	r26, r0
    16bc:	73 9f       	mul	r23, r19
    16be:	f0 01       	movw	r30, r0
    16c0:	82 9f       	mul	r24, r18
    16c2:	e0 0d       	add	r30, r0
    16c4:	f1 1d       	adc	r31, r1
    16c6:	64 9f       	mul	r22, r20
    16c8:	e0 0d       	add	r30, r0
    16ca:	f1 1d       	adc	r31, r1
    16cc:	92 9f       	mul	r25, r18
    16ce:	f0 0d       	add	r31, r0
    16d0:	83 9f       	mul	r24, r19
    16d2:	f0 0d       	add	r31, r0
    16d4:	74 9f       	mul	r23, r20
    16d6:	f0 0d       	add	r31, r0
    16d8:	65 9f       	mul	r22, r21
    16da:	f0 0d       	add	r31, r0
    16dc:	99 27       	eor	r25, r25
    16de:	72 9f       	mul	r23, r18
    16e0:	b0 0d       	add	r27, r0
    16e2:	e1 1d       	adc	r30, r1
    16e4:	f9 1f       	adc	r31, r25
    16e6:	63 9f       	mul	r22, r19
    16e8:	b0 0d       	add	r27, r0
    16ea:	e1 1d       	adc	r30, r1
    16ec:	f9 1f       	adc	r31, r25
    16ee:	bd 01       	movw	r22, r26
    16f0:	cf 01       	movw	r24, r30
    16f2:	11 24       	eor	r1, r1
    16f4:	08 95       	ret

000016f6 <__divmodhi4>:
    16f6:	97 fb       	bst	r25, 7
    16f8:	09 2e       	mov	r0, r25
    16fa:	07 26       	eor	r0, r23
    16fc:	0a d0       	rcall	.+20     	; 0x1712 <__divmodhi4_neg1>
    16fe:	77 fd       	sbrc	r23, 7
    1700:	04 d0       	rcall	.+8      	; 0x170a <__divmodhi4_neg2>
    1702:	49 d0       	rcall	.+146    	; 0x1796 <__udivmodhi4>
    1704:	06 d0       	rcall	.+12     	; 0x1712 <__divmodhi4_neg1>
    1706:	00 20       	and	r0, r0
    1708:	1a f4       	brpl	.+6      	; 0x1710 <__divmodhi4_exit>

0000170a <__divmodhi4_neg2>:
    170a:	70 95       	com	r23
    170c:	61 95       	neg	r22
    170e:	7f 4f       	sbci	r23, 0xFF	; 255

00001710 <__divmodhi4_exit>:
    1710:	08 95       	ret

00001712 <__divmodhi4_neg1>:
    1712:	f6 f7       	brtc	.-4      	; 0x1710 <__divmodhi4_exit>
    1714:	90 95       	com	r25
    1716:	81 95       	neg	r24
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	08 95       	ret

0000171c <__udivmodsi4>:
    171c:	a1 e2       	ldi	r26, 0x21	; 33
    171e:	1a 2e       	mov	r1, r26
    1720:	aa 1b       	sub	r26, r26
    1722:	bb 1b       	sub	r27, r27
    1724:	fd 01       	movw	r30, r26
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <__udivmodsi4_ep>

00001728 <__udivmodsi4_loop>:
    1728:	aa 1f       	adc	r26, r26
    172a:	bb 1f       	adc	r27, r27
    172c:	ee 1f       	adc	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	a2 17       	cp	r26, r18
    1732:	b3 07       	cpc	r27, r19
    1734:	e4 07       	cpc	r30, r20
    1736:	f5 07       	cpc	r31, r21
    1738:	20 f0       	brcs	.+8      	; 0x1742 <__udivmodsi4_ep>
    173a:	a2 1b       	sub	r26, r18
    173c:	b3 0b       	sbc	r27, r19
    173e:	e4 0b       	sbc	r30, r20
    1740:	f5 0b       	sbc	r31, r21

00001742 <__udivmodsi4_ep>:
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	1a 94       	dec	r1
    174c:	69 f7       	brne	.-38     	; 0x1728 <__udivmodsi4_loop>
    174e:	60 95       	com	r22
    1750:	70 95       	com	r23
    1752:	80 95       	com	r24
    1754:	90 95       	com	r25
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	bd 01       	movw	r22, r26
    175c:	cf 01       	movw	r24, r30
    175e:	08 95       	ret

00001760 <__divmodsi4>:
    1760:	97 fb       	bst	r25, 7
    1762:	09 2e       	mov	r0, r25
    1764:	05 26       	eor	r0, r21
    1766:	0e d0       	rcall	.+28     	; 0x1784 <__divmodsi4_neg1>
    1768:	57 fd       	sbrc	r21, 7
    176a:	04 d0       	rcall	.+8      	; 0x1774 <__divmodsi4_neg2>
    176c:	d7 df       	rcall	.-82     	; 0x171c <__udivmodsi4>
    176e:	0a d0       	rcall	.+20     	; 0x1784 <__divmodsi4_neg1>
    1770:	00 1c       	adc	r0, r0
    1772:	38 f4       	brcc	.+14     	; 0x1782 <__divmodsi4_exit>

00001774 <__divmodsi4_neg2>:
    1774:	50 95       	com	r21
    1776:	40 95       	com	r20
    1778:	30 95       	com	r19
    177a:	21 95       	neg	r18
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	4f 4f       	sbci	r20, 0xFF	; 255
    1780:	5f 4f       	sbci	r21, 0xFF	; 255

00001782 <__divmodsi4_exit>:
    1782:	08 95       	ret

00001784 <__divmodsi4_neg1>:
    1784:	f6 f7       	brtc	.-4      	; 0x1782 <__divmodsi4_exit>
    1786:	90 95       	com	r25
    1788:	80 95       	com	r24
    178a:	70 95       	com	r23
    178c:	61 95       	neg	r22
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	08 95       	ret

00001796 <__udivmodhi4>:
    1796:	aa 1b       	sub	r26, r26
    1798:	bb 1b       	sub	r27, r27
    179a:	51 e1       	ldi	r21, 0x11	; 17
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <__udivmodhi4_ep>

0000179e <__udivmodhi4_loop>:
    179e:	aa 1f       	adc	r26, r26
    17a0:	bb 1f       	adc	r27, r27
    17a2:	a6 17       	cp	r26, r22
    17a4:	b7 07       	cpc	r27, r23
    17a6:	10 f0       	brcs	.+4      	; 0x17ac <__udivmodhi4_ep>
    17a8:	a6 1b       	sub	r26, r22
    17aa:	b7 0b       	sbc	r27, r23

000017ac <__udivmodhi4_ep>:
    17ac:	88 1f       	adc	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	5a 95       	dec	r21
    17b2:	a9 f7       	brne	.-22     	; 0x179e <__udivmodhi4_loop>
    17b4:	80 95       	com	r24
    17b6:	90 95       	com	r25
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	08 95       	ret

000017be <_exit>:
    17be:	f8 94       	cli

000017c0 <__stop_program>:
    17c0:	ff cf       	rjmp	.-2      	; 0x17c0 <__stop_program>
